public final class io/ktor/client/plugins/auth/AuthConfig {
	public fun <init> ()V
	public final fun getProviders ()Ljava/util/List;
	public final fun isUnauthorizedResponse ()Lkotlin/jvm/functions/Function2;
	public final fun reAuthorizeOnResponse (Lkotlin/jvm/functions/Function2;)V
}

public final class io/ktor/client/plugins/auth/AuthKt {
	public static final fun Auth (Lio/ktor/client/HttpClientConfig;Lkotlin/jvm/functions/Function1;)V
	public static final fun getAuth ()Lio/ktor/client/plugins/api/ClientPlugin;
	public static final fun getAuthCircuitBreaker ()Lio/ktor/util/AttributeKey;
	public static final fun getAuthProviders (Lio/ktor/client/HttpClient;)Ljava/util/List;
	public static final fun getAuthProvidersKey ()Lio/ktor/util/AttributeKey;
}

public abstract interface class io/ktor/client/plugins/auth/AuthProvider {
	public abstract fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lio/ktor/http/auth/HttpAuthHeader;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getSendWithoutRequest ()Z
	public abstract fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
	public abstract fun refreshToken (Lio/ktor/client/statement/HttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun sendWithoutRequest (Lio/ktor/client/request/HttpRequestBuilder;)Z
}

public final class io/ktor/client/plugins/auth/AuthProvider$DefaultImpls {
	public static synthetic fun addRequestHeaders$default (Lio/ktor/client/plugins/auth/AuthProvider;Lio/ktor/client/request/HttpRequestBuilder;Lio/ktor/http/auth/HttpAuthHeader;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static fun refreshToken (Lio/ktor/client/plugins/auth/AuthProvider;Lio/ktor/client/statement/HttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun sendWithoutRequest (Lio/ktor/client/plugins/auth/AuthProvider;Lio/ktor/client/request/HttpRequestBuilder;)Z
}

public final class io/ktor/client/plugins/auth/providers/BasicAuthConfig {
	public field password Ljava/lang/String;
	public field username Ljava/lang/String;
	public fun <init> ()V
	public final fun credentials (Lkotlin/jvm/functions/Function1;)V
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public final fun getSendWithoutRequest ()Z
	public final fun getUsername ()Ljava/lang/String;
	public final fun sendWithoutRequest (Lkotlin/jvm/functions/Function1;)V
	public final fun setPassword (Ljava/lang/String;)V
	public final fun setRealm (Ljava/lang/String;)V
	public final fun setSendWithoutRequest (Z)V
	public final fun setUsername (Ljava/lang/String;)V
}

public final class io/ktor/client/plugins/auth/providers/BasicAuthCredentials {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun getPassword ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
}

public final class io/ktor/client/plugins/auth/providers/BasicAuthProvider : io/ktor/client/plugins/auth/AuthProvider {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lkotlin/jvm/functions/Function1;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lio/ktor/http/auth/HttpAuthHeader;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun clearToken ()V
	public fun getSendWithoutRequest ()Z
	public fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
	public fun refreshToken (Lio/ktor/client/statement/HttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun sendWithoutRequest (Lio/ktor/client/request/HttpRequestBuilder;)Z
}

public final class io/ktor/client/plugins/auth/providers/BasicAuthProviderKt {
	public static final fun basic (Lio/ktor/client/plugins/auth/AuthConfig;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/client/plugins/auth/providers/BearerAuthConfig {
	public fun <init> ()V
	public final fun getRealm ()Ljava/lang/String;
	public final fun loadTokens (Lkotlin/jvm/functions/Function1;)V
	public final fun refreshTokens (Lkotlin/jvm/functions/Function2;)V
	public final fun sendWithoutRequest (Lkotlin/jvm/functions/Function1;)V
	public final fun setRealm (Ljava/lang/String;)V
}

public final class io/ktor/client/plugins/auth/providers/BearerAuthProvider : io/ktor/client/plugins/auth/AuthProvider {
	public fun <init> (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Ljava/lang/String;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lio/ktor/http/auth/HttpAuthHeader;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun clearToken ()V
	public fun getSendWithoutRequest ()Z
	public fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
	public fun refreshToken (Lio/ktor/client/statement/HttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun sendWithoutRequest (Lio/ktor/client/request/HttpRequestBuilder;)Z
}

public final class io/ktor/client/plugins/auth/providers/BearerAuthProviderKt {
	public static final fun bearer (Lio/ktor/client/plugins/auth/AuthConfig;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/client/plugins/auth/providers/BearerTokens {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun getAccessToken ()Ljava/lang/String;
	public final fun getRefreshToken ()Ljava/lang/String;
}

public final class io/ktor/client/plugins/auth/providers/DigestAuthConfig {
	public fun <init> ()V
	public final fun credentials (Lkotlin/jvm/functions/Function1;)V
	public final fun getAlgorithmName ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public final fun setAlgorithmName (Ljava/lang/String;)V
	public final fun setPassword (Ljava/lang/String;)V
	public final fun setRealm (Ljava/lang/String;)V
	public final fun setUsername (Ljava/lang/String;)V
}

public final class io/ktor/client/plugins/auth/providers/DigestAuthCredentials {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun getPassword ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
}

public final class io/ktor/client/plugins/auth/providers/DigestAuthProvider : io/ktor/client/plugins/auth/AuthProvider {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lkotlin/jvm/functions/Function1;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lio/ktor/http/auth/HttpAuthHeader;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun clearToken ()V
	public final fun getAlgorithmName ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public fun getSendWithoutRequest ()Z
	public fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
	public fun refreshToken (Lio/ktor/client/statement/HttpResponse;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun sendWithoutRequest (Lio/ktor/client/request/HttpRequestBuilder;)Z
}

public final class io/ktor/client/plugins/auth/providers/DigestAuthProviderKt {
	public static final fun digest (Lio/ktor/client/plugins/auth/AuthConfig;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/client/plugins/auth/providers/RefreshTokensParams {
	public fun <init> (Lio/ktor/client/HttpClient;Lio/ktor/client/statement/HttpResponse;Lio/ktor/client/plugins/auth/providers/BearerTokens;)V
	public final fun getClient ()Lio/ktor/client/HttpClient;
	public final fun getOldTokens ()Lio/ktor/client/plugins/auth/providers/BearerTokens;
	public final fun getResponse ()Lio/ktor/client/statement/HttpResponse;
	public final fun markAsRefreshTokenRequest (Lio/ktor/client/request/HttpRequestBuilder;)V
}

