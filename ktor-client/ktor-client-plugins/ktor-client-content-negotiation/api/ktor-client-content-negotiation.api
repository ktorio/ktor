public final class io/ktor/client/plugins/contentnegotiation/ContentConverterException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
}

public final class io/ktor/client/plugins/contentnegotiation/ContentNegotiationConfig : io/ktor/serialization/Configuration {
	public fun <init> ()V
	public final fun clearIgnoredTypes ()V
	public final fun getDefaultAcceptHeaderQValue ()Ljava/lang/Double;
	public final fun ignoreType (Lkotlin/reflect/KClass;)V
	public final fun register (Lio/ktor/http/ContentType;Lio/ktor/serialization/ContentConverter;Lio/ktor/http/ContentTypeMatcher;Lkotlin/jvm/functions/Function1;)V
	public fun register (Lio/ktor/http/ContentType;Lio/ktor/serialization/ContentConverter;Lkotlin/jvm/functions/Function1;)V
	public final fun removeIgnoredType (Lkotlin/reflect/KClass;)V
	public final fun setDefaultAcceptHeaderQValue (Ljava/lang/Double;)V
}

public final class io/ktor/client/plugins/contentnegotiation/ContentNegotiationKt {
	public static final fun exclude (Lio/ktor/client/request/HttpRequestBuilder;[Lio/ktor/http/ContentType;)V
	public static final fun getContentNegotiation ()Lio/ktor/client/plugins/api/ClientPlugin;
}

public final class io/ktor/client/plugins/contentnegotiation/JsonContentTypeMatcher : io/ktor/http/ContentTypeMatcher {
	public static final field INSTANCE Lio/ktor/client/plugins/contentnegotiation/JsonContentTypeMatcher;
	public fun contains (Lio/ktor/http/ContentType;)Z
}

