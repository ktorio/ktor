public abstract interface class io/ktor/client/webrtc/DataChannelEvent {
	public abstract fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
}

public final class io/ktor/client/webrtc/DataChannelEvent$BufferedAmountLow : io/ktor/client/webrtc/DataChannelEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcDataChannel;)V
	public fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
}

public final class io/ktor/client/webrtc/DataChannelEvent$Closed : io/ktor/client/webrtc/DataChannelEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcDataChannel;)V
	public fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
}

public final class io/ktor/client/webrtc/DataChannelEvent$Closing : io/ktor/client/webrtc/DataChannelEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcDataChannel;)V
	public fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
}

public final class io/ktor/client/webrtc/DataChannelEvent$Error : io/ktor/client/webrtc/DataChannelEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcDataChannel;Ljava/lang/String;)V
	public fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
	public final fun getReason ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/DataChannelEvent$Open : io/ktor/client/webrtc/DataChannelEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcDataChannel;)V
	public fun getChannel ()Lio/ktor/client/webrtc/WebRtcDataChannel;
}

public final class io/ktor/client/webrtc/DataChannelReceiveOptions {
	public fun <init> ()V
	public final fun getCapacity ()I
	public final fun getOnBufferOverflow ()Lkotlinx/coroutines/channels/BufferOverflow;
	public final fun getOnUndeliveredElement ()Lkotlin/jvm/functions/Function1;
	public final fun setCapacity (I)V
	public final fun setOnBufferOverflow (Lkotlinx/coroutines/channels/BufferOverflow;)V
	public final fun setOnUndeliveredElement (Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/client/webrtc/DefaultExceptionHandler : kotlinx/coroutines/CoroutineExceptionHandler {
	public fun <init> (Ljava/lang/String;)V
	public fun fold (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public fun get (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;
	public fun getKey ()Lkotlin/coroutines/CoroutineContext$Key;
	public fun handleException (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V
	public fun minusKey (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;
	public fun plus (Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;
}

public final class io/ktor/client/webrtc/JvmDtmfSender : io/ktor/client/webrtc/WebRtc$DtmfSender {
	public fun <init> (Ldev/onvoid/webrtc/RTCDtmfSender;)V
	public fun getCanInsertDtmf ()Z
	public fun getToneBuffer ()Ljava/lang/String;
	public fun insertDtmf (Ljava/lang/String;II)V
}

public final class io/ktor/client/webrtc/JvmRtpParameters : io/ktor/client/webrtc/WebRtc$RtpParameters {
	public fun <init> (Ldev/onvoid/webrtc/RTCRtpSendParameters;)V
	public synthetic fun getCodecs ()Ljava/lang/Iterable;
	public fun getCodecs ()Ljava/util/List;
	public fun getDegradationPreference ()Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public synthetic fun getEncodings ()Ljava/lang/Iterable;
	public fun getEncodings ()Ljava/util/List;
	public synthetic fun getHeaderExtensions ()Ljava/lang/Iterable;
	public fun getHeaderExtensions ()Ljava/util/List;
	public fun getRtcp ()Ldev/onvoid/webrtc/RTCRtcpParameters;
	public synthetic fun getRtcp ()Ljava/lang/Object;
	public fun getTransactionId ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/JvmRtpSender : io/ktor/client/webrtc/WebRtc$RtpSender {
	public fun <init> (Ldev/onvoid/webrtc/RTCRtpSender;)V
	public fun getDtmf ()Lio/ktor/client/webrtc/WebRtc$DtmfSender;
	public fun getParameters (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getTrack ()Lio/ktor/client/webrtc/WebRtcMedia$Track;
	public fun replaceTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setParameters (Lio/ktor/client/webrtc/WebRtc$RtpParameters;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/ktor/client/webrtc/JvmSendersKt {
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtc$DtmfSender;)Ldev/onvoid/webrtc/RTCDtmfSender;
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtc$RtpParameters;)Ldev/onvoid/webrtc/RTCRtpSendParameters;
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtc$RtpSender;)Ldev/onvoid/webrtc/RTCRtpSender;
}

public final class io/ktor/client/webrtc/JvmWebRtc : io/ktor/client/webrtc/WebRtcClientEngineFactory {
	public static final field INSTANCE Lio/ktor/client/webrtc/JvmWebRtc;
	public fun create (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/webrtc/WebRtcEngine;
}

public final class io/ktor/client/webrtc/JvmWebRtcConnection : io/ktor/client/webrtc/WebRtcPeerConnection {
	public fun <init> (Lkotlin/coroutines/CoroutineContext;Lio/ktor/client/webrtc/WebRtcConnectionConfig;Lkotlin/jvm/functions/Function1;)V
	public fun addIceCandidate (Lio/ktor/client/webrtc/WebRtc$IceCandidate;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun addTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close ()V
	public fun createAnswer (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createDataChannel (Ljava/lang/String;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createOffer (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getLocalDescription ()Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public fun getRemoteDescription ()Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public fun getStatistics (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun removeTrack (Lio/ktor/client/webrtc/WebRtc$RtpSender;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun removeTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun restartIce ()V
	public fun setLocalDescription (Lio/ktor/client/webrtc/WebRtc$SessionDescription;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setRemoteDescription (Lio/ktor/client/webrtc/WebRtc$SessionDescription;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/ktor/client/webrtc/JvmWebRtcConnectionKt {
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtcPeerConnection;)Ldev/onvoid/webrtc/RTCPeerConnection;
}

public final class io/ktor/client/webrtc/JvmWebRtcDataChannel : io/ktor/client/webrtc/WebRtcDataChannel {
	public fun <init> (Ldev/onvoid/webrtc/RTCDataChannel;Lkotlinx/coroutines/CoroutineScope;Lio/ktor/client/webrtc/DataChannelReceiveOptions;)V
	public fun close ()V
	public fun closeTransport ()V
	public fun getBufferedAmount ()J
	public fun getBufferedAmountLowThreshold ()J
	public fun getId ()Ljava/lang/Integer;
	public fun getLabel ()Ljava/lang/String;
	public fun getMaxPacketLifeTime ()Ljava/lang/Integer;
	public fun getMaxRetransmits ()Ljava/lang/Integer;
	public fun getNegotiated ()Z
	public fun getOrdered ()Z
	public fun getProtocol ()Ljava/lang/String;
	public fun getState ()Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public fun send (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun send ([BLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setBufferedAmountLowThreshold (J)V
}

public final class io/ktor/client/webrtc/JvmWebRtcDataChannelKt {
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtcDataChannel;)Ldev/onvoid/webrtc/RTCDataChannel;
}

public final class io/ktor/client/webrtc/JvmWebRtcEngine : io/ktor/client/webrtc/WebRtcEngineBase, io/ktor/client/webrtc/MediaTrackFactory {
	public fun <init> (Lio/ktor/client/webrtc/JvmWebRtcEngineConfig;Lio/ktor/client/webrtc/MediaTrackFactory;)V
	public synthetic fun <init> (Lio/ktor/client/webrtc/JvmWebRtcEngineConfig;Lio/ktor/client/webrtc/MediaTrackFactory;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun createAudioTrack (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createAudioTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createPeerConnection (Lio/ktor/client/webrtc/WebRtcConnectionConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getConfig ()Lio/ktor/client/webrtc/JvmWebRtcEngineConfig;
	public synthetic fun getConfig ()Lio/ktor/client/webrtc/WebRtcConfig;
}

public final class io/ktor/client/webrtc/JvmWebRtcEngineConfig : io/ktor/client/webrtc/WebRtcConfig {
	public fun <init> ()V
	public final fun getRtcFactory ()Ldev/onvoid/webrtc/PeerConnectionFactory;
	public final fun setRtcFactory (Ldev/onvoid/webrtc/PeerConnectionFactory;)V
}

public abstract interface class io/ktor/client/webrtc/MediaTrackFactory {
	public abstract fun createAudioTrack (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createAudioTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createAudioTrack$default (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public abstract fun createVideoTrack (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createVideoTrack$default (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class io/ktor/client/webrtc/MediaTrackFactory$DefaultImpls {
	public static fun createAudioTrack (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createAudioTrack$default (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static fun createVideoTrack (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createVideoTrack$default (Lio/ktor/client/webrtc/MediaTrackFactory;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class io/ktor/client/webrtc/TrackEvent {
	public abstract fun getTrack ()Lio/ktor/client/webrtc/WebRtcMedia$Track;
}

public final class io/ktor/client/webrtc/TrackEvent$Add : io/ktor/client/webrtc/TrackEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcMedia$Track;)V
	public fun getTrack ()Lio/ktor/client/webrtc/WebRtcMedia$Track;
}

public final class io/ktor/client/webrtc/TrackEvent$Remove : io/ktor/client/webrtc/TrackEvent {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcMedia$Track;)V
	public fun getTrack ()Lio/ktor/client/webrtc/WebRtcMedia$Track;
}

public final class io/ktor/client/webrtc/WebRtc {
	public static final field INSTANCE Lio/ktor/client/webrtc/WebRtc;
}

public final class io/ktor/client/webrtc/WebRtc$BundlePolicy : java/lang/Enum {
	public static final field BALANCED Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
	public static final field MAX_BUNDLE Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
	public static final field MAX_COMPAT Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
}

public final class io/ktor/client/webrtc/WebRtc$ConnectionState : java/lang/Enum {
	public static final field CLOSED Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static final field CONNECTED Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static final field CONNECTING Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static final field DISCONNECTED Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static final field FAILED Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static final field NEW Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$ConnectionState;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$ConnectionState;
}

public abstract interface class io/ktor/client/webrtc/WebRtc$DataChannel : java/lang/AutoCloseable {
	public fun close ()V
	public abstract fun closeTransport ()V
	public abstract fun getBufferedAmount ()J
	public abstract fun getBufferedAmountLowThreshold ()J
	public abstract fun getId ()Ljava/lang/Integer;
	public abstract fun getLabel ()Ljava/lang/String;
	public abstract fun getMaxPacketLifeTime ()Ljava/lang/Integer;
	public abstract fun getMaxRetransmits ()Ljava/lang/Integer;
	public abstract fun getNegotiated ()Z
	public abstract fun getOrdered ()Z
	public abstract fun getProtocol ()Ljava/lang/String;
	public abstract fun getState ()Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public abstract fun receive (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun receiveBinary (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun receiveText (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send ([BLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun setBufferedAmountLowThreshold (J)V
	public abstract fun tryReceive ()Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;
	public abstract fun tryReceiveBinary ()[B
	public abstract fun tryReceiveText ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$DataChannel$DefaultImpls {
	public static fun close (Lio/ktor/client/webrtc/WebRtc$DataChannel;)V
}

public abstract interface class io/ktor/client/webrtc/WebRtc$DataChannel$Message {
	public fun binaryOrNull ()[B
	public fun binaryOrThrow ()[B
	public fun textOrNull ()Ljava/lang/String;
	public fun textOrThrow ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$DataChannel$Message$Binary : io/ktor/client/webrtc/WebRtc$DataChannel$Message {
	public fun <init> ([B)V
	public fun binaryOrNull ()[B
	public fun binaryOrThrow ()[B
	public final fun getData ()[B
	public fun textOrNull ()Ljava/lang/String;
	public fun textOrThrow ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$DataChannel$Message$DefaultImpls {
	public static fun binaryOrNull (Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;)[B
	public static fun binaryOrThrow (Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;)[B
	public static fun textOrNull (Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;)Ljava/lang/String;
	public static fun textOrThrow (Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;)Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$DataChannel$Message$Text : io/ktor/client/webrtc/WebRtc$DataChannel$Message {
	public fun <init> (Ljava/lang/String;)V
	public fun binaryOrNull ()[B
	public fun binaryOrThrow ()[B
	public final fun getData ()Ljava/lang/String;
	public fun textOrNull ()Ljava/lang/String;
	public fun textOrThrow ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$DataChannel$State : java/lang/Enum {
	public static final field CLOSED Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public static final field CLOSING Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public static final field CONNECTING Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public static final field OPEN Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public final fun canSend ()Z
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$DataChannel$State;
}

public final class io/ktor/client/webrtc/WebRtc$DegradationPreference : java/lang/Enum {
	public static final field BALANCED Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public static final field DISABLED Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public static final field MAINTAIN_FRAMERATE Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public static final field MAINTAIN_RESOLUTION Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
}

public abstract interface class io/ktor/client/webrtc/WebRtc$DtmfSender {
	public abstract fun getCanInsertDtmf ()Z
	public abstract fun getToneBuffer ()Ljava/lang/String;
	public abstract fun insertDtmf (Ljava/lang/String;II)V
}

public final class io/ktor/client/webrtc/WebRtc$IceCandidate {
	public static final field Companion Lio/ktor/client/webrtc/WebRtc$IceCandidate$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()I
	public final fun copy (Ljava/lang/String;Ljava/lang/String;I)Lio/ktor/client/webrtc/WebRtc$IceCandidate;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtc$IceCandidate;Ljava/lang/String;Ljava/lang/String;IILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtc$IceCandidate;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCandidate ()Ljava/lang/String;
	public final fun getSdpMLineIndex ()I
	public final fun getSdpMid ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class io/ktor/client/webrtc/WebRtc$IceCandidate$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lio/ktor/client/webrtc/WebRtc$IceCandidate$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lio/ktor/client/webrtc/WebRtc$IceCandidate;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lio/ktor/client/webrtc/WebRtc$IceCandidate;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class io/ktor/client/webrtc/WebRtc$IceCandidate$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class io/ktor/client/webrtc/WebRtc$IceConnectionState : java/lang/Enum {
	public static final field CHECKING Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field CLOSED Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field COMPLETED Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field CONNECTED Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field DISCONNECTED Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field FAILED Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static final field NEW Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun isSuccessful ()Z
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$IceConnectionState;
}

public final class io/ktor/client/webrtc/WebRtc$IceException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/client/webrtc/WebRtc$IceGatheringState : java/lang/Enum {
	public static final field COMPLETE Lio/ktor/client/webrtc/WebRtc$IceGatheringState;
	public static final field GATHERING Lio/ktor/client/webrtc/WebRtc$IceGatheringState;
	public static final field NEW Lio/ktor/client/webrtc/WebRtc$IceGatheringState;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$IceGatheringState;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$IceGatheringState;
}

public final class io/ktor/client/webrtc/WebRtc$IceServer {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$IceServer;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtc$IceServer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtc$IceServer;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCredential ()Ljava/lang/String;
	public final fun getUrls ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtc$IceTransportPolicy : java/lang/Enum {
	public static final field ALL Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;
	public static final field RELAY Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;
}

public final class io/ktor/client/webrtc/WebRtc$RtcpMuxPolicy : java/lang/Enum {
	public static final field NEGOTIATE Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;
	public static final field REQUIRE Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;
}

public final class io/ktor/client/webrtc/WebRtc$RtpHeaderExtensionParameters {
	public fun <init> (ILjava/lang/String;Z)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Z
	public final fun copy (ILjava/lang/String;Z)Lio/ktor/client/webrtc/WebRtc$RtpHeaderExtensionParameters;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtc$RtpHeaderExtensionParameters;ILjava/lang/String;ZILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtc$RtpHeaderExtensionParameters;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getEncrypted ()Z
	public final fun getId ()I
	public final fun getUri ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/ktor/client/webrtc/WebRtc$RtpParameters {
	public abstract fun getCodecs ()Ljava/lang/Iterable;
	public abstract fun getDegradationPreference ()Lio/ktor/client/webrtc/WebRtc$DegradationPreference;
	public abstract fun getEncodings ()Ljava/lang/Iterable;
	public abstract fun getHeaderExtensions ()Ljava/lang/Iterable;
	public abstract fun getRtcp ()Ljava/lang/Object;
	public abstract fun getTransactionId ()Ljava/lang/String;
}

public abstract interface class io/ktor/client/webrtc/WebRtc$RtpSender {
	public abstract fun getDtmf ()Lio/ktor/client/webrtc/WebRtc$DtmfSender;
	public abstract fun getParameters (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getTrack ()Lio/ktor/client/webrtc/WebRtcMedia$Track;
	public abstract fun replaceTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun setParameters (Lio/ktor/client/webrtc/WebRtc$RtpParameters;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/ktor/client/webrtc/WebRtc$SdpException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/client/webrtc/WebRtc$SessionDescription {
	public static final field Companion Lio/ktor/client/webrtc/WebRtc$SessionDescription$Companion;
	public fun <init> (Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;Ljava/lang/String;)V
	public final fun component1 ()Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtc$SessionDescription;Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getSdp ()Ljava/lang/String;
	public final fun getType ()Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class io/ktor/client/webrtc/WebRtc$SessionDescription$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lio/ktor/client/webrtc/WebRtc$SessionDescription$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lio/ktor/client/webrtc/WebRtc$SessionDescription;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class io/ktor/client/webrtc/WebRtc$SessionDescription$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class io/ktor/client/webrtc/WebRtc$SessionDescriptionType : java/lang/Enum {
	public static final field ANSWER Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public static final field Companion Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType$Companion;
	public static final field OFFER Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public static final field PROVISIONAL_ANSWER Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public static final field ROLLBACK Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$SessionDescriptionType;
}

public final class io/ktor/client/webrtc/WebRtc$SessionDescriptionType$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class io/ktor/client/webrtc/WebRtc$SignalingState : java/lang/Enum {
	public static final field CLOSED Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static final field HAVE_LOCAL_OFFER Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static final field HAVE_LOCAL_PROVISIONAL_ANSWER Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static final field HAVE_REMOTE_OFFER Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static final field HAVE_REMOTE_PROVISIONAL_ANSWER Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static final field STABLE Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtc$SignalingState;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtc$SignalingState;
}

public final class io/ktor/client/webrtc/WebRtc$Stats {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;JLjava/util/Map;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()J
	public final fun component4 ()Ljava/util/Map;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;JLjava/util/Map;)Lio/ktor/client/webrtc/WebRtc$Stats;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtc$Stats;Ljava/lang/String;Ljava/lang/String;JLjava/util/Map;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtc$Stats;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public final fun getProps ()Ljava/util/Map;
	public final fun getTimestamp ()J
	public final fun getType ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtcClient : io/ktor/client/webrtc/WebRtcEngine {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcEngine;)V
	public fun close ()V
	public fun createAudioTrack (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createAudioTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createPeerConnection (Lio/ktor/client/webrtc/WebRtcConnectionConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createPeerConnection (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getConfig ()Lio/ktor/client/webrtc/WebRtcConfig;
}

public abstract interface class io/ktor/client/webrtc/WebRtcClientEngineFactory {
	public abstract fun create (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/webrtc/WebRtcEngine;
}

public final class io/ktor/client/webrtc/WebRtcClientKt {
	public static final fun WebRtcClient (Lio/ktor/client/webrtc/WebRtcClientEngineFactory;Lkotlin/jvm/functions/Function1;)Lio/ktor/client/webrtc/WebRtcClient;
	public static synthetic fun WebRtcClient$default (Lio/ktor/client/webrtc/WebRtcClientEngineFactory;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtcClient;
}

public class io/ktor/client/webrtc/WebRtcConfig {
	public fun <init> ()V
	public final fun getDefaultConnectionConfig ()Lkotlin/jvm/functions/Function1;
	public final fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
	public final fun getMediaTrackFactory ()Lio/ktor/client/webrtc/MediaTrackFactory;
	public final fun setDefaultConnectionConfig (Lkotlin/jvm/functions/Function1;)V
	public final fun setDispatcher (Lkotlinx/coroutines/CoroutineDispatcher;)V
	public final fun setMediaTrackFactory (Lio/ktor/client/webrtc/MediaTrackFactory;)V
}

public class io/ktor/client/webrtc/WebRtcConnectionConfig {
	public fun <init> ()V
	public final fun getBundlePolicy ()Lio/ktor/client/webrtc/WebRtc$BundlePolicy;
	public final fun getDataChannelEventsReplay ()I
	public final fun getExceptionHandler ()Lkotlinx/coroutines/CoroutineExceptionHandler;
	public final fun getIceCandidatePoolSize ()I
	public final fun getIceCandidatesReplay ()I
	public final fun getIceServers ()Ljava/util/List;
	public final fun getIceTransportPolicy ()Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;
	public final fun getRemoteTracksReplay ()I
	public final fun getRtcpMuxPolicy ()Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;
	public final fun getStatsRefreshRate-FghU774 ()Lkotlin/time/Duration;
	public final fun setBundlePolicy (Lio/ktor/client/webrtc/WebRtc$BundlePolicy;)V
	public final fun setDataChannelEventsReplay (I)V
	public final fun setExceptionHandler (Lkotlinx/coroutines/CoroutineExceptionHandler;)V
	public final fun setIceCandidatePoolSize (I)V
	public final fun setIceCandidatesReplay (I)V
	public final fun setIceServers (Ljava/util/List;)V
	public final fun setIceTransportPolicy (Lio/ktor/client/webrtc/WebRtc$IceTransportPolicy;)V
	public final fun setRemoteTracksReplay (I)V
	public final fun setRtcpMuxPolicy (Lio/ktor/client/webrtc/WebRtc$RtcpMuxPolicy;)V
	public final fun setStatsRefreshRate-BwNAW2A (Lkotlin/time/Duration;)V
}

public abstract interface class io/ktor/client/webrtc/WebRtcConnectionEvents {
	public abstract fun getDataChannelEvents ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun getIceCandidates ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun getIceConnectionState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getIceGatheringState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getNegotiationNeeded ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun getSignalingState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getStats ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getTrackEvents ()Lkotlinx/coroutines/flow/SharedFlow;
}

public final class io/ktor/client/webrtc/WebRtcConnectionEventsEmitter : io/ktor/client/webrtc/WebRtcConnectionEvents {
	public fun <init> (Lio/ktor/client/webrtc/WebRtcConnectionConfig;)V
	public final fun emitAddTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;)V
	public final fun emitConnectionStateChange (Lio/ktor/client/webrtc/WebRtc$ConnectionState;)V
	public final fun emitDataChannelEvent (Lio/ktor/client/webrtc/DataChannelEvent;)V
	public final fun emitIceCandidate (Lio/ktor/client/webrtc/WebRtc$IceCandidate;)V
	public final fun emitIceConnectionStateChange (Lio/ktor/client/webrtc/WebRtc$IceConnectionState;)V
	public final fun emitIceGatheringStateChange (Lio/ktor/client/webrtc/WebRtc$IceGatheringState;)V
	public final fun emitNegotiationNeeded ()V
	public final fun emitRemoveTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;)V
	public final fun emitSignalingStateChange (Lio/ktor/client/webrtc/WebRtc$SignalingState;)V
	public final fun emitStats (Ljava/util/List;)V
	public fun getDataChannelEvents ()Lkotlinx/coroutines/flow/SharedFlow;
	public fun getIceCandidates ()Lkotlinx/coroutines/flow/SharedFlow;
	public fun getIceConnectionState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getIceGatheringState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getNegotiationNeeded ()Lkotlinx/coroutines/flow/SharedFlow;
	public fun getSignalingState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getStats ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getTrackEvents ()Lkotlinx/coroutines/flow/SharedFlow;
}

public abstract class io/ktor/client/webrtc/WebRtcDataChannel : io/ktor/client/webrtc/WebRtc$DataChannel {
	public fun <init> (Lio/ktor/client/webrtc/DataChannelReceiveOptions;)V
	public fun close ()V
	protected final fun emitMessage-JP2dKIU (Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;)Ljava/lang/Object;
	public fun receive (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun receiveBinary (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun receiveText (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun stopReceivingMessages ()V
	public fun tryReceive ()Lio/ktor/client/webrtc/WebRtc$DataChannel$Message;
	public fun tryReceiveBinary ()[B
	public fun tryReceiveText ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtcDataChannelOptions {
	public fun <init> ()V
	public final fun getId ()Ljava/lang/Integer;
	public final fun getMaxPacketLifeTime-FghU774 ()Lkotlin/time/Duration;
	public final fun getMaxRetransmits ()Ljava/lang/Integer;
	public final fun getNegotiated ()Z
	public final fun getOrdered ()Z
	public final fun getProtocol ()Ljava/lang/String;
	public final fun getReceiveOptions ()Lkotlin/jvm/functions/Function1;
	public final fun setId (Ljava/lang/Integer;)V
	public final fun setMaxPacketLifeTime-BwNAW2A (Lkotlin/time/Duration;)V
	public final fun setMaxRetransmits (Ljava/lang/Integer;)V
	public final fun setNegotiated (Z)V
	public final fun setOrdered (Z)V
	public final fun setProtocol (Ljava/lang/String;)V
	public final fun setReceiveOptions (Lkotlin/jvm/functions/Function1;)V
}

public abstract interface class io/ktor/client/webrtc/WebRtcEngine : io/ktor/client/webrtc/MediaTrackFactory, java/lang/AutoCloseable {
	public abstract fun createPeerConnection (Lio/ktor/client/webrtc/WebRtcConnectionConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createPeerConnection (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createPeerConnection$default (Lio/ktor/client/webrtc/WebRtcEngine;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public abstract fun getConfig ()Lio/ktor/client/webrtc/WebRtcConfig;
}

public final class io/ktor/client/webrtc/WebRtcEngine$DefaultImpls {
	public static fun createAudioTrack (Lio/ktor/client/webrtc/WebRtcEngine;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun createPeerConnection (Lio/ktor/client/webrtc/WebRtcEngine;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createPeerConnection$default (Lio/ktor/client/webrtc/WebRtcEngine;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static fun createVideoTrack (Lio/ktor/client/webrtc/WebRtcEngine;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class io/ktor/client/webrtc/WebRtcEngineBase : io/ktor/client/webrtc/WebRtcEngine {
	public fun <init> (Ljava/lang/String;Lio/ktor/client/webrtc/WebRtcConfig;)V
	public fun close ()V
	public fun createAudioTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun createConnectionContext (Lkotlinx/coroutines/CoroutineExceptionHandler;)Lkotlin/coroutines/CoroutineContext;
	public fun createPeerConnection (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getConfig ()Lio/ktor/client/webrtc/WebRtcConfig;
}

public final class io/ktor/client/webrtc/WebRtcEngineClosedException : java/util/concurrent/CancellationException {
	public fun <init> ()V
}

public final class io/ktor/client/webrtc/WebRtcMedia {
	public static final field INSTANCE Lio/ktor/client/webrtc/WebRtcMedia;
}

public abstract interface class io/ktor/client/webrtc/WebRtcMedia$AudioTrack : io/ktor/client/webrtc/WebRtcMedia$Track {
}

public final class io/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;)V
	public synthetic fun <init> (Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Double;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/lang/Integer;
	public final fun component4 ()Ljava/lang/Boolean;
	public final fun component5 ()Ljava/lang/Boolean;
	public final fun component6 ()Ljava/lang/Boolean;
	public final fun component7 ()Ljava/lang/Double;
	public final fun component8 ()Ljava/lang/Integer;
	public final fun copy (Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;)Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAutoGainControl ()Ljava/lang/Boolean;
	public final fun getChannelCount ()Ljava/lang/Integer;
	public final fun getEchoCancellation ()Ljava/lang/Boolean;
	public final fun getLatency ()Ljava/lang/Double;
	public final fun getNoiseSuppression ()Ljava/lang/Boolean;
	public final fun getSampleRate ()Ljava/lang/Integer;
	public final fun getSampleSize ()Ljava/lang/Integer;
	public final fun getVolume ()Ljava/lang/Double;
	public fun hashCode ()I
	public final fun setAutoGainControl (Ljava/lang/Boolean;)V
	public final fun setChannelCount (Ljava/lang/Integer;)V
	public final fun setEchoCancellation (Ljava/lang/Boolean;)V
	public final fun setLatency (Ljava/lang/Double;)V
	public final fun setNoiseSuppression (Ljava/lang/Boolean;)V
	public final fun setSampleRate (Ljava/lang/Integer;)V
	public final fun setSampleSize (Ljava/lang/Integer;)V
	public final fun setVolume (Ljava/lang/Double;)V
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/client/webrtc/WebRtcMedia$DeviceException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/client/webrtc/WebRtcMedia$FacingMode : java/lang/Enum {
	public static final field ENVIRONMENT Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public static final field LEFT Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public static final field RIGHT Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public static final field USER Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
}

public final class io/ktor/client/webrtc/WebRtcMedia$PermissionException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
}

public final class io/ktor/client/webrtc/WebRtcMedia$ResizeMode : java/lang/Enum {
	public static final field CROP_AND_SCALE Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
	public static final field NONE Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
}

public abstract interface class io/ktor/client/webrtc/WebRtcMedia$Track : java/lang/AutoCloseable {
	public abstract fun enable (Z)V
	public abstract fun getEnabled ()Z
	public abstract fun getId ()Ljava/lang/String;
	public abstract fun getKind ()Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
}

public final class io/ktor/client/webrtc/WebRtcMedia$TrackType : java/lang/Enum {
	public static final field AUDIO Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
	public static final field VIDEO Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
	public static fun values ()[Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
}

public abstract interface class io/ktor/client/webrtc/WebRtcMedia$VideoTrack : io/ktor/client/webrtc/WebRtcMedia$Track {
}

public final class io/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;)V
	public synthetic fun <init> (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/lang/Integer;
	public final fun component4 ()Ljava/lang/Double;
	public final fun component5 ()Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public final fun component6 ()Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
	public final fun copy (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;)Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;
	public static synthetic fun copy$default (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;ILjava/lang/Object;)Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAspectRatio ()Ljava/lang/Double;
	public final fun getFacingMode ()Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;
	public final fun getFrameRate ()Ljava/lang/Integer;
	public final fun getHeight ()Ljava/lang/Integer;
	public final fun getResizeMode ()Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;
	public final fun getWidth ()Ljava/lang/Integer;
	public fun hashCode ()I
	public final fun setAspectRatio (Ljava/lang/Double;)V
	public final fun setFacingMode (Lio/ktor/client/webrtc/WebRtcMedia$FacingMode;)V
	public final fun setFrameRate (Ljava/lang/Integer;)V
	public final fun setHeight (Ljava/lang/Integer;)V
	public final fun setResizeMode (Lio/ktor/client/webrtc/WebRtcMedia$ResizeMode;)V
	public final fun setWidth (Ljava/lang/Integer;)V
	public fun toString ()Ljava/lang/String;
}

public abstract class io/ktor/client/webrtc/WebRtcPeerConnection : io/ktor/client/webrtc/WebRtcConnectionEvents, java/io/Closeable {
	public fun <init> (Lkotlin/coroutines/CoroutineContext;Lio/ktor/client/webrtc/WebRtcConnectionConfig;)V
	public abstract fun addIceCandidate (Lio/ktor/client/webrtc/WebRtc$IceCandidate;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun addTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun awaitIceGatheringComplete (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close ()V
	public abstract fun createAnswer (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun createDataChannel (Ljava/lang/String;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun createDataChannel$default (Lio/ktor/client/webrtc/WebRtcPeerConnection;Ljava/lang/String;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public abstract fun createOffer (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public fun getDataChannelEvents ()Lkotlinx/coroutines/flow/SharedFlow;
	protected final fun getEvents ()Lio/ktor/client/webrtc/WebRtcConnectionEventsEmitter;
	public fun getIceCandidates ()Lkotlinx/coroutines/flow/SharedFlow;
	public fun getIceConnectionState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getIceGatheringState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getLocalDescription ()Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public fun getNegotiationNeeded ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun getRemoteDescription ()Lio/ktor/client/webrtc/WebRtc$SessionDescription;
	public fun getSignalingState ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getState ()Lkotlinx/coroutines/flow/StateFlow;
	public abstract fun getStatistics (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getStats ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getTrackEvents ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun removeTrack (Lio/ktor/client/webrtc/WebRtc$RtpSender;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun removeTrack (Lio/ktor/client/webrtc/WebRtcMedia$Track;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun restartIce ()V
	public abstract fun setLocalDescription (Lio/ktor/client/webrtc/WebRtc$SessionDescription;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun setRemoteDescription (Lio/ktor/client/webrtc/WebRtc$SessionDescription;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class io/ktor/client/webrtc/media/AudioFactory : java/lang/AutoCloseable {
	public abstract fun createAudioSource (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;)Ldev/onvoid/webrtc/media/audio/AudioTrackSource;
	public abstract fun getAudioModule ()Ldev/onvoid/webrtc/media/audio/AudioDeviceModuleBase;
	public abstract fun getPeerConnectionFactory ()Ldev/onvoid/webrtc/PeerConnectionFactory;
}

public final class io/ktor/client/webrtc/media/CameraVideoFactory : io/ktor/client/webrtc/media/VideoFactory {
	public static final field Companion Lio/ktor/client/webrtc/media/CameraVideoFactory$Companion;
	public static final field DEFAULT_VIDEO_FRAME_RATE I
	public static final field DEFAULT_VIDEO_HEIGHT I
	public static final field DEFAULT_VIDEO_WIDTH I
	public fun <init> ()V
	public fun createVideoCapturer (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;)Lio/ktor/client/webrtc/media/VideoCapturer;
}

public final class io/ktor/client/webrtc/media/CameraVideoFactory$Companion {
}

public final class io/ktor/client/webrtc/media/DefaultAudioFactory : io/ktor/client/webrtc/media/AudioFactory {
	public fun <init> ()V
	public fun close ()V
	public fun createAudioSource (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;)Ldev/onvoid/webrtc/media/audio/AudioTrackSource;
	public fun getAudioModule ()Ldev/onvoid/webrtc/media/audio/AudioDeviceModule;
	public synthetic fun getAudioModule ()Ldev/onvoid/webrtc/media/audio/AudioDeviceModuleBase;
	public fun getPeerConnectionFactory ()Ldev/onvoid/webrtc/PeerConnectionFactory;
}

public final class io/ktor/client/webrtc/media/JvmAudioTrack : io/ktor/client/webrtc/media/JvmMediaTrack, io/ktor/client/webrtc/WebRtcMedia$AudioTrack {
	public fun <init> (Ldev/onvoid/webrtc/media/MediaStreamTrack;Lkotlin/jvm/functions/Function0;)V
	public synthetic fun <init> (Ldev/onvoid/webrtc/media/MediaStreamTrack;Lkotlin/jvm/functions/Function0;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/client/webrtc/media/JvmMediaDevices : io/ktor/client/webrtc/MediaTrackFactory, java/lang/AutoCloseable {
	public fun <init> ()V
	public fun <init> (Lio/ktor/client/webrtc/media/AudioFactory;Lio/ktor/client/webrtc/media/VideoFactory;)V
	public synthetic fun <init> (Lio/ktor/client/webrtc/media/AudioFactory;Lio/ktor/client/webrtc/media/VideoFactory;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun close ()V
	public fun createAudioTrack (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createAudioTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createVideoTrack (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getAudioModule ()Ldev/onvoid/webrtc/media/audio/AudioDeviceModuleBase;
	public final fun getPeerConnectionFactory ()Ldev/onvoid/webrtc/PeerConnectionFactory;
}

public abstract class io/ktor/client/webrtc/media/JvmMediaTrack : io/ktor/client/webrtc/WebRtcMedia$Track {
	public static final field Companion Lio/ktor/client/webrtc/media/JvmMediaTrack$Companion;
	public fun <init> (Ldev/onvoid/webrtc/media/MediaStreamTrack;Lkotlin/jvm/functions/Function0;)V
	public fun close ()V
	public fun enable (Z)V
	public fun getEnabled ()Z
	public fun getId ()Ljava/lang/String;
	public fun getKind ()Lio/ktor/client/webrtc/WebRtcMedia$TrackType;
}

public final class io/ktor/client/webrtc/media/JvmMediaTrack$Companion {
	public final fun from (Ldev/onvoid/webrtc/media/MediaStreamTrack;)Lio/ktor/client/webrtc/media/JvmMediaTrack;
}

public final class io/ktor/client/webrtc/media/JvmMediaTrackKt {
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtcMedia$AudioTrack;)Ldev/onvoid/webrtc/media/audio/AudioTrack;
	public static final fun getNative (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrack;)Ldev/onvoid/webrtc/media/video/VideoTrack;
}

public final class io/ktor/client/webrtc/media/JvmVideoTrack : io/ktor/client/webrtc/media/JvmMediaTrack, io/ktor/client/webrtc/WebRtcMedia$VideoTrack {
	public fun <init> (Ldev/onvoid/webrtc/media/MediaStreamTrack;Lkotlin/jvm/functions/Function0;)V
	public synthetic fun <init> (Ldev/onvoid/webrtc/media/MediaStreamTrack;Lkotlin/jvm/functions/Function0;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public abstract interface class io/ktor/client/webrtc/media/VideoCapturer : java/lang/AutoCloseable {
	public abstract fun getSource ()Ldev/onvoid/webrtc/media/video/VideoTrackSource;
	public abstract fun start ()V
	public abstract fun stop ()V
}

public abstract interface class io/ktor/client/webrtc/media/VideoFactory {
	public abstract fun createVideoCapturer (Lio/ktor/client/webrtc/WebRtcMedia$VideoTrackConstraints;)Lio/ktor/client/webrtc/media/VideoCapturer;
}

