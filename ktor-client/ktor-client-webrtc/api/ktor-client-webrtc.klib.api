// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-client-webrtc>
abstract interface <#A: out io.ktor.client.webrtc/WebRTCConfig> io.ktor.client.webrtc/WebRTCClientEngineFactory { // io.ktor.client.webrtc/WebRTCClientEngineFactory|null[0]
    abstract fun create(kotlin/Function1<#A, kotlin/Unit> = ...): io.ktor.client.webrtc/WebRTCEngine // io.ktor.client.webrtc/WebRTCClientEngineFactory.create|create(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

abstract interface io.ktor.client.webrtc/MediaTrackFactory { // io.ktor.client.webrtc/MediaTrackFactory|null[0]
    abstract suspend fun createAudioTrack(io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.AudioTrack // io.ktor.client.webrtc/MediaTrackFactory.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints){}[0]
    abstract suspend fun createVideoTrack(io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.VideoTrack // io.ktor.client.webrtc/MediaTrackFactory.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints){}[0]
}

abstract interface io.ktor.client.webrtc/WebRTCEngine : io.ktor.client.webrtc/MediaTrackFactory, io.ktor.utils.io.core/Closeable, kotlinx.coroutines/CoroutineScope { // io.ktor.client.webrtc/WebRTCEngine|null[0]
    abstract val config // io.ktor.client.webrtc/WebRTCEngine.config|{}config[0]
        abstract fun <get-config>(): io.ktor.client.webrtc/WebRTCConfig // io.ktor.client.webrtc/WebRTCEngine.config.<get-config>|<get-config>(){}[0]
    abstract val dispatcher // io.ktor.client.webrtc/WebRTCEngine.dispatcher|{}dispatcher[0]
        abstract fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.webrtc/WebRTCEngine.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]

    abstract suspend fun createPeerConnection(): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRTCEngine.createPeerConnection|createPeerConnection(){}[0]
}

abstract class io.ktor.client.webrtc/WebRTCEngineBase : io.ktor.client.webrtc/WebRTCEngine { // io.ktor.client.webrtc/WebRTCEngineBase|null[0]
    constructor <init>(kotlin/String) // io.ktor.client.webrtc/WebRTCEngineBase.<init>|<init>(kotlin.String){}[0]

    open val coroutineContext // io.ktor.client.webrtc/WebRTCEngineBase.coroutineContext|{}coroutineContext[0]
        open fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/WebRTCEngineBase.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    open val dispatcher // io.ktor.client.webrtc/WebRTCEngineBase.dispatcher|{}dispatcher[0]
        open fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.webrtc/WebRTCEngineBase.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]

    open fun close() // io.ktor.client.webrtc/WebRTCEngineBase.close|close(){}[0]
}

abstract class io.ktor.client.webrtc/WebRtcPeerConnection : io.ktor.utils.io.core/Closeable { // io.ktor.client.webrtc/WebRtcPeerConnection|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRtcPeerConnection.<init>|<init>(){}[0]

    final val connectionStateFlow // io.ktor.client.webrtc/WebRtcPeerConnection.connectionStateFlow|{}connectionStateFlow[0]
        final fun <get-connectionStateFlow>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRTC.ConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.connectionStateFlow.<get-connectionStateFlow>|<get-connectionStateFlow>(){}[0]
    final val currentConnectionState // io.ktor.client.webrtc/WebRtcPeerConnection.currentConnectionState|{}currentConnectionState[0]
        final fun <get-currentConnectionState>(): kotlinx.coroutines.flow/MutableStateFlow<io.ktor.client.webrtc/WebRTC.ConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.currentConnectionState.<get-currentConnectionState>|<get-currentConnectionState>(){}[0]
    final val currentIceConnectionState // io.ktor.client.webrtc/WebRtcPeerConnection.currentIceConnectionState|{}currentIceConnectionState[0]
        final fun <get-currentIceConnectionState>(): kotlinx.coroutines.flow/MutableStateFlow<io.ktor.client.webrtc/WebRTC.IceConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.currentIceConnectionState.<get-currentIceConnectionState>|<get-currentIceConnectionState>(){}[0]
    final val currentIceGatheringState // io.ktor.client.webrtc/WebRtcPeerConnection.currentIceGatheringState|{}currentIceGatheringState[0]
        final fun <get-currentIceGatheringState>(): kotlinx.coroutines.flow/MutableStateFlow<io.ktor.client.webrtc/WebRTC.IceGatheringState> // io.ktor.client.webrtc/WebRtcPeerConnection.currentIceGatheringState.<get-currentIceGatheringState>|<get-currentIceGatheringState>(){}[0]
    final val currentSignalingState // io.ktor.client.webrtc/WebRtcPeerConnection.currentSignalingState|{}currentSignalingState[0]
        final fun <get-currentSignalingState>(): kotlinx.coroutines.flow/MutableStateFlow<io.ktor.client.webrtc/WebRTC.SignalingState> // io.ktor.client.webrtc/WebRtcPeerConnection.currentSignalingState.<get-currentSignalingState>|<get-currentSignalingState>(){}[0]
    final val currentStats // io.ktor.client.webrtc/WebRtcPeerConnection.currentStats|{}currentStats[0]
        final fun <get-currentStats>(): kotlinx.coroutines.flow/MutableStateFlow<kotlin.collections/List<io.ktor.client.webrtc/WebRTC.Stats>> // io.ktor.client.webrtc/WebRtcPeerConnection.currentStats.<get-currentStats>|<get-currentStats>(){}[0]
    final val iceCandidateFlow // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidateFlow|{}iceCandidateFlow[0]
        final fun <get-iceCandidateFlow>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/WebRTC.IceCandidate> // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidateFlow.<get-iceCandidateFlow>|<get-iceCandidateFlow>(){}[0]
    final val iceCandidates // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidates|{}iceCandidates[0]
        final fun <get-iceCandidates>(): kotlinx.coroutines.flow/MutableSharedFlow<io.ktor.client.webrtc/WebRTC.IceCandidate> // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidates.<get-iceCandidates>|<get-iceCandidates>(){}[0]
    final val iceConnectionStateFlow // io.ktor.client.webrtc/WebRtcPeerConnection.iceConnectionStateFlow|{}iceConnectionStateFlow[0]
        final fun <get-iceConnectionStateFlow>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRTC.IceConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.iceConnectionStateFlow.<get-iceConnectionStateFlow>|<get-iceConnectionStateFlow>(){}[0]
    final val iceGatheringStateFlow // io.ktor.client.webrtc/WebRtcPeerConnection.iceGatheringStateFlow|{}iceGatheringStateFlow[0]
        final fun <get-iceGatheringStateFlow>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRTC.IceGatheringState> // io.ktor.client.webrtc/WebRtcPeerConnection.iceGatheringStateFlow.<get-iceGatheringStateFlow>|<get-iceGatheringStateFlow>(){}[0]
    final val remoteTracks // io.ktor.client.webrtc/WebRtcPeerConnection.remoteTracks|{}remoteTracks[0]
        final fun <get-remoteTracks>(): kotlinx.coroutines.flow/MutableSharedFlow<io.ktor.client.webrtc/Operation<io.ktor.client.webrtc/WebRTCMedia.Track>> // io.ktor.client.webrtc/WebRtcPeerConnection.remoteTracks.<get-remoteTracks>|<get-remoteTracks>(){}[0]
    final val remoteTracksFlow // io.ktor.client.webrtc/WebRtcPeerConnection.remoteTracksFlow|{}remoteTracksFlow[0]
        final fun <get-remoteTracksFlow>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/Operation<io.ktor.client.webrtc/WebRTCMedia.Track>> // io.ktor.client.webrtc/WebRtcPeerConnection.remoteTracksFlow.<get-remoteTracksFlow>|<get-remoteTracksFlow>(){}[0]
    final val signalingStateFlow // io.ktor.client.webrtc/WebRtcPeerConnection.signalingStateFlow|{}signalingStateFlow[0]
        final fun <get-signalingStateFlow>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRTC.SignalingState> // io.ktor.client.webrtc/WebRtcPeerConnection.signalingStateFlow.<get-signalingStateFlow>|<get-signalingStateFlow>(){}[0]
    final val statsFlow // io.ktor.client.webrtc/WebRtcPeerConnection.statsFlow|{}statsFlow[0]
        final fun <get-statsFlow>(): kotlinx.coroutines.flow/StateFlow<kotlin.collections/List<io.ktor.client.webrtc/WebRTC.Stats>> // io.ktor.client.webrtc/WebRtcPeerConnection.statsFlow.<get-statsFlow>|<get-statsFlow>(){}[0]

    final var negotiationNeededCallback // io.ktor.client.webrtc/WebRtcPeerConnection.negotiationNeededCallback|{}negotiationNeededCallback[0]
        final fun <get-negotiationNeededCallback>(): kotlin/Function0<kotlin/Unit> // io.ktor.client.webrtc/WebRtcPeerConnection.negotiationNeededCallback.<get-negotiationNeededCallback>|<get-negotiationNeededCallback>(){}[0]
        final fun <set-negotiationNeededCallback>(kotlin/Function0<kotlin/Unit>) // io.ktor.client.webrtc/WebRtcPeerConnection.negotiationNeededCallback.<set-negotiationNeededCallback>|<set-negotiationNeededCallback>(kotlin.Function0<kotlin.Unit>){}[0]

    abstract fun getNativeConnection(): kotlin/Any // io.ktor.client.webrtc/WebRtcPeerConnection.getNativeConnection|getNativeConnection(){}[0]
    abstract fun restartIce() // io.ktor.client.webrtc/WebRtcPeerConnection.restartIce|restartIce(){}[0]
    abstract suspend fun addIceCandidate(io.ktor.client.webrtc/WebRTC.IceCandidate) // io.ktor.client.webrtc/WebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRTC.IceCandidate){}[0]
    abstract suspend fun addTrack(io.ktor.client.webrtc/WebRTCMedia.Track): io.ktor.client.webrtc/WebRTC.RtpSender // io.ktor.client.webrtc/WebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    abstract suspend fun createAnswer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    abstract suspend fun createOffer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WebRtcPeerConnection.createOffer|createOffer(){}[0]
    abstract suspend fun removeTrack(io.ktor.client.webrtc/WebRTC.RtpSender) // io.ktor.client.webrtc/WebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTC.RtpSender){}[0]
    abstract suspend fun removeTrack(io.ktor.client.webrtc/WebRTCMedia.Track) // io.ktor.client.webrtc/WebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    abstract suspend fun setLocalDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/WebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
    abstract suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/WebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
    final fun onNegotiationNeeded(kotlin/Function0<kotlin/Unit>) // io.ktor.client.webrtc/WebRtcPeerConnection.onNegotiationNeeded|onNegotiationNeeded(kotlin.Function0<kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any?> io.ktor.client.webrtc/Add : io.ktor.client.webrtc/Operation<#A> { // io.ktor.client.webrtc/Add|null[0]
    constructor <init>(#A) // io.ktor.client.webrtc/Add.<init>|<init>(1:0){}[0]
}

final class <#A: kotlin/Any?> io.ktor.client.webrtc/Remove : io.ktor.client.webrtc/Operation<#A> { // io.ktor.client.webrtc/Remove|null[0]
    constructor <init>(#A) // io.ktor.client.webrtc/Remove.<init>|<init>(1:0){}[0]
}

final class io.ktor.client.webrtc/WebRTCClient : io.ktor.client.webrtc/WebRTCEngine { // io.ktor.client.webrtc/WebRTCClient|null[0]
    constructor <init>(io.ktor.client.webrtc/WebRTCEngine) // io.ktor.client.webrtc/WebRTCClient.<init>|<init>(io.ktor.client.webrtc.WebRTCEngine){}[0]

    final val config // io.ktor.client.webrtc/WebRTCClient.config|{}config[0]
        final fun <get-config>(): io.ktor.client.webrtc/WebRTCConfig // io.ktor.client.webrtc/WebRTCClient.config.<get-config>|<get-config>(){}[0]
    final val coroutineContext // io.ktor.client.webrtc/WebRTCClient.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/WebRTCClient.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val dispatcher // io.ktor.client.webrtc/WebRTCClient.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.webrtc/WebRTCClient.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
    final val engine // io.ktor.client.webrtc/WebRTCClient.engine|{}engine[0]
        final fun <get-engine>(): io.ktor.client.webrtc/WebRTCEngine // io.ktor.client.webrtc/WebRTCClient.engine.<get-engine>|<get-engine>(){}[0]
    final val engineConfig // io.ktor.client.webrtc/WebRTCClient.engineConfig|{}engineConfig[0]
        final fun <get-engineConfig>(): io.ktor.client.webrtc/WebRTCConfig // io.ktor.client.webrtc/WebRTCClient.engineConfig.<get-engineConfig>|<get-engineConfig>(){}[0]

    final fun close() // io.ktor.client.webrtc/WebRTCClient.close|close(){}[0]
    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.AudioTrack // io.ktor.client.webrtc/WebRTCClient.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints){}[0]
    final suspend fun createPeerConnection(): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRTCClient.createPeerConnection|createPeerConnection(){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.VideoTrack // io.ktor.client.webrtc/WebRTCClient.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints){}[0]
}

open class io.ktor.client.webrtc/WebRTCConfig { // io.ktor.client.webrtc/WebRTCConfig|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRTCConfig.<init>|<init>(){}[0]

    final var dispatcher // io.ktor.client.webrtc/WebRTCConfig.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher? // io.ktor.client.webrtc/WebRTCConfig.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final fun <set-dispatcher>(kotlinx.coroutines/CoroutineDispatcher?) // io.ktor.client.webrtc/WebRTCConfig.dispatcher.<set-dispatcher>|<set-dispatcher>(kotlinx.coroutines.CoroutineDispatcher?){}[0]
    final var iceServers // io.ktor.client.webrtc/WebRTCConfig.iceServers|{}iceServers[0]
        final fun <get-iceServers>(): kotlin.collections/List<io.ktor.client.webrtc/WebRTC.IceServer> // io.ktor.client.webrtc/WebRTCConfig.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        final fun <set-iceServers>(kotlin.collections/List<io.ktor.client.webrtc/WebRTC.IceServer>) // io.ktor.client.webrtc/WebRTCConfig.iceServers.<set-iceServers>|<set-iceServers>(kotlin.collections.List<io.ktor.client.webrtc.WebRTC.IceServer>){}[0]
    final var mediaTrackFactory // io.ktor.client.webrtc/WebRTCConfig.mediaTrackFactory|{}mediaTrackFactory[0]
        final fun <get-mediaTrackFactory>(): io.ktor.client.webrtc/MediaTrackFactory? // io.ktor.client.webrtc/WebRTCConfig.mediaTrackFactory.<get-mediaTrackFactory>|<get-mediaTrackFactory>(){}[0]
        final fun <set-mediaTrackFactory>(io.ktor.client.webrtc/MediaTrackFactory?) // io.ktor.client.webrtc/WebRTCConfig.mediaTrackFactory.<set-mediaTrackFactory>|<set-mediaTrackFactory>(io.ktor.client.webrtc.MediaTrackFactory?){}[0]
    final var statsRefreshRate // io.ktor.client.webrtc/WebRTCConfig.statsRefreshRate|{}statsRefreshRate[0]
        final fun <get-statsRefreshRate>(): kotlin/Long // io.ktor.client.webrtc/WebRTCConfig.statsRefreshRate.<get-statsRefreshRate>|<get-statsRefreshRate>(){}[0]
        final fun <set-statsRefreshRate>(kotlin/Long) // io.ktor.client.webrtc/WebRTCConfig.statsRefreshRate.<set-statsRefreshRate>|<set-statsRefreshRate>(kotlin.Long){}[0]
    final var turnServers // io.ktor.client.webrtc/WebRTCConfig.turnServers|{}turnServers[0]
        final fun <get-turnServers>(): kotlin.collections/List<io.ktor.client.webrtc/WebRTC.IceServer> // io.ktor.client.webrtc/WebRTCConfig.turnServers.<get-turnServers>|<get-turnServers>(){}[0]
        final fun <set-turnServers>(kotlin.collections/List<io.ktor.client.webrtc/WebRTC.IceServer>) // io.ktor.client.webrtc/WebRTCConfig.turnServers.<set-turnServers>|<set-turnServers>(kotlin.collections.List<io.ktor.client.webrtc.WebRTC.IceServer>){}[0]
}

sealed class <#A: kotlin/Any?> io.ktor.client.webrtc/Operation { // io.ktor.client.webrtc/Operation|null[0]
    final val item // io.ktor.client.webrtc/Operation.item|{}item[0]
        final fun <get-item>(): #A // io.ktor.client.webrtc/Operation.item.<get-item>|<get-item>(){}[0]
}

final object io.ktor.client.webrtc/WebRTC { // io.ktor.client.webrtc/WebRTC|null[0]
    final enum class ConnectionState : kotlin/Enum<io.ktor.client.webrtc/WebRTC.ConnectionState> { // io.ktor.client.webrtc/WebRTC.ConnectionState|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRTC.ConnectionState.CLOSED|null[0]
        enum entry CONNECTED // io.ktor.client.webrtc/WebRTC.ConnectionState.CONNECTED|null[0]
        enum entry CONNECTING // io.ktor.client.webrtc/WebRTC.ConnectionState.CONNECTING|null[0]
        enum entry DISCONNECTED // io.ktor.client.webrtc/WebRTC.ConnectionState.DISCONNECTED|null[0]
        enum entry FAILED // io.ktor.client.webrtc/WebRTC.ConnectionState.FAILED|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRTC.ConnectionState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.ConnectionState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.ConnectionState> // io.ktor.client.webrtc/WebRTC.ConnectionState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.ConnectionState // io.ktor.client.webrtc/WebRTC.ConnectionState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.ConnectionState> // io.ktor.client.webrtc/WebRTC.ConnectionState.values|values#static(){}[0]
    }

    final enum class DegradationPreference : kotlin/Enum<io.ktor.client.webrtc/WebRTC.DegradationPreference> { // io.ktor.client.webrtc/WebRTC.DegradationPreference|null[0]
        enum entry BALANCED // io.ktor.client.webrtc/WebRTC.DegradationPreference.BALANCED|null[0]
        enum entry DISABLED // io.ktor.client.webrtc/WebRTC.DegradationPreference.DISABLED|null[0]
        enum entry MAINTAIN_FRAMERATE // io.ktor.client.webrtc/WebRTC.DegradationPreference.MAINTAIN_FRAMERATE|null[0]
        enum entry MAINTAIN_RESOLUTION // io.ktor.client.webrtc/WebRTC.DegradationPreference.MAINTAIN_RESOLUTION|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.DegradationPreference.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.DegradationPreference> // io.ktor.client.webrtc/WebRTC.DegradationPreference.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.DegradationPreference // io.ktor.client.webrtc/WebRTC.DegradationPreference.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.DegradationPreference> // io.ktor.client.webrtc/WebRTC.DegradationPreference.values|values#static(){}[0]
    }

    final enum class IceConnectionState : kotlin/Enum<io.ktor.client.webrtc/WebRTC.IceConnectionState> { // io.ktor.client.webrtc/WebRTC.IceConnectionState|null[0]
        enum entry CHECKING // io.ktor.client.webrtc/WebRTC.IceConnectionState.CHECKING|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRTC.IceConnectionState.CLOSED|null[0]
        enum entry COMPLETED // io.ktor.client.webrtc/WebRTC.IceConnectionState.COMPLETED|null[0]
        enum entry CONNECTED // io.ktor.client.webrtc/WebRTC.IceConnectionState.CONNECTED|null[0]
        enum entry DISCONNECTED // io.ktor.client.webrtc/WebRTC.IceConnectionState.DISCONNECTED|null[0]
        enum entry FAILED // io.ktor.client.webrtc/WebRTC.IceConnectionState.FAILED|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRTC.IceConnectionState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.IceConnectionState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.IceConnectionState> // io.ktor.client.webrtc/WebRTC.IceConnectionState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun isSuccessful(): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.IceConnectionState.isSuccessful|isSuccessful(){}[0]
        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.IceConnectionState // io.ktor.client.webrtc/WebRTC.IceConnectionState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.IceConnectionState> // io.ktor.client.webrtc/WebRTC.IceConnectionState.values|values#static(){}[0]
    }

    final enum class IceGatheringState : kotlin/Enum<io.ktor.client.webrtc/WebRTC.IceGatheringState> { // io.ktor.client.webrtc/WebRTC.IceGatheringState|null[0]
        enum entry COMPLETE // io.ktor.client.webrtc/WebRTC.IceGatheringState.COMPLETE|null[0]
        enum entry GATHERING // io.ktor.client.webrtc/WebRTC.IceGatheringState.GATHERING|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRTC.IceGatheringState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.IceGatheringState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.IceGatheringState> // io.ktor.client.webrtc/WebRTC.IceGatheringState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.IceGatheringState // io.ktor.client.webrtc/WebRTC.IceGatheringState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.IceGatheringState> // io.ktor.client.webrtc/WebRTC.IceGatheringState.values|values#static(){}[0]
    }

    final enum class SessionDescriptionType : kotlin/Enum<io.ktor.client.webrtc/WebRTC.SessionDescriptionType> { // io.ktor.client.webrtc/WebRTC.SessionDescriptionType|null[0]
        enum entry ANSWER // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.ANSWER|null[0]
        enum entry OFFER // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.OFFER|null[0]
        enum entry PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.PROVISIONAL_ANSWER|null[0]
        enum entry ROLLBACK // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.ROLLBACK|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.SessionDescriptionType> // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.SessionDescriptionType // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.SessionDescriptionType> // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.values|values#static(){}[0]

        final object Companion : kotlinx.serialization.internal/SerializerFactory { // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRTC.SessionDescriptionType> // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.Companion.serializer|serializer(){}[0]
            final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.ktor.client.webrtc/WebRTC.SessionDescriptionType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
        }
    }

    final enum class SignalingState : kotlin/Enum<io.ktor.client.webrtc/WebRTC.SignalingState> { // io.ktor.client.webrtc/WebRTC.SignalingState|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRTC.SignalingState.CLOSED|null[0]
        enum entry HAVE_LOCAL_OFFER // io.ktor.client.webrtc/WebRTC.SignalingState.HAVE_LOCAL_OFFER|null[0]
        enum entry HAVE_LOCAL_PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRTC.SignalingState.HAVE_LOCAL_PROVISIONAL_ANSWER|null[0]
        enum entry HAVE_REMOTE_OFFER // io.ktor.client.webrtc/WebRTC.SignalingState.HAVE_REMOTE_OFFER|null[0]
        enum entry HAVE_REMOTE_PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRTC.SignalingState.HAVE_REMOTE_PROVISIONAL_ANSWER|null[0]
        enum entry STABLE // io.ktor.client.webrtc/WebRTC.SignalingState.STABLE|null[0]

        final val entries // io.ktor.client.webrtc/WebRTC.SignalingState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTC.SignalingState> // io.ktor.client.webrtc/WebRTC.SignalingState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTC.SignalingState // io.ktor.client.webrtc/WebRTC.SignalingState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTC.SignalingState> // io.ktor.client.webrtc/WebRTC.SignalingState.values|values#static(){}[0]
    }

    abstract interface DtmfSender { // io.ktor.client.webrtc/WebRTC.DtmfSender|null[0]
        abstract val canInsertDTMF // io.ktor.client.webrtc/WebRTC.DtmfSender.canInsertDTMF|{}canInsertDTMF[0]
            abstract fun <get-canInsertDTMF>(): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.DtmfSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]
        abstract val toneBuffer // io.ktor.client.webrtc/WebRTC.DtmfSender.toneBuffer|{}toneBuffer[0]
            abstract fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/WebRTC.DtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        abstract fun getNative(): kotlin/Any // io.ktor.client.webrtc/WebRTC.DtmfSender.getNative|getNative(){}[0]
        abstract fun insertDTMF(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/WebRTC.DtmfSender.insertDTMF|insertDTMF(kotlin.String;kotlin.Int;kotlin.Int){}[0]
    }

    abstract interface RtpParameters { // io.ktor.client.webrtc/WebRTC.RtpParameters|null[0]
        abstract val codecs // io.ktor.client.webrtc/WebRTC.RtpParameters.codecs|{}codecs[0]
            abstract fun <get-codecs>(): kotlin.collections/Iterable<kotlin/Any> // io.ktor.client.webrtc/WebRTC.RtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract val degradationPreference // io.ktor.client.webrtc/WebRTC.RtpParameters.degradationPreference|{}degradationPreference[0]
            abstract fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRTC.DegradationPreference // io.ktor.client.webrtc/WebRTC.RtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
        abstract val encodings // io.ktor.client.webrtc/WebRTC.RtpParameters.encodings|{}encodings[0]
            abstract fun <get-encodings>(): kotlin.collections/Iterable<kotlin/Any> // io.ktor.client.webrtc/WebRTC.RtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
        abstract val headerExtensions // io.ktor.client.webrtc/WebRTC.RtpParameters.headerExtensions|{}headerExtensions[0]
            abstract fun <get-headerExtensions>(): kotlin.collections/Iterable<io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/WebRTC.RtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract val rtcp // io.ktor.client.webrtc/WebRTC.RtpParameters.rtcp|{}rtcp[0]
            abstract fun <get-rtcp>(): kotlin/Any // io.ktor.client.webrtc/WebRTC.RtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract val transactionId // io.ktor.client.webrtc/WebRTC.RtpParameters.transactionId|{}transactionId[0]
            abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/WebRTC.RtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
    }

    abstract interface RtpSender { // io.ktor.client.webrtc/WebRTC.RtpSender|null[0]
        abstract val dtmf // io.ktor.client.webrtc/WebRTC.RtpSender.dtmf|{}dtmf[0]
            abstract fun <get-dtmf>(): io.ktor.client.webrtc/WebRTC.DtmfSender? // io.ktor.client.webrtc/WebRTC.RtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract val track // io.ktor.client.webrtc/WebRTC.RtpSender.track|{}track[0]
            abstract fun <get-track>(): io.ktor.client.webrtc/WebRTCMedia.Track? // io.ktor.client.webrtc/WebRTC.RtpSender.track.<get-track>|<get-track>(){}[0]

        abstract fun getNative(): kotlin/Any // io.ktor.client.webrtc/WebRTC.RtpSender.getNative|getNative(){}[0]
        abstract suspend fun getParameters(): io.ktor.client.webrtc/WebRTC.RtpParameters // io.ktor.client.webrtc/WebRTC.RtpSender.getParameters|getParameters(){}[0]
        abstract suspend fun replaceTrack(io.ktor.client.webrtc/WebRTCMedia.Track?) // io.ktor.client.webrtc/WebRTC.RtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRTCMedia.Track?){}[0]
        abstract suspend fun setParameters(io.ktor.client.webrtc/WebRTC.RtpParameters) // io.ktor.client.webrtc/WebRTC.RtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRTC.RtpParameters){}[0]
    }

    final class IceCandidate { // io.ktor.client.webrtc/WebRTC.IceCandidate|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Int) // io.ktor.client.webrtc/WebRTC.IceCandidate.<init>|<init>(kotlin.String;kotlin.String;kotlin.Int){}[0]

        final val candidate // io.ktor.client.webrtc/WebRTC.IceCandidate.candidate|{}candidate[0]
            final fun <get-candidate>(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final val sdpMLineIndex // io.ktor.client.webrtc/WebRTC.IceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
            final fun <get-sdpMLineIndex>(): kotlin/Int // io.ktor.client.webrtc/WebRTC.IceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final val sdpMid // io.ktor.client.webrtc/WebRTC.IceCandidate.sdpMid|{}sdpMid[0]
            final fun <get-sdpMid>(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceCandidate.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceCandidate.component2|component2(){}[0]
        final fun component3(): kotlin/Int // io.ktor.client.webrtc/WebRTC.IceCandidate.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Int = ...): io.ktor.client.webrtc/WebRTC.IceCandidate // io.ktor.client.webrtc/WebRTC.IceCandidate.copy|copy(kotlin.String;kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.IceCandidate.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTC.IceCandidate.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceCandidate.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.ktor.client.webrtc/WebRTC.IceCandidate> { // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer|null[0]
            final val descriptor // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.client.webrtc/WebRTC.IceCandidate // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.client.webrtc/WebRTC.IceCandidate) // io.ktor.client.webrtc/WebRTC.IceCandidate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.client.webrtc.WebRTC.IceCandidate){}[0]
        }

        final object Companion { // io.ktor.client.webrtc/WebRTC.IceCandidate.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRTC.IceCandidate> // io.ktor.client.webrtc/WebRTC.IceCandidate.Companion.serializer|serializer(){}[0]
        }
    }

    final class IceException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRTC.IceException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRTC.IceException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class IceServer { // io.ktor.client.webrtc/WebRTC.IceServer|null[0]
        constructor <init>(kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // io.ktor.client.webrtc/WebRTC.IceServer.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?){}[0]

        final val credential // io.ktor.client.webrtc/WebRTC.IceServer.credential|{}credential[0]
            final fun <get-credential>(): kotlin/String? // io.ktor.client.webrtc/WebRTC.IceServer.credential.<get-credential>|<get-credential>(){}[0]
        final val urls // io.ktor.client.webrtc/WebRTC.IceServer.urls|{}urls[0]
            final fun <get-urls>(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceServer.urls.<get-urls>|<get-urls>(){}[0]
        final val username // io.ktor.client.webrtc/WebRTC.IceServer.username|{}username[0]
            final fun <get-username>(): kotlin/String? // io.ktor.client.webrtc/WebRTC.IceServer.username.<get-username>|<get-username>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceServer.component1|component1(){}[0]
        final fun component2(): kotlin/String? // io.ktor.client.webrtc/WebRTC.IceServer.component2|component2(){}[0]
        final fun component3(): kotlin/String? // io.ktor.client.webrtc/WebRTC.IceServer.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): io.ktor.client.webrtc/WebRTC.IceServer // io.ktor.client.webrtc/WebRTC.IceServer.copy|copy(kotlin.String;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.IceServer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTC.IceServer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTC.IceServer.toString|toString(){}[0]
    }

    final class RtpHeaderExtensionParameters { // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters|null[0]
        constructor <init>(kotlin/Int, kotlin/String, kotlin/Boolean) // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.<init>|<init>(kotlin.Int;kotlin.String;kotlin.Boolean){}[0]

        final val encrypted // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.encrypted|{}encrypted[0]
            final fun <get-encrypted>(): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        final val id // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.id|{}id[0]
            final fun <get-id>(): kotlin/Int // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        final val uri // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.uri|{}uri[0]
            final fun <get-uri>(): kotlin/String // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]

        final fun component1(): kotlin/Int // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.component3|component3(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/Boolean = ...): io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.copy|copy(kotlin.Int;kotlin.String;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters.toString|toString(){}[0]
    }

    final class SdpException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRTC.SdpException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRTC.SdpException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class SessionDescription { // io.ktor.client.webrtc/WebRTC.SessionDescription|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRTC.SessionDescriptionType, kotlin/String) // io.ktor.client.webrtc/WebRTC.SessionDescription.<init>|<init>(io.ktor.client.webrtc.WebRTC.SessionDescriptionType;kotlin.String){}[0]

        final val sdp // io.ktor.client.webrtc/WebRTC.SessionDescription.sdp|{}sdp[0]
            final fun <get-sdp>(): kotlin/String // io.ktor.client.webrtc/WebRTC.SessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final val type // io.ktor.client.webrtc/WebRTC.SessionDescription.type|{}type[0]
            final fun <get-type>(): io.ktor.client.webrtc/WebRTC.SessionDescriptionType // io.ktor.client.webrtc/WebRTC.SessionDescription.type.<get-type>|<get-type>(){}[0]

        final fun component1(): io.ktor.client.webrtc/WebRTC.SessionDescriptionType // io.ktor.client.webrtc/WebRTC.SessionDescription.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRTC.SessionDescription.component2|component2(){}[0]
        final fun copy(io.ktor.client.webrtc/WebRTC.SessionDescriptionType = ..., kotlin/String = ...): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WebRTC.SessionDescription.copy|copy(io.ktor.client.webrtc.WebRTC.SessionDescriptionType;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.SessionDescription.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTC.SessionDescription.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTC.SessionDescription.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.ktor.client.webrtc/WebRTC.SessionDescription> { // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer|null[0]
            final val descriptor // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/WebRTC.SessionDescription.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
        }

        final object Companion { // io.ktor.client.webrtc/WebRTC.SessionDescription.Companion|null[0]
            final val $childSerializers // io.ktor.client.webrtc/WebRTC.SessionDescription.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRTC.SessionDescription> // io.ktor.client.webrtc/WebRTC.SessionDescription.Companion.serializer|serializer(){}[0]
        }
    }

    final class Stats { // io.ktor.client.webrtc/WebRTC.Stats|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Long, kotlin.collections/Map<kotlin/String, kotlin/Any?>) // io.ktor.client.webrtc/WebRTC.Stats.<init>|<init>(kotlin.String;kotlin.String;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]

        final val id // io.ktor.client.webrtc/WebRTC.Stats.id|{}id[0]
            final fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WebRTC.Stats.id.<get-id>|<get-id>(){}[0]
        final val props // io.ktor.client.webrtc/WebRTC.Stats.props|{}props[0]
            final fun <get-props>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.client.webrtc/WebRTC.Stats.props.<get-props>|<get-props>(){}[0]
        final val timestamp // io.ktor.client.webrtc/WebRTC.Stats.timestamp|{}timestamp[0]
            final fun <get-timestamp>(): kotlin/Long // io.ktor.client.webrtc/WebRTC.Stats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        final val type // io.ktor.client.webrtc/WebRTC.Stats.type|{}type[0]
            final fun <get-type>(): kotlin/String // io.ktor.client.webrtc/WebRTC.Stats.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRTC.Stats.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRTC.Stats.component2|component2(){}[0]
        final fun component3(): kotlin/Long // io.ktor.client.webrtc/WebRTC.Stats.component3|component3(){}[0]
        final fun component4(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.client.webrtc/WebRTC.Stats.component4|component4(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Long = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?> = ...): io.ktor.client.webrtc/WebRTC.Stats // io.ktor.client.webrtc/WebRTC.Stats.copy|copy(kotlin.String;kotlin.String;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTC.Stats.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTC.Stats.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTC.Stats.toString|toString(){}[0]
    }
}

final object io.ktor.client.webrtc/WebRTCMedia { // io.ktor.client.webrtc/WebRTCMedia|null[0]
    final enum class FacingMode : kotlin/Enum<io.ktor.client.webrtc/WebRTCMedia.FacingMode> { // io.ktor.client.webrtc/WebRTCMedia.FacingMode|null[0]
        enum entry ENVIRONMENT // io.ktor.client.webrtc/WebRTCMedia.FacingMode.ENVIRONMENT|null[0]
        enum entry LEFT // io.ktor.client.webrtc/WebRTCMedia.FacingMode.LEFT|null[0]
        enum entry RIGHT // io.ktor.client.webrtc/WebRTCMedia.FacingMode.RIGHT|null[0]
        enum entry USER // io.ktor.client.webrtc/WebRTCMedia.FacingMode.USER|null[0]

        final val entries // io.ktor.client.webrtc/WebRTCMedia.FacingMode.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTCMedia.FacingMode> // io.ktor.client.webrtc/WebRTCMedia.FacingMode.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTCMedia.FacingMode // io.ktor.client.webrtc/WebRTCMedia.FacingMode.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTCMedia.FacingMode> // io.ktor.client.webrtc/WebRTCMedia.FacingMode.values|values#static(){}[0]
    }

    final enum class ResizeMode : kotlin/Enum<io.ktor.client.webrtc/WebRTCMedia.ResizeMode> { // io.ktor.client.webrtc/WebRTCMedia.ResizeMode|null[0]
        enum entry CROP_AND_SCALE // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.CROP_AND_SCALE|null[0]
        enum entry NONE // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.NONE|null[0]

        final val entries // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTCMedia.ResizeMode> // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTCMedia.ResizeMode // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTCMedia.ResizeMode> // io.ktor.client.webrtc/WebRTCMedia.ResizeMode.values|values#static(){}[0]
    }

    final enum class TrackType : kotlin/Enum<io.ktor.client.webrtc/WebRTCMedia.TrackType> { // io.ktor.client.webrtc/WebRTCMedia.TrackType|null[0]
        enum entry AUDIO // io.ktor.client.webrtc/WebRTCMedia.TrackType.AUDIO|null[0]
        enum entry VIDEO // io.ktor.client.webrtc/WebRTCMedia.TrackType.VIDEO|null[0]

        final val entries // io.ktor.client.webrtc/WebRTCMedia.TrackType.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRTCMedia.TrackType> // io.ktor.client.webrtc/WebRTCMedia.TrackType.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRTCMedia.TrackType // io.ktor.client.webrtc/WebRTCMedia.TrackType.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRTCMedia.TrackType> // io.ktor.client.webrtc/WebRTCMedia.TrackType.values|values#static(){}[0]
    }

    abstract interface AudioSource : io.ktor.client.webrtc/WebRTCMedia.Source // io.ktor.client.webrtc/WebRTCMedia.AudioSource|null[0]

    abstract interface AudioTrack : io.ktor.client.webrtc/WebRTCMedia.Track // io.ktor.client.webrtc/WebRTCMedia.AudioTrack|null[0]

    abstract interface Source // io.ktor.client.webrtc/WebRTCMedia.Source|null[0]

    abstract interface Track : kotlin/AutoCloseable { // io.ktor.client.webrtc/WebRTCMedia.Track|null[0]
        abstract val enabled // io.ktor.client.webrtc/WebRTCMedia.Track.enabled|{}enabled[0]
            abstract fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/WebRTCMedia.Track.enabled.<get-enabled>|<get-enabled>(){}[0]
        abstract val id // io.ktor.client.webrtc/WebRTCMedia.Track.id|{}id[0]
            abstract fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WebRTCMedia.Track.id.<get-id>|<get-id>(){}[0]
        abstract val kind // io.ktor.client.webrtc/WebRTCMedia.Track.kind|{}kind[0]
            abstract fun <get-kind>(): io.ktor.client.webrtc/WebRTCMedia.TrackType // io.ktor.client.webrtc/WebRTCMedia.Track.kind.<get-kind>|<get-kind>(){}[0]

        abstract fun close() // io.ktor.client.webrtc/WebRTCMedia.Track.close|close(){}[0]
        abstract fun enable(kotlin/Boolean) // io.ktor.client.webrtc/WebRTCMedia.Track.enable|enable(kotlin.Boolean){}[0]
        abstract fun getNative(): kotlin/Any // io.ktor.client.webrtc/WebRTCMedia.Track.getNative|getNative(){}[0]
    }

    abstract interface VideoSource : io.ktor.client.webrtc/WebRTCMedia.Source { // io.ktor.client.webrtc/WebRTCMedia.VideoSource|null[0]
        abstract val isScreencast // io.ktor.client.webrtc/WebRTCMedia.VideoSource.isScreencast|{}isScreencast[0]
            abstract fun <get-isScreencast>(): kotlin/Boolean // io.ktor.client.webrtc/WebRTCMedia.VideoSource.isScreencast.<get-isScreencast>|<get-isScreencast>(){}[0]
    }

    abstract interface VideoTrack : io.ktor.client.webrtc/WebRTCMedia.Track // io.ktor.client.webrtc/WebRTCMedia.VideoTrack|null[0]

    final class AudioTrackConstraints { // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints|null[0]
        constructor <init>(kotlin/Double? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Double? = ..., kotlin/Int? = ...) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.<init>|<init>(kotlin.Double?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Double?;kotlin.Int?){}[0]

        final var autoGainControl // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.autoGainControl|{}autoGainControl[0]
            final fun <get-autoGainControl>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.autoGainControl.<get-autoGainControl>|<get-autoGainControl>(){}[0]
            final fun <set-autoGainControl>(kotlin/Boolean?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.autoGainControl.<set-autoGainControl>|<set-autoGainControl>(kotlin.Boolean?){}[0]
        final var channelCount // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.channelCount|{}channelCount[0]
            final fun <get-channelCount>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.channelCount.<get-channelCount>|<get-channelCount>(){}[0]
            final fun <set-channelCount>(kotlin/Int?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.channelCount.<set-channelCount>|<set-channelCount>(kotlin.Int?){}[0]
        final var echoCancellation // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.echoCancellation|{}echoCancellation[0]
            final fun <get-echoCancellation>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.echoCancellation.<get-echoCancellation>|<get-echoCancellation>(){}[0]
            final fun <set-echoCancellation>(kotlin/Boolean?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.echoCancellation.<set-echoCancellation>|<set-echoCancellation>(kotlin.Boolean?){}[0]
        final var latency // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.latency|{}latency[0]
            final fun <get-latency>(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.latency.<get-latency>|<get-latency>(){}[0]
            final fun <set-latency>(kotlin/Double?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.latency.<set-latency>|<set-latency>(kotlin.Double?){}[0]
        final var noiseSuppression // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.noiseSuppression|{}noiseSuppression[0]
            final fun <get-noiseSuppression>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.noiseSuppression.<get-noiseSuppression>|<get-noiseSuppression>(){}[0]
            final fun <set-noiseSuppression>(kotlin/Boolean?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.noiseSuppression.<set-noiseSuppression>|<set-noiseSuppression>(kotlin.Boolean?){}[0]
        final var sampleRate // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleRate|{}sampleRate[0]
            final fun <get-sampleRate>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleRate.<get-sampleRate>|<get-sampleRate>(){}[0]
            final fun <set-sampleRate>(kotlin/Int?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleRate.<set-sampleRate>|<set-sampleRate>(kotlin.Int?){}[0]
        final var sampleSize // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleSize|{}sampleSize[0]
            final fun <get-sampleSize>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleSize.<get-sampleSize>|<get-sampleSize>(){}[0]
            final fun <set-sampleSize>(kotlin/Int?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.sampleSize.<set-sampleSize>|<set-sampleSize>(kotlin.Int?){}[0]
        final var volume // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.volume|{}volume[0]
            final fun <get-volume>(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.volume.<get-volume>|<get-volume>(){}[0]
            final fun <set-volume>(kotlin/Double?) // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.volume.<set-volume>|<set-volume>(kotlin.Double?){}[0]

        final fun component1(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component1|component1(){}[0]
        final fun component2(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component6|component6(){}[0]
        final fun component7(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component7|component7(){}[0]
        final fun component8(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.component8|component8(){}[0]
        final fun copy(kotlin/Double? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Double? = ..., kotlin/Int? = ...): io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.copy|copy(kotlin.Double?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Double?;kotlin.Int?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints.toString|toString(){}[0]
    }

    final class DeviceException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRTCMedia.DeviceException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRTCMedia.DeviceException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class PermissionException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRTCMedia.PermissionException|null[0]
        constructor <init>(kotlin/String?) // io.ktor.client.webrtc/WebRTCMedia.PermissionException.<init>|<init>(kotlin.String?){}[0]
    }

    final class VideoTrackConstraints { // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints|null[0]
        constructor <init>(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Double? = ..., io.ktor.client.webrtc/WebRTCMedia.FacingMode? = ..., io.ktor.client.webrtc/WebRTCMedia.ResizeMode? = ...) // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.<init>|<init>(kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Double?;io.ktor.client.webrtc.WebRTCMedia.FacingMode?;io.ktor.client.webrtc.WebRTCMedia.ResizeMode?){}[0]

        final val aspectRatio // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.aspectRatio|{}aspectRatio[0]
            final fun <get-aspectRatio>(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.aspectRatio.<get-aspectRatio>|<get-aspectRatio>(){}[0]
        final val facingMode // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.facingMode|{}facingMode[0]
            final fun <get-facingMode>(): io.ktor.client.webrtc/WebRTCMedia.FacingMode? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.facingMode.<get-facingMode>|<get-facingMode>(){}[0]
        final val frameRate // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.frameRate|{}frameRate[0]
            final fun <get-frameRate>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.frameRate.<get-frameRate>|<get-frameRate>(){}[0]
        final val height // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.height|{}height[0]
            final fun <get-height>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.height.<get-height>|<get-height>(){}[0]
        final val resizeMode // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.resizeMode|{}resizeMode[0]
            final fun <get-resizeMode>(): io.ktor.client.webrtc/WebRTCMedia.ResizeMode? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.resizeMode.<get-resizeMode>|<get-resizeMode>(){}[0]
        final val width // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.width|{}width[0]
            final fun <get-width>(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.width.<get-width>|<get-width>(){}[0]

        final fun component1(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component1|component1(){}[0]
        final fun component2(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component3|component3(){}[0]
        final fun component4(): kotlin/Double? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component4|component4(){}[0]
        final fun component5(): io.ktor.client.webrtc/WebRTCMedia.FacingMode? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component5|component5(){}[0]
        final fun component6(): io.ktor.client.webrtc/WebRTCMedia.ResizeMode? // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.component6|component6(){}[0]
        final fun copy(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Double? = ..., io.ktor.client.webrtc/WebRTCMedia.FacingMode? = ..., io.ktor.client.webrtc/WebRTCMedia.ResizeMode? = ...): io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.copy|copy(kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Double?;io.ktor.client.webrtc.WebRTCMedia.FacingMode?;io.ktor.client.webrtc.WebRTCMedia.ResizeMode?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints.toString|toString(){}[0]
    }
}

final fun <#A: io.ktor.client.webrtc/WebRTCConfig> io.ktor.client.webrtc/WebRTCClient(io.ktor.client.webrtc/WebRTCClientEngineFactory<#A>, kotlin/Function1<io.ktor.client.webrtc/WebRTCConfig, kotlin/Unit> = ...): io.ktor.client.webrtc/WebRTCClient // io.ktor.client.webrtc/WebRTCClient|WebRTCClient(io.ktor.client.webrtc.WebRTCClientEngineFactory<0:0>;kotlin.Function1<io.ktor.client.webrtc.WebRTCConfig,kotlin.Unit>){0§<io.ktor.client.webrtc.WebRTCConfig>}[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/Navigator { // io.ktor.client.webrtc.peer/Navigator|null[0]
    abstract val mediaDevices // io.ktor.client.webrtc.peer/Navigator.mediaDevices|{}mediaDevices[0]
        abstract fun <get-mediaDevices>(): org.w3c.dom.mediacapture/MediaDevices // io.ktor.client.webrtc.peer/Navigator.mediaDevices.<get-mediaDevices>|<get-mediaDevices>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCAnswerOptions : io.ktor.client.webrtc.peer/RTCOfferAnswerOptions // io.ktor.client.webrtc.peer/RTCAnswerOptions|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCAudioStats : io.ktor.client.webrtc.peer/RTCMediaStats { // io.ktor.client.webrtc.peer/RTCAudioStats|null[0]
    abstract val audioLevel // io.ktor.client.webrtc.peer/RTCAudioStats.audioLevel|{}audioLevel[0]
        // Targets: [js]
        abstract fun <get-audioLevel>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCAudioStats.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-audioLevel>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCAudioStats.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
    abstract val totalAudioEnergy // io.ktor.client.webrtc.peer/RTCAudioStats.totalAudioEnergy|{}totalAudioEnergy[0]
        // Targets: [js]
        abstract fun <get-totalAudioEnergy>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCAudioStats.totalAudioEnergy.<get-totalAudioEnergy>|<get-totalAudioEnergy>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-totalAudioEnergy>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCAudioStats.totalAudioEnergy.<get-totalAudioEnergy>|<get-totalAudioEnergy>(){}[0]
    abstract val totalSamplesDuration // io.ktor.client.webrtc.peer/RTCAudioStats.totalSamplesDuration|{}totalSamplesDuration[0]
        // Targets: [js]
        abstract fun <get-totalSamplesDuration>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCAudioStats.totalSamplesDuration.<get-totalSamplesDuration>|<get-totalSamplesDuration>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-totalSamplesDuration>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCAudioStats.totalSamplesDuration.<get-totalSamplesDuration>|<get-totalSamplesDuration>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit|null[0]
    abstract var tone // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit.tone|{}tone[0]
        // Targets: [js]
        abstract fun <get-tone>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [js]
        abstract fun <set-tone>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit.tone.<set-tone>|<set-tone>(kotlin.String){}[0]

        // Targets: [wasmJs]
        abstract fun <get-tone>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-tone>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEventInit.tone.<set-tone>|<set-tone>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCDataChannelEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCDataChannelEventInit|null[0]
    abstract var channel // io.ktor.client.webrtc.peer/RTCDataChannelEventInit.channel|{}channel[0]
        abstract fun <get-channel>(): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCDataChannelEventInit.channel.<get-channel>|<get-channel>(){}[0]
        abstract fun <set-channel>(io.ktor.client.webrtc.peer/RTCDataChannel) // io.ktor.client.webrtc.peer/RTCDataChannelEventInit.channel.<set-channel>|<set-channel>(io.ktor.client.webrtc.peer.RTCDataChannel){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCErrorEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCErrorEventInit|null[0]
    abstract var error // io.ktor.client.webrtc.peer/RTCErrorEventInit.error|{}error[0]
        abstract fun <get-error>(): io.ktor.client.webrtc.peer/RTCError // io.ktor.client.webrtc.peer/RTCErrorEventInit.error.<get-error>|<get-error>(){}[0]
        abstract fun <set-error>(io.ktor.client.webrtc.peer/RTCError) // io.ktor.client.webrtc.peer/RTCErrorEventInit.error.<set-error>|<set-error>(io.ktor.client.webrtc.peer.RTCError){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidateComplete // io.ktor.client.webrtc.peer/RTCIceCandidateComplete|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCMediaStats : io.ktor.client.webrtc.peer/RTCStats { // io.ktor.client.webrtc.peer/RTCMediaStats|null[0]
    abstract val kind // io.ktor.client.webrtc.peer/RTCMediaStats.kind|{}kind[0]
        // Targets: [js]
        abstract fun <get-kind>(): kotlin/String // io.ktor.client.webrtc.peer/RTCMediaStats.kind.<get-kind>|<get-kind>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-kind>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCMediaStats.kind.<get-kind>|<get-kind>(){}[0]
    abstract val trackId // io.ktor.client.webrtc.peer/RTCMediaStats.trackId|{}trackId[0]
        // Targets: [js]
        abstract fun <get-trackId>(): kotlin/String // io.ktor.client.webrtc.peer/RTCMediaStats.trackId.<get-trackId>|<get-trackId>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-trackId>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCMediaStats.trackId.<get-trackId>|<get-trackId>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCOfferOptions : io.ktor.client.webrtc.peer/RTCOfferAnswerOptions { // io.ktor.client.webrtc.peer/RTCOfferOptions|null[0]
    open var iceRestart // io.ktor.client.webrtc.peer/RTCOfferOptions.iceRestart|{}iceRestart[0]
        open fun <get-iceRestart>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCOfferOptions.iceRestart.<get-iceRestart>|<get-iceRestart>(){}[0]
        open fun <set-iceRestart>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCOfferOptions.iceRestart.<set-iceRestart>|<set-iceRestart>(kotlin.Boolean?){}[0]
    open var offerToReceiveAudio // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveAudio|{}offerToReceiveAudio[0]
        open fun <get-offerToReceiveAudio>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveAudio.<get-offerToReceiveAudio>|<get-offerToReceiveAudio>(){}[0]
        open fun <set-offerToReceiveAudio>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveAudio.<set-offerToReceiveAudio>|<set-offerToReceiveAudio>(kotlin.Boolean?){}[0]
    open var offerToReceiveVideo // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveVideo|{}offerToReceiveVideo[0]
        open fun <get-offerToReceiveVideo>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveVideo.<get-offerToReceiveVideo>|<get-offerToReceiveVideo>(){}[0]
        open fun <set-offerToReceiveVideo>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCOfferOptions.offerToReceiveVideo.<set-offerToReceiveVideo>|<set-offerToReceiveVideo>(kotlin.Boolean?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit|null[0]
    abstract var errorCode // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.errorCode|{}errorCode[0]
        // Targets: [js]
        abstract fun <get-errorCode>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [js]
        abstract fun <set-errorCode>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.errorCode.<set-errorCode>|<set-errorCode>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        abstract fun <get-errorCode>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-errorCode>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.errorCode.<set-errorCode>|<set-errorCode>(kotlin.js.JsNumber){}[0]
    open var hostCandidate // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.hostCandidate|{}hostCandidate[0]
        // Targets: [js]
        open fun <get-hostCandidate>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [js]
        open fun <set-hostCandidate>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-hostCandidate>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-hostCandidate>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.js.JsString?){}[0]
    open var statusText // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.statusText|{}statusText[0]
        // Targets: [js]
        open fun <get-statusText>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.statusText.<get-statusText>|<get-statusText>(){}[0]

        // Targets: [js]
        open fun <set-statusText>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.statusText.<set-statusText>|<set-statusText>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-statusText>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.statusText.<get-statusText>|<get-statusText>(){}[0]

        // Targets: [wasmJs]
        open fun <set-statusText>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.statusText.<set-statusText>|<set-statusText>(kotlin.js.JsString?){}[0]
    open var url // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.url|{}url[0]
        // Targets: [js]
        open fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        open fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        open fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEventInit.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit|null[0]
    open var candidate // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.candidate|{}candidate[0]
        open fun <get-candidate>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.candidate.<set-candidate>|<set-candidate>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
    open var url // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.url|{}url[0]
        // Targets: [js]
        open fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        open fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        open fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEventInit.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpDecodingParameters : io.ktor.client.webrtc.peer/RTCRtpCodingParameters // io.ktor.client.webrtc.peer/RTCRtpDecodingParameters|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpEncodingParameters : io.ktor.client.webrtc.peer/RTCRtpCodingParameters { // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters|null[0]
    open var active // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.active|{}active[0]
        open fun <get-active>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.active.<get-active>|<get-active>(){}[0]
        open fun <set-active>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.active.<set-active>|<set-active>(kotlin.Boolean?){}[0]
    open var codecPayloadType // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.codecPayloadType|{}codecPayloadType[0]
        // Targets: [js]
        open fun <get-codecPayloadType>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.codecPayloadType.<get-codecPayloadType>|<get-codecPayloadType>(){}[0]

        // Targets: [js]
        open fun <set-codecPayloadType>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.codecPayloadType.<set-codecPayloadType>|<set-codecPayloadType>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-codecPayloadType>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.codecPayloadType.<get-codecPayloadType>|<get-codecPayloadType>(){}[0]

        // Targets: [wasmJs]
        open fun <set-codecPayloadType>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.codecPayloadType.<set-codecPayloadType>|<set-codecPayloadType>(kotlin.js.JsNumber?){}[0]
    open var dtx // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.dtx|{}dtx[0]
        // Targets: [js]
        open fun <get-dtx>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.dtx.<get-dtx>|<get-dtx>(){}[0]

        // Targets: [js]
        open fun <set-dtx>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.dtx.<set-dtx>|<set-dtx>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-dtx>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.dtx.<get-dtx>|<get-dtx>(){}[0]

        // Targets: [wasmJs]
        open fun <set-dtx>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.dtx.<set-dtx>|<set-dtx>(kotlin.js.JsString?){}[0]
    open var maxBitrate // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxBitrate|{}maxBitrate[0]
        // Targets: [js]
        open fun <get-maxBitrate>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxBitrate.<get-maxBitrate>|<get-maxBitrate>(){}[0]

        // Targets: [js]
        open fun <set-maxBitrate>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxBitrate.<set-maxBitrate>|<set-maxBitrate>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-maxBitrate>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxBitrate.<get-maxBitrate>|<get-maxBitrate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-maxBitrate>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxBitrate.<set-maxBitrate>|<set-maxBitrate>(kotlin.js.JsNumber?){}[0]
    open var maxFramerate // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxFramerate|{}maxFramerate[0]
        // Targets: [js]
        open fun <get-maxFramerate>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxFramerate.<get-maxFramerate>|<get-maxFramerate>(){}[0]

        // Targets: [js]
        open fun <set-maxFramerate>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxFramerate.<set-maxFramerate>|<set-maxFramerate>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-maxFramerate>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxFramerate.<get-maxFramerate>|<get-maxFramerate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-maxFramerate>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.maxFramerate.<set-maxFramerate>|<set-maxFramerate>(kotlin.js.JsNumber?){}[0]
    open var ptime // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.ptime|{}ptime[0]
        // Targets: [js]
        open fun <get-ptime>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.ptime.<get-ptime>|<get-ptime>(){}[0]

        // Targets: [js]
        open fun <set-ptime>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.ptime.<set-ptime>|<set-ptime>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-ptime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.ptime.<get-ptime>|<get-ptime>(){}[0]

        // Targets: [wasmJs]
        open fun <set-ptime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.ptime.<set-ptime>|<set-ptime>(kotlin.js.JsNumber?){}[0]
    open var scaleResolutionDownBy // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.scaleResolutionDownBy|{}scaleResolutionDownBy[0]
        // Targets: [js]
        open fun <get-scaleResolutionDownBy>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.scaleResolutionDownBy.<get-scaleResolutionDownBy>|<get-scaleResolutionDownBy>(){}[0]

        // Targets: [js]
        open fun <set-scaleResolutionDownBy>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.scaleResolutionDownBy.<set-scaleResolutionDownBy>|<set-scaleResolutionDownBy>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-scaleResolutionDownBy>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.scaleResolutionDownBy.<get-scaleResolutionDownBy>|<get-scaleResolutionDownBy>(){}[0]

        // Targets: [wasmJs]
        open fun <set-scaleResolutionDownBy>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpEncodingParameters.scaleResolutionDownBy.<set-scaleResolutionDownBy>|<set-scaleResolutionDownBy>(kotlin.js.JsNumber?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpReceiveParameters : io.ktor.client.webrtc.peer/RTCRtpParameters { // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters|null[0]
    abstract var encodings // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters.encodings|{}encodings[0]
        // Targets: [js]
        abstract fun <get-encodings>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpDecodingParameters> // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [js]
        abstract fun <set-encodings>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpDecodingParameters>) // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters.encodings.<set-encodings>|<set-encodings>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpDecodingParameters>){}[0]

        // Targets: [wasmJs]
        abstract fun <get-encodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpDecodingParameters> // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-encodings>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpDecodingParameters>) // io.ktor.client.webrtc.peer/RTCRtpReceiveParameters.encodings.<set-encodings>|<set-encodings>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpDecodingParameters>){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpSendParameters : io.ktor.client.webrtc.peer/RTCRtpParameters { // io.ktor.client.webrtc.peer/RTCRtpSendParameters|null[0]
    abstract var encodings // io.ktor.client.webrtc.peer/RTCRtpSendParameters.encodings|{}encodings[0]
        // Targets: [js]
        abstract fun <get-encodings>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters> // io.ktor.client.webrtc.peer/RTCRtpSendParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [js]
        abstract fun <set-encodings>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.encodings.<set-encodings>|<set-encodings>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpEncodingParameters>){}[0]

        // Targets: [wasmJs]
        abstract fun <get-encodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters> // io.ktor.client.webrtc.peer/RTCRtpSendParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-encodings>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.encodings.<set-encodings>|<set-encodings>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpEncodingParameters>){}[0]
    abstract var transactionId // io.ktor.client.webrtc.peer/RTCRtpSendParameters.transactionId|{}transactionId[0]
        // Targets: [js]
        abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpSendParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

        // Targets: [js]
        abstract fun <set-transactionId>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.String){}[0]

        // Targets: [wasmJs]
        abstract fun <get-transactionId>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpSendParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-transactionId>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.js.JsString){}[0]
    open var degradationPreference // io.ktor.client.webrtc.peer/RTCRtpSendParameters.degradationPreference|{}degradationPreference[0]
        // Targets: [js]
        open fun <get-degradationPreference>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpSendParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]

        // Targets: [js]
        open fun <set-degradationPreference>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.degradationPreference.<set-degradationPreference>|<set-degradationPreference>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-degradationPreference>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpSendParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]

        // Targets: [wasmJs]
        open fun <set-degradationPreference>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.degradationPreference.<set-degradationPreference>|<set-degradationPreference>(kotlin.js.JsString?){}[0]
    open var priority // io.ktor.client.webrtc.peer/RTCRtpSendParameters.priority|{}priority[0]
        // Targets: [js]
        open fun <get-priority>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpSendParameters.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [js]
        open fun <set-priority>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.priority.<set-priority>|<set-priority>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-priority>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpSendParameters.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [wasmJs]
        open fun <set-priority>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpSendParameters.priority.<set-priority>|<set-priority>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource : io.ktor.client.webrtc.peer/RTCRtpContributingSource { // io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource|null[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCTrackEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.peer/RTCTrackEventInit|null[0]
    abstract var receiver // io.ktor.client.webrtc.peer/RTCTrackEventInit.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.peer/RTCRtpReceiver // io.ktor.client.webrtc.peer/RTCTrackEventInit.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.peer/RTCRtpReceiver) // io.ktor.client.webrtc.peer/RTCTrackEventInit.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.peer.RTCRtpReceiver){}[0]
    abstract var track // io.ktor.client.webrtc.peer/RTCTrackEventInit.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.peer/RTCTrackEventInit.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.peer/RTCTrackEventInit.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transceiver // io.ktor.client.webrtc.peer/RTCTrackEventInit.transceiver|{}transceiver[0]
        abstract fun <get-transceiver>(): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCTrackEventInit.transceiver.<get-transceiver>|<get-transceiver>(){}[0]
        abstract fun <set-transceiver>(io.ktor.client.webrtc.peer/RTCRtpTransceiver) // io.ktor.client.webrtc.peer/RTCTrackEventInit.transceiver.<set-transceiver>|<set-transceiver>(io.ktor.client.webrtc.peer.RTCRtpTransceiver){}[0]
    open var streams // io.ktor.client.webrtc.peer/RTCTrackEventInit.streams|{}streams[0]
        // Targets: [js]
        open fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.peer/RTCTrackEventInit.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [js]
        open fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.peer/RTCTrackEventInit.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>?){}[0]

        // Targets: [wasmJs]
        open fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.peer/RTCTrackEventInit.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [wasmJs]
        open fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.peer/RTCTrackEventInit.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCVideoStats : io.ktor.client.webrtc.peer/RTCMediaStats { // io.ktor.client.webrtc.peer/RTCVideoStats|null[0]
    abstract val frames // io.ktor.client.webrtc.peer/RTCVideoStats.frames|{}frames[0]
        // Targets: [js]
        abstract fun <get-frames>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCVideoStats.frames.<get-frames>|<get-frames>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-frames>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCVideoStats.frames.<get-frames>|<get-frames>(){}[0]
    abstract val framesPerSecond // io.ktor.client.webrtc.peer/RTCVideoStats.framesPerSecond|{}framesPerSecond[0]
        // Targets: [js]
        abstract fun <get-framesPerSecond>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCVideoStats.framesPerSecond.<get-framesPerSecond>|<get-framesPerSecond>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-framesPerSecond>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCVideoStats.framesPerSecond.<get-framesPerSecond>|<get-framesPerSecond>(){}[0]
    abstract val height // io.ktor.client.webrtc.peer/RTCVideoStats.height|{}height[0]
        // Targets: [js]
        abstract fun <get-height>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCVideoStats.height.<get-height>|<get-height>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-height>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCVideoStats.height.<get-height>|<get-height>(){}[0]
    abstract val width // io.ktor.client.webrtc.peer/RTCVideoStats.width|{}width[0]
        // Targets: [js]
        abstract fun <get-width>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCVideoStats.width.<get-width>|<get-width>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-width>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCVideoStats.width.<get-width>|<get-width>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc/JsPeerConnectionConfig // io.ktor.client.webrtc/JsPeerConnectionConfig|null[0]

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDTMFSender : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCDTMFSender|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDTMFSender.<init>|<init>(){}[0]

    final var canInsertDTMF // io.ktor.client.webrtc.peer/RTCDTMFSender.canInsertDTMF|{}canInsertDTMF[0]
        // Targets: [js]
        final fun <get-canInsertDTMF>(): kotlin/Boolean // io.ktor.client.webrtc.peer/RTCDTMFSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]

        // Targets: [js]
        final fun <set-canInsertDTMF>(kotlin/Boolean) // io.ktor.client.webrtc.peer/RTCDTMFSender.canInsertDTMF.<set-canInsertDTMF>|<set-canInsertDTMF>(kotlin.Boolean){}[0]

        // Targets: [wasmJs]
        final fun <get-canInsertDTMF>(): kotlin.js/JsBoolean // io.ktor.client.webrtc.peer/RTCDTMFSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]

        // Targets: [wasmJs]
        final fun <set-canInsertDTMF>(kotlin.js/JsBoolean) // io.ktor.client.webrtc.peer/RTCDTMFSender.canInsertDTMF.<set-canInsertDTMF>|<set-canInsertDTMF>(kotlin.js.JsBoolean){}[0]
    final var ontonechange // io.ktor.client.webrtc.peer/RTCDTMFSender.ontonechange|{}ontonechange[0]
        // Targets: [js]
        final fun <get-ontonechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDTMFSender, io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDTMFSender.ontonechange.<get-ontonechange>|<get-ontonechange>(){}[0]

        // Targets: [js]
        final fun <set-ontonechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDTMFSender, io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDTMFSender.ontonechange.<set-ontonechange>|<set-ontonechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDTMFSender,io.ktor.client.webrtc.peer.RTCDTMFToneChangeEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ontonechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDTMFSender, io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDTMFSender.ontonechange.<get-ontonechange>|<get-ontonechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ontonechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDTMFSender, io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDTMFSender.ontonechange.<set-ontonechange>|<set-ontonechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDTMFSender,io.ktor.client.webrtc.peer.RTCDTMFToneChangeEvent,kotlin.js.JsAny>?){}[0]
    final var toneBuffer // io.ktor.client.webrtc.peer/RTCDTMFSender.toneBuffer|{}toneBuffer[0]
        // Targets: [js]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDTMFSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        // Targets: [js]
        final fun <set-toneBuffer>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDTMFSender.toneBuffer.<set-toneBuffer>|<set-toneBuffer>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-toneBuffer>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDTMFSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        // Targets: [wasmJs]
        final fun <set-toneBuffer>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDTMFSender.toneBuffer.<set-toneBuffer>|<set-toneBuffer>(kotlin.js.JsString){}[0]

    // Targets: [js]
    final fun insertDTMF(kotlin/String, kotlin/Number = ..., kotlin/Number = ...) // io.ktor.client.webrtc.peer/RTCDTMFSender.insertDTMF|insertDTMF(kotlin.String;kotlin.Number;kotlin.Number){}[0]

    // Targets: [wasmJs]
    final fun insertDTMF(kotlin.js/JsString, kotlin.js/JsNumber = ..., kotlin.js/JsNumber = ...) // io.ktor.client.webrtc.peer/RTCDTMFSender.insertDTMF|insertDTMF(kotlin.js.JsString;kotlin.js.JsNumber;kotlin.js.JsNumber){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.<init>|<init>(){}[0]

    final var tone // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.tone|{}tone[0]
        // Targets: [js]
        final fun <get-tone>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [js]
        final fun <set-tone>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.tone.<set-tone>|<set-tone>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-tone>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [wasmJs]
        final fun <set-tone>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDTMFToneChangeEvent.tone.<set-tone>|<set-tone>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDataChannel : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCDataChannel|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDataChannel.<init>|<init>(){}[0]

    final var binaryType // io.ktor.client.webrtc.peer/RTCDataChannel.binaryType|{}binaryType[0]
        // Targets: [js]
        final fun <get-binaryType>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDataChannel.binaryType.<get-binaryType>|<get-binaryType>(){}[0]

        // Targets: [js]
        final fun <set-binaryType>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.binaryType.<set-binaryType>|<set-binaryType>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-binaryType>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDataChannel.binaryType.<get-binaryType>|<get-binaryType>(){}[0]

        // Targets: [wasmJs]
        final fun <set-binaryType>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.binaryType.<set-binaryType>|<set-binaryType>(kotlin.js.JsString){}[0]
    final var bufferedAmount // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmount|{}bufferedAmount[0]
        // Targets: [js]
        final fun <get-bufferedAmount>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]

        // Targets: [js]
        final fun <set-bufferedAmount>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmount.<set-bufferedAmount>|<set-bufferedAmount>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-bufferedAmount>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]

        // Targets: [wasmJs]
        final fun <set-bufferedAmount>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmount.<set-bufferedAmount>|<set-bufferedAmount>(kotlin.js.JsNumber){}[0]
    final var bufferedAmountLowThreshold // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmountLowThreshold|{}bufferedAmountLowThreshold[0]
        // Targets: [js]
        final fun <get-bufferedAmountLowThreshold>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]

        // Targets: [js]
        final fun <set-bufferedAmountLowThreshold>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmountLowThreshold.<set-bufferedAmountLowThreshold>|<set-bufferedAmountLowThreshold>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-bufferedAmountLowThreshold>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]

        // Targets: [wasmJs]
        final fun <set-bufferedAmountLowThreshold>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCDataChannel.bufferedAmountLowThreshold.<set-bufferedAmountLowThreshold>|<set-bufferedAmountLowThreshold>(kotlin.js.JsNumber){}[0]
    final var id // io.ktor.client.webrtc.peer/RTCDataChannel.id|{}id[0]
        // Targets: [js]
        final fun <get-id>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannel.id.<get-id>|<get-id>(){}[0]

        // Targets: [js]
        final fun <set-id>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannel.id.<set-id>|<set-id>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-id>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannel.id.<get-id>|<get-id>(){}[0]

        // Targets: [wasmJs]
        final fun <set-id>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannel.id.<set-id>|<set-id>(kotlin.js.JsNumber?){}[0]
    final var label // io.ktor.client.webrtc.peer/RTCDataChannel.label|{}label[0]
        // Targets: [js]
        final fun <get-label>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDataChannel.label.<get-label>|<get-label>(){}[0]

        // Targets: [js]
        final fun <set-label>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.label.<set-label>|<set-label>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-label>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDataChannel.label.<get-label>|<get-label>(){}[0]

        // Targets: [wasmJs]
        final fun <set-label>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.label.<set-label>|<set-label>(kotlin.js.JsString){}[0]
    final var maxPacketLifeTime // io.ktor.client.webrtc.peer/RTCDataChannel.maxPacketLifeTime|{}maxPacketLifeTime[0]
        // Targets: [js]
        final fun <get-maxPacketLifeTime>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]

        // Targets: [js]
        final fun <set-maxPacketLifeTime>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannel.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxPacketLifeTime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxPacketLifeTime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannel.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.js.JsNumber?){}[0]
    final var maxRetransmits // io.ktor.client.webrtc.peer/RTCDataChannel.maxRetransmits|{}maxRetransmits[0]
        // Targets: [js]
        final fun <get-maxRetransmits>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]

        // Targets: [js]
        final fun <set-maxRetransmits>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannel.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxRetransmits>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxRetransmits>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannel.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.js.JsNumber?){}[0]
    final var negotiated // io.ktor.client.webrtc.peer/RTCDataChannel.negotiated|{}negotiated[0]
        final fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc.peer/RTCDataChannel.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        final fun <set-negotiated>(kotlin/Boolean) // io.ktor.client.webrtc.peer/RTCDataChannel.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean){}[0]
    final var onbufferedamountlow // io.ktor.client.webrtc.peer/RTCDataChannel.onbufferedamountlow|{}onbufferedamountlow[0]
        // Targets: [js]
        final fun <get-onbufferedamountlow>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDataChannel.onbufferedamountlow.<get-onbufferedamountlow>|<get-onbufferedamountlow>(){}[0]

        // Targets: [js]
        final fun <set-onbufferedamountlow>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onbufferedamountlow.<set-onbufferedamountlow>|<set-onbufferedamountlow>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onbufferedamountlow>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDataChannel.onbufferedamountlow.<get-onbufferedamountlow>|<get-onbufferedamountlow>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onbufferedamountlow>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onbufferedamountlow.<set-onbufferedamountlow>|<set-onbufferedamountlow>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onclose // io.ktor.client.webrtc.peer/RTCDataChannel.onclose|{}onclose[0]
        // Targets: [js]
        final fun <get-onclose>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDataChannel.onclose.<get-onclose>|<get-onclose>(){}[0]

        // Targets: [js]
        final fun <set-onclose>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onclose.<set-onclose>|<set-onclose>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onclose>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDataChannel.onclose.<get-onclose>|<get-onclose>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onclose>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onclose.<set-onclose>|<set-onclose>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onerror // io.ktor.client.webrtc.peer/RTCDataChannel.onerror|{}onerror[0]
        // Targets: [js]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDataChannel.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [js]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,io.ktor.client.webrtc.peer.RTCErrorEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDataChannel.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,io.ktor.client.webrtc.peer.RTCErrorEvent,kotlin.js.JsAny>?){}[0]
    final var onmessage // io.ktor.client.webrtc.peer/RTCDataChannel.onmessage|{}onmessage[0]
        // Targets: [js]
        final fun <get-onmessage>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom/MessageEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDataChannel.onmessage.<get-onmessage>|<get-onmessage>(){}[0]

        // Targets: [js]
        final fun <set-onmessage>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom/MessageEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onmessage.<set-onmessage>|<set-onmessage>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.MessageEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onmessage>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom/MessageEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDataChannel.onmessage.<get-onmessage>|<get-onmessage>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onmessage>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom/MessageEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onmessage.<set-onmessage>|<set-onmessage>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.MessageEvent,kotlin.js.JsAny>?){}[0]
    final var onopen // io.ktor.client.webrtc.peer/RTCDataChannel.onopen|{}onopen[0]
        // Targets: [js]
        final fun <get-onopen>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDataChannel.onopen.<get-onopen>|<get-onopen>(){}[0]

        // Targets: [js]
        final fun <set-onopen>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onopen.<set-onopen>|<set-onopen>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onopen>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDataChannel.onopen.<get-onopen>|<get-onopen>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onopen>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDataChannel, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDataChannel.onopen.<set-onopen>|<set-onopen>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDataChannel,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var ordered // io.ktor.client.webrtc.peer/RTCDataChannel.ordered|{}ordered[0]
        final fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc.peer/RTCDataChannel.ordered.<get-ordered>|<get-ordered>(){}[0]
        final fun <set-ordered>(kotlin/Boolean) // io.ktor.client.webrtc.peer/RTCDataChannel.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean){}[0]
    final var priority // io.ktor.client.webrtc.peer/RTCDataChannel.priority|{}priority[0]
        // Targets: [js]
        final fun <get-priority>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDataChannel.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [js]
        final fun <set-priority>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.priority.<set-priority>|<set-priority>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-priority>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDataChannel.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [wasmJs]
        final fun <set-priority>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.priority.<set-priority>|<set-priority>(kotlin.js.JsString){}[0]
    final var protocol // io.ktor.client.webrtc.peer/RTCDataChannel.protocol|{}protocol[0]
        // Targets: [js]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]

        // Targets: [js]
        final fun <set-protocol>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.protocol.<set-protocol>|<set-protocol>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-protocol>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]

        // Targets: [wasmJs]
        final fun <set-protocol>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString){}[0]
    final var readyState // io.ktor.client.webrtc.peer/RTCDataChannel.readyState|{}readyState[0]
        // Targets: [js]
        final fun <get-readyState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDataChannel.readyState.<get-readyState>|<get-readyState>(){}[0]

        // Targets: [js]
        final fun <set-readyState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.readyState.<set-readyState>|<set-readyState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-readyState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDataChannel.readyState.<get-readyState>|<get-readyState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-readyState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.readyState.<set-readyState>|<set-readyState>(kotlin.js.JsString){}[0]

    final fun close() // io.ktor.client.webrtc.peer/RTCDataChannel.close|close(){}[0]
    final fun send(org.khronos.webgl/ArrayBuffer) // io.ktor.client.webrtc.peer/RTCDataChannel.send|send(org.khronos.webgl.ArrayBuffer){}[0]
    final fun send(org.khronos.webgl/ArrayBufferView) // io.ktor.client.webrtc.peer/RTCDataChannel.send|send(org.khronos.webgl.ArrayBufferView){}[0]
    final fun send(org.w3c.files/Blob) // io.ktor.client.webrtc.peer/RTCDataChannel.send|send(org.w3c.files.Blob){}[0]

    // Targets: [js]
    final fun send(kotlin/String) // io.ktor.client.webrtc.peer/RTCDataChannel.send|send(kotlin.String){}[0]

    // Targets: [wasmJs]
    final fun send(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDataChannel.send|send(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDataChannelEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCDataChannelEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDataChannelEvent.<init>|<init>(){}[0]

    final var channel // io.ktor.client.webrtc.peer/RTCDataChannelEvent.channel|{}channel[0]
        final fun <get-channel>(): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCDataChannelEvent.channel.<get-channel>|<get-channel>(){}[0]
        final fun <set-channel>(io.ktor.client.webrtc.peer/RTCDataChannel) // io.ktor.client.webrtc.peer/RTCDataChannelEvent.channel.<set-channel>|<set-channel>(io.ktor.client.webrtc.peer.RTCDataChannel){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDtlsTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCDtlsTransport|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDtlsTransport.<init>|<init>(){}[0]

    final var iceTransport // io.ktor.client.webrtc.peer/RTCDtlsTransport.iceTransport|{}iceTransport[0]
        final fun <get-iceTransport>(): io.ktor.client.webrtc.peer/RTCIceTransport // io.ktor.client.webrtc.peer/RTCDtlsTransport.iceTransport.<get-iceTransport>|<get-iceTransport>(){}[0]
        final fun <set-iceTransport>(io.ktor.client.webrtc.peer/RTCIceTransport) // io.ktor.client.webrtc.peer/RTCDtlsTransport.iceTransport.<set-iceTransport>|<set-iceTransport>(io.ktor.client.webrtc.peer.RTCIceTransport){}[0]
    final var onerror // io.ktor.client.webrtc.peer/RTCDtlsTransport.onerror|{}onerror[0]
        // Targets: [js]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDtlsTransport.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [js]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDtlsTransport.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDtlsTransport,io.ktor.client.webrtc.peer.RTCErrorEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDtlsTransport.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, io.ktor.client.webrtc.peer/RTCErrorEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDtlsTransport.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDtlsTransport,io.ktor.client.webrtc.peer.RTCErrorEvent,kotlin.js.JsAny>?){}[0]
    final var onstatechange // io.ktor.client.webrtc.peer/RTCDtlsTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCDtlsTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCDtlsTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDtlsTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCDtlsTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCDtlsTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCDtlsTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var state // io.ktor.client.webrtc.peer/RTCDtlsTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDtlsTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDtlsTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDtlsTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDtlsTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]

    // Targets: [js]
    final fun getRemoteCertificates(): kotlin/Array<org.khronos.webgl/ArrayBuffer> // io.ktor.client.webrtc.peer/RTCDtlsTransport.getRemoteCertificates|getRemoteCertificates(){}[0]

    // Targets: [wasmJs]
    final fun getRemoteCertificates(): kotlin.js/JsArray<org.khronos.webgl/ArrayBuffer> // io.ktor.client.webrtc.peer/RTCDtlsTransport.getRemoteCertificates|getRemoteCertificates(){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.<init>|<init>(){}[0]

    final var state // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCDtlsTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCError : io.ktor.client.webrtc.peer/DOMException { // io.ktor.client.webrtc.peer/RTCError|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCError.<init>|<init>(){}[0]

    final var errorDetail // io.ktor.client.webrtc.peer/RTCError.errorDetail|{}errorDetail[0]
        // Targets: [js]
        final fun <get-errorDetail>(): kotlin/String // io.ktor.client.webrtc.peer/RTCError.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]

        // Targets: [js]
        final fun <set-errorDetail>(kotlin/String) // io.ktor.client.webrtc.peer/RTCError.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-errorDetail>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCError.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorDetail>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCError.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.js.JsString){}[0]
    final var httpRequestStatusCode // io.ktor.client.webrtc.peer/RTCError.httpRequestStatusCode|{}httpRequestStatusCode[0]
        // Targets: [js]
        final fun <get-httpRequestStatusCode>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCError.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]

        // Targets: [js]
        final fun <set-httpRequestStatusCode>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCError.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-httpRequestStatusCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCError.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-httpRequestStatusCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCError.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.js.JsNumber?){}[0]
    final var receivedAlert // io.ktor.client.webrtc.peer/RTCError.receivedAlert|{}receivedAlert[0]
        // Targets: [js]
        final fun <get-receivedAlert>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCError.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]

        // Targets: [js]
        final fun <set-receivedAlert>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCError.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-receivedAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCError.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]

        // Targets: [wasmJs]
        final fun <set-receivedAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCError.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.js.JsNumber?){}[0]
    final var sctpCauseCode // io.ktor.client.webrtc.peer/RTCError.sctpCauseCode|{}sctpCauseCode[0]
        // Targets: [js]
        final fun <get-sctpCauseCode>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCError.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]

        // Targets: [js]
        final fun <set-sctpCauseCode>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCError.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sctpCauseCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCError.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sctpCauseCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCError.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.js.JsNumber?){}[0]
    final var sdpLineNumber // io.ktor.client.webrtc.peer/RTCError.sdpLineNumber|{}sdpLineNumber[0]
        // Targets: [js]
        final fun <get-sdpLineNumber>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCError.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]

        // Targets: [js]
        final fun <set-sdpLineNumber>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCError.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sdpLineNumber>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCError.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sdpLineNumber>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCError.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.js.JsNumber?){}[0]
    final var sentAlert // io.ktor.client.webrtc.peer/RTCError.sentAlert|{}sentAlert[0]
        // Targets: [js]
        final fun <get-sentAlert>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCError.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]

        // Targets: [js]
        final fun <set-sentAlert>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCError.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sentAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCError.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sentAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCError.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.js.JsNumber?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCErrorEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCErrorEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCErrorEvent.<init>|<init>(){}[0]

    final var error // io.ktor.client.webrtc.peer/RTCErrorEvent.error|{}error[0]
        final fun <get-error>(): io.ktor.client.webrtc.peer/RTCError // io.ktor.client.webrtc.peer/RTCErrorEvent.error.<get-error>|<get-error>(){}[0]
        final fun <set-error>(io.ktor.client.webrtc.peer/RTCError) // io.ktor.client.webrtc.peer/RTCErrorEvent.error.<set-error>|<set-error>(io.ktor.client.webrtc.peer.RTCError){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent.<init>|<init>(){}[0]

    final var pair // io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent.pair|{}pair[0]
        final fun <get-pair>(): io.ktor.client.webrtc.peer/RTCIceCandidatePair // io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent.pair.<get-pair>|<get-pair>(){}[0]
        final fun <set-pair>(io.ktor.client.webrtc.peer/RTCIceCandidatePair) // io.ktor.client.webrtc.peer/RTCIceCandidatePairChangedEvent.pair.<set-pair>|<set-pair>(io.ktor.client.webrtc.peer.RTCIceCandidatePair){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCIceGathererEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCIceGathererEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIceGathererEvent.<init>|<init>(){}[0]

    final var candidate // io.ktor.client.webrtc.peer/RTCIceGathererEvent.candidate|{}candidate[0]
        // Targets: [js]
        final fun <get-candidate>(): dynamic // io.ktor.client.webrtc.peer/RTCIceGathererEvent.candidate.<get-candidate>|<get-candidate>(){}[0]

        // Targets: [js]
        final fun <set-candidate>(dynamic) // io.ktor.client.webrtc.peer/RTCIceGathererEvent.candidate.<set-candidate>|<set-candidate>(<dynamic>){}[0]

        // Targets: [wasmJs]
        final fun <get-candidate>(): kotlin.js/JsAny? // io.ktor.client.webrtc.peer/RTCIceGathererEvent.candidate.<get-candidate>|<get-candidate>(){}[0]

        // Targets: [wasmJs]
        final fun <set-candidate>(kotlin.js/JsAny?) // io.ktor.client.webrtc.peer/RTCIceGathererEvent.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsAny?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCIceTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCIceTransport|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIceTransport.<init>|<init>(){}[0]

    final var component // io.ktor.client.webrtc.peer/RTCIceTransport.component|{}component[0]
        // Targets: [js]
        final fun <get-component>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceTransport.component.<get-component>|<get-component>(){}[0]

        // Targets: [js]
        final fun <set-component>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceTransport.component.<set-component>|<set-component>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-component>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceTransport.component.<get-component>|<get-component>(){}[0]

        // Targets: [wasmJs]
        final fun <set-component>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceTransport.component.<set-component>|<set-component>(kotlin.js.JsString){}[0]
    final var gatheringState // io.ktor.client.webrtc.peer/RTCIceTransport.gatheringState|{}gatheringState[0]
        // Targets: [js]
        final fun <get-gatheringState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceTransport.gatheringState.<get-gatheringState>|<get-gatheringState>(){}[0]

        // Targets: [js]
        final fun <set-gatheringState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceTransport.gatheringState.<set-gatheringState>|<set-gatheringState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-gatheringState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceTransport.gatheringState.<get-gatheringState>|<get-gatheringState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-gatheringState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceTransport.gatheringState.<set-gatheringState>|<set-gatheringState>(kotlin.js.JsString){}[0]
    final var ongatheringstatechange // io.ktor.client.webrtc.peer/RTCIceTransport.ongatheringstatechange|{}ongatheringstatechange[0]
        // Targets: [js]
        final fun <get-ongatheringstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCIceTransport.ongatheringstatechange.<get-ongatheringstatechange>|<get-ongatheringstatechange>(){}[0]

        // Targets: [js]
        final fun <set-ongatheringstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCIceTransport.ongatheringstatechange.<set-ongatheringstatechange>|<set-ongatheringstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ongatheringstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCIceTransport.ongatheringstatechange.<get-ongatheringstatechange>|<get-ongatheringstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ongatheringstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCIceTransport.ongatheringstatechange.<set-ongatheringstatechange>|<set-ongatheringstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onselectedcandidatepairchange // io.ktor.client.webrtc.peer/RTCIceTransport.onselectedcandidatepairchange|{}onselectedcandidatepairchange[0]
        // Targets: [js]
        final fun <get-onselectedcandidatepairchange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCIceTransport.onselectedcandidatepairchange.<get-onselectedcandidatepairchange>|<get-onselectedcandidatepairchange>(){}[0]

        // Targets: [js]
        final fun <set-onselectedcandidatepairchange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCIceTransport.onselectedcandidatepairchange.<set-onselectedcandidatepairchange>|<set-onselectedcandidatepairchange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onselectedcandidatepairchange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCIceTransport.onselectedcandidatepairchange.<get-onselectedcandidatepairchange>|<get-onselectedcandidatepairchange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onselectedcandidatepairchange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCIceTransport.onselectedcandidatepairchange.<set-onselectedcandidatepairchange>|<set-onselectedcandidatepairchange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onstatechange // io.ktor.client.webrtc.peer/RTCIceTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCIceTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCIceTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCIceTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCIceTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var role // io.ktor.client.webrtc.peer/RTCIceTransport.role|{}role[0]
        // Targets: [js]
        final fun <get-role>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceTransport.role.<get-role>|<get-role>(){}[0]

        // Targets: [js]
        final fun <set-role>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceTransport.role.<set-role>|<set-role>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-role>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceTransport.role.<get-role>|<get-role>(){}[0]

        // Targets: [wasmJs]
        final fun <set-role>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceTransport.role.<set-role>|<set-role>(kotlin.js.JsString){}[0]
    final var state // io.ktor.client.webrtc.peer/RTCIceTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]

    final fun getLocalParameters(): io.ktor.client.webrtc.peer/RTCIceParameters? // io.ktor.client.webrtc.peer/RTCIceTransport.getLocalParameters|getLocalParameters(){}[0]
    final fun getRemoteParameters(): io.ktor.client.webrtc.peer/RTCIceParameters? // io.ktor.client.webrtc.peer/RTCIceTransport.getRemoteParameters|getRemoteParameters(){}[0]
    final fun getSelectedCandidatePair(): io.ktor.client.webrtc.peer/RTCIceCandidatePair? // io.ktor.client.webrtc.peer/RTCIceTransport.getSelectedCandidatePair|getSelectedCandidatePair(){}[0]

    // Targets: [js]
    final fun getLocalCandidates(): kotlin/Array<io.ktor.client.webrtc.peer/RTCIceCandidate> // io.ktor.client.webrtc.peer/RTCIceTransport.getLocalCandidates|getLocalCandidates(){}[0]

    // Targets: [js]
    final fun getRemoteCandidates(): kotlin/Array<io.ktor.client.webrtc.peer/RTCIceCandidate> // io.ktor.client.webrtc.peer/RTCIceTransport.getRemoteCandidates|getRemoteCandidates(){}[0]

    // Targets: [wasmJs]
    final fun getLocalCandidates(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceCandidate> // io.ktor.client.webrtc.peer/RTCIceTransport.getLocalCandidates|getLocalCandidates(){}[0]

    // Targets: [wasmJs]
    final fun getRemoteCandidates(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceCandidate> // io.ktor.client.webrtc.peer/RTCIceTransport.getRemoteCandidates|getRemoteCandidates(){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.<init>|<init>(){}[0]

    final var state // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCPeerConnection : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCConfiguration) // io.ktor.client.webrtc.peer/RTCPeerConnection.<init>|<init>(io.ktor.client.webrtc.peer.RTCConfiguration){}[0]

    final var canTrickleIceCandidates // io.ktor.client.webrtc.peer/RTCPeerConnection.canTrickleIceCandidates|{}canTrickleIceCandidates[0]
        final fun <get-canTrickleIceCandidates>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCPeerConnection.canTrickleIceCandidates.<get-canTrickleIceCandidates>|<get-canTrickleIceCandidates>(){}[0]
        final fun <set-canTrickleIceCandidates>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCPeerConnection.canTrickleIceCandidates.<set-canTrickleIceCandidates>|<set-canTrickleIceCandidates>(kotlin.Boolean?){}[0]
    final var connectionState // io.ktor.client.webrtc.peer/RTCPeerConnection.connectionState|{}connectionState[0]
        // Targets: [js]
        final fun <get-connectionState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnection.connectionState.<get-connectionState>|<get-connectionState>(){}[0]

        // Targets: [js]
        final fun <set-connectionState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnection.connectionState.<set-connectionState>|<set-connectionState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-connectionState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnection.connectionState.<get-connectionState>|<get-connectionState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-connectionState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnection.connectionState.<set-connectionState>|<set-connectionState>(kotlin.js.JsString){}[0]
    final var currentLocalDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.currentLocalDescription|{}currentLocalDescription[0]
        final fun <get-currentLocalDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.currentLocalDescription.<get-currentLocalDescription>|<get-currentLocalDescription>(){}[0]
        final fun <set-currentLocalDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.currentLocalDescription.<set-currentLocalDescription>|<set-currentLocalDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var currentRemoteDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.currentRemoteDescription|{}currentRemoteDescription[0]
        final fun <get-currentRemoteDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.currentRemoteDescription.<get-currentRemoteDescription>|<get-currentRemoteDescription>(){}[0]
        final fun <set-currentRemoteDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.currentRemoteDescription.<set-currentRemoteDescription>|<set-currentRemoteDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var iceConnectionState // io.ktor.client.webrtc.peer/RTCPeerConnection.iceConnectionState|{}iceConnectionState[0]
        // Targets: [js]
        final fun <get-iceConnectionState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnection.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]

        // Targets: [js]
        final fun <set-iceConnectionState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnection.iceConnectionState.<set-iceConnectionState>|<set-iceConnectionState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-iceConnectionState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnection.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-iceConnectionState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnection.iceConnectionState.<set-iceConnectionState>|<set-iceConnectionState>(kotlin.js.JsString){}[0]
    final var iceGatheringState // io.ktor.client.webrtc.peer/RTCPeerConnection.iceGatheringState|{}iceGatheringState[0]
        // Targets: [js]
        final fun <get-iceGatheringState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnection.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]

        // Targets: [js]
        final fun <set-iceGatheringState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnection.iceGatheringState.<set-iceGatheringState>|<set-iceGatheringState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-iceGatheringState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnection.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-iceGatheringState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnection.iceGatheringState.<set-iceGatheringState>|<set-iceGatheringState>(kotlin.js.JsString){}[0]
    final var idpErrorInfo // io.ktor.client.webrtc.peer/RTCPeerConnection.idpErrorInfo|{}idpErrorInfo[0]
        // Targets: [js]
        final fun <get-idpErrorInfo>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnection.idpErrorInfo.<get-idpErrorInfo>|<get-idpErrorInfo>(){}[0]

        // Targets: [js]
        final fun <set-idpErrorInfo>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnection.idpErrorInfo.<set-idpErrorInfo>|<set-idpErrorInfo>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-idpErrorInfo>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnection.idpErrorInfo.<get-idpErrorInfo>|<get-idpErrorInfo>(){}[0]

        // Targets: [wasmJs]
        final fun <set-idpErrorInfo>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnection.idpErrorInfo.<set-idpErrorInfo>|<set-idpErrorInfo>(kotlin.js.JsString?){}[0]
    final var idpLoginUrl // io.ktor.client.webrtc.peer/RTCPeerConnection.idpLoginUrl|{}idpLoginUrl[0]
        // Targets: [js]
        final fun <get-idpLoginUrl>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnection.idpLoginUrl.<get-idpLoginUrl>|<get-idpLoginUrl>(){}[0]

        // Targets: [js]
        final fun <set-idpLoginUrl>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnection.idpLoginUrl.<set-idpLoginUrl>|<set-idpLoginUrl>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-idpLoginUrl>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnection.idpLoginUrl.<get-idpLoginUrl>|<get-idpLoginUrl>(){}[0]

        // Targets: [wasmJs]
        final fun <set-idpLoginUrl>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnection.idpLoginUrl.<set-idpLoginUrl>|<set-idpLoginUrl>(kotlin.js.JsString?){}[0]
    final var localDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.localDescription|{}localDescription[0]
        final fun <get-localDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.localDescription.<get-localDescription>|<get-localDescription>(){}[0]
        final fun <set-localDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.localDescription.<set-localDescription>|<set-localDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var onconnectionstatechange // io.ktor.client.webrtc.peer/RTCPeerConnection.onconnectionstatechange|{}onconnectionstatechange[0]
        final fun <get-onconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onconnectionstatechange.<get-onconnectionstatechange>|<get-onconnectionstatechange>(){}[0]
        final fun <set-onconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onconnectionstatechange.<set-onconnectionstatechange>|<set-onconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var ondatachannel // io.ktor.client.webrtc.peer/RTCPeerConnection.ondatachannel|{}ondatachannel[0]
        // Targets: [js]
        final fun <get-ondatachannel>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCDataChannelEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.ondatachannel.<get-ondatachannel>|<get-ondatachannel>(){}[0]

        // Targets: [js]
        final fun <set-ondatachannel>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCDataChannelEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.ondatachannel.<set-ondatachannel>|<set-ondatachannel>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCPeerConnection,io.ktor.client.webrtc.peer.RTCDataChannelEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ondatachannel>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCDataChannelEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCPeerConnection.ondatachannel.<get-ondatachannel>|<get-ondatachannel>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ondatachannel>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCDataChannelEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.ondatachannel.<set-ondatachannel>|<set-ondatachannel>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCPeerConnection,io.ktor.client.webrtc.peer.RTCDataChannelEvent,kotlin.js.JsAny>?){}[0]
    final var onicecandidate // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidate|{}onicecandidate[0]
        final fun <get-onicecandidate>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidate.<get-onicecandidate>|<get-onicecandidate>(){}[0]
        final fun <set-onicecandidate>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidate.<set-onicecandidate>|<set-onicecandidate>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCPeerConnectionIceEvent,kotlin.Unit>?){}[0]
    final var onicecandidateerror // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidateerror|{}onicecandidateerror[0]
        // Targets: [js]
        final fun <get-onicecandidateerror>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidateerror.<get-onicecandidateerror>|<get-onicecandidateerror>(){}[0]

        // Targets: [js]
        final fun <set-onicecandidateerror>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidateerror.<set-onicecandidateerror>|<set-onicecandidateerror>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCPeerConnectionIceErrorEvent,kotlin.Unit>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onicecandidateerror>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidateerror.<get-onicecandidateerror>|<get-onicecandidateerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onicecandidateerror>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCPeerConnection, io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onicecandidateerror.<set-onicecandidateerror>|<set-onicecandidateerror>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCPeerConnection,io.ktor.client.webrtc.peer.RTCPeerConnectionIceErrorEvent,kotlin.Unit>?){}[0]
    final var oniceconnectionstatechange // io.ktor.client.webrtc.peer/RTCPeerConnection.oniceconnectionstatechange|{}oniceconnectionstatechange[0]
        // Targets: [js]
        final fun <get-oniceconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.oniceconnectionstatechange.<get-oniceconnectionstatechange>|<get-oniceconnectionstatechange>(){}[0]

        // Targets: [js]
        final fun <set-oniceconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.oniceconnectionstatechange.<set-oniceconnectionstatechange>|<set-oniceconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-oniceconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.oniceconnectionstatechange.<get-oniceconnectionstatechange>|<get-oniceconnectionstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-oniceconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.oniceconnectionstatechange.<set-oniceconnectionstatechange>|<set-oniceconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onicegatheringstatechange // io.ktor.client.webrtc.peer/RTCPeerConnection.onicegatheringstatechange|{}onicegatheringstatechange[0]
        // Targets: [js]
        final fun <get-onicegatheringstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onicegatheringstatechange.<get-onicegatheringstatechange>|<get-onicegatheringstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onicegatheringstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onicegatheringstatechange.<set-onicegatheringstatechange>|<set-onicegatheringstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onicegatheringstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onicegatheringstatechange.<get-onicegatheringstatechange>|<get-onicegatheringstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onicegatheringstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onicegatheringstatechange.<set-onicegatheringstatechange>|<set-onicegatheringstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onnegotiationneeded // io.ktor.client.webrtc.peer/RTCPeerConnection.onnegotiationneeded|{}onnegotiationneeded[0]
        // Targets: [js]
        final fun <get-onnegotiationneeded>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onnegotiationneeded.<get-onnegotiationneeded>|<get-onnegotiationneeded>(){}[0]

        // Targets: [js]
        final fun <set-onnegotiationneeded>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onnegotiationneeded.<set-onnegotiationneeded>|<set-onnegotiationneeded>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onnegotiationneeded>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onnegotiationneeded.<get-onnegotiationneeded>|<get-onnegotiationneeded>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onnegotiationneeded>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onnegotiationneeded.<set-onnegotiationneeded>|<set-onnegotiationneeded>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onsignalingstatechange // io.ktor.client.webrtc.peer/RTCPeerConnection.onsignalingstatechange|{}onsignalingstatechange[0]
        // Targets: [js]
        final fun <get-onsignalingstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onsignalingstatechange.<get-onsignalingstatechange>|<get-onsignalingstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onsignalingstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onsignalingstatechange.<set-onsignalingstatechange>|<set-onsignalingstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onsignalingstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onsignalingstatechange.<get-onsignalingstatechange>|<get-onsignalingstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onsignalingstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onsignalingstatechange.<set-onsignalingstatechange>|<set-onsignalingstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onstatsended // io.ktor.client.webrtc.peer/RTCPeerConnection.onstatsended|{}onstatsended[0]
        // Targets: [js]
        final fun <get-onstatsended>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onstatsended.<get-onstatsended>|<get-onstatsended>(){}[0]

        // Targets: [js]
        final fun <set-onstatsended>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onstatsended.<set-onstatsended>|<set-onstatsended>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCStatsEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatsended>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsEvent, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.onstatsended.<get-onstatsended>|<get-onstatsended>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatsended>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsEvent, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.onstatsended.<set-onstatsended>|<set-onstatsended>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCStatsEvent,kotlin.Unit>?){}[0]
    final var ontrack // io.ktor.client.webrtc.peer/RTCPeerConnection.ontrack|{}ontrack[0]
        // Targets: [js]
        final fun <get-ontrack>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCTrackEvent, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCPeerConnection.ontrack.<get-ontrack>|<get-ontrack>(){}[0]

        // Targets: [js]
        final fun <set-ontrack>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCTrackEvent, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.ontrack.<set-ontrack>|<set-ontrack>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCTrackEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ontrack>(): kotlin/Function1<io.ktor.client.webrtc.peer/RTCTrackEvent, kotlin/Unit>? // io.ktor.client.webrtc.peer/RTCPeerConnection.ontrack.<get-ontrack>|<get-ontrack>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ontrack>(kotlin/Function1<io.ktor.client.webrtc.peer/RTCTrackEvent, kotlin/Unit>?) // io.ktor.client.webrtc.peer/RTCPeerConnection.ontrack.<set-ontrack>|<set-ontrack>(kotlin.Function1<io.ktor.client.webrtc.peer.RTCTrackEvent,kotlin.Unit>?){}[0]
    final var peerIdentity // io.ktor.client.webrtc.peer/RTCPeerConnection.peerIdentity|{}peerIdentity[0]
        final fun <get-peerIdentity>(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCIdentityAssertion> // io.ktor.client.webrtc.peer/RTCPeerConnection.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        final fun <set-peerIdentity>(kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCIdentityAssertion>) // io.ktor.client.webrtc.peer/RTCPeerConnection.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.Promise<io.ktor.client.webrtc.peer.RTCIdentityAssertion>){}[0]
    final var pendingLocalDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingLocalDescription|{}pendingLocalDescription[0]
        final fun <get-pendingLocalDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingLocalDescription.<get-pendingLocalDescription>|<get-pendingLocalDescription>(){}[0]
        final fun <set-pendingLocalDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingLocalDescription.<set-pendingLocalDescription>|<set-pendingLocalDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var pendingRemoteDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingRemoteDescription|{}pendingRemoteDescription[0]
        final fun <get-pendingRemoteDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingRemoteDescription.<get-pendingRemoteDescription>|<get-pendingRemoteDescription>(){}[0]
        final fun <set-pendingRemoteDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.pendingRemoteDescription.<set-pendingRemoteDescription>|<set-pendingRemoteDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var remoteDescription // io.ktor.client.webrtc.peer/RTCPeerConnection.remoteDescription|{}remoteDescription[0]
        final fun <get-remoteDescription>(): io.ktor.client.webrtc.peer/RTCSessionDescription? // io.ktor.client.webrtc.peer/RTCPeerConnection.remoteDescription.<get-remoteDescription>|<get-remoteDescription>(){}[0]
        final fun <set-remoteDescription>(io.ktor.client.webrtc.peer/RTCSessionDescription?) // io.ktor.client.webrtc.peer/RTCPeerConnection.remoteDescription.<set-remoteDescription>|<set-remoteDescription>(io.ktor.client.webrtc.peer.RTCSessionDescription?){}[0]
    final var sctp // io.ktor.client.webrtc.peer/RTCPeerConnection.sctp|{}sctp[0]
        final fun <get-sctp>(): io.ktor.client.webrtc.peer/RTCSctpTransport? // io.ktor.client.webrtc.peer/RTCPeerConnection.sctp.<get-sctp>|<get-sctp>(){}[0]
        final fun <set-sctp>(io.ktor.client.webrtc.peer/RTCSctpTransport?) // io.ktor.client.webrtc.peer/RTCPeerConnection.sctp.<set-sctp>|<set-sctp>(io.ktor.client.webrtc.peer.RTCSctpTransport?){}[0]
    final var signalingState // io.ktor.client.webrtc.peer/RTCPeerConnection.signalingState|{}signalingState[0]
        // Targets: [js]
        final fun <get-signalingState>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnection.signalingState.<get-signalingState>|<get-signalingState>(){}[0]

        // Targets: [js]
        final fun <set-signalingState>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnection.signalingState.<set-signalingState>|<set-signalingState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-signalingState>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnection.signalingState.<get-signalingState>|<get-signalingState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-signalingState>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnection.signalingState.<set-signalingState>|<set-signalingState>(kotlin.js.JsString){}[0]

    final fun addTrack(org.w3c.dom.mediacapture/MediaStreamTrack, kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...): io.ktor.client.webrtc.peer/RTCRtpSender // io.ktor.client.webrtc.peer/RTCPeerConnection.addTrack|addTrack(org.w3c.dom.mediacapture.MediaStreamTrack;kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
    final fun addTransceiver(org.w3c.dom.mediacapture/MediaStreamTrack): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    final fun addTransceiver(org.w3c.dom.mediacapture/MediaStreamTrack, io.ktor.client.webrtc.peer/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(org.w3c.dom.mediacapture.MediaStreamTrack;io.ktor.client.webrtc.peer.RTCRtpTransceiverInit){}[0]
    final fun close() // io.ktor.client.webrtc.peer/RTCPeerConnection.close|close(){}[0]
    final fun createAnswer(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createAnswer|createAnswer(){}[0]
    final fun createAnswer(io.ktor.client.webrtc.peer/RTCAnswerOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createAnswer|createAnswer(io.ktor.client.webrtc.peer.RTCAnswerOptions){}[0]
    final fun createAnswer(io.ktor.client.webrtc.peer/RTCOfferOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createAnswer|createAnswer(io.ktor.client.webrtc.peer.RTCOfferOptions){}[0]
    final fun createOffer(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(){}[0]
    final fun createOffer(io.ktor.client.webrtc.peer/RTCOfferOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(io.ktor.client.webrtc.peer.RTCOfferOptions){}[0]
    final fun getConfiguration(): io.ktor.client.webrtc.peer/RTCConfiguration // io.ktor.client.webrtc.peer/RTCPeerConnection.getConfiguration|getConfiguration(){}[0]
    final fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCPeerConnection.getStats|getStats(){}[0]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack? = ...): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    final fun removeTrack(io.ktor.client.webrtc.peer/RTCRtpSender) // io.ktor.client.webrtc.peer/RTCPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.peer.RTCRtpSender){}[0]
    final fun restartIce() // io.ktor.client.webrtc.peer/RTCPeerConnection.restartIce|restartIce(){}[0]
    final fun setConfiguration(io.ktor.client.webrtc.peer/RTCConfiguration) // io.ktor.client.webrtc.peer/RTCPeerConnection.setConfiguration|setConfiguration(io.ktor.client.webrtc.peer.RTCConfiguration){}[0]

    // Targets: [js]
    final fun addIceCandidate(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidate = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidate){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidate, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidate;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidateInit = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidateInit){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidateInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidateInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun addTransceiver(kotlin/String): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.String){}[0]

    // Targets: [js]
    final fun addTransceiver(kotlin/String, io.ktor.client.webrtc.peer/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.String;io.ktor.client.webrtc.peer.RTCRtpTransceiverInit){}[0]

    // Targets: [js]
    final fun createAnswer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createAnswer|createAnswer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String, io.ktor.client.webrtc.peer/RTCDataChannelInit = ...): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String;io.ktor.client.webrtc.peer.RTCDataChannelInit){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String?): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String?){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String?, io.ktor.client.webrtc.peer/RTCDataChannelInit = ...): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String?;io.ktor.client.webrtc.peer.RTCDataChannelInit){}[0]

    // Targets: [js]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>, io.ktor.client.webrtc.peer/RTCOfferOptions = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>;io.ktor.client.webrtc.peer.RTCOfferOptions){}[0]

    // Targets: [js]
    final fun getIdentityAssertion(): kotlin.js/Promise<kotlin/String> // io.ktor.client.webrtc.peer/RTCPeerConnection.getIdentityAssertion|getIdentityAssertion(){}[0]

    // Targets: [js]
    final fun getReceivers(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpReceiver> // io.ktor.client.webrtc.peer/RTCPeerConnection.getReceivers|getReceivers(){}[0]

    // Targets: [js]
    final fun getSenders(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpSender> // io.ktor.client.webrtc.peer/RTCPeerConnection.getSenders|getSenders(){}[0]

    // Targets: [js]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack?, kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsReport, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?;kotlin.Function1<io.ktor.client.webrtc.peer.RTCStatsReport,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun getTransceivers(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpTransceiver> // io.ktor.client.webrtc.peer/RTCPeerConnection.getTransceivers|getTransceivers(){}[0]

    // Targets: [js]
    final fun setIdentityProvider(kotlin/String, io.ktor.client.webrtc.peer/RTCIdentityProviderOptions = ...) // io.ktor.client.webrtc.peer/RTCPeerConnection.setIdentityProvider|setIdentityProvider(kotlin.String;io.ktor.client.webrtc.peer.RTCIdentityProviderOptions){}[0]

    // Targets: [js]
    final fun setLocalDescription(io.ktor.client.webrtc.peer/RTCSessionDescription): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.peer.RTCSessionDescription){}[0]

    // Targets: [js]
    final fun setLocalDescription(io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.peer.RTCSessionDescriptionInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun setRemoteDescription(io.ktor.client.webrtc.peer/RTCSessionDescription): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.peer.RTCSessionDescription){}[0]

    // Targets: [js]
    final fun setRemoteDescription(io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.peer.RTCSessionDescriptionInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidate = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidate){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidate, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidate;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidateInit = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidateInit){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.peer/RTCIceCandidateInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.peer.RTCIceCandidateInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addTransceiver(kotlin.js/JsString): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.js.JsString){}[0]

    // Targets: [wasmJs]
    final fun addTransceiver(kotlin.js/JsString, io.ktor.client.webrtc.peer/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.js.JsString;io.ktor.client.webrtc.peer.RTCRtpTransceiverInit){}[0]

    // Targets: [wasmJs]
    final fun createAnswer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.createAnswer|createAnswer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString, io.ktor.client.webrtc.peer/RTCDataChannelInit = ...): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString;io.ktor.client.webrtc.peer.RTCDataChannelInit){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString?): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString?){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString?, io.ktor.client.webrtc.peer/RTCDataChannelInit = ...): io.ktor.client.webrtc.peer/RTCDataChannel // io.ktor.client.webrtc.peer/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString?;io.ktor.client.webrtc.peer.RTCDataChannelInit){}[0]

    // Targets: [wasmJs]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>, io.ktor.client.webrtc.peer/RTCOfferOptions = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.peer.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>;io.ktor.client.webrtc.peer.RTCOfferOptions){}[0]

    // Targets: [wasmJs]
    final fun getIdentityAssertion(): kotlin.js/Promise<kotlin.js/JsString> // io.ktor.client.webrtc.peer/RTCPeerConnection.getIdentityAssertion|getIdentityAssertion(){}[0]

    // Targets: [wasmJs]
    final fun getReceivers(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpReceiver> // io.ktor.client.webrtc.peer/RTCPeerConnection.getReceivers|getReceivers(){}[0]

    // Targets: [wasmJs]
    final fun getSenders(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpSender> // io.ktor.client.webrtc.peer/RTCPeerConnection.getSenders|getSenders(){}[0]

    // Targets: [wasmJs]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack?, kotlin/Function1<io.ktor.client.webrtc.peer/RTCStatsReport, kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?;kotlin.Function1<io.ktor.client.webrtc.peer.RTCStatsReport,kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun getTransceivers(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpTransceiver> // io.ktor.client.webrtc.peer/RTCPeerConnection.getTransceivers|getTransceivers(){}[0]

    // Targets: [wasmJs]
    final fun setIdentityProvider(kotlin.js/JsString, io.ktor.client.webrtc.peer/RTCIdentityProviderOptions = ...) // io.ktor.client.webrtc.peer/RTCPeerConnection.setIdentityProvider|setIdentityProvider(kotlin.js.JsString;io.ktor.client.webrtc.peer.RTCIdentityProviderOptions){}[0]

    // Targets: [wasmJs]
    final fun setLocalDescription(io.ktor.client.webrtc.peer/RTCSessionDescription): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.peer.RTCSessionDescription){}[0]

    // Targets: [wasmJs]
    final fun setLocalDescription(io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.peer.RTCSessionDescriptionInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun setRemoteDescription(io.ktor.client.webrtc.peer/RTCSessionDescription): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.peer.RTCSessionDescription){}[0]

    // Targets: [wasmJs]
    final fun setRemoteDescription(io.ktor.client.webrtc.peer/RTCSessionDescriptionInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.peer/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.peer.RTCSessionDescriptionInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.peer.DOMException,kotlin.Unit>){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.<init>|<init>(){}[0]

    final var errorCode // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorCode|{}errorCode[0]
        // Targets: [js]
        final fun <get-errorCode>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [js]
        final fun <set-errorCode>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorCode.<set-errorCode>|<set-errorCode>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-errorCode>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorCode>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorCode.<set-errorCode>|<set-errorCode>(kotlin.js.JsNumber){}[0]
    final var errorText // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorText|{}errorText[0]
        // Targets: [js]
        final fun <get-errorText>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorText.<get-errorText>|<get-errorText>(){}[0]

        // Targets: [js]
        final fun <set-errorText>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorText.<set-errorText>|<set-errorText>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-errorText>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorText.<get-errorText>|<get-errorText>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorText>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.errorText.<set-errorText>|<set-errorText>(kotlin.js.JsString){}[0]
    final var hostCandidate // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.hostCandidate|{}hostCandidate[0]
        // Targets: [js]
        final fun <get-hostCandidate>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [js]
        final fun <set-hostCandidate>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-hostCandidate>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [wasmJs]
        final fun <set-hostCandidate>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.js.JsString){}[0]
    final var url // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.url|{}url[0]
        // Targets: [js]
        final fun <get-url>(): kotlin/String // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        final fun <set-url>(kotlin/String) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.url.<set-url>|<set-url>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-url>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        final fun <set-url>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceErrorEvent.url.<set-url>|<set-url>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.<init>|<init>(){}[0]

    final var candidate // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.candidate|{}candidate[0]
        final fun <get-candidate>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.candidate.<set-candidate>|<set-candidate>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
    final var url // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.url|{}url[0]
        // Targets: [js]
        final fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        final fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        final fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCPeerConnectionIceEvent.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCSctpTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.peer/RTCSctpTransport|null[0]
    final var maxChannels // io.ktor.client.webrtc.peer/RTCSctpTransport.maxChannels|{}maxChannels[0]
        // Targets: [js]
        final fun <get-maxChannels>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCSctpTransport.maxChannels.<get-maxChannels>|<get-maxChannels>(){}[0]

        // Targets: [js]
        final fun <set-maxChannels>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCSctpTransport.maxChannels.<set-maxChannels>|<set-maxChannels>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxChannels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCSctpTransport.maxChannels.<get-maxChannels>|<get-maxChannels>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxChannels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCSctpTransport.maxChannels.<set-maxChannels>|<set-maxChannels>(kotlin.js.JsNumber?){}[0]
    final var maxMessageSize // io.ktor.client.webrtc.peer/RTCSctpTransport.maxMessageSize|{}maxMessageSize[0]
        // Targets: [js]
        final fun <get-maxMessageSize>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCSctpTransport.maxMessageSize.<get-maxMessageSize>|<get-maxMessageSize>(){}[0]

        // Targets: [js]
        final fun <set-maxMessageSize>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCSctpTransport.maxMessageSize.<set-maxMessageSize>|<set-maxMessageSize>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-maxMessageSize>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCSctpTransport.maxMessageSize.<get-maxMessageSize>|<get-maxMessageSize>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxMessageSize>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCSctpTransport.maxMessageSize.<set-maxMessageSize>|<set-maxMessageSize>(kotlin.js.JsNumber){}[0]
    final var onstatechange // io.ktor.client.webrtc.peer/RTCSctpTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCSctpTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.peer/RTCSctpTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCSctpTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.peer/RTCSctpTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCSctpTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.peer/RTCSctpTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.peer/RTCSctpTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.peer/RTCSctpTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.peer/RTCSctpTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.peer.RTCSctpTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var state // io.ktor.client.webrtc.peer/RTCSctpTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.peer/RTCSctpTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.peer/RTCSctpTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCSctpTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCSctpTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
    final var transport // io.ktor.client.webrtc.peer/RTCSctpTransport.transport|{}transport[0]
        final fun <get-transport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport // io.ktor.client.webrtc.peer/RTCSctpTransport.transport.<get-transport>|<get-transport>(){}[0]
        final fun <set-transport>(io.ktor.client.webrtc.peer/RTCDtlsTransport) // io.ktor.client.webrtc.peer/RTCSctpTransport.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.peer.RTCDtlsTransport){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCSsrcConflictEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.<init>|<init>(){}[0]

    final var ssrc // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.ssrc|{}ssrc[0]
        // Targets: [js]
        final fun <get-ssrc>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.ssrc.<get-ssrc>|<get-ssrc>(){}[0]

        // Targets: [js]
        final fun <set-ssrc>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-ssrc>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.ssrc.<get-ssrc>|<get-ssrc>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ssrc>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCSsrcConflictEvent.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCStatsEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCStatsEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCStatsEvent.<init>|<init>(){}[0]

    final var report // io.ktor.client.webrtc.peer/RTCStatsEvent.report|{}report[0]
        final fun <get-report>(): io.ktor.client.webrtc.peer/RTCStatsReport // io.ktor.client.webrtc.peer/RTCStatsEvent.report.<get-report>|<get-report>(){}[0]
        final fun <set-report>(io.ktor.client.webrtc.peer/RTCStatsReport) // io.ktor.client.webrtc.peer/RTCStatsEvent.report.<set-report>|<set-report>(io.ktor.client.webrtc.peer.RTCStatsReport){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.peer/RTCTrackEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.peer/RTCTrackEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCTrackEvent.<init>|<init>(){}[0]

    final var receiver // io.ktor.client.webrtc.peer/RTCTrackEvent.receiver|{}receiver[0]
        final fun <get-receiver>(): io.ktor.client.webrtc.peer/RTCRtpReceiver // io.ktor.client.webrtc.peer/RTCTrackEvent.receiver.<get-receiver>|<get-receiver>(){}[0]
        final fun <set-receiver>(io.ktor.client.webrtc.peer/RTCRtpReceiver) // io.ktor.client.webrtc.peer/RTCTrackEvent.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.peer.RTCRtpReceiver){}[0]
    final var streams // io.ktor.client.webrtc.peer/RTCTrackEvent.streams|{}streams[0]
        // Targets: [js]
        final fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream> // io.ktor.client.webrtc.peer/RTCTrackEvent.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [js]
        final fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>) // io.ktor.client.webrtc.peer/RTCTrackEvent.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>){}[0]

        // Targets: [wasmJs]
        final fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream> // io.ktor.client.webrtc.peer/RTCTrackEvent.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [wasmJs]
        final fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>) // io.ktor.client.webrtc.peer/RTCTrackEvent.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>){}[0]
    final var track // io.ktor.client.webrtc.peer/RTCTrackEvent.track|{}track[0]
        final fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.peer/RTCTrackEvent.track.<get-track>|<get-track>(){}[0]
        final fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.peer/RTCTrackEvent.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    final var transceiver // io.ktor.client.webrtc.peer/RTCTrackEvent.transceiver|{}transceiver[0]
        final fun <get-transceiver>(): io.ktor.client.webrtc.peer/RTCRtpTransceiver // io.ktor.client.webrtc.peer/RTCTrackEvent.transceiver.<get-transceiver>|<get-transceiver>(){}[0]
        final fun <set-transceiver>(io.ktor.client.webrtc.peer/RTCRtpTransceiver) // io.ktor.client.webrtc.peer/RTCTrackEvent.transceiver.<set-transceiver>|<set-transceiver>(io.ktor.client.webrtc.peer.RTCRtpTransceiver){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc/JsWebRTCEngineConfig : io.ktor.client.webrtc/WebRTCConfig { // io.ktor.client.webrtc/JsWebRTCEngineConfig|null[0]
    constructor <init>() // io.ktor.client.webrtc/JsWebRTCEngineConfig.<init>|<init>(){}[0]
}

// Targets: [js, wasmJs]
open class io.ktor.client.webrtc.peer/DOMException { // io.ktor.client.webrtc.peer/DOMException|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/DOMException.<init>|<init>(){}[0]

    final var ABORT_ERR // io.ktor.client.webrtc.peer/DOMException.ABORT_ERR|{}ABORT_ERR[0]
        // Targets: [js]
        final fun <get-ABORT_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.ABORT_ERR.<get-ABORT_ERR>|<get-ABORT_ERR>(){}[0]

        // Targets: [js]
        final fun <set-ABORT_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.ABORT_ERR.<set-ABORT_ERR>|<set-ABORT_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-ABORT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.ABORT_ERR.<get-ABORT_ERR>|<get-ABORT_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ABORT_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.ABORT_ERR.<set-ABORT_ERR>|<set-ABORT_ERR>(kotlin.js.JsNumber){}[0]
    final var DATA_CLONE_ERR // io.ktor.client.webrtc.peer/DOMException.DATA_CLONE_ERR|{}DATA_CLONE_ERR[0]
        // Targets: [js]
        final fun <get-DATA_CLONE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.DATA_CLONE_ERR.<get-DATA_CLONE_ERR>|<get-DATA_CLONE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-DATA_CLONE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.DATA_CLONE_ERR.<set-DATA_CLONE_ERR>|<set-DATA_CLONE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-DATA_CLONE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.DATA_CLONE_ERR.<get-DATA_CLONE_ERR>|<get-DATA_CLONE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-DATA_CLONE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.DATA_CLONE_ERR.<set-DATA_CLONE_ERR>|<set-DATA_CLONE_ERR>(kotlin.js.JsNumber){}[0]
    final var DOMSTRING_SIZE_ERR // io.ktor.client.webrtc.peer/DOMException.DOMSTRING_SIZE_ERR|{}DOMSTRING_SIZE_ERR[0]
        // Targets: [js]
        final fun <get-DOMSTRING_SIZE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.DOMSTRING_SIZE_ERR.<get-DOMSTRING_SIZE_ERR>|<get-DOMSTRING_SIZE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-DOMSTRING_SIZE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.DOMSTRING_SIZE_ERR.<set-DOMSTRING_SIZE_ERR>|<set-DOMSTRING_SIZE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-DOMSTRING_SIZE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.DOMSTRING_SIZE_ERR.<get-DOMSTRING_SIZE_ERR>|<get-DOMSTRING_SIZE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-DOMSTRING_SIZE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.DOMSTRING_SIZE_ERR.<set-DOMSTRING_SIZE_ERR>|<set-DOMSTRING_SIZE_ERR>(kotlin.js.JsNumber){}[0]
    final var HIERARCHY_REQUEST_ERR // io.ktor.client.webrtc.peer/DOMException.HIERARCHY_REQUEST_ERR|{}HIERARCHY_REQUEST_ERR[0]
        // Targets: [js]
        final fun <get-HIERARCHY_REQUEST_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.HIERARCHY_REQUEST_ERR.<get-HIERARCHY_REQUEST_ERR>|<get-HIERARCHY_REQUEST_ERR>(){}[0]

        // Targets: [js]
        final fun <set-HIERARCHY_REQUEST_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.HIERARCHY_REQUEST_ERR.<set-HIERARCHY_REQUEST_ERR>|<set-HIERARCHY_REQUEST_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-HIERARCHY_REQUEST_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.HIERARCHY_REQUEST_ERR.<get-HIERARCHY_REQUEST_ERR>|<get-HIERARCHY_REQUEST_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-HIERARCHY_REQUEST_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.HIERARCHY_REQUEST_ERR.<set-HIERARCHY_REQUEST_ERR>|<set-HIERARCHY_REQUEST_ERR>(kotlin.js.JsNumber){}[0]
    final var INDEX_SIZE_ERR // io.ktor.client.webrtc.peer/DOMException.INDEX_SIZE_ERR|{}INDEX_SIZE_ERR[0]
        // Targets: [js]
        final fun <get-INDEX_SIZE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INDEX_SIZE_ERR.<get-INDEX_SIZE_ERR>|<get-INDEX_SIZE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INDEX_SIZE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INDEX_SIZE_ERR.<set-INDEX_SIZE_ERR>|<set-INDEX_SIZE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INDEX_SIZE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INDEX_SIZE_ERR.<get-INDEX_SIZE_ERR>|<get-INDEX_SIZE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INDEX_SIZE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INDEX_SIZE_ERR.<set-INDEX_SIZE_ERR>|<set-INDEX_SIZE_ERR>(kotlin.js.JsNumber){}[0]
    final var INUSE_ATTRIBUTE_ERR // io.ktor.client.webrtc.peer/DOMException.INUSE_ATTRIBUTE_ERR|{}INUSE_ATTRIBUTE_ERR[0]
        // Targets: [js]
        final fun <get-INUSE_ATTRIBUTE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INUSE_ATTRIBUTE_ERR.<get-INUSE_ATTRIBUTE_ERR>|<get-INUSE_ATTRIBUTE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INUSE_ATTRIBUTE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INUSE_ATTRIBUTE_ERR.<set-INUSE_ATTRIBUTE_ERR>|<set-INUSE_ATTRIBUTE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INUSE_ATTRIBUTE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INUSE_ATTRIBUTE_ERR.<get-INUSE_ATTRIBUTE_ERR>|<get-INUSE_ATTRIBUTE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INUSE_ATTRIBUTE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INUSE_ATTRIBUTE_ERR.<set-INUSE_ATTRIBUTE_ERR>|<set-INUSE_ATTRIBUTE_ERR>(kotlin.js.JsNumber){}[0]
    final var INVALID_ACCESS_ERR // io.ktor.client.webrtc.peer/DOMException.INVALID_ACCESS_ERR|{}INVALID_ACCESS_ERR[0]
        // Targets: [js]
        final fun <get-INVALID_ACCESS_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INVALID_ACCESS_ERR.<get-INVALID_ACCESS_ERR>|<get-INVALID_ACCESS_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INVALID_ACCESS_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INVALID_ACCESS_ERR.<set-INVALID_ACCESS_ERR>|<set-INVALID_ACCESS_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INVALID_ACCESS_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INVALID_ACCESS_ERR.<get-INVALID_ACCESS_ERR>|<get-INVALID_ACCESS_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INVALID_ACCESS_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INVALID_ACCESS_ERR.<set-INVALID_ACCESS_ERR>|<set-INVALID_ACCESS_ERR>(kotlin.js.JsNumber){}[0]
    final var INVALID_CHARACTER_ERR // io.ktor.client.webrtc.peer/DOMException.INVALID_CHARACTER_ERR|{}INVALID_CHARACTER_ERR[0]
        // Targets: [js]
        final fun <get-INVALID_CHARACTER_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INVALID_CHARACTER_ERR.<get-INVALID_CHARACTER_ERR>|<get-INVALID_CHARACTER_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INVALID_CHARACTER_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INVALID_CHARACTER_ERR.<set-INVALID_CHARACTER_ERR>|<set-INVALID_CHARACTER_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INVALID_CHARACTER_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INVALID_CHARACTER_ERR.<get-INVALID_CHARACTER_ERR>|<get-INVALID_CHARACTER_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INVALID_CHARACTER_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INVALID_CHARACTER_ERR.<set-INVALID_CHARACTER_ERR>|<set-INVALID_CHARACTER_ERR>(kotlin.js.JsNumber){}[0]
    final var INVALID_MODIFICATION_ERR // io.ktor.client.webrtc.peer/DOMException.INVALID_MODIFICATION_ERR|{}INVALID_MODIFICATION_ERR[0]
        // Targets: [js]
        final fun <get-INVALID_MODIFICATION_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INVALID_MODIFICATION_ERR.<get-INVALID_MODIFICATION_ERR>|<get-INVALID_MODIFICATION_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INVALID_MODIFICATION_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INVALID_MODIFICATION_ERR.<set-INVALID_MODIFICATION_ERR>|<set-INVALID_MODIFICATION_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INVALID_MODIFICATION_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INVALID_MODIFICATION_ERR.<get-INVALID_MODIFICATION_ERR>|<get-INVALID_MODIFICATION_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INVALID_MODIFICATION_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INVALID_MODIFICATION_ERR.<set-INVALID_MODIFICATION_ERR>|<set-INVALID_MODIFICATION_ERR>(kotlin.js.JsNumber){}[0]
    final var INVALID_NODE_TYPE_ERR // io.ktor.client.webrtc.peer/DOMException.INVALID_NODE_TYPE_ERR|{}INVALID_NODE_TYPE_ERR[0]
        // Targets: [js]
        final fun <get-INVALID_NODE_TYPE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INVALID_NODE_TYPE_ERR.<get-INVALID_NODE_TYPE_ERR>|<get-INVALID_NODE_TYPE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INVALID_NODE_TYPE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INVALID_NODE_TYPE_ERR.<set-INVALID_NODE_TYPE_ERR>|<set-INVALID_NODE_TYPE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INVALID_NODE_TYPE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INVALID_NODE_TYPE_ERR.<get-INVALID_NODE_TYPE_ERR>|<get-INVALID_NODE_TYPE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INVALID_NODE_TYPE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INVALID_NODE_TYPE_ERR.<set-INVALID_NODE_TYPE_ERR>|<set-INVALID_NODE_TYPE_ERR>(kotlin.js.JsNumber){}[0]
    final var INVALID_STATE_ERR // io.ktor.client.webrtc.peer/DOMException.INVALID_STATE_ERR|{}INVALID_STATE_ERR[0]
        // Targets: [js]
        final fun <get-INVALID_STATE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.INVALID_STATE_ERR.<get-INVALID_STATE_ERR>|<get-INVALID_STATE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-INVALID_STATE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.INVALID_STATE_ERR.<set-INVALID_STATE_ERR>|<set-INVALID_STATE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-INVALID_STATE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.INVALID_STATE_ERR.<get-INVALID_STATE_ERR>|<get-INVALID_STATE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-INVALID_STATE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.INVALID_STATE_ERR.<set-INVALID_STATE_ERR>|<set-INVALID_STATE_ERR>(kotlin.js.JsNumber){}[0]
    final var NAMESPACE_ERR // io.ktor.client.webrtc.peer/DOMException.NAMESPACE_ERR|{}NAMESPACE_ERR[0]
        // Targets: [js]
        final fun <get-NAMESPACE_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NAMESPACE_ERR.<get-NAMESPACE_ERR>|<get-NAMESPACE_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NAMESPACE_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NAMESPACE_ERR.<set-NAMESPACE_ERR>|<set-NAMESPACE_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NAMESPACE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NAMESPACE_ERR.<get-NAMESPACE_ERR>|<get-NAMESPACE_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NAMESPACE_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NAMESPACE_ERR.<set-NAMESPACE_ERR>|<set-NAMESPACE_ERR>(kotlin.js.JsNumber){}[0]
    final var NETWORK_ERR // io.ktor.client.webrtc.peer/DOMException.NETWORK_ERR|{}NETWORK_ERR[0]
        // Targets: [js]
        final fun <get-NETWORK_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NETWORK_ERR.<get-NETWORK_ERR>|<get-NETWORK_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NETWORK_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NETWORK_ERR.<set-NETWORK_ERR>|<set-NETWORK_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NETWORK_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NETWORK_ERR.<get-NETWORK_ERR>|<get-NETWORK_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NETWORK_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NETWORK_ERR.<set-NETWORK_ERR>|<set-NETWORK_ERR>(kotlin.js.JsNumber){}[0]
    final var NOT_FOUND_ERR // io.ktor.client.webrtc.peer/DOMException.NOT_FOUND_ERR|{}NOT_FOUND_ERR[0]
        // Targets: [js]
        final fun <get-NOT_FOUND_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NOT_FOUND_ERR.<get-NOT_FOUND_ERR>|<get-NOT_FOUND_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NOT_FOUND_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NOT_FOUND_ERR.<set-NOT_FOUND_ERR>|<set-NOT_FOUND_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NOT_FOUND_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NOT_FOUND_ERR.<get-NOT_FOUND_ERR>|<get-NOT_FOUND_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NOT_FOUND_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NOT_FOUND_ERR.<set-NOT_FOUND_ERR>|<set-NOT_FOUND_ERR>(kotlin.js.JsNumber){}[0]
    final var NOT_SUPPORTED_ERR // io.ktor.client.webrtc.peer/DOMException.NOT_SUPPORTED_ERR|{}NOT_SUPPORTED_ERR[0]
        // Targets: [js]
        final fun <get-NOT_SUPPORTED_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NOT_SUPPORTED_ERR.<get-NOT_SUPPORTED_ERR>|<get-NOT_SUPPORTED_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NOT_SUPPORTED_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NOT_SUPPORTED_ERR.<set-NOT_SUPPORTED_ERR>|<set-NOT_SUPPORTED_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NOT_SUPPORTED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NOT_SUPPORTED_ERR.<get-NOT_SUPPORTED_ERR>|<get-NOT_SUPPORTED_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NOT_SUPPORTED_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NOT_SUPPORTED_ERR.<set-NOT_SUPPORTED_ERR>|<set-NOT_SUPPORTED_ERR>(kotlin.js.JsNumber){}[0]
    final var NO_DATA_ALLOWED_ERR // io.ktor.client.webrtc.peer/DOMException.NO_DATA_ALLOWED_ERR|{}NO_DATA_ALLOWED_ERR[0]
        // Targets: [js]
        final fun <get-NO_DATA_ALLOWED_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NO_DATA_ALLOWED_ERR.<get-NO_DATA_ALLOWED_ERR>|<get-NO_DATA_ALLOWED_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NO_DATA_ALLOWED_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NO_DATA_ALLOWED_ERR.<set-NO_DATA_ALLOWED_ERR>|<set-NO_DATA_ALLOWED_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NO_DATA_ALLOWED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NO_DATA_ALLOWED_ERR.<get-NO_DATA_ALLOWED_ERR>|<get-NO_DATA_ALLOWED_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NO_DATA_ALLOWED_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NO_DATA_ALLOWED_ERR.<set-NO_DATA_ALLOWED_ERR>|<set-NO_DATA_ALLOWED_ERR>(kotlin.js.JsNumber){}[0]
    final var NO_MODIFICATION_ALLOWED_ERR // io.ktor.client.webrtc.peer/DOMException.NO_MODIFICATION_ALLOWED_ERR|{}NO_MODIFICATION_ALLOWED_ERR[0]
        // Targets: [js]
        final fun <get-NO_MODIFICATION_ALLOWED_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.NO_MODIFICATION_ALLOWED_ERR.<get-NO_MODIFICATION_ALLOWED_ERR>|<get-NO_MODIFICATION_ALLOWED_ERR>(){}[0]

        // Targets: [js]
        final fun <set-NO_MODIFICATION_ALLOWED_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.NO_MODIFICATION_ALLOWED_ERR.<set-NO_MODIFICATION_ALLOWED_ERR>|<set-NO_MODIFICATION_ALLOWED_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-NO_MODIFICATION_ALLOWED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.NO_MODIFICATION_ALLOWED_ERR.<get-NO_MODIFICATION_ALLOWED_ERR>|<get-NO_MODIFICATION_ALLOWED_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-NO_MODIFICATION_ALLOWED_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.NO_MODIFICATION_ALLOWED_ERR.<set-NO_MODIFICATION_ALLOWED_ERR>|<set-NO_MODIFICATION_ALLOWED_ERR>(kotlin.js.JsNumber){}[0]
    final var QUOTA_EXCEEDED_ERR // io.ktor.client.webrtc.peer/DOMException.QUOTA_EXCEEDED_ERR|{}QUOTA_EXCEEDED_ERR[0]
        // Targets: [js]
        final fun <get-QUOTA_EXCEEDED_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.QUOTA_EXCEEDED_ERR.<get-QUOTA_EXCEEDED_ERR>|<get-QUOTA_EXCEEDED_ERR>(){}[0]

        // Targets: [js]
        final fun <set-QUOTA_EXCEEDED_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.QUOTA_EXCEEDED_ERR.<set-QUOTA_EXCEEDED_ERR>|<set-QUOTA_EXCEEDED_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-QUOTA_EXCEEDED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.QUOTA_EXCEEDED_ERR.<get-QUOTA_EXCEEDED_ERR>|<get-QUOTA_EXCEEDED_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-QUOTA_EXCEEDED_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.QUOTA_EXCEEDED_ERR.<set-QUOTA_EXCEEDED_ERR>|<set-QUOTA_EXCEEDED_ERR>(kotlin.js.JsNumber){}[0]
    final var SECURITY_ERR // io.ktor.client.webrtc.peer/DOMException.SECURITY_ERR|{}SECURITY_ERR[0]
        // Targets: [js]
        final fun <get-SECURITY_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.SECURITY_ERR.<get-SECURITY_ERR>|<get-SECURITY_ERR>(){}[0]

        // Targets: [js]
        final fun <set-SECURITY_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.SECURITY_ERR.<set-SECURITY_ERR>|<set-SECURITY_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-SECURITY_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.SECURITY_ERR.<get-SECURITY_ERR>|<get-SECURITY_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-SECURITY_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.SECURITY_ERR.<set-SECURITY_ERR>|<set-SECURITY_ERR>(kotlin.js.JsNumber){}[0]
    final var SYNTAX_ERR // io.ktor.client.webrtc.peer/DOMException.SYNTAX_ERR|{}SYNTAX_ERR[0]
        // Targets: [js]
        final fun <get-SYNTAX_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.SYNTAX_ERR.<get-SYNTAX_ERR>|<get-SYNTAX_ERR>(){}[0]

        // Targets: [js]
        final fun <set-SYNTAX_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.SYNTAX_ERR.<set-SYNTAX_ERR>|<set-SYNTAX_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-SYNTAX_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.SYNTAX_ERR.<get-SYNTAX_ERR>|<get-SYNTAX_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-SYNTAX_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.SYNTAX_ERR.<set-SYNTAX_ERR>|<set-SYNTAX_ERR>(kotlin.js.JsNumber){}[0]
    final var TIMEOUT_ERR // io.ktor.client.webrtc.peer/DOMException.TIMEOUT_ERR|{}TIMEOUT_ERR[0]
        // Targets: [js]
        final fun <get-TIMEOUT_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.TIMEOUT_ERR.<get-TIMEOUT_ERR>|<get-TIMEOUT_ERR>(){}[0]

        // Targets: [js]
        final fun <set-TIMEOUT_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.TIMEOUT_ERR.<set-TIMEOUT_ERR>|<set-TIMEOUT_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-TIMEOUT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.TIMEOUT_ERR.<get-TIMEOUT_ERR>|<get-TIMEOUT_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-TIMEOUT_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.TIMEOUT_ERR.<set-TIMEOUT_ERR>|<set-TIMEOUT_ERR>(kotlin.js.JsNumber){}[0]
    final var TYPE_MISMATCH_ERR // io.ktor.client.webrtc.peer/DOMException.TYPE_MISMATCH_ERR|{}TYPE_MISMATCH_ERR[0]
        // Targets: [js]
        final fun <get-TYPE_MISMATCH_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.TYPE_MISMATCH_ERR.<get-TYPE_MISMATCH_ERR>|<get-TYPE_MISMATCH_ERR>(){}[0]

        // Targets: [js]
        final fun <set-TYPE_MISMATCH_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.TYPE_MISMATCH_ERR.<set-TYPE_MISMATCH_ERR>|<set-TYPE_MISMATCH_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-TYPE_MISMATCH_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.TYPE_MISMATCH_ERR.<get-TYPE_MISMATCH_ERR>|<get-TYPE_MISMATCH_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-TYPE_MISMATCH_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.TYPE_MISMATCH_ERR.<set-TYPE_MISMATCH_ERR>|<set-TYPE_MISMATCH_ERR>(kotlin.js.JsNumber){}[0]
    final var URL_MISMATCH_ERR // io.ktor.client.webrtc.peer/DOMException.URL_MISMATCH_ERR|{}URL_MISMATCH_ERR[0]
        // Targets: [js]
        final fun <get-URL_MISMATCH_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.URL_MISMATCH_ERR.<get-URL_MISMATCH_ERR>|<get-URL_MISMATCH_ERR>(){}[0]

        // Targets: [js]
        final fun <set-URL_MISMATCH_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.URL_MISMATCH_ERR.<set-URL_MISMATCH_ERR>|<set-URL_MISMATCH_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-URL_MISMATCH_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.URL_MISMATCH_ERR.<get-URL_MISMATCH_ERR>|<get-URL_MISMATCH_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-URL_MISMATCH_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.URL_MISMATCH_ERR.<set-URL_MISMATCH_ERR>|<set-URL_MISMATCH_ERR>(kotlin.js.JsNumber){}[0]
    final var VALIDATION_ERR // io.ktor.client.webrtc.peer/DOMException.VALIDATION_ERR|{}VALIDATION_ERR[0]
        // Targets: [js]
        final fun <get-VALIDATION_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.VALIDATION_ERR.<get-VALIDATION_ERR>|<get-VALIDATION_ERR>(){}[0]

        // Targets: [js]
        final fun <set-VALIDATION_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.VALIDATION_ERR.<set-VALIDATION_ERR>|<set-VALIDATION_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-VALIDATION_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.VALIDATION_ERR.<get-VALIDATION_ERR>|<get-VALIDATION_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-VALIDATION_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.VALIDATION_ERR.<set-VALIDATION_ERR>|<set-VALIDATION_ERR>(kotlin.js.JsNumber){}[0]
    final var WRONG_DOCUMENT_ERR // io.ktor.client.webrtc.peer/DOMException.WRONG_DOCUMENT_ERR|{}WRONG_DOCUMENT_ERR[0]
        // Targets: [js]
        final fun <get-WRONG_DOCUMENT_ERR>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.WRONG_DOCUMENT_ERR.<get-WRONG_DOCUMENT_ERR>|<get-WRONG_DOCUMENT_ERR>(){}[0]

        // Targets: [js]
        final fun <set-WRONG_DOCUMENT_ERR>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.WRONG_DOCUMENT_ERR.<set-WRONG_DOCUMENT_ERR>|<set-WRONG_DOCUMENT_ERR>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-WRONG_DOCUMENT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.WRONG_DOCUMENT_ERR.<get-WRONG_DOCUMENT_ERR>|<get-WRONG_DOCUMENT_ERR>(){}[0]

        // Targets: [wasmJs]
        final fun <set-WRONG_DOCUMENT_ERR>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.WRONG_DOCUMENT_ERR.<set-WRONG_DOCUMENT_ERR>|<set-WRONG_DOCUMENT_ERR>(kotlin.js.JsNumber){}[0]
    final var code // io.ktor.client.webrtc.peer/DOMException.code|{}code[0]
        // Targets: [js]
        final fun <get-code>(): kotlin/Number // io.ktor.client.webrtc.peer/DOMException.code.<get-code>|<get-code>(){}[0]

        // Targets: [js]
        final fun <set-code>(kotlin/Number) // io.ktor.client.webrtc.peer/DOMException.code.<set-code>|<set-code>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-code>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/DOMException.code.<get-code>|<get-code>(){}[0]

        // Targets: [wasmJs]
        final fun <set-code>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/DOMException.code.<set-code>|<set-code>(kotlin.js.JsNumber){}[0]
    final var message // io.ktor.client.webrtc.peer/DOMException.message|{}message[0]
        // Targets: [js]
        final fun <get-message>(): kotlin/String // io.ktor.client.webrtc.peer/DOMException.message.<get-message>|<get-message>(){}[0]

        // Targets: [js]
        final fun <set-message>(kotlin/String) // io.ktor.client.webrtc.peer/DOMException.message.<set-message>|<set-message>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-message>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/DOMException.message.<get-message>|<get-message>(){}[0]

        // Targets: [wasmJs]
        final fun <set-message>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/DOMException.message.<set-message>|<set-message>(kotlin.js.JsString){}[0]
    final var name // io.ktor.client.webrtc.peer/DOMException.name|{}name[0]
        // Targets: [js]
        final fun <get-name>(): kotlin/String // io.ktor.client.webrtc.peer/DOMException.name.<get-name>|<get-name>(){}[0]

        // Targets: [js]
        final fun <set-name>(kotlin/String) // io.ktor.client.webrtc.peer/DOMException.name.<set-name>|<set-name>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-name>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/DOMException.name.<get-name>|<get-name>(){}[0]

        // Targets: [wasmJs]
        final fun <set-name>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/DOMException.name.<set-name>|<set-name>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final object io.ktor.client.webrtc/JsWebRTC : io.ktor.client.webrtc/WebRTCClientEngineFactory<io.ktor.client.webrtc/JsWebRTCEngineConfig> { // io.ktor.client.webrtc/JsWebRTC|null[0]
    final fun create(kotlin/Function1<io.ktor.client.webrtc/JsWebRTCEngineConfig, kotlin/Unit>): io.ktor.client.webrtc/WebRTCEngine // io.ktor.client.webrtc/JsWebRTC.create|create(kotlin.Function1<io.ktor.client.webrtc.JsWebRTCEngineConfig,kotlin.Unit>){}[0]
}

// Targets: [js, wasmJs]
final object io.ktor.client.webrtc/NavigatorMediaDevices : io.ktor.client.webrtc/MediaTrackFactory { // io.ktor.client.webrtc/NavigatorMediaDevices|null[0]
    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.AudioTrack // io.ktor.client.webrtc/NavigatorMediaDevices.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.VideoTrack // io.ktor.client.webrtc/NavigatorMediaDevices.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints){}[0]
}

// Targets: [js, wasmJs]
final val io.ktor.client.webrtc.peer/navigator // io.ktor.client.webrtc.peer/navigator|{}navigator[0]
    final fun <get-navigator>(): io.ktor.client.webrtc.peer/Navigator // io.ktor.client.webrtc.peer/navigator.<get-navigator>|<get-navigator>(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc.peer/RTCIceCandidate).io.ktor.client.webrtc.utils/toCommon(): io.ktor.client.webrtc/WebRTC.IceCandidate // io.ktor.client.webrtc.utils/toCommon|toCommon@io.ktor.client.webrtc.peer.RTCIceCandidate(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc.peer/RTCSessionDescriptionInit).io.ktor.client.webrtc.utils/toCommon(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc.utils/toCommon|toCommon@io.ktor.client.webrtc.peer.RTCSessionDescriptionInit(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc.peer/RTCStatsReport).io.ktor.client.webrtc.utils/toCommon(): kotlin.collections/List<io.ktor.client.webrtc/WebRTC.Stats> // io.ktor.client.webrtc.utils/toCommon|toCommon@io.ktor.client.webrtc.peer.RTCStatsReport(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTC.IceCandidate).io.ktor.client.webrtc.utils/toJS(): io.ktor.client.webrtc.peer/RTCIceCandidate // io.ktor.client.webrtc.utils/toJS|toJS@io.ktor.client.webrtc.WebRTC.IceCandidate(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTC.SessionDescription).io.ktor.client.webrtc.utils/toJS(): io.ktor.client.webrtc.peer/RTCSessionDescription // io.ktor.client.webrtc.utils/toJS|toJS@io.ktor.client.webrtc.WebRTC.SessionDescription(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints).io.ktor.client.webrtc.utils/toJS(): org.w3c.dom.mediacapture/MediaTrackConstraints // io.ktor.client.webrtc.utils/toJS|toJS@io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTCMedia.FacingMode).io.ktor.client.webrtc/toJs(): kotlin/String // io.ktor.client.webrtc/toJs|toJs@io.ktor.client.webrtc.WebRTCMedia.FacingMode(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTCMedia.ResizeMode).io.ktor.client.webrtc/toJs(): kotlin/String // io.ktor.client.webrtc/toJs|toJs@io.ktor.client.webrtc.WebRTCMedia.ResizeMode(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints).io.ktor.client.webrtc.utils/toJS(): org.w3c.dom.mediacapture/MediaTrackConstraints // io.ktor.client.webrtc.utils/toJS|toJS@io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String).io.ktor.client.webrtc/toTrackKind(): io.ktor.client.webrtc/WebRTCMedia.TrackType // io.ktor.client.webrtc/toTrackKind|toTrackKind@kotlin.String(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String?).io.ktor.client.webrtc/toConnectionState(): io.ktor.client.webrtc/WebRTC.ConnectionState // io.ktor.client.webrtc/toConnectionState|toConnectionState@kotlin.String?(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String?).io.ktor.client.webrtc/toDegradationPreference(): io.ktor.client.webrtc/WebRTC.DegradationPreference // io.ktor.client.webrtc/toDegradationPreference|toDegradationPreference@kotlin.String?(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String?).io.ktor.client.webrtc/toIceConnectionState(): io.ktor.client.webrtc/WebRTC.IceConnectionState // io.ktor.client.webrtc/toIceConnectionState|toIceConnectionState@kotlin.String?(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String?).io.ktor.client.webrtc/toIceGatheringState(): io.ktor.client.webrtc/WebRTC.IceGatheringState // io.ktor.client.webrtc/toIceGatheringState|toIceGatheringState@kotlin.String?(){}[0]

// Targets: [js, wasmJs]
final fun (kotlin/String?).io.ktor.client.webrtc/toSignalingState(): io.ktor.client.webrtc/WebRTC.SignalingState // io.ktor.client.webrtc/toSignalingState|toSignalingState@kotlin.String?(){}[0]

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.webrtc.peer/ReadonlyMap { // io.ktor.client.webrtc.peer/ReadonlyMap|null[0]
    abstract var size // io.ktor.client.webrtc.peer/ReadonlyMap.size|{}size[0]
        abstract fun <get-size>(): kotlin/Number // io.ktor.client.webrtc.peer/ReadonlyMap.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(kotlin/Number) // io.ktor.client.webrtc.peer/ReadonlyMap.size.<set-size>|<set-size>(kotlin.Number){}[0]

    abstract fun <#A1: kotlin/Any?> get(#A): #A1? // io.ktor.client.webrtc.peer/ReadonlyMap.get|get(1:0){0§<kotlin.Any?>}[0]
    abstract fun entries(): kotlin.collections/Iterator<dynamic> // io.ktor.client.webrtc.peer/ReadonlyMap.entries|entries(){}[0]
    abstract fun forEach(kotlin/Function3<dynamic, #A, io.ktor.client.webrtc.peer/ReadonlyMap<#A>, kotlin/Unit>, kotlin/Any = ...) // io.ktor.client.webrtc.peer/ReadonlyMap.forEach|forEach(kotlin.Function3<<dynamic>,1:0,io.ktor.client.webrtc.peer.ReadonlyMap<1:0>,kotlin.Unit>;kotlin.Any){}[0]
    abstract fun has(#A): kotlin/Boolean // io.ktor.client.webrtc.peer/ReadonlyMap.has|has(1:0){}[0]
    abstract fun keys(): kotlin.collections/Iterable<#A> // io.ktor.client.webrtc.peer/ReadonlyMap.keys|keys(){}[0]
    abstract fun values(): kotlin.collections/Iterator<dynamic> // io.ktor.client.webrtc.peer/ReadonlyMap.values|values(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCCertificate { // io.ktor.client.webrtc.peer/RTCCertificate|null[0]
    abstract var expires // io.ktor.client.webrtc.peer/RTCCertificate.expires|{}expires[0]
        abstract fun <get-expires>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCCertificate.expires.<get-expires>|<get-expires>(){}[0]
        abstract fun <set-expires>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCCertificate.expires.<set-expires>|<set-expires>(kotlin.Number){}[0]

    abstract fun getAlgorithm(): kotlin/String // io.ktor.client.webrtc.peer/RTCCertificate.getAlgorithm|getAlgorithm(){}[0]
    abstract fun getFingerprints(): kotlin/Array<io.ktor.client.webrtc.peer/RTCDtlsFingerprint> // io.ktor.client.webrtc.peer/RTCCertificate.getFingerprints|getFingerprints(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCConfiguration { // io.ktor.client.webrtc.peer/RTCConfiguration|null[0]
    open var bundlePolicy // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy|{}bundlePolicy[0]
        open fun <get-bundlePolicy>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy.<get-bundlePolicy>|<get-bundlePolicy>(){}[0]
        open fun <set-bundlePolicy>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy.<set-bundlePolicy>|<set-bundlePolicy>(kotlin.String?){}[0]
    open var certificates // io.ktor.client.webrtc.peer/RTCConfiguration.certificates|{}certificates[0]
        open fun <get-certificates>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCCertificate>? // io.ktor.client.webrtc.peer/RTCConfiguration.certificates.<get-certificates>|<get-certificates>(){}[0]
        open fun <set-certificates>(kotlin/Array<io.ktor.client.webrtc.peer/RTCCertificate>?) // io.ktor.client.webrtc.peer/RTCConfiguration.certificates.<set-certificates>|<set-certificates>(kotlin.Array<io.ktor.client.webrtc.peer.RTCCertificate>?){}[0]
    open var iceCandidatePoolSize // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize|{}iceCandidatePoolSize[0]
        open fun <get-iceCandidatePoolSize>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize.<get-iceCandidatePoolSize>|<get-iceCandidatePoolSize>(){}[0]
        open fun <set-iceCandidatePoolSize>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize.<set-iceCandidatePoolSize>|<set-iceCandidatePoolSize>(kotlin.Number?){}[0]
    open var iceServers // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers|{}iceServers[0]
        open fun <get-iceServers>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCIceServer>? // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        open fun <set-iceServers>(kotlin/Array<io.ktor.client.webrtc.peer/RTCIceServer>?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers.<set-iceServers>|<set-iceServers>(kotlin.Array<io.ktor.client.webrtc.peer.RTCIceServer>?){}[0]
    open var iceTransportPolicy // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy|{}iceTransportPolicy[0]
        open fun <get-iceTransportPolicy>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy.<get-iceTransportPolicy>|<get-iceTransportPolicy>(){}[0]
        open fun <set-iceTransportPolicy>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy.<set-iceTransportPolicy>|<set-iceTransportPolicy>(kotlin.String?){}[0]
    open var peerIdentity // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.String?){}[0]
    open var rtcpMuxPolicy // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy|{}rtcpMuxPolicy[0]
        open fun <get-rtcpMuxPolicy>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy.<get-rtcpMuxPolicy>|<get-rtcpMuxPolicy>(){}[0]
        open fun <set-rtcpMuxPolicy>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy.<set-rtcpMuxPolicy>|<set-rtcpMuxPolicy>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCDataChannelInit { // io.ktor.client.webrtc.peer/RTCDataChannelInit|null[0]
    open var id // io.ktor.client.webrtc.peer/RTCDataChannelInit.id|{}id[0]
        open fun <get-id>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannelInit.id.<get-id>|<get-id>(){}[0]
        open fun <set-id>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.id.<set-id>|<set-id>(kotlin.Number?){}[0]
    open var maxPacketLifeTime // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime|{}maxPacketLifeTime[0]
        open fun <get-maxPacketLifeTime>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
        open fun <set-maxPacketLifeTime>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.Number?){}[0]
    open var maxRetransmits // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits|{}maxRetransmits[0]
        open fun <get-maxRetransmits>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
        open fun <set-maxRetransmits>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.Number?){}[0]
    open var negotiated // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated|{}negotiated[0]
        open fun <get-negotiated>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        open fun <set-negotiated>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean?){}[0]
    open var ordered // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered|{}ordered[0]
        open fun <get-ordered>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered.<get-ordered>|<get-ordered>(){}[0]
        open fun <set-ordered>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean?){}[0]
    open var priority // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority|{}priority[0]
        open fun <get-priority>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority.<set-priority>|<set-priority>(kotlin.String?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCDtlsFingerprint { // io.ktor.client.webrtc.peer/RTCDtlsFingerprint|null[0]
    open var algorithm // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm|{}algorithm[0]
        open fun <get-algorithm>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm.<get-algorithm>|<get-algorithm>(){}[0]
        open fun <set-algorithm>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm.<set-algorithm>|<set-algorithm>(kotlin.String?){}[0]
    open var value // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value|{}value[0]
        open fun <get-value>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value.<get-value>|<get-value>(){}[0]
        open fun <set-value>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value.<set-value>|<set-value>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCErrorInit { // io.ktor.client.webrtc.peer/RTCErrorInit|null[0]
    abstract var errorDetail // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail|{}errorDetail[0]
        abstract fun <get-errorDetail>(): kotlin/String // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]
        abstract fun <set-errorDetail>(kotlin/String) // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.String){}[0]
    open var httpRequestStatusCode // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode|{}httpRequestStatusCode[0]
        open fun <get-httpRequestStatusCode>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]
        open fun <set-httpRequestStatusCode>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.Number?){}[0]
    open var receivedAlert // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert|{}receivedAlert[0]
        open fun <get-receivedAlert>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]
        open fun <set-receivedAlert>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.Number?){}[0]
    open var sctpCauseCode // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode|{}sctpCauseCode[0]
        open fun <get-sctpCauseCode>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]
        open fun <set-sctpCauseCode>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.Number?){}[0]
    open var sdpLineNumber // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber|{}sdpLineNumber[0]
        open fun <get-sdpLineNumber>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]
        open fun <set-sdpLineNumber>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.Number?){}[0]
    open var sentAlert // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert|{}sentAlert[0]
        open fun <get-sentAlert>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]
        open fun <set-sentAlert>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidateDictionary { // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary|null[0]
    open var foundation // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation|{}foundation[0]
        open fun <get-foundation>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation.<get-foundation>|<get-foundation>(){}[0]
        open fun <set-foundation>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation.<set-foundation>|<set-foundation>(kotlin.String?){}[0]
    open var ip // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip|{}ip[0]
        open fun <get-ip>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip.<get-ip>|<get-ip>(){}[0]
        open fun <set-ip>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip.<set-ip>|<set-ip>(kotlin.String?){}[0]
    open var msMTurnSessionId // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId|{}msMTurnSessionId[0]
        open fun <get-msMTurnSessionId>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId.<get-msMTurnSessionId>|<get-msMTurnSessionId>(){}[0]
        open fun <set-msMTurnSessionId>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId.<set-msMTurnSessionId>|<set-msMTurnSessionId>(kotlin.String?){}[0]
    open var port // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port|{}port[0]
        open fun <get-port>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port.<get-port>|<get-port>(){}[0]
        open fun <set-port>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port.<set-port>|<set-port>(kotlin.Number?){}[0]
    open var priority // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority|{}priority[0]
        open fun <get-priority>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority.<set-priority>|<set-priority>(kotlin.Number?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
    open var relatedAddress // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress|{}relatedAddress[0]
        open fun <get-relatedAddress>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        open fun <set-relatedAddress>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.String?){}[0]
    open var relatedPort // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort|{}relatedPort[0]
        open fun <get-relatedPort>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        open fun <set-relatedPort>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.Number?){}[0]
    open var tcpType // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType|{}tcpType[0]
        open fun <get-tcpType>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        open fun <set-tcpType>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType.<set-tcpType>|<set-tcpType>(kotlin.String?){}[0]
    open var type // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type|{}type[0]
        open fun <get-type>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type.<set-type>|<set-type>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidateInit { // io.ktor.client.webrtc.peer/RTCIceCandidateInit|null[0]
    open var candidate // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate|{}candidate[0]
        open fun <get-candidate>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate.<set-candidate>|<set-candidate>(kotlin.String?){}[0]
    open var sdpMLineIndex // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex|{}sdpMLineIndex[0]
        open fun <get-sdpMLineIndex>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        open fun <set-sdpMLineIndex>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.Number?){}[0]
    open var sdpMid // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid|{}sdpMid[0]
        open fun <get-sdpMid>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        open fun <set-sdpMid>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.String?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidatePair { // io.ktor.client.webrtc.peer/RTCIceCandidatePair|null[0]
    open var local // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local|{}local[0]
        open fun <get-local>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local.<get-local>|<get-local>(){}[0]
        open fun <set-local>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local.<set-local>|<set-local>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
    open var remote // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote|{}remote[0]
        open fun <get-remote>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote.<get-remote>|<get-remote>(){}[0]
        open fun <set-remote>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote.<set-remote>|<set-remote>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIceParameters { // io.ktor.client.webrtc.peer/RTCIceParameters|null[0]
    open var iceLite // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite|{}iceLite[0]
        open fun <get-iceLite>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite.<get-iceLite>|<get-iceLite>(){}[0]
        open fun <set-iceLite>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite.<set-iceLite>|<set-iceLite>(kotlin.Boolean?){}[0]
    open var password // io.ktor.client.webrtc.peer/RTCIceParameters.password|{}password[0]
        open fun <get-password>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceParameters.password.<get-password>|<get-password>(){}[0]
        open fun <set-password>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceParameters.password.<set-password>|<set-password>(kotlin.String?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIceServer { // io.ktor.client.webrtc.peer/RTCIceServer|null[0]
    open var credential // io.ktor.client.webrtc.peer/RTCIceServer.credential|{}credential[0]
        open fun <get-credential>(): dynamic // io.ktor.client.webrtc.peer/RTCIceServer.credential.<get-credential>|<get-credential>(){}[0]
        open fun <set-credential>(dynamic) // io.ktor.client.webrtc.peer/RTCIceServer.credential.<set-credential>|<set-credential>(<dynamic>){}[0]
    open var credentialType // io.ktor.client.webrtc.peer/RTCIceServer.credentialType|{}credentialType[0]
        open fun <get-credentialType>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceServer.credentialType.<get-credentialType>|<get-credentialType>(){}[0]
        open fun <set-credentialType>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceServer.credentialType.<set-credentialType>|<set-credentialType>(kotlin.String?){}[0]
    open var urls // io.ktor.client.webrtc.peer/RTCIceServer.urls|{}urls[0]
        open fun <get-urls>(): dynamic // io.ktor.client.webrtc.peer/RTCIceServer.urls.<get-urls>|<get-urls>(){}[0]
        open fun <set-urls>(dynamic) // io.ktor.client.webrtc.peer/RTCIceServer.urls.<set-urls>|<set-urls>(<dynamic>){}[0]
    open var username // io.ktor.client.webrtc.peer/RTCIceServer.username|{}username[0]
        open fun <get-username>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceServer.username.<get-username>|<get-username>(){}[0]
        open fun <set-username>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceServer.username.<set-username>|<set-username>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCIdentityProviderOptions { // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions|null[0]
    open var peerIdentity // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.String?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
    open var usernameHint // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint|{}usernameHint[0]
        open fun <get-usernameHint>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint.<get-usernameHint>|<get-usernameHint>(){}[0]
        open fun <set-usernameHint>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint.<set-usernameHint>|<set-usernameHint>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCOAuthCredential { // io.ktor.client.webrtc.peer/RTCOAuthCredential|null[0]
    abstract var accessToken // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken|{}accessToken[0]
        abstract fun <get-accessToken>(): kotlin/String // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken.<get-accessToken>|<get-accessToken>(){}[0]
        abstract fun <set-accessToken>(kotlin/String) // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken.<set-accessToken>|<set-accessToken>(kotlin.String){}[0]
    abstract var macKey // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey|{}macKey[0]
        abstract fun <get-macKey>(): kotlin/String // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey.<get-macKey>|<get-macKey>(){}[0]
        abstract fun <set-macKey>(kotlin/String) // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey.<set-macKey>|<set-macKey>(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCOfferAnswerOptions { // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions|null[0]
    open var voiceActivityDetection // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection|{}voiceActivityDetection[0]
        open fun <get-voiceActivityDetection>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection.<get-voiceActivityDetection>|<get-voiceActivityDetection>(){}[0]
        open fun <set-voiceActivityDetection>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection.<set-voiceActivityDetection>|<set-voiceActivityDetection>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCPeerConnectionStatic { // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic|null[0]
    abstract var defaultIceServers // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers|{}defaultIceServers[0]
        abstract fun <get-defaultIceServers>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCIceServer> // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers.<get-defaultIceServers>|<get-defaultIceServers>(){}[0]
        abstract fun <set-defaultIceServers>(kotlin/Array<io.ktor.client.webrtc.peer/RTCIceServer>) // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers.<set-defaultIceServers>|<set-defaultIceServers>(kotlin.Array<io.ktor.client.webrtc.peer.RTCIceServer>){}[0]

    abstract fun generateCertificate(kotlin/String): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCCertificate> // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.generateCertificate|generateCertificate(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtcpParameters { // io.ktor.client.webrtc.peer/RTCRtcpParameters|null[0]
    open var cname // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname|{}cname[0]
        open fun <get-cname>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname.<get-cname>|<get-cname>(){}[0]
        open fun <set-cname>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname.<set-cname>|<set-cname>(kotlin.String?){}[0]
    open var reducedSize // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize|{}reducedSize[0]
        open fun <get-reducedSize>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize.<get-reducedSize>|<get-reducedSize>(){}[0]
        open fun <set-reducedSize>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize.<set-reducedSize>|<set-reducedSize>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCapabilities { // io.ktor.client.webrtc.peer/RTCRtpCapabilities|null[0]
    abstract var codecs // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpCodecCapability> // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpCodecCapability>) // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs.<set-codecs>|<set-codecs>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpCodecCapability>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability> // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability>) // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpHeaderExtensionCapability>){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodecCapability { // io.ktor.client.webrtc.peer/RTCRtpCodecCapability|null[0]
    abstract var clockRate // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate.<set-clockRate>|<set-clockRate>(kotlin.Number){}[0]
    abstract var mimeType // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType.<set-mimeType>|<set-mimeType>(kotlin.String){}[0]
    open var channels // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels|{}channels[0]
        open fun <get-channels>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels.<set-channels>|<set-channels>(kotlin.Number?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodecParameters { // io.ktor.client.webrtc.peer/RTCRtpCodecParameters|null[0]
    abstract var clockRate // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate.<set-clockRate>|<set-clockRate>(kotlin.Number){}[0]
    abstract var mimeType // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType.<set-mimeType>|<set-mimeType>(kotlin.String){}[0]
    abstract var payloadType // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType|{}payloadType[0]
        abstract fun <get-payloadType>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType.<get-payloadType>|<get-payloadType>(){}[0]
        abstract fun <set-payloadType>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType.<set-payloadType>|<set-payloadType>(kotlin.Number){}[0]
    open var channels // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels|{}channels[0]
        open fun <get-channels>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels.<set-channels>|<set-channels>(kotlin.Number?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodingParameters { // io.ktor.client.webrtc.peer/RTCRtpCodingParameters|null[0]
    open var rid // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid|{}rid[0]
        open fun <get-rid>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid.<get-rid>|<get-rid>(){}[0]
        open fun <set-rid>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid.<set-rid>|<set-rid>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpContributingSource { // io.ktor.client.webrtc.peer/RTCRtpContributingSource|null[0]
    abstract var rtpTimestamp // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp|{}rtpTimestamp[0]
        abstract fun <get-rtpTimestamp>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp.<get-rtpTimestamp>|<get-rtpTimestamp>(){}[0]
        abstract fun <set-rtpTimestamp>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp.<set-rtpTimestamp>|<set-rtpTimestamp>(kotlin.Number){}[0]
    abstract var source // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source|{}source[0]
        abstract fun <get-source>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source.<get-source>|<get-source>(){}[0]
        abstract fun <set-source>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source.<set-source>|<set-source>(kotlin.Number){}[0]
    abstract var timestamp // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        abstract fun <set-timestamp>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp.<set-timestamp>|<set-timestamp>(kotlin.Number){}[0]
    open var audioLevel // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel|{}audioLevel[0]
        open fun <get-audioLevel>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
        open fun <set-audioLevel>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel.<set-audioLevel>|<set-audioLevel>(kotlin.Number?){}[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpFecParameters { // io.ktor.client.webrtc.peer/RTCRtpFecParameters|null[0]
    open var mechanism // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism|{}mechanism[0]
        open fun <get-mechanism>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism.<get-mechanism>|<get-mechanism>(){}[0]
        open fun <set-mechanism>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism.<set-mechanism>|<set-mechanism>(kotlin.String?){}[0]
    open var ssrc // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability { // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability|null[0]
    open var uri // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri|{}uri[0]
        open fun <get-uri>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri.<get-uri>|<get-uri>(){}[0]
        open fun <set-uri>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri.<set-uri>|<set-uri>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters { // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters|null[0]
    abstract var id // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id|{}id[0]
        abstract fun <get-id>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        abstract fun <set-id>(kotlin/Number) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id.<set-id>|<set-id>(kotlin.Number){}[0]
    abstract var uri // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri|{}uri[0]
        abstract fun <get-uri>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]
        abstract fun <set-uri>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri.<set-uri>|<set-uri>(kotlin.String){}[0]
    open var encrypted // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted|{}encrypted[0]
        open fun <get-encrypted>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        open fun <set-encrypted>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted.<set-encrypted>|<set-encrypted>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpParameters { // io.ktor.client.webrtc.peer/RTCRtpParameters|null[0]
    abstract var codecs // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpCodecParameters> // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpCodecParameters>) // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs.<set-codecs>|<set-codecs>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpCodecParameters>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters> // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters>) // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpHeaderExtensionParameters>){}[0]
    abstract var rtcp // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp|{}rtcp[0]
        abstract fun <get-rtcp>(): io.ktor.client.webrtc.peer/RTCRtcpParameters // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract fun <set-rtcp>(io.ktor.client.webrtc.peer/RTCRtcpParameters) // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp.<set-rtcp>|<set-rtcp>(io.ktor.client.webrtc.peer.RTCRtcpParameters){}[0]
    abstract var transactionId // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId|{}transactionId[0]
        abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
        abstract fun <set-transactionId>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpReceiver { // io.ktor.client.webrtc.peer/RTCRtpReceiver|null[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.peer/RTCRtpReceiver.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.peer/RTCRtpReceiver.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.peer/RTCRtpReceiver.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transport // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]

    abstract fun getContributingSources(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpContributingSource> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getContributingSources|getContributingSources(){}[0]
    abstract fun getParameters(): dynamic // io.ktor.client.webrtc.peer/RTCRtpReceiver.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getStats|getStats(){}[0]
    abstract fun getSynchronizationSources(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getSynchronizationSources|getSynchronizationSources(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpRtxParameters { // io.ktor.client.webrtc.peer/RTCRtpRtxParameters|null[0]
    open var ssrc // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpSender { // io.ktor.client.webrtc.peer/RTCRtpSender|null[0]
    abstract var dtmf // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf|{}dtmf[0]
        abstract fun <get-dtmf>(): io.ktor.client.webrtc.peer/RTCDTMFSender? // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract fun <set-dtmf>(io.ktor.client.webrtc.peer/RTCDTMFSender?) // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf.<set-dtmf>|<set-dtmf>(io.ktor.client.webrtc.peer.RTCDTMFSender?){}[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.peer/RTCRtpSender.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack? // io.ktor.client.webrtc.peer/RTCRtpSender.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack?) // io.ktor.client.webrtc.peer/RTCRtpSender.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract var transport // io.ktor.client.webrtc.peer/RTCRtpSender.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpSender.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpSender.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]

    abstract fun getParameters(): dynamic // io.ktor.client.webrtc.peer/RTCRtpSender.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCRtpSender.getStats|getStats(){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack?): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract fun setParameters(): kotlin.js/Promise<dynamic> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.peer/RTCRtpParameters = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.peer.RTCRtpParameters){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.peer/RTCRtpSendParameters): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.peer.RTCRtpSendParameters){}[0]
    abstract fun setStreams(kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...) // io.ktor.client.webrtc.peer/RTCRtpSender.setStreams|setStreams(kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpTransceiver { // io.ktor.client.webrtc.peer/RTCRtpTransceiver|null[0]
    abstract var currentDirection // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection|{}currentDirection[0]
        abstract fun <get-currentDirection>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection.<get-currentDirection>|<get-currentDirection>(){}[0]
        abstract fun <set-currentDirection>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection.<set-currentDirection>|<set-currentDirection>(kotlin.String){}[0]
    abstract var direction // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction|{}direction[0]
        abstract fun <get-direction>(): kotlin/String // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction.<get-direction>|<get-direction>(){}[0]
        abstract fun <set-direction>(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction.<set-direction>|<set-direction>(kotlin.String){}[0]
    abstract var mid // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid|{}mid[0]
        abstract fun <get-mid>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid.<get-mid>|<get-mid>(){}[0]
        abstract fun <set-mid>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid.<set-mid>|<set-mid>(kotlin.String?){}[0]
    abstract var receiver // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.peer/RTCRtpReceiver // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.peer/RTCRtpReceiver) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.peer.RTCRtpReceiver){}[0]
    abstract var sender // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender|{}sender[0]
        abstract fun <get-sender>(): io.ktor.client.webrtc.peer/RTCRtpSender // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender.<get-sender>|<get-sender>(){}[0]
        abstract fun <set-sender>(io.ktor.client.webrtc.peer/RTCRtpSender) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender.<set-sender>|<set-sender>(io.ktor.client.webrtc.peer.RTCRtpSender){}[0]
    abstract var stopped // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped|{}stopped[0]
        abstract fun <get-stopped>(): kotlin/Boolean // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped.<get-stopped>|<get-stopped>(){}[0]
        abstract fun <set-stopped>(kotlin/Boolean) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped.<set-stopped>|<set-stopped>(kotlin.Boolean){}[0]

    abstract fun setCodecPreferences(kotlin.collections/Iterable<io.ktor.client.webrtc.peer/RTCRtpCodecCapability>) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.collections.Iterable<io.ktor.client.webrtc.peer.RTCRtpCodecCapability>){}[0]
    abstract fun setCodecPreferences(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpCodecCapability>) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpCodecCapability>){}[0]
    abstract fun setDirection(kotlin/String) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.setDirection|setDirection(kotlin.String){}[0]
    abstract fun stop() // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stop|stop(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCRtpTransceiverInit { // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit|null[0]
    open var direction // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction|{}direction[0]
        open fun <get-direction>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction.<get-direction>|<get-direction>(){}[0]
        open fun <set-direction>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction.<set-direction>|<set-direction>(kotlin.String?){}[0]
    open var sendEncodings // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings|{}sendEncodings[0]
        open fun <get-sendEncodings>(): kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings.<get-sendEncodings>|<get-sendEncodings>(){}[0]
        open fun <set-sendEncodings>(kotlin/Array<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings.<set-sendEncodings>|<set-sendEncodings>(kotlin.Array<io.ktor.client.webrtc.peer.RTCRtpEncodingParameters>?){}[0]
    open var streams // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams|{}streams[0]
        open fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams.<get-streams>|<get-streams>(){}[0]
        open fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCSessionDescriptionInit { // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit|null[0]
    open var sdp // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp|{}sdp[0]
        open fun <get-sdp>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp.<get-sdp>|<get-sdp>(){}[0]
        open fun <set-sdp>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp.<set-sdp>|<set-sdp>(kotlin.String?){}[0]
    open var type // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type|{}type[0]
        open fun <get-type>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type.<set-type>|<set-type>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCStats { // io.ktor.client.webrtc.peer/RTCStats|null[0]
    abstract val id // io.ktor.client.webrtc.peer/RTCStats.id|{}id[0]
        abstract fun <get-id>(): kotlin/String // io.ktor.client.webrtc.peer/RTCStats.id.<get-id>|<get-id>(){}[0]
    abstract val timestamp // io.ktor.client.webrtc.peer/RTCStats.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin/Number // io.ktor.client.webrtc.peer/RTCStats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    abstract val type // io.ktor.client.webrtc.peer/RTCStats.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.webrtc.peer/RTCStats.type.<get-type>|<get-type>(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.peer/RTCStatsReport : io.ktor.client.webrtc.peer/ReadonlyMap<kotlin/String> { // io.ktor.client.webrtc.peer/RTCStatsReport|null[0]
    abstract fun forEach(kotlin/Function3<kotlin/Any, kotlin/String, io.ktor.client.webrtc.peer/RTCStatsReport, kotlin/Unit>, kotlin/Any = ...) // io.ktor.client.webrtc.peer/RTCStatsReport.forEach|forEach(kotlin.Function3<kotlin.Any,kotlin.String,io.ktor.client.webrtc.peer.RTCStatsReport,kotlin.Unit>;kotlin.Any){}[0]
}

// Targets: [js]
abstract class io.ktor.client.webrtc.peer/HTMLCanvasElement : org.w3c.dom/HTMLCanvasElement { // io.ktor.client.webrtc.peer/HTMLCanvasElement|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/HTMLCanvasElement.<init>|<init>(){}[0]

    final fun captureStream(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc.peer/HTMLCanvasElement.captureStream|captureStream(){}[0]
}

// Targets: [js]
abstract class io.ktor.client.webrtc/JsMediaTrack : io.ktor.client.webrtc/WebRTCMedia.Track { // io.ktor.client.webrtc/JsMediaTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/JsMediaTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]

    final val nativeStream // io.ktor.client.webrtc/JsMediaTrack.nativeStream|{}nativeStream[0]
        final fun <get-nativeStream>(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc/JsMediaTrack.nativeStream.<get-nativeStream>|<get-nativeStream>(){}[0]
    final val nativeTrack // io.ktor.client.webrtc/JsMediaTrack.nativeTrack|{}nativeTrack[0]
        final fun <get-nativeTrack>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc/JsMediaTrack.nativeTrack.<get-nativeTrack>|<get-nativeTrack>(){}[0]
    open val enabled // io.ktor.client.webrtc/JsMediaTrack.enabled|{}enabled[0]
        open fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/JsMediaTrack.enabled.<get-enabled>|<get-enabled>(){}[0]
    open val id // io.ktor.client.webrtc/JsMediaTrack.id|{}id[0]
        open fun <get-id>(): kotlin/String // io.ktor.client.webrtc/JsMediaTrack.id.<get-id>|<get-id>(){}[0]
    open val kind // io.ktor.client.webrtc/JsMediaTrack.kind|{}kind[0]
        open fun <get-kind>(): io.ktor.client.webrtc/WebRTCMedia.TrackType // io.ktor.client.webrtc/JsMediaTrack.kind.<get-kind>|<get-kind>(){}[0]

    open fun close() // io.ktor.client.webrtc/JsMediaTrack.close|close(){}[0]
    open fun enable(kotlin/Boolean) // io.ktor.client.webrtc/JsMediaTrack.enable|enable(kotlin.Boolean){}[0]
    open fun getNative(): kotlin/Any // io.ktor.client.webrtc/JsMediaTrack.getNative|getNative(){}[0]

    final object Companion { // io.ktor.client.webrtc/JsMediaTrack.Companion|null[0]
        final fun from(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream): io.ktor.client.webrtc/JsMediaTrack // io.ktor.client.webrtc/JsMediaTrack.Companion.from|from(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
    }
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/AudioContext { // io.ktor.client.webrtc.peer/AudioContext|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/AudioContext.<init>|<init>(){}[0]

    final fun createMediaStreamDestination(): io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode // io.ktor.client.webrtc.peer/AudioContext.createMediaStreamDestination|createMediaStreamDestination(){}[0]
    final fun createOscillator(): io.ktor.client.webrtc.peer/OscillatorNode // io.ktor.client.webrtc.peer/AudioContext.createOscillator|createOscillator(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode { // io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode.<init>|<init>(){}[0]

    final var stream // io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode.stream|{}stream[0]
        final fun <get-stream>(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode.stream.<get-stream>|<get-stream>(){}[0]
        final fun <set-stream>(org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode.stream.<set-stream>|<set-stream>(org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/OscillatorNode { // io.ktor.client.webrtc.peer/OscillatorNode|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/OscillatorNode.<init>|<init>(){}[0]

    final fun connect(io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode): io.ktor.client.webrtc.peer/MediaStreamAudioDestinationNode // io.ktor.client.webrtc.peer/OscillatorNode.connect|connect(io.ktor.client.webrtc.peer.MediaStreamAudioDestinationNode){}[0]
    final fun start() // io.ktor.client.webrtc.peer/OscillatorNode.start|start(){}[0]
    final fun stop() // io.ktor.client.webrtc.peer/OscillatorNode.stop|stop(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/RTCIceCandidate { // io.ktor.client.webrtc.peer/RTCIceCandidate|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCIceCandidateInit) // io.ktor.client.webrtc.peer/RTCIceCandidate.<init>|<init>(io.ktor.client.webrtc.peer.RTCIceCandidateInit){}[0]

    final var candidate // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate|{}candidate[0]
        final fun <get-candidate>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate.<set-candidate>|<set-candidate>(kotlin.String){}[0]
    final var component // io.ktor.client.webrtc.peer/RTCIceCandidate.component|{}component[0]
        final fun <get-component>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceCandidate.component.<get-component>|<get-component>(){}[0]
        final fun <set-component>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceCandidate.component.<set-component>|<set-component>(kotlin.String){}[0]
    final var foundation // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation|{}foundation[0]
        final fun <get-foundation>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation.<get-foundation>|<get-foundation>(){}[0]
        final fun <set-foundation>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation.<set-foundation>|<set-foundation>(kotlin.String?){}[0]
    final var port // io.ktor.client.webrtc.peer/RTCIceCandidate.port|{}port[0]
        final fun <get-port>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidate.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidate.port.<set-port>|<set-port>(kotlin.Number?){}[0]
    final var priority // io.ktor.client.webrtc.peer/RTCIceCandidate.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidate.priority.<get-priority>|<get-priority>(){}[0]
        final fun <set-priority>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidate.priority.<set-priority>|<set-priority>(kotlin.Number?){}[0]
    final var protocol // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol.<set-protocol>|<set-protocol>(kotlin.String){}[0]
    final var relatedAddress // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress|{}relatedAddress[0]
        final fun <get-relatedAddress>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        final fun <set-relatedAddress>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.String?){}[0]
    final var relatedPort // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort|{}relatedPort[0]
        final fun <get-relatedPort>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        final fun <set-relatedPort>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.Number?){}[0]
    final var sdpMLineIndex // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
        final fun <get-sdpMLineIndex>(): kotlin/Number? // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final fun <set-sdpMLineIndex>(kotlin/Number?) // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.Number?){}[0]
    final var sdpMid // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid|{}sdpMid[0]
        final fun <get-sdpMid>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        final fun <set-sdpMid>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.String?){}[0]
    final var tcpType // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType|{}tcpType[0]
        final fun <get-tcpType>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        final fun <set-tcpType>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType.<set-tcpType>|<set-tcpType>(kotlin.String){}[0]
    final var type // io.ktor.client.webrtc.peer/RTCIceCandidate.type|{}type[0]
        final fun <get-type>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIceCandidate.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIceCandidate.type.<set-type>|<set-type>(kotlin.String){}[0]
    final var usernameFragment // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment|{}usernameFragment[0]
        final fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        final fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]

    final fun toJSON(): io.ktor.client.webrtc.peer/RTCIceCandidateInit // io.ktor.client.webrtc.peer/RTCIceCandidate.toJSON|toJSON(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/RTCIdentityAssertion { // io.ktor.client.webrtc.peer/RTCIdentityAssertion|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIdentityAssertion.<init>|<init>(){}[0]

    final var idp // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp|{}idp[0]
        final fun <get-idp>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp.<get-idp>|<get-idp>(){}[0]
        final fun <set-idp>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp.<set-idp>|<set-idp>(kotlin.String){}[0]
    final var name // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name.<set-name>|<set-name>(kotlin.String){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.peer/RTCSessionDescription { // io.ktor.client.webrtc.peer/RTCSessionDescription|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCSessionDescription.<init>|<init>(){}[0]

    final var sdp // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp|{}sdp[0]
        final fun <get-sdp>(): kotlin/String // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final fun <set-sdp>(kotlin/String) // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp.<set-sdp>|<set-sdp>(kotlin.String){}[0]
    final var type // io.ktor.client.webrtc.peer/RTCSessionDescription.type|{}type[0]
        final fun <get-type>(): kotlin/String // io.ktor.client.webrtc.peer/RTCSessionDescription.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin/String) // io.ktor.client.webrtc.peer/RTCSessionDescription.type.<set-type>|<set-type>(kotlin.String){}[0]

    final fun toJSON(): kotlin/Any // io.ktor.client.webrtc.peer/RTCSessionDescription.toJSON|toJSON(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsAudioTrack : io.ktor.client.webrtc/JsMediaTrack, io.ktor.client.webrtc/WebRTCMedia.AudioTrack { // io.ktor.client.webrtc/JsAudioTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/JsAudioTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsDtmfSender : io.ktor.client.webrtc/WebRTC.DtmfSender { // io.ktor.client.webrtc/JsDtmfSender|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCDTMFSender) // io.ktor.client.webrtc/JsDtmfSender.<init>|<init>(io.ktor.client.webrtc.peer.RTCDTMFSender){}[0]

    final val canInsertDTMF // io.ktor.client.webrtc/JsDtmfSender.canInsertDTMF|{}canInsertDTMF[0]
        final fun <get-canInsertDTMF>(): kotlin/Boolean // io.ktor.client.webrtc/JsDtmfSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]
    final val toneBuffer // io.ktor.client.webrtc/JsDtmfSender.toneBuffer|{}toneBuffer[0]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/JsDtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

    final fun getNative(): kotlin/Any // io.ktor.client.webrtc/JsDtmfSender.getNative|getNative(){}[0]
    final fun insertDTMF(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/JsDtmfSender.insertDTMF|insertDTMF(kotlin.String;kotlin.Int;kotlin.Int){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsRtpParameters : io.ktor.client.webrtc/WebRTC.RtpParameters { // io.ktor.client.webrtc/JsRtpParameters|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCRtpSendParameters) // io.ktor.client.webrtc/JsRtpParameters.<init>|<init>(io.ktor.client.webrtc.peer.RTCRtpSendParameters){}[0]

    final val codecs // io.ktor.client.webrtc/JsRtpParameters.codecs|{}codecs[0]
        final fun <get-codecs>(): kotlin.collections/Iterable<io.ktor.client.webrtc.peer/RTCRtpCodecParameters> // io.ktor.client.webrtc/JsRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
    final val degradationPreference // io.ktor.client.webrtc/JsRtpParameters.degradationPreference|{}degradationPreference[0]
        final fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRTC.DegradationPreference // io.ktor.client.webrtc/JsRtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
    final val encodings // io.ktor.client.webrtc/JsRtpParameters.encodings|{}encodings[0]
        final fun <get-encodings>(): kotlin.collections/Iterable<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters> // io.ktor.client.webrtc/JsRtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
    final val headerExtensions // io.ktor.client.webrtc/JsRtpParameters.headerExtensions|{}headerExtensions[0]
        final fun <get-headerExtensions>(): kotlin.collections/List<io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/JsRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
    final val nativeRtpParameters // io.ktor.client.webrtc/JsRtpParameters.nativeRtpParameters|{}nativeRtpParameters[0]
        final fun <get-nativeRtpParameters>(): io.ktor.client.webrtc.peer/RTCRtpSendParameters // io.ktor.client.webrtc/JsRtpParameters.nativeRtpParameters.<get-nativeRtpParameters>|<get-nativeRtpParameters>(){}[0]
    final val rtcp // io.ktor.client.webrtc/JsRtpParameters.rtcp|{}rtcp[0]
        final fun <get-rtcp>(): io.ktor.client.webrtc.peer/RTCRtcpParameters // io.ktor.client.webrtc/JsRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
    final val transactionId // io.ktor.client.webrtc/JsRtpParameters.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/JsRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsRtpSender : io.ktor.client.webrtc/WebRTC.RtpSender { // io.ktor.client.webrtc/JsRtpSender|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCRtpSender) // io.ktor.client.webrtc/JsRtpSender.<init>|<init>(io.ktor.client.webrtc.peer.RTCRtpSender){}[0]

    final val dtmf // io.ktor.client.webrtc/JsRtpSender.dtmf|{}dtmf[0]
        final fun <get-dtmf>(): io.ktor.client.webrtc/WebRTC.DtmfSender? // io.ktor.client.webrtc/JsRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
    final val nativeSender // io.ktor.client.webrtc/JsRtpSender.nativeSender|{}nativeSender[0]
        final fun <get-nativeSender>(): io.ktor.client.webrtc.peer/RTCRtpSender // io.ktor.client.webrtc/JsRtpSender.nativeSender.<get-nativeSender>|<get-nativeSender>(){}[0]
    final val track // io.ktor.client.webrtc/JsRtpSender.track|{}track[0]
        final fun <get-track>(): io.ktor.client.webrtc/WebRTCMedia.Track? // io.ktor.client.webrtc/JsRtpSender.track.<get-track>|<get-track>(){}[0]

    final fun getNative(): kotlin/Any // io.ktor.client.webrtc/JsRtpSender.getNative|getNative(){}[0]
    final suspend fun getParameters(): io.ktor.client.webrtc/WebRTC.RtpParameters // io.ktor.client.webrtc/JsRtpSender.getParameters|getParameters(){}[0]
    final suspend fun replaceTrack(io.ktor.client.webrtc/WebRTCMedia.Track?) // io.ktor.client.webrtc/JsRtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRTCMedia.Track?){}[0]
    final suspend fun setParameters(io.ktor.client.webrtc/WebRTC.RtpParameters) // io.ktor.client.webrtc/JsRtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRTC.RtpParameters){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsVideoTrack : io.ktor.client.webrtc/JsMediaTrack, io.ktor.client.webrtc/WebRTCMedia.VideoTrack { // io.ktor.client.webrtc/JsVideoTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/JsVideoTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsWebRTCEngine : io.ktor.client.webrtc/MediaTrackFactory, io.ktor.client.webrtc/WebRTCEngineBase { // io.ktor.client.webrtc/JsWebRTCEngine|null[0]
    constructor <init>(io.ktor.client.webrtc/JsWebRTCEngineConfig, io.ktor.client.webrtc/MediaTrackFactory = ...) // io.ktor.client.webrtc/JsWebRTCEngine.<init>|<init>(io.ktor.client.webrtc.JsWebRTCEngineConfig;io.ktor.client.webrtc.MediaTrackFactory){}[0]

    final val config // io.ktor.client.webrtc/JsWebRTCEngine.config|{}config[0]
        final fun <get-config>(): io.ktor.client.webrtc/JsWebRTCEngineConfig // io.ktor.client.webrtc/JsWebRTCEngine.config.<get-config>|<get-config>(){}[0]

    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.AudioTrack // io.ktor.client.webrtc/JsWebRTCEngine.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints){}[0]
    final suspend fun createPeerConnection(): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/JsWebRTCEngine.createPeerConnection|createPeerConnection(){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.VideoTrack // io.ktor.client.webrtc/JsWebRTCEngine.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsWebRtcPeerConnection : io.ktor.client.webrtc/WebRtcPeerConnection, kotlinx.coroutines/CoroutineScope { // io.ktor.client.webrtc/JsWebRtcPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCPeerConnection, kotlin.coroutines/CoroutineContext, kotlin/Long) // io.ktor.client.webrtc/JsWebRtcPeerConnection.<init>|<init>(io.ktor.client.webrtc.peer.RTCPeerConnection;kotlin.coroutines.CoroutineContext;kotlin.Long){}[0]

    final val coroutineContext // io.ktor.client.webrtc/JsWebRtcPeerConnection.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/JsWebRtcPeerConnection.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

    final fun close() // io.ktor.client.webrtc/JsWebRtcPeerConnection.close|close(){}[0]
    final fun getNativeConnection(): kotlin/Any // io.ktor.client.webrtc/JsWebRtcPeerConnection.getNativeConnection|getNativeConnection(){}[0]
    final fun restartIce() // io.ktor.client.webrtc/JsWebRtcPeerConnection.restartIce|restartIce(){}[0]
    final suspend fun addIceCandidate(io.ktor.client.webrtc/WebRTC.IceCandidate) // io.ktor.client.webrtc/JsWebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRTC.IceCandidate){}[0]
    final suspend fun addTrack(io.ktor.client.webrtc/WebRTCMedia.Track): io.ktor.client.webrtc/WebRTC.RtpSender // io.ktor.client.webrtc/JsWebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    final suspend fun createAnswer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    final suspend fun createOffer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.createOffer|createOffer(){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRTC.RtpSender) // io.ktor.client.webrtc/JsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTC.RtpSender){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRTCMedia.Track) // io.ktor.client.webrtc/JsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    final suspend fun setLocalDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/JsWebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
    final suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/JsWebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
}

// Targets: [js]
final inline fun <#A: kotlin/Any> io.ktor.client.webrtc.utils/jsObject(kotlin/Function1<#A, kotlin/Unit>): #A // io.ktor.client.webrtc.utils/jsObject|jsObject(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any>}[0]

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny> io.ktor.client.webrtc.peer/ReadonlyMap : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/ReadonlyMap|null[0]
    abstract var size // io.ktor.client.webrtc.peer/ReadonlyMap.size|{}size[0]
        abstract fun <get-size>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/ReadonlyMap.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/ReadonlyMap.size.<set-size>|<set-size>(kotlin.js.JsNumber){}[0]

    abstract fun <#A1: kotlin.js/JsAny> get(#A): #A1? // io.ktor.client.webrtc.peer/ReadonlyMap.get|get(1:0){0§<kotlin.js.JsAny>}[0]
    abstract fun entries(): kotlin.js/JsAny // io.ktor.client.webrtc.peer/ReadonlyMap.entries|entries(){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny, #A, io.ktor.client.webrtc.peer/ReadonlyMap<#A>, kotlin/Unit>, kotlin.js/JsAny = ...) // io.ktor.client.webrtc.peer/ReadonlyMap.forEach|forEach(kotlin.Function3<kotlin.js.JsAny,1:0,io.ktor.client.webrtc.peer.ReadonlyMap<1:0>,kotlin.Unit>;kotlin.js.JsAny){}[0]
    abstract fun has(#A): kotlin.js/JsBoolean // io.ktor.client.webrtc.peer/ReadonlyMap.has|has(1:0){}[0]
    abstract fun keys(): kotlin.js/JsAny // io.ktor.client.webrtc.peer/ReadonlyMap.keys|keys(){}[0]
    abstract fun values(): kotlin.js/JsAny // io.ktor.client.webrtc.peer/ReadonlyMap.values|values(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCCertificate : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCCertificate|null[0]
    abstract var expires // io.ktor.client.webrtc.peer/RTCCertificate.expires|{}expires[0]
        abstract fun <get-expires>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCCertificate.expires.<get-expires>|<get-expires>(){}[0]
        abstract fun <set-expires>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCCertificate.expires.<set-expires>|<set-expires>(kotlin.js.JsNumber){}[0]

    abstract fun getAlgorithm(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCCertificate.getAlgorithm|getAlgorithm(){}[0]
    abstract fun getFingerprints(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCDtlsFingerprint> // io.ktor.client.webrtc.peer/RTCCertificate.getFingerprints|getFingerprints(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCConfiguration : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCConfiguration|null[0]
    open var bundlePolicy // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy|{}bundlePolicy[0]
        open fun <get-bundlePolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy.<get-bundlePolicy>|<get-bundlePolicy>(){}[0]
        open fun <set-bundlePolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCConfiguration.bundlePolicy.<set-bundlePolicy>|<set-bundlePolicy>(kotlin.js.JsString?){}[0]
    open var certificates // io.ktor.client.webrtc.peer/RTCConfiguration.certificates|{}certificates[0]
        open fun <get-certificates>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCCertificate>? // io.ktor.client.webrtc.peer/RTCConfiguration.certificates.<get-certificates>|<get-certificates>(){}[0]
        open fun <set-certificates>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCCertificate>?) // io.ktor.client.webrtc.peer/RTCConfiguration.certificates.<set-certificates>|<set-certificates>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCCertificate>?){}[0]
    open var iceCandidatePoolSize // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize|{}iceCandidatePoolSize[0]
        open fun <get-iceCandidatePoolSize>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize.<get-iceCandidatePoolSize>|<get-iceCandidatePoolSize>(){}[0]
        open fun <set-iceCandidatePoolSize>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceCandidatePoolSize.<set-iceCandidatePoolSize>|<set-iceCandidatePoolSize>(kotlin.js.JsNumber?){}[0]
    open var iceServers // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers|{}iceServers[0]
        open fun <get-iceServers>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceServer>? // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        open fun <set-iceServers>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceServer>?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceServers.<set-iceServers>|<set-iceServers>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCIceServer>?){}[0]
    open var iceTransportPolicy // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy|{}iceTransportPolicy[0]
        open fun <get-iceTransportPolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy.<get-iceTransportPolicy>|<get-iceTransportPolicy>(){}[0]
        open fun <set-iceTransportPolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCConfiguration.iceTransportPolicy.<set-iceTransportPolicy>|<set-iceTransportPolicy>(kotlin.js.JsString?){}[0]
    open var peerIdentity // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCConfiguration.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.JsString?){}[0]
    open var rtcpMuxPolicy // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy|{}rtcpMuxPolicy[0]
        open fun <get-rtcpMuxPolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy.<get-rtcpMuxPolicy>|<get-rtcpMuxPolicy>(){}[0]
        open fun <set-rtcpMuxPolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCConfiguration.rtcpMuxPolicy.<set-rtcpMuxPolicy>|<set-rtcpMuxPolicy>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCDataChannelInit : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCDataChannelInit|null[0]
    open var id // io.ktor.client.webrtc.peer/RTCDataChannelInit.id|{}id[0]
        open fun <get-id>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannelInit.id.<get-id>|<get-id>(){}[0]
        open fun <set-id>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.id.<set-id>|<set-id>(kotlin.js.JsNumber?){}[0]
    open var maxPacketLifeTime // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime|{}maxPacketLifeTime[0]
        open fun <get-maxPacketLifeTime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
        open fun <set-maxPacketLifeTime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.js.JsNumber?){}[0]
    open var maxRetransmits // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits|{}maxRetransmits[0]
        open fun <get-maxRetransmits>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
        open fun <set-maxRetransmits>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.js.JsNumber?){}[0]
    open var negotiated // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated|{}negotiated[0]
        open fun <get-negotiated>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        open fun <set-negotiated>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean?){}[0]
    open var ordered // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered|{}ordered[0]
        open fun <get-ordered>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered.<get-ordered>|<get-ordered>(){}[0]
        open fun <set-ordered>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean?){}[0]
    open var priority // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority|{}priority[0]
        open fun <get-priority>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.priority.<set-priority>|<set-priority>(kotlin.js.JsString?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCDataChannelInit.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCDtlsFingerprint : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCDtlsFingerprint|null[0]
    open var algorithm // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm|{}algorithm[0]
        open fun <get-algorithm>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm.<get-algorithm>|<get-algorithm>(){}[0]
        open fun <set-algorithm>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.algorithm.<set-algorithm>|<set-algorithm>(kotlin.js.JsString?){}[0]
    open var value // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value|{}value[0]
        open fun <get-value>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value.<get-value>|<get-value>(){}[0]
        open fun <set-value>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCDtlsFingerprint.value.<set-value>|<set-value>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCErrorInit : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCErrorInit|null[0]
    abstract var errorDetail // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail|{}errorDetail[0]
        abstract fun <get-errorDetail>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]
        abstract fun <set-errorDetail>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCErrorInit.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.js.JsString){}[0]
    open var httpRequestStatusCode // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode|{}httpRequestStatusCode[0]
        open fun <get-httpRequestStatusCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]
        open fun <set-httpRequestStatusCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCErrorInit.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.js.JsNumber?){}[0]
    open var receivedAlert // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert|{}receivedAlert[0]
        open fun <get-receivedAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]
        open fun <set-receivedAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCErrorInit.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.js.JsNumber?){}[0]
    open var sctpCauseCode // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode|{}sctpCauseCode[0]
        open fun <get-sctpCauseCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]
        open fun <set-sctpCauseCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCErrorInit.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.js.JsNumber?){}[0]
    open var sdpLineNumber // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber|{}sdpLineNumber[0]
        open fun <get-sdpLineNumber>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]
        open fun <set-sdpLineNumber>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCErrorInit.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.js.JsNumber?){}[0]
    open var sentAlert // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert|{}sentAlert[0]
        open fun <get-sentAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]
        open fun <set-sentAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCErrorInit.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidateDictionary : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary|null[0]
    open var foundation // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation|{}foundation[0]
        open fun <get-foundation>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation.<get-foundation>|<get-foundation>(){}[0]
        open fun <set-foundation>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.foundation.<set-foundation>|<set-foundation>(kotlin.js.JsString?){}[0]
    open var ip // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip|{}ip[0]
        open fun <get-ip>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip.<get-ip>|<get-ip>(){}[0]
        open fun <set-ip>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.ip.<set-ip>|<set-ip>(kotlin.js.JsString?){}[0]
    open var msMTurnSessionId // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId|{}msMTurnSessionId[0]
        open fun <get-msMTurnSessionId>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId.<get-msMTurnSessionId>|<get-msMTurnSessionId>(){}[0]
        open fun <set-msMTurnSessionId>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.msMTurnSessionId.<set-msMTurnSessionId>|<set-msMTurnSessionId>(kotlin.js.JsString?){}[0]
    open var port // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port|{}port[0]
        open fun <get-port>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port.<get-port>|<get-port>(){}[0]
        open fun <set-port>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.port.<set-port>|<set-port>(kotlin.js.JsNumber?){}[0]
    open var priority // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority|{}priority[0]
        open fun <get-priority>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.priority.<set-priority>|<set-priority>(kotlin.js.JsNumber?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
    open var relatedAddress // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress|{}relatedAddress[0]
        open fun <get-relatedAddress>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        open fun <set-relatedAddress>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.js.JsString?){}[0]
    open var relatedPort // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort|{}relatedPort[0]
        open fun <get-relatedPort>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        open fun <set-relatedPort>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.js.JsNumber?){}[0]
    open var tcpType // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType|{}tcpType[0]
        open fun <get-tcpType>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        open fun <set-tcpType>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.tcpType.<set-tcpType>|<set-tcpType>(kotlin.js.JsString?){}[0]
    open var type // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type|{}type[0]
        open fun <get-type>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateDictionary.type.<set-type>|<set-type>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidateInit : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceCandidateInit|null[0]
    open var candidate // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate|{}candidate[0]
        open fun <get-candidate>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsString?){}[0]
    open var sdpMLineIndex // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex|{}sdpMLineIndex[0]
        open fun <get-sdpMLineIndex>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        open fun <set-sdpMLineIndex>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.js.JsNumber?){}[0]
    open var sdpMid // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid|{}sdpMid[0]
        open fun <get-sdpMid>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        open fun <set-sdpMid>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.js.JsString?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidateInit.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceCandidatePair : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceCandidatePair|null[0]
    open var local // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local|{}local[0]
        open fun <get-local>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local.<get-local>|<get-local>(){}[0]
        open fun <set-local>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCIceCandidatePair.local.<set-local>|<set-local>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
    open var remote // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote|{}remote[0]
        open fun <get-remote>(): io.ktor.client.webrtc.peer/RTCIceCandidate? // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote.<get-remote>|<get-remote>(){}[0]
        open fun <set-remote>(io.ktor.client.webrtc.peer/RTCIceCandidate?) // io.ktor.client.webrtc.peer/RTCIceCandidatePair.remote.<set-remote>|<set-remote>(io.ktor.client.webrtc.peer.RTCIceCandidate?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceParameters|null[0]
    open var iceLite // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite|{}iceLite[0]
        open fun <get-iceLite>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite.<get-iceLite>|<get-iceLite>(){}[0]
        open fun <set-iceLite>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCIceParameters.iceLite.<set-iceLite>|<set-iceLite>(kotlin.Boolean?){}[0]
    open var password // io.ktor.client.webrtc.peer/RTCIceParameters.password|{}password[0]
        open fun <get-password>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceParameters.password.<get-password>|<get-password>(){}[0]
        open fun <set-password>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceParameters.password.<set-password>|<set-password>(kotlin.js.JsString?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceParameters.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIceServer : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceServer|null[0]
    open var credential // io.ktor.client.webrtc.peer/RTCIceServer.credential|{}credential[0]
        open fun <get-credential>(): kotlin.js/JsAny? // io.ktor.client.webrtc.peer/RTCIceServer.credential.<get-credential>|<get-credential>(){}[0]
        open fun <set-credential>(kotlin.js/JsAny?) // io.ktor.client.webrtc.peer/RTCIceServer.credential.<set-credential>|<set-credential>(kotlin.js.JsAny?){}[0]
    open var credentialType // io.ktor.client.webrtc.peer/RTCIceServer.credentialType|{}credentialType[0]
        open fun <get-credentialType>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceServer.credentialType.<get-credentialType>|<get-credentialType>(){}[0]
        open fun <set-credentialType>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceServer.credentialType.<set-credentialType>|<set-credentialType>(kotlin.js.JsString?){}[0]
    open var urls // io.ktor.client.webrtc.peer/RTCIceServer.urls|{}urls[0]
        open fun <get-urls>(): kotlin.js/JsAny? // io.ktor.client.webrtc.peer/RTCIceServer.urls.<get-urls>|<get-urls>(){}[0]
        open fun <set-urls>(kotlin.js/JsAny?) // io.ktor.client.webrtc.peer/RTCIceServer.urls.<set-urls>|<set-urls>(kotlin.js.JsAny?){}[0]
    open var username // io.ktor.client.webrtc.peer/RTCIceServer.username|{}username[0]
        open fun <get-username>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceServer.username.<get-username>|<get-username>(){}[0]
        open fun <set-username>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceServer.username.<set-username>|<set-username>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCIdentityProviderOptions : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions|null[0]
    open var peerIdentity // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.JsString?){}[0]
    open var protocol // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
    open var usernameHint // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint|{}usernameHint[0]
        open fun <get-usernameHint>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint.<get-usernameHint>|<get-usernameHint>(){}[0]
        open fun <set-usernameHint>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIdentityProviderOptions.usernameHint.<set-usernameHint>|<set-usernameHint>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCOAuthCredential : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCOAuthCredential|null[0]
    abstract var accessToken // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken|{}accessToken[0]
        abstract fun <get-accessToken>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken.<get-accessToken>|<get-accessToken>(){}[0]
        abstract fun <set-accessToken>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCOAuthCredential.accessToken.<set-accessToken>|<set-accessToken>(kotlin.js.JsString){}[0]
    abstract var macKey // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey|{}macKey[0]
        abstract fun <get-macKey>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey.<get-macKey>|<get-macKey>(){}[0]
        abstract fun <set-macKey>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCOAuthCredential.macKey.<set-macKey>|<set-macKey>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCOfferAnswerOptions : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions|null[0]
    open var voiceActivityDetection // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection|{}voiceActivityDetection[0]
        open fun <get-voiceActivityDetection>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection.<get-voiceActivityDetection>|<get-voiceActivityDetection>(){}[0]
        open fun <set-voiceActivityDetection>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCOfferAnswerOptions.voiceActivityDetection.<set-voiceActivityDetection>|<set-voiceActivityDetection>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCPeerConnectionStatic : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic|null[0]
    abstract var defaultIceServers // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers|{}defaultIceServers[0]
        abstract fun <get-defaultIceServers>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceServer> // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers.<get-defaultIceServers>|<get-defaultIceServers>(){}[0]
        abstract fun <set-defaultIceServers>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCIceServer>) // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.defaultIceServers.<set-defaultIceServers>|<set-defaultIceServers>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCIceServer>){}[0]

    abstract fun generateCertificate(kotlin.js/JsString): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCCertificate> // io.ktor.client.webrtc.peer/RTCPeerConnectionStatic.generateCertificate|generateCertificate(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtcpParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtcpParameters|null[0]
    open var cname // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname|{}cname[0]
        open fun <get-cname>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname.<get-cname>|<get-cname>(){}[0]
        open fun <set-cname>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtcpParameters.cname.<set-cname>|<set-cname>(kotlin.js.JsString?){}[0]
    open var reducedSize // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize|{}reducedSize[0]
        open fun <get-reducedSize>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize.<get-reducedSize>|<get-reducedSize>(){}[0]
        open fun <set-reducedSize>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtcpParameters.reducedSize.<set-reducedSize>|<set-reducedSize>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCapabilities : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpCapabilities|null[0]
    abstract var codecs // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpCodecCapability> // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpCodecCapability>) // io.ktor.client.webrtc.peer/RTCRtpCapabilities.codecs.<set-codecs>|<set-codecs>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpCodecCapability>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability> // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability>) // io.ktor.client.webrtc.peer/RTCRtpCapabilities.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpHeaderExtensionCapability>){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodecCapability : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpCodecCapability|null[0]
    abstract var clockRate // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.clockRate.<set-clockRate>|<set-clockRate>(kotlin.js.JsNumber){}[0]
    abstract var mimeType // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.mimeType.<set-mimeType>|<set-mimeType>(kotlin.js.JsString){}[0]
    open var channels // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels|{}channels[0]
        open fun <get-channels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.channels.<set-channels>|<set-channels>(kotlin.js.JsNumber?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpCodecCapability.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodecParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpCodecParameters|null[0]
    abstract var clockRate // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.clockRate.<set-clockRate>|<set-clockRate>(kotlin.js.JsNumber){}[0]
    abstract var mimeType // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.mimeType.<set-mimeType>|<set-mimeType>(kotlin.js.JsString){}[0]
    abstract var payloadType // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType|{}payloadType[0]
        abstract fun <get-payloadType>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType.<get-payloadType>|<get-payloadType>(){}[0]
        abstract fun <set-payloadType>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.payloadType.<set-payloadType>|<set-payloadType>(kotlin.js.JsNumber){}[0]
    open var channels // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels|{}channels[0]
        open fun <get-channels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.channels.<set-channels>|<set-channels>(kotlin.js.JsNumber?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpCodecParameters.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpCodingParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpCodingParameters|null[0]
    open var rid // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid|{}rid[0]
        open fun <get-rid>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid.<get-rid>|<get-rid>(){}[0]
        open fun <set-rid>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpCodingParameters.rid.<set-rid>|<set-rid>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpContributingSource : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpContributingSource|null[0]
    abstract var rtpTimestamp // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp|{}rtpTimestamp[0]
        abstract fun <get-rtpTimestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp.<get-rtpTimestamp>|<get-rtpTimestamp>(){}[0]
        abstract fun <set-rtpTimestamp>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.rtpTimestamp.<set-rtpTimestamp>|<set-rtpTimestamp>(kotlin.js.JsNumber){}[0]
    abstract var source // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source|{}source[0]
        abstract fun <get-source>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source.<get-source>|<get-source>(){}[0]
        abstract fun <set-source>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.source.<set-source>|<set-source>(kotlin.js.JsNumber){}[0]
    abstract var timestamp // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        abstract fun <set-timestamp>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.timestamp.<set-timestamp>|<set-timestamp>(kotlin.js.JsNumber){}[0]
    open var audioLevel // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel|{}audioLevel[0]
        open fun <get-audioLevel>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
        open fun <set-audioLevel>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.audioLevel.<set-audioLevel>|<set-audioLevel>(kotlin.js.JsNumber?){}[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpContributingSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpFecParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpFecParameters|null[0]
    open var mechanism // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism|{}mechanism[0]
        open fun <get-mechanism>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism.<get-mechanism>|<get-mechanism>(){}[0]
        open fun <set-mechanism>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpFecParameters.mechanism.<set-mechanism>|<set-mechanism>(kotlin.js.JsString?){}[0]
    open var ssrc // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpFecParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability|null[0]
    open var uri // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri|{}uri[0]
        open fun <get-uri>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri.<get-uri>|<get-uri>(){}[0]
        open fun <set-uri>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionCapability.uri.<set-uri>|<set-uri>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters|null[0]
    abstract var id // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id|{}id[0]
        abstract fun <get-id>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        abstract fun <set-id>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.id.<set-id>|<set-id>(kotlin.js.JsNumber){}[0]
    abstract var uri // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri|{}uri[0]
        abstract fun <get-uri>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]
        abstract fun <set-uri>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.uri.<set-uri>|<set-uri>(kotlin.js.JsString){}[0]
    open var encrypted // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted|{}encrypted[0]
        open fun <get-encrypted>(): kotlin/Boolean? // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        open fun <set-encrypted>(kotlin/Boolean?) // io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters.encrypted.<set-encrypted>|<set-encrypted>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpParameters|null[0]
    abstract var codecs // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpCodecParameters> // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpCodecParameters>) // io.ktor.client.webrtc.peer/RTCRtpParameters.codecs.<set-codecs>|<set-codecs>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpCodecParameters>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters> // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpHeaderExtensionParameters>) // io.ktor.client.webrtc.peer/RTCRtpParameters.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpHeaderExtensionParameters>){}[0]
    abstract var rtcp // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp|{}rtcp[0]
        abstract fun <get-rtcp>(): io.ktor.client.webrtc.peer/RTCRtcpParameters // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract fun <set-rtcp>(io.ktor.client.webrtc.peer/RTCRtcpParameters) // io.ktor.client.webrtc.peer/RTCRtpParameters.rtcp.<set-rtcp>|<set-rtcp>(io.ktor.client.webrtc.peer.RTCRtcpParameters){}[0]
    abstract var transactionId // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId|{}transactionId[0]
        abstract fun <get-transactionId>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
        abstract fun <set-transactionId>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpReceiver : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpReceiver|null[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpReceiver.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.peer/RTCRtpReceiver.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.peer/RTCRtpReceiver.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.peer/RTCRtpReceiver.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transport // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpReceiver.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]

    abstract fun getContributingSources(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpContributingSource> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getContributingSources|getContributingSources(){}[0]
    abstract fun getParameters(): kotlin.js/JsAny? // io.ktor.client.webrtc.peer/RTCRtpReceiver.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getStats|getStats(){}[0]
    abstract fun getSynchronizationSources(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpSynchronizationSource> // io.ktor.client.webrtc.peer/RTCRtpReceiver.getSynchronizationSources|getSynchronizationSources(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpRtxParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpRtxParameters|null[0]
    open var ssrc // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCRtpRtxParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpSender : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpSender|null[0]
    abstract var dtmf // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf|{}dtmf[0]
        abstract fun <get-dtmf>(): io.ktor.client.webrtc.peer/RTCDTMFSender? // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract fun <set-dtmf>(io.ktor.client.webrtc.peer/RTCDTMFSender?) // io.ktor.client.webrtc.peer/RTCRtpSender.dtmf.<set-dtmf>|<set-dtmf>(io.ktor.client.webrtc.peer.RTCDTMFSender?){}[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpSender.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.peer/RTCRtpSender.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack? // io.ktor.client.webrtc.peer/RTCRtpSender.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack?) // io.ktor.client.webrtc.peer/RTCRtpSender.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract var transport // io.ktor.client.webrtc.peer/RTCRtpSender.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.peer/RTCDtlsTransport? // io.ktor.client.webrtc.peer/RTCRtpSender.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.peer/RTCDtlsTransport?) // io.ktor.client.webrtc.peer/RTCRtpSender.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.peer.RTCDtlsTransport?){}[0]

    abstract fun getParameters(): kotlin.js/JsAny? // io.ktor.client.webrtc.peer/RTCRtpSender.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.peer/RTCStatsReport> // io.ktor.client.webrtc.peer/RTCRtpSender.getStats|getStats(){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack?): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract fun setParameters(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.peer/RTCRtpParameters = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.peer.RTCRtpParameters){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.peer/RTCRtpSendParameters): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.peer/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.peer.RTCRtpSendParameters){}[0]
    abstract fun setStreams(kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...) // io.ktor.client.webrtc.peer/RTCRtpSender.setStreams|setStreams(kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpTransceiver : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpTransceiver|null[0]
    abstract var currentDirection // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection|{}currentDirection[0]
        abstract fun <get-currentDirection>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection.<get-currentDirection>|<get-currentDirection>(){}[0]
        abstract fun <set-currentDirection>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.currentDirection.<set-currentDirection>|<set-currentDirection>(kotlin.js.JsString){}[0]
    abstract var direction // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction|{}direction[0]
        abstract fun <get-direction>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction.<get-direction>|<get-direction>(){}[0]
        abstract fun <set-direction>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.direction.<set-direction>|<set-direction>(kotlin.js.JsString){}[0]
    abstract var mid // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid|{}mid[0]
        abstract fun <get-mid>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid.<get-mid>|<get-mid>(){}[0]
        abstract fun <set-mid>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.mid.<set-mid>|<set-mid>(kotlin.js.JsString?){}[0]
    abstract var receiver // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.peer/RTCRtpReceiver // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.peer/RTCRtpReceiver) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.peer.RTCRtpReceiver){}[0]
    abstract var sender // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender|{}sender[0]
        abstract fun <get-sender>(): io.ktor.client.webrtc.peer/RTCRtpSender // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender.<get-sender>|<get-sender>(){}[0]
        abstract fun <set-sender>(io.ktor.client.webrtc.peer/RTCRtpSender) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.sender.<set-sender>|<set-sender>(io.ktor.client.webrtc.peer.RTCRtpSender){}[0]
    abstract var stopped // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped|{}stopped[0]
        abstract fun <get-stopped>(): kotlin/Boolean // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped.<get-stopped>|<get-stopped>(){}[0]
        abstract fun <set-stopped>(kotlin/Boolean) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stopped.<set-stopped>|<set-stopped>(kotlin.Boolean){}[0]

    abstract fun setCodecPreferences(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpCodecCapability>) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpCodecCapability>){}[0]
    abstract fun setDirection(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCRtpTransceiver.setDirection|setDirection(kotlin.js.JsString){}[0]
    abstract fun stop() // io.ktor.client.webrtc.peer/RTCRtpTransceiver.stop|stop(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCRtpTransceiverInit : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit|null[0]
    open var direction // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction|{}direction[0]
        open fun <get-direction>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction.<get-direction>|<get-direction>(){}[0]
        open fun <set-direction>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.direction.<set-direction>|<set-direction>(kotlin.js.JsString?){}[0]
    open var sendEncodings // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings|{}sendEncodings[0]
        open fun <get-sendEncodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings.<get-sendEncodings>|<get-sendEncodings>(){}[0]
        open fun <set-sendEncodings>(kotlin.js/JsArray<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters>?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.sendEncodings.<set-sendEncodings>|<set-sendEncodings>(kotlin.js.JsArray<io.ktor.client.webrtc.peer.RTCRtpEncodingParameters>?){}[0]
    open var streams // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams|{}streams[0]
        open fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams.<get-streams>|<get-streams>(){}[0]
        open fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.peer/RTCRtpTransceiverInit.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCSessionDescriptionInit : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit|null[0]
    open var sdp // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp|{}sdp[0]
        open fun <get-sdp>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp.<get-sdp>|<get-sdp>(){}[0]
        open fun <set-sdp>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.sdp.<set-sdp>|<set-sdp>(kotlin.js.JsString?){}[0]
    open var type // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type|{}type[0]
        open fun <get-type>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCSessionDescriptionInit.type.<set-type>|<set-type>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCStats : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCStats|null[0]
    abstract val id // io.ktor.client.webrtc.peer/RTCStats.id|{}id[0]
        abstract fun <get-id>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCStats.id.<get-id>|<get-id>(){}[0]
    abstract val timestamp // io.ktor.client.webrtc.peer/RTCStats.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCStats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    abstract val type // io.ktor.client.webrtc.peer/RTCStats.type|{}type[0]
        abstract fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCStats.type.<get-type>|<get-type>(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.peer/RTCStatsReport : io.ktor.client.webrtc.peer/ReadonlyMap<kotlin.js/JsString> { // io.ktor.client.webrtc.peer/RTCStatsReport|null[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny, kotlin.js/JsString, io.ktor.client.webrtc.peer/RTCStatsReport, kotlin.js/JsAny?>, kotlin.js/JsAny = ...) // io.ktor.client.webrtc.peer/RTCStatsReport.forEach|forEach(kotlin.Function3<kotlin.js.JsAny,kotlin.js.JsString,io.ktor.client.webrtc.peer.RTCStatsReport,kotlin.js.JsAny?>;kotlin.js.JsAny){}[0]
}

// Targets: [wasmJs]
abstract class io.ktor.client.webrtc/WasmJsMediaTrack : io.ktor.client.webrtc/WebRTCMedia.Track { // io.ktor.client.webrtc/WasmJsMediaTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/WasmJsMediaTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]

    final val nativeStream // io.ktor.client.webrtc/WasmJsMediaTrack.nativeStream|{}nativeStream[0]
        final fun <get-nativeStream>(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc/WasmJsMediaTrack.nativeStream.<get-nativeStream>|<get-nativeStream>(){}[0]
    final val nativeTrack // io.ktor.client.webrtc/WasmJsMediaTrack.nativeTrack|{}nativeTrack[0]
        final fun <get-nativeTrack>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc/WasmJsMediaTrack.nativeTrack.<get-nativeTrack>|<get-nativeTrack>(){}[0]
    open val enabled // io.ktor.client.webrtc/WasmJsMediaTrack.enabled|{}enabled[0]
        open fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsMediaTrack.enabled.<get-enabled>|<get-enabled>(){}[0]
    open val id // io.ktor.client.webrtc/WasmJsMediaTrack.id|{}id[0]
        open fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WasmJsMediaTrack.id.<get-id>|<get-id>(){}[0]
    open val kind // io.ktor.client.webrtc/WasmJsMediaTrack.kind|{}kind[0]
        open fun <get-kind>(): io.ktor.client.webrtc/WebRTCMedia.TrackType // io.ktor.client.webrtc/WasmJsMediaTrack.kind.<get-kind>|<get-kind>(){}[0]

    open fun close() // io.ktor.client.webrtc/WasmJsMediaTrack.close|close(){}[0]
    open fun enable(kotlin/Boolean) // io.ktor.client.webrtc/WasmJsMediaTrack.enable|enable(kotlin.Boolean){}[0]
    open fun getNative(): kotlin/Any // io.ktor.client.webrtc/WasmJsMediaTrack.getNative|getNative(){}[0]

    final object Companion { // io.ktor.client.webrtc/WasmJsMediaTrack.Companion|null[0]
        final fun from(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream): io.ktor.client.webrtc/WasmJsMediaTrack // io.ktor.client.webrtc/WasmJsMediaTrack.Companion.from|from(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
    }
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.peer/RTCIceCandidate : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIceCandidate|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCIceCandidateInit) // io.ktor.client.webrtc.peer/RTCIceCandidate.<init>|<init>(io.ktor.client.webrtc.peer.RTCIceCandidateInit){}[0]

    final var candidate // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate|{}candidate[0]
        final fun <get-candidate>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsString){}[0]
    final var component // io.ktor.client.webrtc.peer/RTCIceCandidate.component|{}component[0]
        final fun <get-component>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.component.<get-component>|<get-component>(){}[0]
        final fun <set-component>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.component.<set-component>|<set-component>(kotlin.js.JsString){}[0]
    final var foundation // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation|{}foundation[0]
        final fun <get-foundation>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation.<get-foundation>|<get-foundation>(){}[0]
        final fun <set-foundation>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidate.foundation.<set-foundation>|<set-foundation>(kotlin.js.JsString?){}[0]
    final var port // io.ktor.client.webrtc.peer/RTCIceCandidate.port|{}port[0]
        final fun <get-port>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidate.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidate.port.<set-port>|<set-port>(kotlin.js.JsNumber?){}[0]
    final var priority // io.ktor.client.webrtc.peer/RTCIceCandidate.priority|{}priority[0]
        final fun <get-priority>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidate.priority.<get-priority>|<get-priority>(){}[0]
        final fun <set-priority>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidate.priority.<set-priority>|<set-priority>(kotlin.js.JsNumber?){}[0]
    final var protocol // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString){}[0]
    final var relatedAddress // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress|{}relatedAddress[0]
        final fun <get-relatedAddress>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        final fun <set-relatedAddress>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.js.JsString?){}[0]
    final var relatedPort // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort|{}relatedPort[0]
        final fun <get-relatedPort>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        final fun <set-relatedPort>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.peer/RTCIceCandidate.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.js.JsNumber?){}[0]
    final var sdpMLineIndex // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
        final fun <get-sdpMLineIndex>(): kotlin.js/JsNumber // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final fun <set-sdpMLineIndex>(kotlin.js/JsNumber) // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.js.JsNumber){}[0]
    final var sdpMid // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid|{}sdpMid[0]
        final fun <get-sdpMid>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        final fun <set-sdpMid>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.js.JsString){}[0]
    final var tcpType // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType|{}tcpType[0]
        final fun <get-tcpType>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        final fun <set-tcpType>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.tcpType.<set-tcpType>|<set-tcpType>(kotlin.js.JsString){}[0]
    final var type // io.ktor.client.webrtc.peer/RTCIceCandidate.type|{}type[0]
        final fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIceCandidate.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIceCandidate.type.<set-type>|<set-type>(kotlin.js.JsString){}[0]
    final var usernameFragment // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment|{}usernameFragment[0]
        final fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        final fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.peer/RTCIceCandidate.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]

    final fun toJSON(): io.ktor.client.webrtc.peer/RTCIceCandidateInit // io.ktor.client.webrtc.peer/RTCIceCandidate.toJSON|toJSON(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.peer/RTCIdentityAssertion : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCIdentityAssertion|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCIdentityAssertion.<init>|<init>(){}[0]

    final var idp // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp|{}idp[0]
        final fun <get-idp>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp.<get-idp>|<get-idp>(){}[0]
        final fun <set-idp>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIdentityAssertion.idp.<set-idp>|<set-idp>(kotlin.js.JsString){}[0]
    final var name // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name|{}name[0]
        final fun <get-name>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCIdentityAssertion.name.<set-name>|<set-name>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.peer/RTCSessionDescription : kotlin.js/JsAny { // io.ktor.client.webrtc.peer/RTCSessionDescription|null[0]
    constructor <init>() // io.ktor.client.webrtc.peer/RTCSessionDescription.<init>|<init>(){}[0]

    final var sdp // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp|{}sdp[0]
        final fun <get-sdp>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final fun <set-sdp>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCSessionDescription.sdp.<set-sdp>|<set-sdp>(kotlin.js.JsString){}[0]
    final var type // io.ktor.client.webrtc.peer/RTCSessionDescription.type|{}type[0]
        final fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.peer/RTCSessionDescription.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin.js/JsString) // io.ktor.client.webrtc.peer/RTCSessionDescription.type.<set-type>|<set-type>(kotlin.js.JsString){}[0]

    final fun toJSON(): kotlin.js/JsAny // io.ktor.client.webrtc.peer/RTCSessionDescription.toJSON|toJSON(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsAudioTrack : io.ktor.client.webrtc/WasmJsMediaTrack, io.ktor.client.webrtc/WebRTCMedia.AudioTrack { // io.ktor.client.webrtc/WasmJsAudioTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/WasmJsAudioTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsDtmfSender : io.ktor.client.webrtc/WebRTC.DtmfSender { // io.ktor.client.webrtc/WasmJsDtmfSender|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCDTMFSender) // io.ktor.client.webrtc/WasmJsDtmfSender.<init>|<init>(io.ktor.client.webrtc.peer.RTCDTMFSender){}[0]

    final val canInsertDTMF // io.ktor.client.webrtc/WasmJsDtmfSender.canInsertDTMF|{}canInsertDTMF[0]
        final fun <get-canInsertDTMF>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsDtmfSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]
    final val toneBuffer // io.ktor.client.webrtc/WasmJsDtmfSender.toneBuffer|{}toneBuffer[0]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/WasmJsDtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

    final fun getNative(): kotlin/Any // io.ktor.client.webrtc/WasmJsDtmfSender.getNative|getNative(){}[0]
    final fun insertDTMF(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/WasmJsDtmfSender.insertDTMF|insertDTMF(kotlin.String;kotlin.Int;kotlin.Int){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsRtpParameters : io.ktor.client.webrtc/WebRTC.RtpParameters { // io.ktor.client.webrtc/WasmJsRtpParameters|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCRtpSendParameters) // io.ktor.client.webrtc/WasmJsRtpParameters.<init>|<init>(io.ktor.client.webrtc.peer.RTCRtpSendParameters){}[0]

    final val codecs // io.ktor.client.webrtc/WasmJsRtpParameters.codecs|{}codecs[0]
        final fun <get-codecs>(): kotlin.collections/Iterable<io.ktor.client.webrtc.peer/RTCRtpCodecParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
    final val degradationPreference // io.ktor.client.webrtc/WasmJsRtpParameters.degradationPreference|{}degradationPreference[0]
        final fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRTC.DegradationPreference // io.ktor.client.webrtc/WasmJsRtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
    final val encodings // io.ktor.client.webrtc/WasmJsRtpParameters.encodings|{}encodings[0]
        final fun <get-encodings>(): kotlin.collections/Iterable<io.ktor.client.webrtc.peer/RTCRtpEncodingParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
    final val headerExtensions // io.ktor.client.webrtc/WasmJsRtpParameters.headerExtensions|{}headerExtensions[0]
        final fun <get-headerExtensions>(): kotlin.collections/List<io.ktor.client.webrtc/WebRTC.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
    final val nativeRtpParameters // io.ktor.client.webrtc/WasmJsRtpParameters.nativeRtpParameters|{}nativeRtpParameters[0]
        final fun <get-nativeRtpParameters>(): io.ktor.client.webrtc.peer/RTCRtpSendParameters // io.ktor.client.webrtc/WasmJsRtpParameters.nativeRtpParameters.<get-nativeRtpParameters>|<get-nativeRtpParameters>(){}[0]
    final val rtcp // io.ktor.client.webrtc/WasmJsRtpParameters.rtcp|{}rtcp[0]
        final fun <get-rtcp>(): io.ktor.client.webrtc.peer/RTCRtcpParameters // io.ktor.client.webrtc/WasmJsRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
    final val transactionId // io.ktor.client.webrtc/WasmJsRtpParameters.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/WasmJsRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsRtpSender : io.ktor.client.webrtc/WebRTC.RtpSender { // io.ktor.client.webrtc/WasmJsRtpSender|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCRtpSender) // io.ktor.client.webrtc/WasmJsRtpSender.<init>|<init>(io.ktor.client.webrtc.peer.RTCRtpSender){}[0]

    final val dtmf // io.ktor.client.webrtc/WasmJsRtpSender.dtmf|{}dtmf[0]
        final fun <get-dtmf>(): io.ktor.client.webrtc/WebRTC.DtmfSender? // io.ktor.client.webrtc/WasmJsRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
    final val nativeSender // io.ktor.client.webrtc/WasmJsRtpSender.nativeSender|{}nativeSender[0]
        final fun <get-nativeSender>(): io.ktor.client.webrtc.peer/RTCRtpSender // io.ktor.client.webrtc/WasmJsRtpSender.nativeSender.<get-nativeSender>|<get-nativeSender>(){}[0]
    final val track // io.ktor.client.webrtc/WasmJsRtpSender.track|{}track[0]
        final fun <get-track>(): io.ktor.client.webrtc/WebRTCMedia.Track? // io.ktor.client.webrtc/WasmJsRtpSender.track.<get-track>|<get-track>(){}[0]

    final fun getNative(): kotlin/Any // io.ktor.client.webrtc/WasmJsRtpSender.getNative|getNative(){}[0]
    final suspend fun getParameters(): io.ktor.client.webrtc/WebRTC.RtpParameters // io.ktor.client.webrtc/WasmJsRtpSender.getParameters|getParameters(){}[0]
    final suspend fun replaceTrack(io.ktor.client.webrtc/WebRTCMedia.Track?) // io.ktor.client.webrtc/WasmJsRtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRTCMedia.Track?){}[0]
    final suspend fun setParameters(io.ktor.client.webrtc/WebRTC.RtpParameters) // io.ktor.client.webrtc/WasmJsRtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRTC.RtpParameters){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsVideoTrack : io.ktor.client.webrtc/WasmJsMediaTrack, io.ktor.client.webrtc/WebRTCMedia.VideoTrack { // io.ktor.client.webrtc/WasmJsVideoTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack, org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc/WasmJsVideoTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack;org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsWebRTCEngine : io.ktor.client.webrtc/MediaTrackFactory, io.ktor.client.webrtc/WebRTCEngineBase { // io.ktor.client.webrtc/WasmJsWebRTCEngine|null[0]
    constructor <init>(io.ktor.client.webrtc/JsWebRTCEngineConfig, io.ktor.client.webrtc/MediaTrackFactory = ...) // io.ktor.client.webrtc/WasmJsWebRTCEngine.<init>|<init>(io.ktor.client.webrtc.JsWebRTCEngineConfig;io.ktor.client.webrtc.MediaTrackFactory){}[0]

    final val config // io.ktor.client.webrtc/WasmJsWebRTCEngine.config|{}config[0]
        final fun <get-config>(): io.ktor.client.webrtc/JsWebRTCEngineConfig // io.ktor.client.webrtc/WasmJsWebRTCEngine.config.<get-config>|<get-config>(){}[0]

    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRTCMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.AudioTrack // io.ktor.client.webrtc/WasmJsWebRTCEngine.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRTCMedia.AudioTrackConstraints){}[0]
    final suspend fun createPeerConnection(): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WasmJsWebRTCEngine.createPeerConnection|createPeerConnection(){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRTCMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRTCMedia.VideoTrack // io.ktor.client.webrtc/WasmJsWebRTCEngine.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRTCMedia.VideoTrackConstraints){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsWebRtcPeerConnection : io.ktor.client.webrtc/WebRtcPeerConnection, kotlinx.coroutines/CoroutineScope { // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.peer/RTCPeerConnection, kotlin.coroutines/CoroutineContext, kotlin/Long) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.<init>|<init>(io.ktor.client.webrtc.peer.RTCPeerConnection;kotlin.coroutines.CoroutineContext;kotlin.Long){}[0]

    final val coroutineContext // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

    final fun close() // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.close|close(){}[0]
    final fun getNativeConnection(): kotlin/Any // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.getNativeConnection|getNativeConnection(){}[0]
    final fun restartIce() // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.restartIce|restartIce(){}[0]
    final suspend fun addIceCandidate(io.ktor.client.webrtc/WebRTC.IceCandidate) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRTC.IceCandidate){}[0]
    final suspend fun addTrack(io.ktor.client.webrtc/WebRTCMedia.Track): io.ktor.client.webrtc/WebRTC.RtpSender // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    final suspend fun createAnswer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    final suspend fun createOffer(): io.ktor.client.webrtc/WebRTC.SessionDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.createOffer|createOffer(){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRTC.RtpSender) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTC.RtpSender){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRTCMedia.Track) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRTCMedia.Track){}[0]
    final suspend fun setLocalDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
    final suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRTC.SessionDescription) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRTC.SessionDescription){}[0]
}

// Targets: [wasmJs]
final fun io.ktor.client.webrtc.utils/emptyObject(): kotlin.js/JsAny // io.ktor.client.webrtc.utils/emptyObject|emptyObject(){}[0]

// Targets: [wasmJs]
final fun io.ktor.client.webrtc.utils/makeIceServerObject(io.ktor.client.webrtc/WebRTC.IceServer): io.ktor.client.webrtc.peer/RTCIceServer // io.ktor.client.webrtc.utils/makeIceServerObject|makeIceServerObject(io.ktor.client.webrtc.WebRTC.IceServer){}[0]

// Targets: [wasmJs]
final inline fun <#A: kotlin.js/JsAny> io.ktor.client.webrtc.utils/jsObject(kotlin/Function1<#A, kotlin/Unit>): #A // io.ktor.client.webrtc.utils/jsObject|jsObject(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.js.JsAny>}[0]
