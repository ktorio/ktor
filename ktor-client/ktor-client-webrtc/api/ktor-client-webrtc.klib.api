// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-client-webrtc>
abstract fun interface <#A: out io.ktor.client.webrtc/WebRtcConfig> io.ktor.client.webrtc/WebRtcClientEngineFactory { // io.ktor.client.webrtc/WebRtcClientEngineFactory|null[0]
    abstract fun create(kotlin/Function1<#A, kotlin/Unit>): io.ktor.client.webrtc/WebRtcEngine // io.ktor.client.webrtc/WebRtcClientEngineFactory.create|create(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

abstract interface io.ktor.client.webrtc/MediaTrackFactory { // io.ktor.client.webrtc/MediaTrackFactory|null[0]
    abstract suspend fun createAudioTrack(io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.AudioTrack // io.ktor.client.webrtc/MediaTrackFactory.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRtcMedia.AudioTrackConstraints){}[0]
    abstract suspend fun createVideoTrack(io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.VideoTrack // io.ktor.client.webrtc/MediaTrackFactory.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRtcMedia.VideoTrackConstraints){}[0]
}

abstract interface io.ktor.client.webrtc/WebRtcConnectionEvents { // io.ktor.client.webrtc/WebRtcConnectionEvents|null[0]
    abstract val dataChannelEvents // io.ktor.client.webrtc/WebRtcConnectionEvents.dataChannelEvents|{}dataChannelEvents[0]
        abstract fun <get-dataChannelEvents>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/DataChannelEvent> // io.ktor.client.webrtc/WebRtcConnectionEvents.dataChannelEvents.<get-dataChannelEvents>|<get-dataChannelEvents>(){}[0]
    abstract val iceCandidates // io.ktor.client.webrtc/WebRtcConnectionEvents.iceCandidates|{}iceCandidates[0]
        abstract fun <get-iceCandidates>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/WebRtc.IceCandidate> // io.ktor.client.webrtc/WebRtcConnectionEvents.iceCandidates.<get-iceCandidates>|<get-iceCandidates>(){}[0]
    abstract val iceConnectionState // io.ktor.client.webrtc/WebRtcConnectionEvents.iceConnectionState|{}iceConnectionState[0]
        abstract fun <get-iceConnectionState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.IceConnectionState> // io.ktor.client.webrtc/WebRtcConnectionEvents.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]
    abstract val iceGatheringState // io.ktor.client.webrtc/WebRtcConnectionEvents.iceGatheringState|{}iceGatheringState[0]
        abstract fun <get-iceGatheringState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.IceGatheringState> // io.ktor.client.webrtc/WebRtcConnectionEvents.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]
    abstract val negotiationNeeded // io.ktor.client.webrtc/WebRtcConnectionEvents.negotiationNeeded|{}negotiationNeeded[0]
        abstract fun <get-negotiationNeeded>(): kotlinx.coroutines.flow/SharedFlow<kotlin/Unit> // io.ktor.client.webrtc/WebRtcConnectionEvents.negotiationNeeded.<get-negotiationNeeded>|<get-negotiationNeeded>(){}[0]
    abstract val signalingState // io.ktor.client.webrtc/WebRtcConnectionEvents.signalingState|{}signalingState[0]
        abstract fun <get-signalingState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.SignalingState> // io.ktor.client.webrtc/WebRtcConnectionEvents.signalingState.<get-signalingState>|<get-signalingState>(){}[0]
    abstract val state // io.ktor.client.webrtc/WebRtcConnectionEvents.state|{}state[0]
        abstract fun <get-state>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.ConnectionState> // io.ktor.client.webrtc/WebRtcConnectionEvents.state.<get-state>|<get-state>(){}[0]
    abstract val stats // io.ktor.client.webrtc/WebRtcConnectionEvents.stats|{}stats[0]
        abstract fun <get-stats>(): kotlinx.coroutines.flow/StateFlow<kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats>> // io.ktor.client.webrtc/WebRtcConnectionEvents.stats.<get-stats>|<get-stats>(){}[0]
    abstract val trackEvents // io.ktor.client.webrtc/WebRtcConnectionEvents.trackEvents|{}trackEvents[0]
        abstract fun <get-trackEvents>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/TrackEvent> // io.ktor.client.webrtc/WebRtcConnectionEvents.trackEvents.<get-trackEvents>|<get-trackEvents>(){}[0]
}

abstract interface io.ktor.client.webrtc/WebRtcEngine : io.ktor.client.webrtc/MediaTrackFactory, kotlin/AutoCloseable { // io.ktor.client.webrtc/WebRtcEngine|null[0]
    abstract val config // io.ktor.client.webrtc/WebRtcEngine.config|{}config[0]
        abstract fun <get-config>(): io.ktor.client.webrtc/WebRtcConfig // io.ktor.client.webrtc/WebRtcEngine.config.<get-config>|<get-config>(){}[0]

    abstract suspend fun createPeerConnection(io.ktor.client.webrtc/WebRtcConnectionConfig): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRtcEngine.createPeerConnection|createPeerConnection(io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]
    open suspend fun createPeerConnection(kotlin/Function1<io.ktor.client.webrtc/WebRtcConnectionConfig, kotlin/Unit> = ...): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRtcEngine.createPeerConnection|createPeerConnection(kotlin.Function1<io.ktor.client.webrtc.WebRtcConnectionConfig,kotlin.Unit>){}[0]
}

sealed interface io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent|null[0]
    abstract val channel // io.ktor.client.webrtc/DataChannelEvent.channel|{}channel[0]
        abstract fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.channel.<get-channel>|<get-channel>(){}[0]

    final class BufferedAmountLow : io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent.BufferedAmountLow|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcDataChannel) // io.ktor.client.webrtc/DataChannelEvent.BufferedAmountLow.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannel){}[0]

        final val channel // io.ktor.client.webrtc/DataChannelEvent.BufferedAmountLow.channel|{}channel[0]
            final fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.BufferedAmountLow.channel.<get-channel>|<get-channel>(){}[0]
    }

    final class Closed : io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent.Closed|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcDataChannel) // io.ktor.client.webrtc/DataChannelEvent.Closed.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannel){}[0]

        final val channel // io.ktor.client.webrtc/DataChannelEvent.Closed.channel|{}channel[0]
            final fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.Closed.channel.<get-channel>|<get-channel>(){}[0]
    }

    final class Closing : io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent.Closing|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcDataChannel) // io.ktor.client.webrtc/DataChannelEvent.Closing.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannel){}[0]

        final val channel // io.ktor.client.webrtc/DataChannelEvent.Closing.channel|{}channel[0]
            final fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.Closing.channel.<get-channel>|<get-channel>(){}[0]
    }

    final class Error : io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent.Error|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcDataChannel, kotlin/String) // io.ktor.client.webrtc/DataChannelEvent.Error.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannel;kotlin.String){}[0]

        final val channel // io.ktor.client.webrtc/DataChannelEvent.Error.channel|{}channel[0]
            final fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.Error.channel.<get-channel>|<get-channel>(){}[0]
        final val reason // io.ktor.client.webrtc/DataChannelEvent.Error.reason|{}reason[0]
            final fun <get-reason>(): kotlin/String // io.ktor.client.webrtc/DataChannelEvent.Error.reason.<get-reason>|<get-reason>(){}[0]
    }

    final class Open : io.ktor.client.webrtc/DataChannelEvent { // io.ktor.client.webrtc/DataChannelEvent.Open|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcDataChannel) // io.ktor.client.webrtc/DataChannelEvent.Open.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannel){}[0]

        final val channel // io.ktor.client.webrtc/DataChannelEvent.Open.channel|{}channel[0]
            final fun <get-channel>(): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/DataChannelEvent.Open.channel.<get-channel>|<get-channel>(){}[0]
    }
}

sealed interface io.ktor.client.webrtc/TrackEvent { // io.ktor.client.webrtc/TrackEvent|null[0]
    abstract val track // io.ktor.client.webrtc/TrackEvent.track|{}track[0]
        abstract fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track // io.ktor.client.webrtc/TrackEvent.track.<get-track>|<get-track>(){}[0]

    final class Add : io.ktor.client.webrtc/TrackEvent { // io.ktor.client.webrtc/TrackEvent.Add|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcMedia.Track) // io.ktor.client.webrtc/TrackEvent.Add.<init>|<init>(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]

        final val track // io.ktor.client.webrtc/TrackEvent.Add.track|{}track[0]
            final fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track // io.ktor.client.webrtc/TrackEvent.Add.track.<get-track>|<get-track>(){}[0]
    }

    final class Remove : io.ktor.client.webrtc/TrackEvent { // io.ktor.client.webrtc/TrackEvent.Remove|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtcMedia.Track) // io.ktor.client.webrtc/TrackEvent.Remove.<init>|<init>(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]

        final val track // io.ktor.client.webrtc/TrackEvent.Remove.track|{}track[0]
            final fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track // io.ktor.client.webrtc/TrackEvent.Remove.track.<get-track>|<get-track>(){}[0]
    }
}

abstract class io.ktor.client.webrtc/WebRtcDataChannel : kotlin/AutoCloseable { // io.ktor.client.webrtc/WebRtcDataChannel|null[0]
    constructor <init>(io.ktor.client.webrtc/WebRtcDataChannelOptions) // io.ktor.client.webrtc/WebRtcDataChannel.<init>|<init>(io.ktor.client.webrtc.WebRtcDataChannelOptions){}[0]

    abstract val bufferedAmount // io.ktor.client.webrtc/WebRtcDataChannel.bufferedAmount|{}bufferedAmount[0]
        abstract fun <get-bufferedAmount>(): kotlin/Long // io.ktor.client.webrtc/WebRtcDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]
    abstract val bufferedAmountLowThreshold // io.ktor.client.webrtc/WebRtcDataChannel.bufferedAmountLowThreshold|{}bufferedAmountLowThreshold[0]
        abstract fun <get-bufferedAmountLowThreshold>(): kotlin/Long // io.ktor.client.webrtc/WebRtcDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]
    abstract val id // io.ktor.client.webrtc/WebRtcDataChannel.id|{}id[0]
        abstract fun <get-id>(): kotlin/Int // io.ktor.client.webrtc/WebRtcDataChannel.id.<get-id>|<get-id>(){}[0]
    abstract val label // io.ktor.client.webrtc/WebRtcDataChannel.label|{}label[0]
        abstract fun <get-label>(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannel.label.<get-label>|<get-label>(){}[0]
    abstract val maxPacketLifeTime // io.ktor.client.webrtc/WebRtcDataChannel.maxPacketLifeTime|{}maxPacketLifeTime[0]
        abstract fun <get-maxPacketLifeTime>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
    abstract val maxRetransmits // io.ktor.client.webrtc/WebRtcDataChannel.maxRetransmits|{}maxRetransmits[0]
        abstract fun <get-maxRetransmits>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
    abstract val negotiated // io.ktor.client.webrtc/WebRtcDataChannel.negotiated|{}negotiated[0]
        abstract fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtcDataChannel.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
    abstract val ordered // io.ktor.client.webrtc/WebRtcDataChannel.ordered|{}ordered[0]
        abstract fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtcDataChannel.ordered.<get-ordered>|<get-ordered>(){}[0]
    abstract val protocol // io.ktor.client.webrtc/WebRtcDataChannel.protocol|{}protocol[0]
        abstract fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]
    abstract val state // io.ktor.client.webrtc/WebRtcDataChannel.state|{}state[0]
        abstract fun <get-state>(): io.ktor.client.webrtc/WebRtc.DataChannelState // io.ktor.client.webrtc/WebRtcDataChannel.state.<get-state>|<get-state>(){}[0]

    abstract fun close() // io.ktor.client.webrtc/WebRtcDataChannel.close|close(){}[0]
    abstract fun send(kotlin/ByteArray) // io.ktor.client.webrtc/WebRtcDataChannel.send|send(kotlin.ByteArray){}[0]
    abstract fun send(kotlin/String) // io.ktor.client.webrtc/WebRtcDataChannel.send|send(kotlin.String){}[0]
    abstract fun setBufferedAmountLowThreshold(kotlin/Long) // io.ktor.client.webrtc/WebRtcDataChannel.setBufferedAmountLowThreshold|setBufferedAmountLowThreshold(kotlin.Long){}[0]
    final fun emitMessage(io.ktor.client.webrtc/WebRtcDataChannel.Message): kotlinx.coroutines.channels/ChannelResult<kotlin/Unit> // io.ktor.client.webrtc/WebRtcDataChannel.emitMessage|emitMessage(io.ktor.client.webrtc.WebRtcDataChannel.Message){}[0]
    final fun stopReceivingMessages() // io.ktor.client.webrtc/WebRtcDataChannel.stopReceivingMessages|stopReceivingMessages(){}[0]
    final fun tryReceive(): io.ktor.client.webrtc/WebRtcDataChannel.Message? // io.ktor.client.webrtc/WebRtcDataChannel.tryReceive|tryReceive(){}[0]
    final fun tryReceiveBinary(): kotlin/ByteArray? // io.ktor.client.webrtc/WebRtcDataChannel.tryReceiveBinary|tryReceiveBinary(){}[0]
    final fun tryReceiveText(): kotlin/String? // io.ktor.client.webrtc/WebRtcDataChannel.tryReceiveText|tryReceiveText(){}[0]
    final suspend fun receive(): io.ktor.client.webrtc/WebRtcDataChannel.Message // io.ktor.client.webrtc/WebRtcDataChannel.receive|receive(){}[0]
    final suspend fun receiveBinary(): kotlin/ByteArray // io.ktor.client.webrtc/WebRtcDataChannel.receiveBinary|receiveBinary(){}[0]
    final suspend fun receiveText(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannel.receiveText|receiveText(){}[0]

    sealed interface Message { // io.ktor.client.webrtc/WebRtcDataChannel.Message|null[0]
        open fun binaryOrException(): kotlin/ByteArray // io.ktor.client.webrtc/WebRtcDataChannel.Message.binaryOrException|binaryOrException(){}[0]
        open fun binaryOrNull(): kotlin/ByteArray? // io.ktor.client.webrtc/WebRtcDataChannel.Message.binaryOrNull|binaryOrNull(){}[0]
        open fun textOrException(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannel.Message.textOrException|textOrException(){}[0]
        open fun textOrNull(): kotlin/String? // io.ktor.client.webrtc/WebRtcDataChannel.Message.textOrNull|textOrNull(){}[0]

        final class Binary : io.ktor.client.webrtc/WebRtcDataChannel.Message { // io.ktor.client.webrtc/WebRtcDataChannel.Message.Binary|null[0]
            constructor <init>(kotlin/ByteArray) // io.ktor.client.webrtc/WebRtcDataChannel.Message.Binary.<init>|<init>(kotlin.ByteArray){}[0]

            final val data // io.ktor.client.webrtc/WebRtcDataChannel.Message.Binary.data|{}data[0]
                final fun <get-data>(): kotlin/ByteArray // io.ktor.client.webrtc/WebRtcDataChannel.Message.Binary.data.<get-data>|<get-data>(){}[0]
        }

        final class Text : io.ktor.client.webrtc/WebRtcDataChannel.Message { // io.ktor.client.webrtc/WebRtcDataChannel.Message.Text|null[0]
            constructor <init>(kotlin/String) // io.ktor.client.webrtc/WebRtcDataChannel.Message.Text.<init>|<init>(kotlin.String){}[0]

            final val data // io.ktor.client.webrtc/WebRtcDataChannel.Message.Text.data|{}data[0]
                final fun <get-data>(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannel.Message.Text.data.<get-data>|<get-data>(){}[0]
        }
    }
}

abstract class io.ktor.client.webrtc/WebRtcEngineBase : io.ktor.client.webrtc/WebRtcEngine { // io.ktor.client.webrtc/WebRtcEngineBase|null[0]
    constructor <init>(kotlin/String) // io.ktor.client.webrtc/WebRtcEngineBase.<init>|<init>(kotlin.String){}[0]

    final fun createConnectionContext(kotlin.coroutines/CoroutineContext): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/WebRtcEngineBase.createConnectionContext|createConnectionContext(kotlin.coroutines.CoroutineContext){}[0]
    open fun close() // io.ktor.client.webrtc/WebRtcEngineBase.close|close(){}[0]
}

abstract class io.ktor.client.webrtc/WebRtcPeerConnection : io.ktor.client.webrtc/WebRtcConnectionEvents, io.ktor.utils.io.core/Closeable { // io.ktor.client.webrtc/WebRtcPeerConnection|null[0]
    constructor <init>(kotlin.coroutines/CoroutineContext, io.ktor.client.webrtc/WebRtcConnectionConfig) // io.ktor.client.webrtc/WebRtcPeerConnection.<init>|<init>(kotlin.coroutines.CoroutineContext;io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]

    abstract val localDescription // io.ktor.client.webrtc/WebRtcPeerConnection.localDescription|{}localDescription[0]
        abstract fun <get-localDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/WebRtcPeerConnection.localDescription.<get-localDescription>|<get-localDescription>(){}[0]
    abstract val remoteDescription // io.ktor.client.webrtc/WebRtcPeerConnection.remoteDescription|{}remoteDescription[0]
        abstract fun <get-remoteDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/WebRtcPeerConnection.remoteDescription.<get-remoteDescription>|<get-remoteDescription>(){}[0]
    final val coroutineScope // io.ktor.client.webrtc/WebRtcPeerConnection.coroutineScope|{}coroutineScope[0]
        final fun <get-coroutineScope>(): kotlinx.coroutines/CoroutineScope // io.ktor.client.webrtc/WebRtcPeerConnection.coroutineScope.<get-coroutineScope>|<get-coroutineScope>(){}[0]
    open val dataChannelEvents // io.ktor.client.webrtc/WebRtcPeerConnection.dataChannelEvents|{}dataChannelEvents[0]
        open fun <get-dataChannelEvents>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/DataChannelEvent> // io.ktor.client.webrtc/WebRtcPeerConnection.dataChannelEvents.<get-dataChannelEvents>|<get-dataChannelEvents>(){}[0]
    open val iceCandidates // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidates|{}iceCandidates[0]
        open fun <get-iceCandidates>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/WebRtc.IceCandidate> // io.ktor.client.webrtc/WebRtcPeerConnection.iceCandidates.<get-iceCandidates>|<get-iceCandidates>(){}[0]
    open val iceConnectionState // io.ktor.client.webrtc/WebRtcPeerConnection.iceConnectionState|{}iceConnectionState[0]
        open fun <get-iceConnectionState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.IceConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]
    open val iceGatheringState // io.ktor.client.webrtc/WebRtcPeerConnection.iceGatheringState|{}iceGatheringState[0]
        open fun <get-iceGatheringState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.IceGatheringState> // io.ktor.client.webrtc/WebRtcPeerConnection.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]
    open val negotiationNeeded // io.ktor.client.webrtc/WebRtcPeerConnection.negotiationNeeded|{}negotiationNeeded[0]
        open fun <get-negotiationNeeded>(): kotlinx.coroutines.flow/SharedFlow<kotlin/Unit> // io.ktor.client.webrtc/WebRtcPeerConnection.negotiationNeeded.<get-negotiationNeeded>|<get-negotiationNeeded>(){}[0]
    open val signalingState // io.ktor.client.webrtc/WebRtcPeerConnection.signalingState|{}signalingState[0]
        open fun <get-signalingState>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.SignalingState> // io.ktor.client.webrtc/WebRtcPeerConnection.signalingState.<get-signalingState>|<get-signalingState>(){}[0]
    open val state // io.ktor.client.webrtc/WebRtcPeerConnection.state|{}state[0]
        open fun <get-state>(): kotlinx.coroutines.flow/StateFlow<io.ktor.client.webrtc/WebRtc.ConnectionState> // io.ktor.client.webrtc/WebRtcPeerConnection.state.<get-state>|<get-state>(){}[0]
    open val stats // io.ktor.client.webrtc/WebRtcPeerConnection.stats|{}stats[0]
        open fun <get-stats>(): kotlinx.coroutines.flow/StateFlow<kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats>> // io.ktor.client.webrtc/WebRtcPeerConnection.stats.<get-stats>|<get-stats>(){}[0]
    open val trackEvents // io.ktor.client.webrtc/WebRtcPeerConnection.trackEvents|{}trackEvents[0]
        open fun <get-trackEvents>(): kotlinx.coroutines.flow/SharedFlow<io.ktor.client.webrtc/TrackEvent> // io.ktor.client.webrtc/WebRtcPeerConnection.trackEvents.<get-trackEvents>|<get-trackEvents>(){}[0]

    abstract fun restartIce() // io.ktor.client.webrtc/WebRtcPeerConnection.restartIce|restartIce(){}[0]
    abstract suspend fun addIceCandidate(io.ktor.client.webrtc/WebRtc.IceCandidate) // io.ktor.client.webrtc/WebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRtc.IceCandidate){}[0]
    abstract suspend fun addTrack(io.ktor.client.webrtc/WebRtcMedia.Track): io.ktor.client.webrtc/WebRtc.RtpSender // io.ktor.client.webrtc/WebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    abstract suspend fun createAnswer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    abstract suspend fun createDataChannel(kotlin/String, kotlin/Function1<io.ktor.client.webrtc/WebRtcDataChannelOptions, kotlin/Unit> = ...): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/WebRtcPeerConnection.createDataChannel|createDataChannel(kotlin.String;kotlin.Function1<io.ktor.client.webrtc.WebRtcDataChannelOptions,kotlin.Unit>){}[0]
    abstract suspend fun createOffer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WebRtcPeerConnection.createOffer|createOffer(){}[0]
    abstract suspend fun getStatistics(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats> // io.ktor.client.webrtc/WebRtcPeerConnection.getStatistics|getStatistics(){}[0]
    abstract suspend fun removeTrack(io.ktor.client.webrtc/WebRtc.RtpSender) // io.ktor.client.webrtc/WebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtc.RtpSender){}[0]
    abstract suspend fun removeTrack(io.ktor.client.webrtc/WebRtcMedia.Track) // io.ktor.client.webrtc/WebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    abstract suspend fun setLocalDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/WebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
    abstract suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/WebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
    open fun close() // io.ktor.client.webrtc/WebRtcPeerConnection.close|close(){}[0]
}

final class io.ktor.client.webrtc/DataChannelReceiveOptions { // io.ktor.client.webrtc/DataChannelReceiveOptions|null[0]
    constructor <init>() // io.ktor.client.webrtc/DataChannelReceiveOptions.<init>|<init>(){}[0]

    final var capacity // io.ktor.client.webrtc/DataChannelReceiveOptions.capacity|{}capacity[0]
        final fun <get-capacity>(): kotlin/Int // io.ktor.client.webrtc/DataChannelReceiveOptions.capacity.<get-capacity>|<get-capacity>(){}[0]
        final fun <set-capacity>(kotlin/Int) // io.ktor.client.webrtc/DataChannelReceiveOptions.capacity.<set-capacity>|<set-capacity>(kotlin.Int){}[0]
    final var onBufferOverflow // io.ktor.client.webrtc/DataChannelReceiveOptions.onBufferOverflow|{}onBufferOverflow[0]
        final fun <get-onBufferOverflow>(): kotlinx.coroutines.channels/BufferOverflow // io.ktor.client.webrtc/DataChannelReceiveOptions.onBufferOverflow.<get-onBufferOverflow>|<get-onBufferOverflow>(){}[0]
        final fun <set-onBufferOverflow>(kotlinx.coroutines.channels/BufferOverflow) // io.ktor.client.webrtc/DataChannelReceiveOptions.onBufferOverflow.<set-onBufferOverflow>|<set-onBufferOverflow>(kotlinx.coroutines.channels.BufferOverflow){}[0]
    final var onUndeliveredElement // io.ktor.client.webrtc/DataChannelReceiveOptions.onUndeliveredElement|{}onUndeliveredElement[0]
        final fun <get-onUndeliveredElement>(): kotlin/Function1<io.ktor.client.webrtc/WebRtcDataChannel.Message, kotlin/Unit>? // io.ktor.client.webrtc/DataChannelReceiveOptions.onUndeliveredElement.<get-onUndeliveredElement>|<get-onUndeliveredElement>(){}[0]
        final fun <set-onUndeliveredElement>(kotlin/Function1<io.ktor.client.webrtc/WebRtcDataChannel.Message, kotlin/Unit>?) // io.ktor.client.webrtc/DataChannelReceiveOptions.onUndeliveredElement.<set-onUndeliveredElement>|<set-onUndeliveredElement>(kotlin.Function1<io.ktor.client.webrtc.WebRtcDataChannel.Message,kotlin.Unit>?){}[0]
}

final class io.ktor.client.webrtc/WebRtcClient : io.ktor.client.webrtc/WebRtcEngine { // io.ktor.client.webrtc/WebRtcClient|null[0]
    constructor <init>(io.ktor.client.webrtc/WebRtcEngine) // io.ktor.client.webrtc/WebRtcClient.<init>|<init>(io.ktor.client.webrtc.WebRtcEngine){}[0]

    final val config // io.ktor.client.webrtc/WebRtcClient.config|{}config[0]
        final fun <get-config>(): io.ktor.client.webrtc/WebRtcConfig // io.ktor.client.webrtc/WebRtcClient.config.<get-config>|<get-config>(){}[0]

    final fun close() // io.ktor.client.webrtc/WebRtcClient.close|close(){}[0]
    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.AudioTrack // io.ktor.client.webrtc/WebRtcClient.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRtcMedia.AudioTrackConstraints){}[0]
    final suspend fun createPeerConnection(io.ktor.client.webrtc/WebRtcConnectionConfig): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRtcClient.createPeerConnection|createPeerConnection(io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]
    final suspend fun createPeerConnection(kotlin/Function1<io.ktor.client.webrtc/WebRtcConnectionConfig, kotlin/Unit>): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/WebRtcClient.createPeerConnection|createPeerConnection(kotlin.Function1<io.ktor.client.webrtc.WebRtcConnectionConfig,kotlin.Unit>){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.VideoTrack // io.ktor.client.webrtc/WebRtcClient.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRtcMedia.VideoTrackConstraints){}[0]
}

final class io.ktor.client.webrtc/WebRtcDataChannelOptions { // io.ktor.client.webrtc/WebRtcDataChannelOptions|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRtcDataChannelOptions.<init>|<init>(){}[0]

    final var id // io.ktor.client.webrtc/WebRtcDataChannelOptions.id|{}id[0]
        final fun <get-id>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcDataChannelOptions.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/Int?) // io.ktor.client.webrtc/WebRtcDataChannelOptions.id.<set-id>|<set-id>(kotlin.Int?){}[0]
    final var maxPacketLifeTime // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxPacketLifeTime|{}maxPacketLifeTime[0]
        final fun <get-maxPacketLifeTime>(): kotlin.time/Duration? // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
        final fun <set-maxPacketLifeTime>(kotlin.time/Duration?) // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.time.Duration?){}[0]
    final var maxRetransmits // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxRetransmits|{}maxRetransmits[0]
        final fun <get-maxRetransmits>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
        final fun <set-maxRetransmits>(kotlin/Int?) // io.ktor.client.webrtc/WebRtcDataChannelOptions.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.Int?){}[0]
    final var negotiated // io.ktor.client.webrtc/WebRtcDataChannelOptions.negotiated|{}negotiated[0]
        final fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtcDataChannelOptions.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        final fun <set-negotiated>(kotlin/Boolean) // io.ktor.client.webrtc/WebRtcDataChannelOptions.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean){}[0]
    final var ordered // io.ktor.client.webrtc/WebRtcDataChannelOptions.ordered|{}ordered[0]
        final fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtcDataChannelOptions.ordered.<get-ordered>|<get-ordered>(){}[0]
        final fun <set-ordered>(kotlin/Boolean) // io.ktor.client.webrtc/WebRtcDataChannelOptions.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean){}[0]
    final var protocol // io.ktor.client.webrtc/WebRtcDataChannelOptions.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc/WebRtcDataChannelOptions.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(kotlin/String) // io.ktor.client.webrtc/WebRtcDataChannelOptions.protocol.<set-protocol>|<set-protocol>(kotlin.String){}[0]
    final var receiveOptions // io.ktor.client.webrtc/WebRtcDataChannelOptions.receiveOptions|{}receiveOptions[0]
        final fun <get-receiveOptions>(): kotlin/Function1<io.ktor.client.webrtc/DataChannelReceiveOptions, kotlin/Unit> // io.ktor.client.webrtc/WebRtcDataChannelOptions.receiveOptions.<get-receiveOptions>|<get-receiveOptions>(){}[0]
        final fun <set-receiveOptions>(kotlin/Function1<io.ktor.client.webrtc/DataChannelReceiveOptions, kotlin/Unit>) // io.ktor.client.webrtc/WebRtcDataChannelOptions.receiveOptions.<set-receiveOptions>|<set-receiveOptions>(kotlin.Function1<io.ktor.client.webrtc.DataChannelReceiveOptions,kotlin.Unit>){}[0]
}

final class io.ktor.client.webrtc/WebRtcEngineClosedException : kotlin.coroutines.cancellation/CancellationException { // io.ktor.client.webrtc/WebRtcEngineClosedException|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRtcEngineClosedException.<init>|<init>(){}[0]
}

open class io.ktor.client.webrtc/WebRtcConfig { // io.ktor.client.webrtc/WebRtcConfig|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRtcConfig.<init>|<init>(){}[0]

    final var defaultConnectionConfig // io.ktor.client.webrtc/WebRtcConfig.defaultConnectionConfig|{}defaultConnectionConfig[0]
        final fun <get-defaultConnectionConfig>(): kotlin/Function1<io.ktor.client.webrtc/WebRtcConnectionConfig, kotlin/Unit> // io.ktor.client.webrtc/WebRtcConfig.defaultConnectionConfig.<get-defaultConnectionConfig>|<get-defaultConnectionConfig>(){}[0]
        final fun <set-defaultConnectionConfig>(kotlin/Function1<io.ktor.client.webrtc/WebRtcConnectionConfig, kotlin/Unit>) // io.ktor.client.webrtc/WebRtcConfig.defaultConnectionConfig.<set-defaultConnectionConfig>|<set-defaultConnectionConfig>(kotlin.Function1<io.ktor.client.webrtc.WebRtcConnectionConfig,kotlin.Unit>){}[0]
    final var dispatcher // io.ktor.client.webrtc/WebRtcConfig.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher? // io.ktor.client.webrtc/WebRtcConfig.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final fun <set-dispatcher>(kotlinx.coroutines/CoroutineDispatcher?) // io.ktor.client.webrtc/WebRtcConfig.dispatcher.<set-dispatcher>|<set-dispatcher>(kotlinx.coroutines.CoroutineDispatcher?){}[0]
    final var mediaTrackFactory // io.ktor.client.webrtc/WebRtcConfig.mediaTrackFactory|{}mediaTrackFactory[0]
        final fun <get-mediaTrackFactory>(): io.ktor.client.webrtc/MediaTrackFactory? // io.ktor.client.webrtc/WebRtcConfig.mediaTrackFactory.<get-mediaTrackFactory>|<get-mediaTrackFactory>(){}[0]
        final fun <set-mediaTrackFactory>(io.ktor.client.webrtc/MediaTrackFactory?) // io.ktor.client.webrtc/WebRtcConfig.mediaTrackFactory.<set-mediaTrackFactory>|<set-mediaTrackFactory>(io.ktor.client.webrtc.MediaTrackFactory?){}[0]
}

open class io.ktor.client.webrtc/WebRtcConnectionConfig { // io.ktor.client.webrtc/WebRtcConnectionConfig|null[0]
    constructor <init>() // io.ktor.client.webrtc/WebRtcConnectionConfig.<init>|<init>(){}[0]

    final var bundlePolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.bundlePolicy|{}bundlePolicy[0]
        final fun <get-bundlePolicy>(): io.ktor.client.webrtc/WebRtc.BundlePolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.bundlePolicy.<get-bundlePolicy>|<get-bundlePolicy>(){}[0]
        final fun <set-bundlePolicy>(io.ktor.client.webrtc/WebRtc.BundlePolicy) // io.ktor.client.webrtc/WebRtcConnectionConfig.bundlePolicy.<set-bundlePolicy>|<set-bundlePolicy>(io.ktor.client.webrtc.WebRtc.BundlePolicy){}[0]
    final var coroutineContext // io.ktor.client.webrtc/WebRtcConnectionConfig.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.webrtc/WebRtcConnectionConfig.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
        final fun <set-coroutineContext>(kotlin.coroutines/CoroutineContext) // io.ktor.client.webrtc/WebRtcConnectionConfig.coroutineContext.<set-coroutineContext>|<set-coroutineContext>(kotlin.coroutines.CoroutineContext){}[0]
    final var dataChannelEventsReplay // io.ktor.client.webrtc/WebRtcConnectionConfig.dataChannelEventsReplay|{}dataChannelEventsReplay[0]
        final fun <get-dataChannelEventsReplay>(): kotlin/Int // io.ktor.client.webrtc/WebRtcConnectionConfig.dataChannelEventsReplay.<get-dataChannelEventsReplay>|<get-dataChannelEventsReplay>(){}[0]
        final fun <set-dataChannelEventsReplay>(kotlin/Int) // io.ktor.client.webrtc/WebRtcConnectionConfig.dataChannelEventsReplay.<set-dataChannelEventsReplay>|<set-dataChannelEventsReplay>(kotlin.Int){}[0]
    final var iceCandidatePoolSize // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatePoolSize|{}iceCandidatePoolSize[0]
        final fun <get-iceCandidatePoolSize>(): kotlin/Int // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatePoolSize.<get-iceCandidatePoolSize>|<get-iceCandidatePoolSize>(){}[0]
        final fun <set-iceCandidatePoolSize>(kotlin/Int) // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatePoolSize.<set-iceCandidatePoolSize>|<set-iceCandidatePoolSize>(kotlin.Int){}[0]
    final var iceCandidatesReplay // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatesReplay|{}iceCandidatesReplay[0]
        final fun <get-iceCandidatesReplay>(): kotlin/Int // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatesReplay.<get-iceCandidatesReplay>|<get-iceCandidatesReplay>(){}[0]
        final fun <set-iceCandidatesReplay>(kotlin/Int) // io.ktor.client.webrtc/WebRtcConnectionConfig.iceCandidatesReplay.<set-iceCandidatesReplay>|<set-iceCandidatesReplay>(kotlin.Int){}[0]
    final var iceServers // io.ktor.client.webrtc/WebRtcConnectionConfig.iceServers|{}iceServers[0]
        final fun <get-iceServers>(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.IceServer> // io.ktor.client.webrtc/WebRtcConnectionConfig.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        final fun <set-iceServers>(kotlin.collections/List<io.ktor.client.webrtc/WebRtc.IceServer>) // io.ktor.client.webrtc/WebRtcConnectionConfig.iceServers.<set-iceServers>|<set-iceServers>(kotlin.collections.List<io.ktor.client.webrtc.WebRtc.IceServer>){}[0]
    final var iceTransportPolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.iceTransportPolicy|{}iceTransportPolicy[0]
        final fun <get-iceTransportPolicy>(): io.ktor.client.webrtc/WebRtc.IceTransportPolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.iceTransportPolicy.<get-iceTransportPolicy>|<get-iceTransportPolicy>(){}[0]
        final fun <set-iceTransportPolicy>(io.ktor.client.webrtc/WebRtc.IceTransportPolicy) // io.ktor.client.webrtc/WebRtcConnectionConfig.iceTransportPolicy.<set-iceTransportPolicy>|<set-iceTransportPolicy>(io.ktor.client.webrtc.WebRtc.IceTransportPolicy){}[0]
    final var remoteTracksReplay // io.ktor.client.webrtc/WebRtcConnectionConfig.remoteTracksReplay|{}remoteTracksReplay[0]
        final fun <get-remoteTracksReplay>(): kotlin/Int // io.ktor.client.webrtc/WebRtcConnectionConfig.remoteTracksReplay.<get-remoteTracksReplay>|<get-remoteTracksReplay>(){}[0]
        final fun <set-remoteTracksReplay>(kotlin/Int) // io.ktor.client.webrtc/WebRtcConnectionConfig.remoteTracksReplay.<set-remoteTracksReplay>|<set-remoteTracksReplay>(kotlin.Int){}[0]
    final var rtcpMuxPolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.rtcpMuxPolicy|{}rtcpMuxPolicy[0]
        final fun <get-rtcpMuxPolicy>(): io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy // io.ktor.client.webrtc/WebRtcConnectionConfig.rtcpMuxPolicy.<get-rtcpMuxPolicy>|<get-rtcpMuxPolicy>(){}[0]
        final fun <set-rtcpMuxPolicy>(io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy) // io.ktor.client.webrtc/WebRtcConnectionConfig.rtcpMuxPolicy.<set-rtcpMuxPolicy>|<set-rtcpMuxPolicy>(io.ktor.client.webrtc.WebRtc.RtcpMuxPolicy){}[0]
    final var statsRefreshRate // io.ktor.client.webrtc/WebRtcConnectionConfig.statsRefreshRate|{}statsRefreshRate[0]
        final fun <get-statsRefreshRate>(): kotlin/Long // io.ktor.client.webrtc/WebRtcConnectionConfig.statsRefreshRate.<get-statsRefreshRate>|<get-statsRefreshRate>(){}[0]
        final fun <set-statsRefreshRate>(kotlin/Long) // io.ktor.client.webrtc/WebRtcConnectionConfig.statsRefreshRate.<set-statsRefreshRate>|<set-statsRefreshRate>(kotlin.Long){}[0]
}

final object io.ktor.client.webrtc/WebRtc { // io.ktor.client.webrtc/WebRtc|null[0]
    final enum class BundlePolicy : kotlin/Enum<io.ktor.client.webrtc/WebRtc.BundlePolicy> { // io.ktor.client.webrtc/WebRtc.BundlePolicy|null[0]
        enum entry BALANCED // io.ktor.client.webrtc/WebRtc.BundlePolicy.BALANCED|null[0]
        enum entry MAX_BUNDLE // io.ktor.client.webrtc/WebRtc.BundlePolicy.MAX_BUNDLE|null[0]
        enum entry MAX_COMPAT // io.ktor.client.webrtc/WebRtc.BundlePolicy.MAX_COMPAT|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.BundlePolicy.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.BundlePolicy> // io.ktor.client.webrtc/WebRtc.BundlePolicy.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.BundlePolicy // io.ktor.client.webrtc/WebRtc.BundlePolicy.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.BundlePolicy> // io.ktor.client.webrtc/WebRtc.BundlePolicy.values|values#static(){}[0]
    }

    final enum class ConnectionState : kotlin/Enum<io.ktor.client.webrtc/WebRtc.ConnectionState> { // io.ktor.client.webrtc/WebRtc.ConnectionState|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRtc.ConnectionState.CLOSED|null[0]
        enum entry CONNECTED // io.ktor.client.webrtc/WebRtc.ConnectionState.CONNECTED|null[0]
        enum entry CONNECTING // io.ktor.client.webrtc/WebRtc.ConnectionState.CONNECTING|null[0]
        enum entry DISCONNECTED // io.ktor.client.webrtc/WebRtc.ConnectionState.DISCONNECTED|null[0]
        enum entry FAILED // io.ktor.client.webrtc/WebRtc.ConnectionState.FAILED|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRtc.ConnectionState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.ConnectionState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.ConnectionState> // io.ktor.client.webrtc/WebRtc.ConnectionState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.ConnectionState // io.ktor.client.webrtc/WebRtc.ConnectionState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.ConnectionState> // io.ktor.client.webrtc/WebRtc.ConnectionState.values|values#static(){}[0]
    }

    final enum class DataChannelState : kotlin/Enum<io.ktor.client.webrtc/WebRtc.DataChannelState> { // io.ktor.client.webrtc/WebRtc.DataChannelState|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRtc.DataChannelState.CLOSED|null[0]
        enum entry CLOSING // io.ktor.client.webrtc/WebRtc.DataChannelState.CLOSING|null[0]
        enum entry CONNECTING // io.ktor.client.webrtc/WebRtc.DataChannelState.CONNECTING|null[0]
        enum entry OPEN // io.ktor.client.webrtc/WebRtc.DataChannelState.OPEN|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.DataChannelState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.DataChannelState> // io.ktor.client.webrtc/WebRtc.DataChannelState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.DataChannelState // io.ktor.client.webrtc/WebRtc.DataChannelState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.DataChannelState> // io.ktor.client.webrtc/WebRtc.DataChannelState.values|values#static(){}[0]
    }

    final enum class DegradationPreference : kotlin/Enum<io.ktor.client.webrtc/WebRtc.DegradationPreference> { // io.ktor.client.webrtc/WebRtc.DegradationPreference|null[0]
        enum entry BALANCED // io.ktor.client.webrtc/WebRtc.DegradationPreference.BALANCED|null[0]
        enum entry DISABLED // io.ktor.client.webrtc/WebRtc.DegradationPreference.DISABLED|null[0]
        enum entry MAINTAIN_FRAMERATE // io.ktor.client.webrtc/WebRtc.DegradationPreference.MAINTAIN_FRAMERATE|null[0]
        enum entry MAINTAIN_RESOLUTION // io.ktor.client.webrtc/WebRtc.DegradationPreference.MAINTAIN_RESOLUTION|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.DegradationPreference.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.DegradationPreference> // io.ktor.client.webrtc/WebRtc.DegradationPreference.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.DegradationPreference // io.ktor.client.webrtc/WebRtc.DegradationPreference.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.DegradationPreference> // io.ktor.client.webrtc/WebRtc.DegradationPreference.values|values#static(){}[0]
    }

    final enum class IceConnectionState : kotlin/Enum<io.ktor.client.webrtc/WebRtc.IceConnectionState> { // io.ktor.client.webrtc/WebRtc.IceConnectionState|null[0]
        enum entry CHECKING // io.ktor.client.webrtc/WebRtc.IceConnectionState.CHECKING|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRtc.IceConnectionState.CLOSED|null[0]
        enum entry COMPLETED // io.ktor.client.webrtc/WebRtc.IceConnectionState.COMPLETED|null[0]
        enum entry CONNECTED // io.ktor.client.webrtc/WebRtc.IceConnectionState.CONNECTED|null[0]
        enum entry DISCONNECTED // io.ktor.client.webrtc/WebRtc.IceConnectionState.DISCONNECTED|null[0]
        enum entry FAILED // io.ktor.client.webrtc/WebRtc.IceConnectionState.FAILED|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRtc.IceConnectionState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.IceConnectionState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.IceConnectionState> // io.ktor.client.webrtc/WebRtc.IceConnectionState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun isSuccessful(): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.IceConnectionState.isSuccessful|isSuccessful(){}[0]
        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.IceConnectionState // io.ktor.client.webrtc/WebRtc.IceConnectionState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.IceConnectionState> // io.ktor.client.webrtc/WebRtc.IceConnectionState.values|values#static(){}[0]
    }

    final enum class IceGatheringState : kotlin/Enum<io.ktor.client.webrtc/WebRtc.IceGatheringState> { // io.ktor.client.webrtc/WebRtc.IceGatheringState|null[0]
        enum entry COMPLETE // io.ktor.client.webrtc/WebRtc.IceGatheringState.COMPLETE|null[0]
        enum entry GATHERING // io.ktor.client.webrtc/WebRtc.IceGatheringState.GATHERING|null[0]
        enum entry NEW // io.ktor.client.webrtc/WebRtc.IceGatheringState.NEW|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.IceGatheringState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.IceGatheringState> // io.ktor.client.webrtc/WebRtc.IceGatheringState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.IceGatheringState // io.ktor.client.webrtc/WebRtc.IceGatheringState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.IceGatheringState> // io.ktor.client.webrtc/WebRtc.IceGatheringState.values|values#static(){}[0]
    }

    final enum class IceTransportPolicy : kotlin/Enum<io.ktor.client.webrtc/WebRtc.IceTransportPolicy> { // io.ktor.client.webrtc/WebRtc.IceTransportPolicy|null[0]
        enum entry ALL // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.ALL|null[0]
        enum entry RELAY // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.RELAY|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.IceTransportPolicy> // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.IceTransportPolicy // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.IceTransportPolicy> // io.ktor.client.webrtc/WebRtc.IceTransportPolicy.values|values#static(){}[0]
    }

    final enum class RtcpMuxPolicy : kotlin/Enum<io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy> { // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy|null[0]
        enum entry NEGOTIATE // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.NEGOTIATE|null[0]
        enum entry REQUIRE // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.REQUIRE|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy> // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy> // io.ktor.client.webrtc/WebRtc.RtcpMuxPolicy.values|values#static(){}[0]
    }

    final enum class SessionDescriptionType : kotlin/Enum<io.ktor.client.webrtc/WebRtc.SessionDescriptionType> { // io.ktor.client.webrtc/WebRtc.SessionDescriptionType|null[0]
        enum entry ANSWER // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.ANSWER|null[0]
        enum entry OFFER // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.OFFER|null[0]
        enum entry PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.PROVISIONAL_ANSWER|null[0]
        enum entry ROLLBACK // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.ROLLBACK|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.SessionDescriptionType> // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.SessionDescriptionType // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.SessionDescriptionType> // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.values|values#static(){}[0]

        final object Companion : kotlinx.serialization.internal/SerializerFactory { // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRtc.SessionDescriptionType> // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.Companion.serializer|serializer(){}[0]
            final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.ktor.client.webrtc/WebRtc.SessionDescriptionType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
        }
    }

    final enum class SignalingState : kotlin/Enum<io.ktor.client.webrtc/WebRtc.SignalingState> { // io.ktor.client.webrtc/WebRtc.SignalingState|null[0]
        enum entry CLOSED // io.ktor.client.webrtc/WebRtc.SignalingState.CLOSED|null[0]
        enum entry HAVE_LOCAL_OFFER // io.ktor.client.webrtc/WebRtc.SignalingState.HAVE_LOCAL_OFFER|null[0]
        enum entry HAVE_LOCAL_PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRtc.SignalingState.HAVE_LOCAL_PROVISIONAL_ANSWER|null[0]
        enum entry HAVE_REMOTE_OFFER // io.ktor.client.webrtc/WebRtc.SignalingState.HAVE_REMOTE_OFFER|null[0]
        enum entry HAVE_REMOTE_PROVISIONAL_ANSWER // io.ktor.client.webrtc/WebRtc.SignalingState.HAVE_REMOTE_PROVISIONAL_ANSWER|null[0]
        enum entry STABLE // io.ktor.client.webrtc/WebRtc.SignalingState.STABLE|null[0]

        final val entries // io.ktor.client.webrtc/WebRtc.SignalingState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtc.SignalingState> // io.ktor.client.webrtc/WebRtc.SignalingState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtc.SignalingState // io.ktor.client.webrtc/WebRtc.SignalingState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtc.SignalingState> // io.ktor.client.webrtc/WebRtc.SignalingState.values|values#static(){}[0]
    }

    abstract interface DtmfSender { // io.ktor.client.webrtc/WebRtc.DtmfSender|null[0]
        abstract val canInsertDtmf // io.ktor.client.webrtc/WebRtc.DtmfSender.canInsertDtmf|{}canInsertDtmf[0]
            abstract fun <get-canInsertDtmf>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.DtmfSender.canInsertDtmf.<get-canInsertDtmf>|<get-canInsertDtmf>(){}[0]
        abstract val toneBuffer // io.ktor.client.webrtc/WebRtc.DtmfSender.toneBuffer|{}toneBuffer[0]
            abstract fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/WebRtc.DtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        abstract fun insertDtmf(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/WebRtc.DtmfSender.insertDtmf|insertDtmf(kotlin.String;kotlin.Int;kotlin.Int){}[0]
    }

    abstract interface RtpParameters { // io.ktor.client.webrtc/WebRtc.RtpParameters|null[0]
        abstract val codecs // io.ktor.client.webrtc/WebRtc.RtpParameters.codecs|{}codecs[0]
            abstract fun <get-codecs>(): kotlin.collections/Iterable<kotlin/Any> // io.ktor.client.webrtc/WebRtc.RtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract val degradationPreference // io.ktor.client.webrtc/WebRtc.RtpParameters.degradationPreference|{}degradationPreference[0]
            abstract fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRtc.DegradationPreference // io.ktor.client.webrtc/WebRtc.RtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
        abstract val encodings // io.ktor.client.webrtc/WebRtc.RtpParameters.encodings|{}encodings[0]
            abstract fun <get-encodings>(): kotlin.collections/Iterable<kotlin/Any> // io.ktor.client.webrtc/WebRtc.RtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
        abstract val headerExtensions // io.ktor.client.webrtc/WebRtc.RtpParameters.headerExtensions|{}headerExtensions[0]
            abstract fun <get-headerExtensions>(): kotlin.collections/Iterable<io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/WebRtc.RtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract val rtcp // io.ktor.client.webrtc/WebRtc.RtpParameters.rtcp|{}rtcp[0]
            abstract fun <get-rtcp>(): kotlin/Any // io.ktor.client.webrtc/WebRtc.RtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract val transactionId // io.ktor.client.webrtc/WebRtc.RtpParameters.transactionId|{}transactionId[0]
            abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/WebRtc.RtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
    }

    abstract interface RtpSender { // io.ktor.client.webrtc/WebRtc.RtpSender|null[0]
        abstract val dtmf // io.ktor.client.webrtc/WebRtc.RtpSender.dtmf|{}dtmf[0]
            abstract fun <get-dtmf>(): io.ktor.client.webrtc/WebRtc.DtmfSender? // io.ktor.client.webrtc/WebRtc.RtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract val track // io.ktor.client.webrtc/WebRtc.RtpSender.track|{}track[0]
            abstract fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track? // io.ktor.client.webrtc/WebRtc.RtpSender.track.<get-track>|<get-track>(){}[0]

        abstract suspend fun getParameters(): io.ktor.client.webrtc/WebRtc.RtpParameters // io.ktor.client.webrtc/WebRtc.RtpSender.getParameters|getParameters(){}[0]
        abstract suspend fun replaceTrack(io.ktor.client.webrtc/WebRtcMedia.Track?) // io.ktor.client.webrtc/WebRtc.RtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRtcMedia.Track?){}[0]
        abstract suspend fun setParameters(io.ktor.client.webrtc/WebRtc.RtpParameters) // io.ktor.client.webrtc/WebRtc.RtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRtc.RtpParameters){}[0]
    }

    final class IceCandidate { // io.ktor.client.webrtc/WebRtc.IceCandidate|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Int) // io.ktor.client.webrtc/WebRtc.IceCandidate.<init>|<init>(kotlin.String;kotlin.String;kotlin.Int){}[0]

        final val candidate // io.ktor.client.webrtc/WebRtc.IceCandidate.candidate|{}candidate[0]
            final fun <get-candidate>(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final val sdpMLineIndex // io.ktor.client.webrtc/WebRtc.IceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
            final fun <get-sdpMLineIndex>(): kotlin/Int // io.ktor.client.webrtc/WebRtc.IceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final val sdpMid // io.ktor.client.webrtc/WebRtc.IceCandidate.sdpMid|{}sdpMid[0]
            final fun <get-sdpMid>(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceCandidate.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceCandidate.component2|component2(){}[0]
        final fun component3(): kotlin/Int // io.ktor.client.webrtc/WebRtc.IceCandidate.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Int = ...): io.ktor.client.webrtc/WebRtc.IceCandidate // io.ktor.client.webrtc/WebRtc.IceCandidate.copy|copy(kotlin.String;kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.IceCandidate.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtc.IceCandidate.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceCandidate.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.ktor.client.webrtc/WebRtc.IceCandidate> { // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer|null[0]
            final val descriptor // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.client.webrtc/WebRtc.IceCandidate // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.client.webrtc/WebRtc.IceCandidate) // io.ktor.client.webrtc/WebRtc.IceCandidate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.client.webrtc.WebRtc.IceCandidate){}[0]
        }

        final object Companion { // io.ktor.client.webrtc/WebRtc.IceCandidate.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRtc.IceCandidate> // io.ktor.client.webrtc/WebRtc.IceCandidate.Companion.serializer|serializer(){}[0]
        }
    }

    final class IceException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRtc.IceException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRtc.IceException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class IceServer { // io.ktor.client.webrtc/WebRtc.IceServer|null[0]
        constructor <init>(kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // io.ktor.client.webrtc/WebRtc.IceServer.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?){}[0]

        final val credential // io.ktor.client.webrtc/WebRtc.IceServer.credential|{}credential[0]
            final fun <get-credential>(): kotlin/String? // io.ktor.client.webrtc/WebRtc.IceServer.credential.<get-credential>|<get-credential>(){}[0]
        final val urls // io.ktor.client.webrtc/WebRtc.IceServer.urls|{}urls[0]
            final fun <get-urls>(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceServer.urls.<get-urls>|<get-urls>(){}[0]
        final val username // io.ktor.client.webrtc/WebRtc.IceServer.username|{}username[0]
            final fun <get-username>(): kotlin/String? // io.ktor.client.webrtc/WebRtc.IceServer.username.<get-username>|<get-username>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceServer.component1|component1(){}[0]
        final fun component2(): kotlin/String? // io.ktor.client.webrtc/WebRtc.IceServer.component2|component2(){}[0]
        final fun component3(): kotlin/String? // io.ktor.client.webrtc/WebRtc.IceServer.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): io.ktor.client.webrtc/WebRtc.IceServer // io.ktor.client.webrtc/WebRtc.IceServer.copy|copy(kotlin.String;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.IceServer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtc.IceServer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtc.IceServer.toString|toString(){}[0]
    }

    final class RtpHeaderExtensionParameters { // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters|null[0]
        constructor <init>(kotlin/Int, kotlin/String, kotlin/Boolean) // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.<init>|<init>(kotlin.Int;kotlin.String;kotlin.Boolean){}[0]

        final val encrypted // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.encrypted|{}encrypted[0]
            final fun <get-encrypted>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        final val id // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.id|{}id[0]
            final fun <get-id>(): kotlin/Int // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        final val uri // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.uri|{}uri[0]
            final fun <get-uri>(): kotlin/String // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]

        final fun component1(): kotlin/Int // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.component3|component3(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/Boolean = ...): io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.copy|copy(kotlin.Int;kotlin.String;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters.toString|toString(){}[0]
    }

    final class SdpException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRtc.SdpException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRtc.SdpException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class SessionDescription { // io.ktor.client.webrtc/WebRtc.SessionDescription|null[0]
        constructor <init>(io.ktor.client.webrtc/WebRtc.SessionDescriptionType, kotlin/String) // io.ktor.client.webrtc/WebRtc.SessionDescription.<init>|<init>(io.ktor.client.webrtc.WebRtc.SessionDescriptionType;kotlin.String){}[0]

        final val sdp // io.ktor.client.webrtc/WebRtc.SessionDescription.sdp|{}sdp[0]
            final fun <get-sdp>(): kotlin/String // io.ktor.client.webrtc/WebRtc.SessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final val type // io.ktor.client.webrtc/WebRtc.SessionDescription.type|{}type[0]
            final fun <get-type>(): io.ktor.client.webrtc/WebRtc.SessionDescriptionType // io.ktor.client.webrtc/WebRtc.SessionDescription.type.<get-type>|<get-type>(){}[0]

        final fun component1(): io.ktor.client.webrtc/WebRtc.SessionDescriptionType // io.ktor.client.webrtc/WebRtc.SessionDescription.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRtc.SessionDescription.component2|component2(){}[0]
        final fun copy(io.ktor.client.webrtc/WebRtc.SessionDescriptionType = ..., kotlin/String = ...): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WebRtc.SessionDescription.copy|copy(io.ktor.client.webrtc.WebRtc.SessionDescriptionType;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.SessionDescription.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtc.SessionDescription.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtc.SessionDescription.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.ktor.client.webrtc/WebRtc.SessionDescription> { // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer|null[0]
            final val descriptor // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/WebRtc.SessionDescription.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
        }

        final object Companion { // io.ktor.client.webrtc/WebRtc.SessionDescription.Companion|null[0]
            final val $childSerializers // io.ktor.client.webrtc/WebRtc.SessionDescription.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.client.webrtc/WebRtc.SessionDescription> // io.ktor.client.webrtc/WebRtc.SessionDescription.Companion.serializer|serializer(){}[0]
        }
    }

    final class Stats { // io.ktor.client.webrtc/WebRtc.Stats|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Long, kotlin.collections/Map<kotlin/String, kotlin/Any?>) // io.ktor.client.webrtc/WebRtc.Stats.<init>|<init>(kotlin.String;kotlin.String;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]

        final val id // io.ktor.client.webrtc/WebRtc.Stats.id|{}id[0]
            final fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WebRtc.Stats.id.<get-id>|<get-id>(){}[0]
        final val props // io.ktor.client.webrtc/WebRtc.Stats.props|{}props[0]
            final fun <get-props>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.client.webrtc/WebRtc.Stats.props.<get-props>|<get-props>(){}[0]
        final val timestamp // io.ktor.client.webrtc/WebRtc.Stats.timestamp|{}timestamp[0]
            final fun <get-timestamp>(): kotlin/Long // io.ktor.client.webrtc/WebRtc.Stats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        final val type // io.ktor.client.webrtc/WebRtc.Stats.type|{}type[0]
            final fun <get-type>(): kotlin/String // io.ktor.client.webrtc/WebRtc.Stats.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlin/String // io.ktor.client.webrtc/WebRtc.Stats.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.ktor.client.webrtc/WebRtc.Stats.component2|component2(){}[0]
        final fun component3(): kotlin/Long // io.ktor.client.webrtc/WebRtc.Stats.component3|component3(){}[0]
        final fun component4(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.client.webrtc/WebRtc.Stats.component4|component4(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Long = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?> = ...): io.ktor.client.webrtc/WebRtc.Stats // io.ktor.client.webrtc/WebRtc.Stats.copy|copy(kotlin.String;kotlin.String;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtc.Stats.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtc.Stats.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtc.Stats.toString|toString(){}[0]
    }
}

final object io.ktor.client.webrtc/WebRtcMedia { // io.ktor.client.webrtc/WebRtcMedia|null[0]
    final enum class FacingMode : kotlin/Enum<io.ktor.client.webrtc/WebRtcMedia.FacingMode> { // io.ktor.client.webrtc/WebRtcMedia.FacingMode|null[0]
        enum entry ENVIRONMENT // io.ktor.client.webrtc/WebRtcMedia.FacingMode.ENVIRONMENT|null[0]
        enum entry LEFT // io.ktor.client.webrtc/WebRtcMedia.FacingMode.LEFT|null[0]
        enum entry RIGHT // io.ktor.client.webrtc/WebRtcMedia.FacingMode.RIGHT|null[0]
        enum entry USER // io.ktor.client.webrtc/WebRtcMedia.FacingMode.USER|null[0]

        final val entries // io.ktor.client.webrtc/WebRtcMedia.FacingMode.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtcMedia.FacingMode> // io.ktor.client.webrtc/WebRtcMedia.FacingMode.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtcMedia.FacingMode // io.ktor.client.webrtc/WebRtcMedia.FacingMode.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtcMedia.FacingMode> // io.ktor.client.webrtc/WebRtcMedia.FacingMode.values|values#static(){}[0]
    }

    final enum class ResizeMode : kotlin/Enum<io.ktor.client.webrtc/WebRtcMedia.ResizeMode> { // io.ktor.client.webrtc/WebRtcMedia.ResizeMode|null[0]
        enum entry CROP_AND_SCALE // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.CROP_AND_SCALE|null[0]
        enum entry NONE // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.NONE|null[0]

        final val entries // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtcMedia.ResizeMode> // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtcMedia.ResizeMode // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtcMedia.ResizeMode> // io.ktor.client.webrtc/WebRtcMedia.ResizeMode.values|values#static(){}[0]
    }

    final enum class TrackType : kotlin/Enum<io.ktor.client.webrtc/WebRtcMedia.TrackType> { // io.ktor.client.webrtc/WebRtcMedia.TrackType|null[0]
        enum entry AUDIO // io.ktor.client.webrtc/WebRtcMedia.TrackType.AUDIO|null[0]
        enum entry VIDEO // io.ktor.client.webrtc/WebRtcMedia.TrackType.VIDEO|null[0]

        final val entries // io.ktor.client.webrtc/WebRtcMedia.TrackType.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.webrtc/WebRtcMedia.TrackType> // io.ktor.client.webrtc/WebRtcMedia.TrackType.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.client.webrtc/WebRtcMedia.TrackType // io.ktor.client.webrtc/WebRtcMedia.TrackType.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.client.webrtc/WebRtcMedia.TrackType> // io.ktor.client.webrtc/WebRtcMedia.TrackType.values|values#static(){}[0]
    }

    abstract interface AudioTrack : io.ktor.client.webrtc/WebRtcMedia.Track // io.ktor.client.webrtc/WebRtcMedia.AudioTrack|null[0]

    abstract interface Track : kotlin/AutoCloseable { // io.ktor.client.webrtc/WebRtcMedia.Track|null[0]
        abstract val enabled // io.ktor.client.webrtc/WebRtcMedia.Track.enabled|{}enabled[0]
            abstract fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/WebRtcMedia.Track.enabled.<get-enabled>|<get-enabled>(){}[0]
        abstract val id // io.ktor.client.webrtc/WebRtcMedia.Track.id|{}id[0]
            abstract fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WebRtcMedia.Track.id.<get-id>|<get-id>(){}[0]
        abstract val kind // io.ktor.client.webrtc/WebRtcMedia.Track.kind|{}kind[0]
            abstract fun <get-kind>(): io.ktor.client.webrtc/WebRtcMedia.TrackType // io.ktor.client.webrtc/WebRtcMedia.Track.kind.<get-kind>|<get-kind>(){}[0]

        abstract fun enable(kotlin/Boolean) // io.ktor.client.webrtc/WebRtcMedia.Track.enable|enable(kotlin.Boolean){}[0]
    }

    abstract interface VideoTrack : io.ktor.client.webrtc/WebRtcMedia.Track // io.ktor.client.webrtc/WebRtcMedia.VideoTrack|null[0]

    final class AudioTrackConstraints { // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints|null[0]
        constructor <init>(kotlin/Double? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Double? = ..., kotlin/Int? = ...) // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.<init>|<init>(kotlin.Double?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Double?;kotlin.Int?){}[0]

        final val autoGainControl // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.autoGainControl|{}autoGainControl[0]
            final fun <get-autoGainControl>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.autoGainControl.<get-autoGainControl>|<get-autoGainControl>(){}[0]
        final val channelCount // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.channelCount|{}channelCount[0]
            final fun <get-channelCount>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.channelCount.<get-channelCount>|<get-channelCount>(){}[0]
        final val echoCancellation // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.echoCancellation|{}echoCancellation[0]
            final fun <get-echoCancellation>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.echoCancellation.<get-echoCancellation>|<get-echoCancellation>(){}[0]
        final val latency // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.latency|{}latency[0]
            final fun <get-latency>(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.latency.<get-latency>|<get-latency>(){}[0]
        final val noiseSuppression // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.noiseSuppression|{}noiseSuppression[0]
            final fun <get-noiseSuppression>(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.noiseSuppression.<get-noiseSuppression>|<get-noiseSuppression>(){}[0]
        final val sampleRate // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.sampleRate|{}sampleRate[0]
            final fun <get-sampleRate>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.sampleRate.<get-sampleRate>|<get-sampleRate>(){}[0]
        final val sampleSize // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.sampleSize|{}sampleSize[0]
            final fun <get-sampleSize>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.sampleSize.<get-sampleSize>|<get-sampleSize>(){}[0]
        final val volume // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.volume|{}volume[0]
            final fun <get-volume>(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.volume.<get-volume>|<get-volume>(){}[0]

        final fun component1(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component1|component1(){}[0]
        final fun component2(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component6|component6(){}[0]
        final fun component7(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component7|component7(){}[0]
        final fun component8(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.component8|component8(){}[0]
        final fun copy(kotlin/Double? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Double? = ..., kotlin/Int? = ...): io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.copy|copy(kotlin.Double?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Double?;kotlin.Int?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints.toString|toString(){}[0]
    }

    final class DeviceException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRtcMedia.DeviceException|null[0]
        constructor <init>(kotlin/String?, kotlin/Throwable? = ...) // io.ktor.client.webrtc/WebRtcMedia.DeviceException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    }

    final class PermissionException : kotlin/RuntimeException { // io.ktor.client.webrtc/WebRtcMedia.PermissionException|null[0]
        constructor <init>(kotlin/String?) // io.ktor.client.webrtc/WebRtcMedia.PermissionException.<init>|<init>(kotlin.String?){}[0]
    }

    final class VideoTrackConstraints { // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints|null[0]
        constructor <init>(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Double? = ..., io.ktor.client.webrtc/WebRtcMedia.FacingMode? = ..., io.ktor.client.webrtc/WebRtcMedia.ResizeMode? = ...) // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.<init>|<init>(kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Double?;io.ktor.client.webrtc.WebRtcMedia.FacingMode?;io.ktor.client.webrtc.WebRtcMedia.ResizeMode?){}[0]

        final val aspectRatio // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.aspectRatio|{}aspectRatio[0]
            final fun <get-aspectRatio>(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.aspectRatio.<get-aspectRatio>|<get-aspectRatio>(){}[0]
        final val facingMode // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.facingMode|{}facingMode[0]
            final fun <get-facingMode>(): io.ktor.client.webrtc/WebRtcMedia.FacingMode? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.facingMode.<get-facingMode>|<get-facingMode>(){}[0]
        final val frameRate // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.frameRate|{}frameRate[0]
            final fun <get-frameRate>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.frameRate.<get-frameRate>|<get-frameRate>(){}[0]
        final val height // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.height|{}height[0]
            final fun <get-height>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.height.<get-height>|<get-height>(){}[0]
        final val resizeMode // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.resizeMode|{}resizeMode[0]
            final fun <get-resizeMode>(): io.ktor.client.webrtc/WebRtcMedia.ResizeMode? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.resizeMode.<get-resizeMode>|<get-resizeMode>(){}[0]
        final val width // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.width|{}width[0]
            final fun <get-width>(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.width.<get-width>|<get-width>(){}[0]

        final fun component1(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component1|component1(){}[0]
        final fun component2(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component3|component3(){}[0]
        final fun component4(): kotlin/Double? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component4|component4(){}[0]
        final fun component5(): io.ktor.client.webrtc/WebRtcMedia.FacingMode? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component5|component5(){}[0]
        final fun component6(): io.ktor.client.webrtc/WebRtcMedia.ResizeMode? // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.component6|component6(){}[0]
        final fun copy(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Double? = ..., io.ktor.client.webrtc/WebRtcMedia.FacingMode? = ..., io.ktor.client.webrtc/WebRtcMedia.ResizeMode? = ...): io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.copy|copy(kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Double?;io.ktor.client.webrtc.WebRtcMedia.FacingMode?;io.ktor.client.webrtc.WebRtcMedia.ResizeMode?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints.toString|toString(){}[0]
    }
}

final const val io.ktor.client.webrtc/WEBRTC_STATISTICS_DISABLED // io.ktor.client.webrtc/WEBRTC_STATISTICS_DISABLED|{}WEBRTC_STATISTICS_DISABLED[0]
    final fun <get-WEBRTC_STATISTICS_DISABLED>(): kotlin/Long // io.ktor.client.webrtc/WEBRTC_STATISTICS_DISABLED.<get-WEBRTC_STATISTICS_DISABLED>|<get-WEBRTC_STATISTICS_DISABLED>(){}[0]

final fun <#A: io.ktor.client.webrtc/WebRtcConfig> io.ktor.client.webrtc/WebRtcClient(io.ktor.client.webrtc/WebRtcClientEngineFactory<#A>, kotlin/Function1<#A, kotlin/Unit> = ...): io.ktor.client.webrtc/WebRtcClient // io.ktor.client.webrtc/WebRtcClient|WebRtcClient(io.ktor.client.webrtc.WebRtcClientEngineFactory<0:0>;kotlin.Function1<0:0,kotlin.Unit>){0§<io.ktor.client.webrtc.WebRtcConfig>}[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/Navigator { // io.ktor.client.webrtc.browser/Navigator|null[0]
    abstract val mediaDevices // io.ktor.client.webrtc.browser/Navigator.mediaDevices|{}mediaDevices[0]
        abstract fun <get-mediaDevices>(): org.w3c.dom.mediacapture/MediaDevices // io.ktor.client.webrtc.browser/Navigator.mediaDevices.<get-mediaDevices>|<get-mediaDevices>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCAnswerOptions : io.ktor.client.webrtc.browser/RTCOfferAnswerOptions // io.ktor.client.webrtc.browser/RTCAnswerOptions|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCAudioStats : io.ktor.client.webrtc.browser/RTCMediaStats { // io.ktor.client.webrtc.browser/RTCAudioStats|null[0]
    abstract val audioLevel // io.ktor.client.webrtc.browser/RTCAudioStats.audioLevel|{}audioLevel[0]
        // Targets: [js]
        abstract fun <get-audioLevel>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCAudioStats.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-audioLevel>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCAudioStats.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
    abstract val totalAudioEnergy // io.ktor.client.webrtc.browser/RTCAudioStats.totalAudioEnergy|{}totalAudioEnergy[0]
        // Targets: [js]
        abstract fun <get-totalAudioEnergy>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCAudioStats.totalAudioEnergy.<get-totalAudioEnergy>|<get-totalAudioEnergy>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-totalAudioEnergy>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCAudioStats.totalAudioEnergy.<get-totalAudioEnergy>|<get-totalAudioEnergy>(){}[0]
    abstract val totalSamplesDuration // io.ktor.client.webrtc.browser/RTCAudioStats.totalSamplesDuration|{}totalSamplesDuration[0]
        // Targets: [js]
        abstract fun <get-totalSamplesDuration>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCAudioStats.totalSamplesDuration.<get-totalSamplesDuration>|<get-totalSamplesDuration>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-totalSamplesDuration>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCAudioStats.totalSamplesDuration.<get-totalSamplesDuration>|<get-totalSamplesDuration>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit|null[0]
    abstract var tone // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit.tone|{}tone[0]
        // Targets: [js]
        abstract fun <get-tone>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [js]
        abstract fun <set-tone>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit.tone.<set-tone>|<set-tone>(kotlin.String){}[0]

        // Targets: [wasmJs]
        abstract fun <get-tone>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-tone>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEventInit.tone.<set-tone>|<set-tone>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCDataChannelEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCDataChannelEventInit|null[0]
    abstract var channel // io.ktor.client.webrtc.browser/RTCDataChannelEventInit.channel|{}channel[0]
        abstract fun <get-channel>(): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCDataChannelEventInit.channel.<get-channel>|<get-channel>(){}[0]
        abstract fun <set-channel>(io.ktor.client.webrtc.browser/RTCDataChannel) // io.ktor.client.webrtc.browser/RTCDataChannelEventInit.channel.<set-channel>|<set-channel>(io.ktor.client.webrtc.browser.RTCDataChannel){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCErrorEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCErrorEventInit|null[0]
    abstract var error // io.ktor.client.webrtc.browser/RTCErrorEventInit.error|{}error[0]
        abstract fun <get-error>(): io.ktor.client.webrtc.browser/RTCError // io.ktor.client.webrtc.browser/RTCErrorEventInit.error.<get-error>|<get-error>(){}[0]
        abstract fun <set-error>(io.ktor.client.webrtc.browser/RTCError) // io.ktor.client.webrtc.browser/RTCErrorEventInit.error.<set-error>|<set-error>(io.ktor.client.webrtc.browser.RTCError){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidateComplete // io.ktor.client.webrtc.browser/RTCIceCandidateComplete|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCMediaStats : io.ktor.client.webrtc.browser/RTCStats { // io.ktor.client.webrtc.browser/RTCMediaStats|null[0]
    abstract val kind // io.ktor.client.webrtc.browser/RTCMediaStats.kind|{}kind[0]
        // Targets: [js]
        abstract fun <get-kind>(): kotlin/String // io.ktor.client.webrtc.browser/RTCMediaStats.kind.<get-kind>|<get-kind>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-kind>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCMediaStats.kind.<get-kind>|<get-kind>(){}[0]
    abstract val trackId // io.ktor.client.webrtc.browser/RTCMediaStats.trackId|{}trackId[0]
        // Targets: [js]
        abstract fun <get-trackId>(): kotlin/String // io.ktor.client.webrtc.browser/RTCMediaStats.trackId.<get-trackId>|<get-trackId>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-trackId>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCMediaStats.trackId.<get-trackId>|<get-trackId>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCOfferOptions : io.ktor.client.webrtc.browser/RTCOfferAnswerOptions { // io.ktor.client.webrtc.browser/RTCOfferOptions|null[0]
    open var iceRestart // io.ktor.client.webrtc.browser/RTCOfferOptions.iceRestart|{}iceRestart[0]
        open fun <get-iceRestart>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCOfferOptions.iceRestart.<get-iceRestart>|<get-iceRestart>(){}[0]
        open fun <set-iceRestart>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCOfferOptions.iceRestart.<set-iceRestart>|<set-iceRestart>(kotlin.Boolean?){}[0]
    open var offerToReceiveAudio // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveAudio|{}offerToReceiveAudio[0]
        open fun <get-offerToReceiveAudio>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveAudio.<get-offerToReceiveAudio>|<get-offerToReceiveAudio>(){}[0]
        open fun <set-offerToReceiveAudio>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveAudio.<set-offerToReceiveAudio>|<set-offerToReceiveAudio>(kotlin.Boolean?){}[0]
    open var offerToReceiveVideo // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveVideo|{}offerToReceiveVideo[0]
        open fun <get-offerToReceiveVideo>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveVideo.<get-offerToReceiveVideo>|<get-offerToReceiveVideo>(){}[0]
        open fun <set-offerToReceiveVideo>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCOfferOptions.offerToReceiveVideo.<set-offerToReceiveVideo>|<set-offerToReceiveVideo>(kotlin.Boolean?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit|null[0]
    abstract var errorCode // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.errorCode|{}errorCode[0]
        // Targets: [js]
        abstract fun <get-errorCode>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [js]
        abstract fun <set-errorCode>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.errorCode.<set-errorCode>|<set-errorCode>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        abstract fun <get-errorCode>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-errorCode>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.errorCode.<set-errorCode>|<set-errorCode>(kotlin.js.JsNumber){}[0]
    open var hostCandidate // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.hostCandidate|{}hostCandidate[0]
        // Targets: [js]
        open fun <get-hostCandidate>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [js]
        open fun <set-hostCandidate>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-hostCandidate>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-hostCandidate>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.js.JsString?){}[0]
    open var statusText // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.statusText|{}statusText[0]
        // Targets: [js]
        open fun <get-statusText>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.statusText.<get-statusText>|<get-statusText>(){}[0]

        // Targets: [js]
        open fun <set-statusText>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.statusText.<set-statusText>|<set-statusText>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-statusText>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.statusText.<get-statusText>|<get-statusText>(){}[0]

        // Targets: [wasmJs]
        open fun <set-statusText>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.statusText.<set-statusText>|<set-statusText>(kotlin.js.JsString?){}[0]
    open var url // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.url|{}url[0]
        // Targets: [js]
        open fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        open fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        open fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEventInit.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit|null[0]
    open var candidate // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.candidate|{}candidate[0]
        open fun <get-candidate>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.candidate.<set-candidate>|<set-candidate>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
    open var url // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.url|{}url[0]
        // Targets: [js]
        open fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        open fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        open fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEventInit.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpDecodingParameters : io.ktor.client.webrtc.browser/RTCRtpCodingParameters // io.ktor.client.webrtc.browser/RTCRtpDecodingParameters|null[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpEncodingParameters : io.ktor.client.webrtc.browser/RTCRtpCodingParameters { // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters|null[0]
    open var active // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.active|{}active[0]
        open fun <get-active>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.active.<get-active>|<get-active>(){}[0]
        open fun <set-active>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.active.<set-active>|<set-active>(kotlin.Boolean?){}[0]
    open var codecPayloadType // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.codecPayloadType|{}codecPayloadType[0]
        // Targets: [js]
        open fun <get-codecPayloadType>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.codecPayloadType.<get-codecPayloadType>|<get-codecPayloadType>(){}[0]

        // Targets: [js]
        open fun <set-codecPayloadType>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.codecPayloadType.<set-codecPayloadType>|<set-codecPayloadType>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-codecPayloadType>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.codecPayloadType.<get-codecPayloadType>|<get-codecPayloadType>(){}[0]

        // Targets: [wasmJs]
        open fun <set-codecPayloadType>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.codecPayloadType.<set-codecPayloadType>|<set-codecPayloadType>(kotlin.js.JsNumber?){}[0]
    open var dtx // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.dtx|{}dtx[0]
        // Targets: [js]
        open fun <get-dtx>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.dtx.<get-dtx>|<get-dtx>(){}[0]

        // Targets: [js]
        open fun <set-dtx>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.dtx.<set-dtx>|<set-dtx>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-dtx>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.dtx.<get-dtx>|<get-dtx>(){}[0]

        // Targets: [wasmJs]
        open fun <set-dtx>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.dtx.<set-dtx>|<set-dtx>(kotlin.js.JsString?){}[0]
    open var maxBitrate // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxBitrate|{}maxBitrate[0]
        // Targets: [js]
        open fun <get-maxBitrate>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxBitrate.<get-maxBitrate>|<get-maxBitrate>(){}[0]

        // Targets: [js]
        open fun <set-maxBitrate>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxBitrate.<set-maxBitrate>|<set-maxBitrate>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-maxBitrate>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxBitrate.<get-maxBitrate>|<get-maxBitrate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-maxBitrate>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxBitrate.<set-maxBitrate>|<set-maxBitrate>(kotlin.js.JsNumber?){}[0]
    open var maxFramerate // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxFramerate|{}maxFramerate[0]
        // Targets: [js]
        open fun <get-maxFramerate>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxFramerate.<get-maxFramerate>|<get-maxFramerate>(){}[0]

        // Targets: [js]
        open fun <set-maxFramerate>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxFramerate.<set-maxFramerate>|<set-maxFramerate>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-maxFramerate>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxFramerate.<get-maxFramerate>|<get-maxFramerate>(){}[0]

        // Targets: [wasmJs]
        open fun <set-maxFramerate>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.maxFramerate.<set-maxFramerate>|<set-maxFramerate>(kotlin.js.JsNumber?){}[0]
    open var ptime // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.ptime|{}ptime[0]
        // Targets: [js]
        open fun <get-ptime>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.ptime.<get-ptime>|<get-ptime>(){}[0]

        // Targets: [js]
        open fun <set-ptime>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.ptime.<set-ptime>|<set-ptime>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-ptime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.ptime.<get-ptime>|<get-ptime>(){}[0]

        // Targets: [wasmJs]
        open fun <set-ptime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.ptime.<set-ptime>|<set-ptime>(kotlin.js.JsNumber?){}[0]
    open var scaleResolutionDownBy // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.scaleResolutionDownBy|{}scaleResolutionDownBy[0]
        // Targets: [js]
        open fun <get-scaleResolutionDownBy>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.scaleResolutionDownBy.<get-scaleResolutionDownBy>|<get-scaleResolutionDownBy>(){}[0]

        // Targets: [js]
        open fun <set-scaleResolutionDownBy>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.scaleResolutionDownBy.<set-scaleResolutionDownBy>|<set-scaleResolutionDownBy>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        open fun <get-scaleResolutionDownBy>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.scaleResolutionDownBy.<get-scaleResolutionDownBy>|<get-scaleResolutionDownBy>(){}[0]

        // Targets: [wasmJs]
        open fun <set-scaleResolutionDownBy>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpEncodingParameters.scaleResolutionDownBy.<set-scaleResolutionDownBy>|<set-scaleResolutionDownBy>(kotlin.js.JsNumber?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpReceiveParameters : io.ktor.client.webrtc.browser/RTCRtpParameters { // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters|null[0]
    abstract var encodings // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters.encodings|{}encodings[0]
        // Targets: [js]
        abstract fun <get-encodings>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpDecodingParameters> // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [js]
        abstract fun <set-encodings>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpDecodingParameters>) // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters.encodings.<set-encodings>|<set-encodings>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpDecodingParameters>){}[0]

        // Targets: [wasmJs]
        abstract fun <get-encodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpDecodingParameters> // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-encodings>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpDecodingParameters>) // io.ktor.client.webrtc.browser/RTCRtpReceiveParameters.encodings.<set-encodings>|<set-encodings>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpDecodingParameters>){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpSendParameters : io.ktor.client.webrtc.browser/RTCRtpParameters { // io.ktor.client.webrtc.browser/RTCRtpSendParameters|null[0]
    abstract var encodings // io.ktor.client.webrtc.browser/RTCRtpSendParameters.encodings|{}encodings[0]
        // Targets: [js]
        abstract fun <get-encodings>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters> // io.ktor.client.webrtc.browser/RTCRtpSendParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [js]
        abstract fun <set-encodings>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.encodings.<set-encodings>|<set-encodings>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpEncodingParameters>){}[0]

        // Targets: [wasmJs]
        abstract fun <get-encodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters> // io.ktor.client.webrtc.browser/RTCRtpSendParameters.encodings.<get-encodings>|<get-encodings>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-encodings>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.encodings.<set-encodings>|<set-encodings>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpEncodingParameters>){}[0]
    abstract var transactionId // io.ktor.client.webrtc.browser/RTCRtpSendParameters.transactionId|{}transactionId[0]
        // Targets: [js]
        abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpSendParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

        // Targets: [js]
        abstract fun <set-transactionId>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.String){}[0]

        // Targets: [wasmJs]
        abstract fun <get-transactionId>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpSendParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-transactionId>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.js.JsString){}[0]
    open var degradationPreference // io.ktor.client.webrtc.browser/RTCRtpSendParameters.degradationPreference|{}degradationPreference[0]
        // Targets: [js]
        open fun <get-degradationPreference>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpSendParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]

        // Targets: [js]
        open fun <set-degradationPreference>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.degradationPreference.<set-degradationPreference>|<set-degradationPreference>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-degradationPreference>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpSendParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]

        // Targets: [wasmJs]
        open fun <set-degradationPreference>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.degradationPreference.<set-degradationPreference>|<set-degradationPreference>(kotlin.js.JsString?){}[0]
    open var priority // io.ktor.client.webrtc.browser/RTCRtpSendParameters.priority|{}priority[0]
        // Targets: [js]
        open fun <get-priority>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpSendParameters.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [js]
        open fun <set-priority>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.priority.<set-priority>|<set-priority>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        open fun <get-priority>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpSendParameters.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [wasmJs]
        open fun <set-priority>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpSendParameters.priority.<set-priority>|<set-priority>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource : io.ktor.client.webrtc.browser/RTCRtpContributingSource { // io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource|null[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCTrackEventInit : org.w3c.dom/EventInit { // io.ktor.client.webrtc.browser/RTCTrackEventInit|null[0]
    abstract var receiver // io.ktor.client.webrtc.browser/RTCTrackEventInit.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.browser/RTCRtpReceiver // io.ktor.client.webrtc.browser/RTCTrackEventInit.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.browser/RTCRtpReceiver) // io.ktor.client.webrtc.browser/RTCTrackEventInit.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.browser.RTCRtpReceiver){}[0]
    abstract var track // io.ktor.client.webrtc.browser/RTCTrackEventInit.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.browser/RTCTrackEventInit.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.browser/RTCTrackEventInit.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transceiver // io.ktor.client.webrtc.browser/RTCTrackEventInit.transceiver|{}transceiver[0]
        abstract fun <get-transceiver>(): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCTrackEventInit.transceiver.<get-transceiver>|<get-transceiver>(){}[0]
        abstract fun <set-transceiver>(io.ktor.client.webrtc.browser/RTCRtpTransceiver) // io.ktor.client.webrtc.browser/RTCTrackEventInit.transceiver.<set-transceiver>|<set-transceiver>(io.ktor.client.webrtc.browser.RTCRtpTransceiver){}[0]
    open var streams // io.ktor.client.webrtc.browser/RTCTrackEventInit.streams|{}streams[0]
        // Targets: [js]
        open fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.browser/RTCTrackEventInit.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [js]
        open fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.browser/RTCTrackEventInit.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>?){}[0]

        // Targets: [wasmJs]
        open fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.browser/RTCTrackEventInit.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [wasmJs]
        open fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.browser/RTCTrackEventInit.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCVideoStats : io.ktor.client.webrtc.browser/RTCMediaStats { // io.ktor.client.webrtc.browser/RTCVideoStats|null[0]
    abstract val frames // io.ktor.client.webrtc.browser/RTCVideoStats.frames|{}frames[0]
        // Targets: [js]
        abstract fun <get-frames>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCVideoStats.frames.<get-frames>|<get-frames>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-frames>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCVideoStats.frames.<get-frames>|<get-frames>(){}[0]
    abstract val framesPerSecond // io.ktor.client.webrtc.browser/RTCVideoStats.framesPerSecond|{}framesPerSecond[0]
        // Targets: [js]
        abstract fun <get-framesPerSecond>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCVideoStats.framesPerSecond.<get-framesPerSecond>|<get-framesPerSecond>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-framesPerSecond>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCVideoStats.framesPerSecond.<get-framesPerSecond>|<get-framesPerSecond>(){}[0]
    abstract val height // io.ktor.client.webrtc.browser/RTCVideoStats.height|{}height[0]
        // Targets: [js]
        abstract fun <get-height>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCVideoStats.height.<get-height>|<get-height>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-height>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCVideoStats.height.<get-height>|<get-height>(){}[0]
    abstract val width // io.ktor.client.webrtc.browser/RTCVideoStats.width|{}width[0]
        // Targets: [js]
        abstract fun <get-width>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCVideoStats.width.<get-width>|<get-width>(){}[0]

        // Targets: [wasmJs]
        abstract fun <get-width>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCVideoStats.width.<get-width>|<get-width>(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.webrtc/JsPeerConnectionConfig // io.ktor.client.webrtc/JsPeerConnectionConfig|null[0]

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDTMFSender : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCDTMFSender|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDTMFSender.<init>|<init>(){}[0]

    final var canInsertDTMF // io.ktor.client.webrtc.browser/RTCDTMFSender.canInsertDTMF|{}canInsertDTMF[0]
        // Targets: [js]
        final fun <get-canInsertDTMF>(): kotlin/Boolean // io.ktor.client.webrtc.browser/RTCDTMFSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]

        // Targets: [js]
        final fun <set-canInsertDTMF>(kotlin/Boolean) // io.ktor.client.webrtc.browser/RTCDTMFSender.canInsertDTMF.<set-canInsertDTMF>|<set-canInsertDTMF>(kotlin.Boolean){}[0]

        // Targets: [wasmJs]
        final fun <get-canInsertDTMF>(): kotlin.js/JsBoolean // io.ktor.client.webrtc.browser/RTCDTMFSender.canInsertDTMF.<get-canInsertDTMF>|<get-canInsertDTMF>(){}[0]

        // Targets: [wasmJs]
        final fun <set-canInsertDTMF>(kotlin.js/JsBoolean) // io.ktor.client.webrtc.browser/RTCDTMFSender.canInsertDTMF.<set-canInsertDTMF>|<set-canInsertDTMF>(kotlin.js.JsBoolean){}[0]
    final var ontonechange // io.ktor.client.webrtc.browser/RTCDTMFSender.ontonechange|{}ontonechange[0]
        // Targets: [js]
        final fun <get-ontonechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDTMFSender, io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDTMFSender.ontonechange.<get-ontonechange>|<get-ontonechange>(){}[0]

        // Targets: [js]
        final fun <set-ontonechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDTMFSender, io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDTMFSender.ontonechange.<set-ontonechange>|<set-ontonechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDTMFSender,io.ktor.client.webrtc.browser.RTCDTMFToneChangeEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ontonechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDTMFSender, io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCDTMFSender.ontonechange.<get-ontonechange>|<get-ontonechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ontonechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDTMFSender, io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCDTMFSender.ontonechange.<set-ontonechange>|<set-ontonechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDTMFSender,io.ktor.client.webrtc.browser.RTCDTMFToneChangeEvent,kotlin.js.JsAny>?){}[0]
    final var toneBuffer // io.ktor.client.webrtc.browser/RTCDTMFSender.toneBuffer|{}toneBuffer[0]
        // Targets: [js]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDTMFSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        // Targets: [js]
        final fun <set-toneBuffer>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDTMFSender.toneBuffer.<set-toneBuffer>|<set-toneBuffer>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-toneBuffer>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDTMFSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

        // Targets: [wasmJs]
        final fun <set-toneBuffer>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDTMFSender.toneBuffer.<set-toneBuffer>|<set-toneBuffer>(kotlin.js.JsString){}[0]

    // Targets: [js]
    final fun insertDTMF(kotlin/String, kotlin/Number = ..., kotlin/Number = ...) // io.ktor.client.webrtc.browser/RTCDTMFSender.insertDTMF|insertDTMF(kotlin.String;kotlin.Number;kotlin.Number){}[0]

    // Targets: [wasmJs]
    final fun insertDTMF(kotlin.js/JsString, kotlin.js/JsNumber = ..., kotlin.js/JsNumber = ...) // io.ktor.client.webrtc.browser/RTCDTMFSender.insertDTMF|insertDTMF(kotlin.js.JsString;kotlin.js.JsNumber;kotlin.js.JsNumber){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.<init>|<init>(){}[0]

    final var tone // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.tone|{}tone[0]
        // Targets: [js]
        final fun <get-tone>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [js]
        final fun <set-tone>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.tone.<set-tone>|<set-tone>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-tone>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.tone.<get-tone>|<get-tone>(){}[0]

        // Targets: [wasmJs]
        final fun <set-tone>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDTMFToneChangeEvent.tone.<set-tone>|<set-tone>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDataChannel : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCDataChannel|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDataChannel.<init>|<init>(){}[0]

    final var binaryType // io.ktor.client.webrtc.browser/RTCDataChannel.binaryType|{}binaryType[0]
        // Targets: [js]
        final fun <get-binaryType>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDataChannel.binaryType.<get-binaryType>|<get-binaryType>(){}[0]

        // Targets: [js]
        final fun <set-binaryType>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.binaryType.<set-binaryType>|<set-binaryType>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-binaryType>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDataChannel.binaryType.<get-binaryType>|<get-binaryType>(){}[0]

        // Targets: [wasmJs]
        final fun <set-binaryType>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.binaryType.<set-binaryType>|<set-binaryType>(kotlin.js.JsString){}[0]
    final var bufferedAmount // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmount|{}bufferedAmount[0]
        // Targets: [js]
        final fun <get-bufferedAmount>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]

        // Targets: [js]
        final fun <set-bufferedAmount>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmount.<set-bufferedAmount>|<set-bufferedAmount>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-bufferedAmount>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]

        // Targets: [wasmJs]
        final fun <set-bufferedAmount>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmount.<set-bufferedAmount>|<set-bufferedAmount>(kotlin.js.JsNumber){}[0]
    final var bufferedAmountLowThreshold // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmountLowThreshold|{}bufferedAmountLowThreshold[0]
        // Targets: [js]
        final fun <get-bufferedAmountLowThreshold>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]

        // Targets: [js]
        final fun <set-bufferedAmountLowThreshold>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmountLowThreshold.<set-bufferedAmountLowThreshold>|<set-bufferedAmountLowThreshold>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-bufferedAmountLowThreshold>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]

        // Targets: [wasmJs]
        final fun <set-bufferedAmountLowThreshold>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCDataChannel.bufferedAmountLowThreshold.<set-bufferedAmountLowThreshold>|<set-bufferedAmountLowThreshold>(kotlin.js.JsNumber){}[0]
    final var id // io.ktor.client.webrtc.browser/RTCDataChannel.id|{}id[0]
        // Targets: [js]
        final fun <get-id>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCDataChannel.id.<get-id>|<get-id>(){}[0]

        // Targets: [js]
        final fun <set-id>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCDataChannel.id.<set-id>|<set-id>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-id>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannel.id.<get-id>|<get-id>(){}[0]

        // Targets: [wasmJs]
        final fun <set-id>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannel.id.<set-id>|<set-id>(kotlin.js.JsNumber?){}[0]
    final var label // io.ktor.client.webrtc.browser/RTCDataChannel.label|{}label[0]
        // Targets: [js]
        final fun <get-label>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDataChannel.label.<get-label>|<get-label>(){}[0]

        // Targets: [js]
        final fun <set-label>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.label.<set-label>|<set-label>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-label>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDataChannel.label.<get-label>|<get-label>(){}[0]

        // Targets: [wasmJs]
        final fun <set-label>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.label.<set-label>|<set-label>(kotlin.js.JsString){}[0]
    final var maxPacketLifeTime // io.ktor.client.webrtc.browser/RTCDataChannel.maxPacketLifeTime|{}maxPacketLifeTime[0]
        // Targets: [js]
        final fun <get-maxPacketLifeTime>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]

        // Targets: [js]
        final fun <set-maxPacketLifeTime>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCDataChannel.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxPacketLifeTime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxPacketLifeTime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannel.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.js.JsNumber?){}[0]
    final var maxRetransmits // io.ktor.client.webrtc.browser/RTCDataChannel.maxRetransmits|{}maxRetransmits[0]
        // Targets: [js]
        final fun <get-maxRetransmits>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]

        // Targets: [js]
        final fun <set-maxRetransmits>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCDataChannel.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxRetransmits>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxRetransmits>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannel.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.js.JsNumber?){}[0]
    final var negotiated // io.ktor.client.webrtc.browser/RTCDataChannel.negotiated|{}negotiated[0]
        final fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc.browser/RTCDataChannel.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        final fun <set-negotiated>(kotlin/Boolean) // io.ktor.client.webrtc.browser/RTCDataChannel.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean){}[0]
    final var onbufferedamountlow // io.ktor.client.webrtc.browser/RTCDataChannel.onbufferedamountlow|{}onbufferedamountlow[0]
        // Targets: [js]
        final fun <get-onbufferedamountlow>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDataChannel.onbufferedamountlow.<get-onbufferedamountlow>|<get-onbufferedamountlow>(){}[0]

        // Targets: [js]
        final fun <set-onbufferedamountlow>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onbufferedamountlow.<set-onbufferedamountlow>|<set-onbufferedamountlow>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onbufferedamountlow>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCDataChannel.onbufferedamountlow.<get-onbufferedamountlow>|<get-onbufferedamountlow>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onbufferedamountlow>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onbufferedamountlow.<set-onbufferedamountlow>|<set-onbufferedamountlow>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onclose // io.ktor.client.webrtc.browser/RTCDataChannel.onclose|{}onclose[0]
        // Targets: [js]
        final fun <get-onclose>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDataChannel.onclose.<get-onclose>|<get-onclose>(){}[0]

        // Targets: [js]
        final fun <set-onclose>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onclose.<set-onclose>|<set-onclose>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onclose>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCDataChannel.onclose.<get-onclose>|<get-onclose>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onclose>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onclose.<set-onclose>|<set-onclose>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onerror // io.ktor.client.webrtc.browser/RTCDataChannel.onerror|{}onerror[0]
        // Targets: [js]
        final fun <get-onerror>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDataChannel.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [js]
        final fun <set-onerror>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onerror.<set-onerror>|<set-onerror>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCErrorEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onerror>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCDataChannel.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onerror>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onerror.<set-onerror>|<set-onerror>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCErrorEvent,kotlin.Unit>?){}[0]
    final var onmessage // io.ktor.client.webrtc.browser/RTCDataChannel.onmessage|{}onmessage[0]
        // Targets: [js]
        final fun <get-onmessage>(): kotlin/Function1<org.w3c.dom/MessageEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDataChannel.onmessage.<get-onmessage>|<get-onmessage>(){}[0]

        // Targets: [js]
        final fun <set-onmessage>(kotlin/Function1<org.w3c.dom/MessageEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onmessage.<set-onmessage>|<set-onmessage>(kotlin.Function1<org.w3c.dom.MessageEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onmessage>(): kotlin/Function1<org.w3c.dom/MessageEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCDataChannel.onmessage.<get-onmessage>|<get-onmessage>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onmessage>(kotlin/Function1<org.w3c.dom/MessageEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onmessage.<set-onmessage>|<set-onmessage>(kotlin.Function1<org.w3c.dom.MessageEvent,kotlin.Unit>?){}[0]
    final var onopen // io.ktor.client.webrtc.browser/RTCDataChannel.onopen|{}onopen[0]
        // Targets: [js]
        final fun <get-onopen>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDataChannel.onopen.<get-onopen>|<get-onopen>(){}[0]

        // Targets: [js]
        final fun <set-onopen>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onopen.<set-onopen>|<set-onopen>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onopen>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCDataChannel.onopen.<get-onopen>|<get-onopen>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onopen>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCDataChannel.onopen.<set-onopen>|<set-onopen>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var ordered // io.ktor.client.webrtc.browser/RTCDataChannel.ordered|{}ordered[0]
        final fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc.browser/RTCDataChannel.ordered.<get-ordered>|<get-ordered>(){}[0]
        final fun <set-ordered>(kotlin/Boolean) // io.ktor.client.webrtc.browser/RTCDataChannel.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean){}[0]
    final var priority // io.ktor.client.webrtc.browser/RTCDataChannel.priority|{}priority[0]
        // Targets: [js]
        final fun <get-priority>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDataChannel.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [js]
        final fun <set-priority>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.priority.<set-priority>|<set-priority>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-priority>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDataChannel.priority.<get-priority>|<get-priority>(){}[0]

        // Targets: [wasmJs]
        final fun <set-priority>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.priority.<set-priority>|<set-priority>(kotlin.js.JsString){}[0]
    final var protocol // io.ktor.client.webrtc.browser/RTCDataChannel.protocol|{}protocol[0]
        // Targets: [js]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]

        // Targets: [js]
        final fun <set-protocol>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.protocol.<set-protocol>|<set-protocol>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-protocol>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]

        // Targets: [wasmJs]
        final fun <set-protocol>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString){}[0]
    final var readyState // io.ktor.client.webrtc.browser/RTCDataChannel.readyState|{}readyState[0]
        // Targets: [js]
        final fun <get-readyState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDataChannel.readyState.<get-readyState>|<get-readyState>(){}[0]

        // Targets: [js]
        final fun <set-readyState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.readyState.<set-readyState>|<set-readyState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-readyState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDataChannel.readyState.<get-readyState>|<get-readyState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-readyState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.readyState.<set-readyState>|<set-readyState>(kotlin.js.JsString){}[0]

    final fun close() // io.ktor.client.webrtc.browser/RTCDataChannel.close|close(){}[0]
    final fun send(org.khronos.webgl/ArrayBuffer) // io.ktor.client.webrtc.browser/RTCDataChannel.send|send(org.khronos.webgl.ArrayBuffer){}[0]
    final fun send(org.khronos.webgl/ArrayBufferView) // io.ktor.client.webrtc.browser/RTCDataChannel.send|send(org.khronos.webgl.ArrayBufferView){}[0]
    final fun send(org.w3c.files/Blob) // io.ktor.client.webrtc.browser/RTCDataChannel.send|send(org.w3c.files.Blob){}[0]

    // Targets: [js]
    final fun send(kotlin/String) // io.ktor.client.webrtc.browser/RTCDataChannel.send|send(kotlin.String){}[0]

    // Targets: [wasmJs]
    final fun send(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDataChannel.send|send(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDataChannelEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCDataChannelEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDataChannelEvent.<init>|<init>(){}[0]

    final var channel // io.ktor.client.webrtc.browser/RTCDataChannelEvent.channel|{}channel[0]
        final fun <get-channel>(): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCDataChannelEvent.channel.<get-channel>|<get-channel>(){}[0]
        final fun <set-channel>(io.ktor.client.webrtc.browser/RTCDataChannel) // io.ktor.client.webrtc.browser/RTCDataChannelEvent.channel.<set-channel>|<set-channel>(io.ktor.client.webrtc.browser.RTCDataChannel){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDtlsTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCDtlsTransport|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDtlsTransport.<init>|<init>(){}[0]

    final var iceTransport // io.ktor.client.webrtc.browser/RTCDtlsTransport.iceTransport|{}iceTransport[0]
        final fun <get-iceTransport>(): io.ktor.client.webrtc.browser/RTCIceTransport // io.ktor.client.webrtc.browser/RTCDtlsTransport.iceTransport.<get-iceTransport>|<get-iceTransport>(){}[0]
        final fun <set-iceTransport>(io.ktor.client.webrtc.browser/RTCIceTransport) // io.ktor.client.webrtc.browser/RTCDtlsTransport.iceTransport.<set-iceTransport>|<set-iceTransport>(io.ktor.client.webrtc.browser.RTCIceTransport){}[0]
    final var onerror // io.ktor.client.webrtc.browser/RTCDtlsTransport.onerror|{}onerror[0]
        // Targets: [js]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDtlsTransport.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [js]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDtlsTransport.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDtlsTransport,io.ktor.client.webrtc.browser.RTCErrorEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onerror>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCDtlsTransport.onerror.<get-onerror>|<get-onerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onerror>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, io.ktor.client.webrtc.browser/RTCErrorEvent, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCDtlsTransport.onerror.<set-onerror>|<set-onerror>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDtlsTransport,io.ktor.client.webrtc.browser.RTCErrorEvent,kotlin.js.JsAny>?){}[0]
    final var onstatechange // io.ktor.client.webrtc.browser/RTCDtlsTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCDtlsTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCDtlsTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDtlsTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCDtlsTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCDtlsTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCDtlsTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCDtlsTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var state // io.ktor.client.webrtc.browser/RTCDtlsTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDtlsTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDtlsTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDtlsTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDtlsTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]

    // Targets: [js]
    final fun getRemoteCertificates(): kotlin/Array<org.khronos.webgl/ArrayBuffer> // io.ktor.client.webrtc.browser/RTCDtlsTransport.getRemoteCertificates|getRemoteCertificates(){}[0]

    // Targets: [wasmJs]
    final fun getRemoteCertificates(): kotlin.js/JsArray<org.khronos.webgl/ArrayBuffer> // io.ktor.client.webrtc.browser/RTCDtlsTransport.getRemoteCertificates|getRemoteCertificates(){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.<init>|<init>(){}[0]

    final var state // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCDtlsTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCError : io.ktor.client.webrtc.browser/DOMException { // io.ktor.client.webrtc.browser/RTCError|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCError.<init>|<init>(){}[0]

    final var errorDetail // io.ktor.client.webrtc.browser/RTCError.errorDetail|{}errorDetail[0]
        // Targets: [js]
        final fun <get-errorDetail>(): kotlin/String // io.ktor.client.webrtc.browser/RTCError.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]

        // Targets: [js]
        final fun <set-errorDetail>(kotlin/String) // io.ktor.client.webrtc.browser/RTCError.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-errorDetail>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCError.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorDetail>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCError.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.js.JsString){}[0]
    final var httpRequestStatusCode // io.ktor.client.webrtc.browser/RTCError.httpRequestStatusCode|{}httpRequestStatusCode[0]
        // Targets: [js]
        final fun <get-httpRequestStatusCode>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCError.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]

        // Targets: [js]
        final fun <set-httpRequestStatusCode>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCError.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-httpRequestStatusCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCError.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-httpRequestStatusCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCError.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.js.JsNumber?){}[0]
    final var receivedAlert // io.ktor.client.webrtc.browser/RTCError.receivedAlert|{}receivedAlert[0]
        // Targets: [js]
        final fun <get-receivedAlert>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCError.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]

        // Targets: [js]
        final fun <set-receivedAlert>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCError.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-receivedAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCError.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]

        // Targets: [wasmJs]
        final fun <set-receivedAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCError.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.js.JsNumber?){}[0]
    final var sctpCauseCode // io.ktor.client.webrtc.browser/RTCError.sctpCauseCode|{}sctpCauseCode[0]
        // Targets: [js]
        final fun <get-sctpCauseCode>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCError.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]

        // Targets: [js]
        final fun <set-sctpCauseCode>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCError.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sctpCauseCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCError.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sctpCauseCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCError.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.js.JsNumber?){}[0]
    final var sdpLineNumber // io.ktor.client.webrtc.browser/RTCError.sdpLineNumber|{}sdpLineNumber[0]
        // Targets: [js]
        final fun <get-sdpLineNumber>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCError.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]

        // Targets: [js]
        final fun <set-sdpLineNumber>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCError.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sdpLineNumber>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCError.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sdpLineNumber>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCError.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.js.JsNumber?){}[0]
    final var sentAlert // io.ktor.client.webrtc.browser/RTCError.sentAlert|{}sentAlert[0]
        // Targets: [js]
        final fun <get-sentAlert>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCError.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]

        // Targets: [js]
        final fun <set-sentAlert>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCError.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-sentAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCError.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]

        // Targets: [wasmJs]
        final fun <set-sentAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCError.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.js.JsNumber?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCErrorEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCErrorEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCErrorEvent.<init>|<init>(){}[0]

    final var error // io.ktor.client.webrtc.browser/RTCErrorEvent.error|{}error[0]
        final fun <get-error>(): io.ktor.client.webrtc.browser/RTCError // io.ktor.client.webrtc.browser/RTCErrorEvent.error.<get-error>|<get-error>(){}[0]
        final fun <set-error>(io.ktor.client.webrtc.browser/RTCError) // io.ktor.client.webrtc.browser/RTCErrorEvent.error.<set-error>|<set-error>(io.ktor.client.webrtc.browser.RTCError){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent.<init>|<init>(){}[0]

    final var pair // io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent.pair|{}pair[0]
        final fun <get-pair>(): io.ktor.client.webrtc.browser/RTCIceCandidatePair // io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent.pair.<get-pair>|<get-pair>(){}[0]
        final fun <set-pair>(io.ktor.client.webrtc.browser/RTCIceCandidatePair) // io.ktor.client.webrtc.browser/RTCIceCandidatePairChangedEvent.pair.<set-pair>|<set-pair>(io.ktor.client.webrtc.browser.RTCIceCandidatePair){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCIceGathererEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCIceGathererEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIceGathererEvent.<init>|<init>(){}[0]

    final var candidate // io.ktor.client.webrtc.browser/RTCIceGathererEvent.candidate|{}candidate[0]
        // Targets: [js]
        final fun <get-candidate>(): dynamic // io.ktor.client.webrtc.browser/RTCIceGathererEvent.candidate.<get-candidate>|<get-candidate>(){}[0]

        // Targets: [js]
        final fun <set-candidate>(dynamic) // io.ktor.client.webrtc.browser/RTCIceGathererEvent.candidate.<set-candidate>|<set-candidate>(<dynamic>){}[0]

        // Targets: [wasmJs]
        final fun <get-candidate>(): kotlin.js/JsAny? // io.ktor.client.webrtc.browser/RTCIceGathererEvent.candidate.<get-candidate>|<get-candidate>(){}[0]

        // Targets: [wasmJs]
        final fun <set-candidate>(kotlin.js/JsAny?) // io.ktor.client.webrtc.browser/RTCIceGathererEvent.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsAny?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCIceTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCIceTransport|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIceTransport.<init>|<init>(){}[0]

    final var component // io.ktor.client.webrtc.browser/RTCIceTransport.component|{}component[0]
        // Targets: [js]
        final fun <get-component>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceTransport.component.<get-component>|<get-component>(){}[0]

        // Targets: [js]
        final fun <set-component>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceTransport.component.<set-component>|<set-component>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-component>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceTransport.component.<get-component>|<get-component>(){}[0]

        // Targets: [wasmJs]
        final fun <set-component>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceTransport.component.<set-component>|<set-component>(kotlin.js.JsString){}[0]
    final var gatheringState // io.ktor.client.webrtc.browser/RTCIceTransport.gatheringState|{}gatheringState[0]
        // Targets: [js]
        final fun <get-gatheringState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceTransport.gatheringState.<get-gatheringState>|<get-gatheringState>(){}[0]

        // Targets: [js]
        final fun <set-gatheringState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceTransport.gatheringState.<set-gatheringState>|<set-gatheringState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-gatheringState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceTransport.gatheringState.<get-gatheringState>|<get-gatheringState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-gatheringState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceTransport.gatheringState.<set-gatheringState>|<set-gatheringState>(kotlin.js.JsString){}[0]
    final var ongatheringstatechange // io.ktor.client.webrtc.browser/RTCIceTransport.ongatheringstatechange|{}ongatheringstatechange[0]
        // Targets: [js]
        final fun <get-ongatheringstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCIceTransport.ongatheringstatechange.<get-ongatheringstatechange>|<get-ongatheringstatechange>(){}[0]

        // Targets: [js]
        final fun <set-ongatheringstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCIceTransport.ongatheringstatechange.<set-ongatheringstatechange>|<set-ongatheringstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ongatheringstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCIceTransport.ongatheringstatechange.<get-ongatheringstatechange>|<get-ongatheringstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ongatheringstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCIceTransport.ongatheringstatechange.<set-ongatheringstatechange>|<set-ongatheringstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onselectedcandidatepairchange // io.ktor.client.webrtc.browser/RTCIceTransport.onselectedcandidatepairchange|{}onselectedcandidatepairchange[0]
        // Targets: [js]
        final fun <get-onselectedcandidatepairchange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCIceTransport.onselectedcandidatepairchange.<get-onselectedcandidatepairchange>|<get-onselectedcandidatepairchange>(){}[0]

        // Targets: [js]
        final fun <set-onselectedcandidatepairchange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCIceTransport.onselectedcandidatepairchange.<set-onselectedcandidatepairchange>|<set-onselectedcandidatepairchange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onselectedcandidatepairchange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCIceTransport.onselectedcandidatepairchange.<get-onselectedcandidatepairchange>|<get-onselectedcandidatepairchange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onselectedcandidatepairchange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCIceTransport.onselectedcandidatepairchange.<set-onselectedcandidatepairchange>|<set-onselectedcandidatepairchange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var onstatechange // io.ktor.client.webrtc.browser/RTCIceTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCIceTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCIceTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCIceTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCIceTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCIceTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCIceTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var role // io.ktor.client.webrtc.browser/RTCIceTransport.role|{}role[0]
        // Targets: [js]
        final fun <get-role>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceTransport.role.<get-role>|<get-role>(){}[0]

        // Targets: [js]
        final fun <set-role>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceTransport.role.<set-role>|<set-role>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-role>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceTransport.role.<get-role>|<get-role>(){}[0]

        // Targets: [wasmJs]
        final fun <set-role>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceTransport.role.<set-role>|<set-role>(kotlin.js.JsString){}[0]
    final var state // io.ktor.client.webrtc.browser/RTCIceTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]

    final fun getLocalParameters(): io.ktor.client.webrtc.browser/RTCIceParameters? // io.ktor.client.webrtc.browser/RTCIceTransport.getLocalParameters|getLocalParameters(){}[0]
    final fun getRemoteParameters(): io.ktor.client.webrtc.browser/RTCIceParameters? // io.ktor.client.webrtc.browser/RTCIceTransport.getRemoteParameters|getRemoteParameters(){}[0]
    final fun getSelectedCandidatePair(): io.ktor.client.webrtc.browser/RTCIceCandidatePair? // io.ktor.client.webrtc.browser/RTCIceTransport.getSelectedCandidatePair|getSelectedCandidatePair(){}[0]

    // Targets: [js]
    final fun getLocalCandidates(): kotlin/Array<io.ktor.client.webrtc.browser/RTCIceCandidate> // io.ktor.client.webrtc.browser/RTCIceTransport.getLocalCandidates|getLocalCandidates(){}[0]

    // Targets: [js]
    final fun getRemoteCandidates(): kotlin/Array<io.ktor.client.webrtc.browser/RTCIceCandidate> // io.ktor.client.webrtc.browser/RTCIceTransport.getRemoteCandidates|getRemoteCandidates(){}[0]

    // Targets: [wasmJs]
    final fun getLocalCandidates(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceCandidate> // io.ktor.client.webrtc.browser/RTCIceTransport.getLocalCandidates|getLocalCandidates(){}[0]

    // Targets: [wasmJs]
    final fun getRemoteCandidates(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceCandidate> // io.ktor.client.webrtc.browser/RTCIceTransport.getRemoteCandidates|getRemoteCandidates(){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.<init>|<init>(){}[0]

    final var state // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceTransportStateChangedEvent.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCPeerConnection : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCConfiguration) // io.ktor.client.webrtc.browser/RTCPeerConnection.<init>|<init>(io.ktor.client.webrtc.browser.RTCConfiguration){}[0]

    final var canTrickleIceCandidates // io.ktor.client.webrtc.browser/RTCPeerConnection.canTrickleIceCandidates|{}canTrickleIceCandidates[0]
        final fun <get-canTrickleIceCandidates>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCPeerConnection.canTrickleIceCandidates.<get-canTrickleIceCandidates>|<get-canTrickleIceCandidates>(){}[0]
        final fun <set-canTrickleIceCandidates>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCPeerConnection.canTrickleIceCandidates.<set-canTrickleIceCandidates>|<set-canTrickleIceCandidates>(kotlin.Boolean?){}[0]
    final var connectionState // io.ktor.client.webrtc.browser/RTCPeerConnection.connectionState|{}connectionState[0]
        // Targets: [js]
        final fun <get-connectionState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnection.connectionState.<get-connectionState>|<get-connectionState>(){}[0]

        // Targets: [js]
        final fun <set-connectionState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnection.connectionState.<set-connectionState>|<set-connectionState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-connectionState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnection.connectionState.<get-connectionState>|<get-connectionState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-connectionState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnection.connectionState.<set-connectionState>|<set-connectionState>(kotlin.js.JsString){}[0]
    final var currentLocalDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.currentLocalDescription|{}currentLocalDescription[0]
        final fun <get-currentLocalDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.currentLocalDescription.<get-currentLocalDescription>|<get-currentLocalDescription>(){}[0]
        final fun <set-currentLocalDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.currentLocalDescription.<set-currentLocalDescription>|<set-currentLocalDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var currentRemoteDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.currentRemoteDescription|{}currentRemoteDescription[0]
        final fun <get-currentRemoteDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.currentRemoteDescription.<get-currentRemoteDescription>|<get-currentRemoteDescription>(){}[0]
        final fun <set-currentRemoteDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.currentRemoteDescription.<set-currentRemoteDescription>|<set-currentRemoteDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var iceConnectionState // io.ktor.client.webrtc.browser/RTCPeerConnection.iceConnectionState|{}iceConnectionState[0]
        // Targets: [js]
        final fun <get-iceConnectionState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnection.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]

        // Targets: [js]
        final fun <set-iceConnectionState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnection.iceConnectionState.<set-iceConnectionState>|<set-iceConnectionState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-iceConnectionState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnection.iceConnectionState.<get-iceConnectionState>|<get-iceConnectionState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-iceConnectionState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnection.iceConnectionState.<set-iceConnectionState>|<set-iceConnectionState>(kotlin.js.JsString){}[0]
    final var iceGatheringState // io.ktor.client.webrtc.browser/RTCPeerConnection.iceGatheringState|{}iceGatheringState[0]
        // Targets: [js]
        final fun <get-iceGatheringState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnection.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]

        // Targets: [js]
        final fun <set-iceGatheringState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnection.iceGatheringState.<set-iceGatheringState>|<set-iceGatheringState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-iceGatheringState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnection.iceGatheringState.<get-iceGatheringState>|<get-iceGatheringState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-iceGatheringState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnection.iceGatheringState.<set-iceGatheringState>|<set-iceGatheringState>(kotlin.js.JsString){}[0]
    final var idpErrorInfo // io.ktor.client.webrtc.browser/RTCPeerConnection.idpErrorInfo|{}idpErrorInfo[0]
        // Targets: [js]
        final fun <get-idpErrorInfo>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnection.idpErrorInfo.<get-idpErrorInfo>|<get-idpErrorInfo>(){}[0]

        // Targets: [js]
        final fun <set-idpErrorInfo>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnection.idpErrorInfo.<set-idpErrorInfo>|<set-idpErrorInfo>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-idpErrorInfo>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnection.idpErrorInfo.<get-idpErrorInfo>|<get-idpErrorInfo>(){}[0]

        // Targets: [wasmJs]
        final fun <set-idpErrorInfo>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnection.idpErrorInfo.<set-idpErrorInfo>|<set-idpErrorInfo>(kotlin.js.JsString?){}[0]
    final var idpLoginUrl // io.ktor.client.webrtc.browser/RTCPeerConnection.idpLoginUrl|{}idpLoginUrl[0]
        // Targets: [js]
        final fun <get-idpLoginUrl>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnection.idpLoginUrl.<get-idpLoginUrl>|<get-idpLoginUrl>(){}[0]

        // Targets: [js]
        final fun <set-idpLoginUrl>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnection.idpLoginUrl.<set-idpLoginUrl>|<set-idpLoginUrl>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-idpLoginUrl>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnection.idpLoginUrl.<get-idpLoginUrl>|<get-idpLoginUrl>(){}[0]

        // Targets: [wasmJs]
        final fun <set-idpLoginUrl>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnection.idpLoginUrl.<set-idpLoginUrl>|<set-idpLoginUrl>(kotlin.js.JsString?){}[0]
    final var localDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.localDescription|{}localDescription[0]
        final fun <get-localDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.localDescription.<get-localDescription>|<get-localDescription>(){}[0]
        final fun <set-localDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.localDescription.<set-localDescription>|<set-localDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var onconnectionstatechange // io.ktor.client.webrtc.browser/RTCPeerConnection.onconnectionstatechange|{}onconnectionstatechange[0]
        final fun <get-onconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onconnectionstatechange.<get-onconnectionstatechange>|<get-onconnectionstatechange>(){}[0]
        final fun <set-onconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onconnectionstatechange.<set-onconnectionstatechange>|<set-onconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var ondatachannel // io.ktor.client.webrtc.browser/RTCPeerConnection.ondatachannel|{}ondatachannel[0]
        // Targets: [js]
        final fun <get-ondatachannel>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCDataChannelEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.ondatachannel.<get-ondatachannel>|<get-ondatachannel>(){}[0]

        // Targets: [js]
        final fun <set-ondatachannel>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCDataChannelEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.ondatachannel.<set-ondatachannel>|<set-ondatachannel>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCDataChannelEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ondatachannel>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCDataChannelEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.ondatachannel.<get-ondatachannel>|<get-ondatachannel>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ondatachannel>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCDataChannelEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.ondatachannel.<set-ondatachannel>|<set-ondatachannel>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCDataChannelEvent,kotlin.Unit>?){}[0]
    final var onicecandidate // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidate|{}onicecandidate[0]
        final fun <get-onicecandidate>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidate.<get-onicecandidate>|<get-onicecandidate>(){}[0]
        final fun <set-onicecandidate>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidate.<set-onicecandidate>|<set-onicecandidate>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCPeerConnectionIceEvent,kotlin.Unit>?){}[0]
    final var onicecandidateerror // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidateerror|{}onicecandidateerror[0]
        // Targets: [js]
        final fun <get-onicecandidateerror>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidateerror.<get-onicecandidateerror>|<get-onicecandidateerror>(){}[0]

        // Targets: [js]
        final fun <set-onicecandidateerror>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidateerror.<set-onicecandidateerror>|<set-onicecandidateerror>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCPeerConnectionIceErrorEvent,kotlin.Unit>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onicecandidateerror>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCPeerConnection, io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidateerror.<get-onicecandidateerror>|<get-onicecandidateerror>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onicecandidateerror>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCPeerConnection, io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onicecandidateerror.<set-onicecandidateerror>|<set-onicecandidateerror>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCPeerConnection,io.ktor.client.webrtc.browser.RTCPeerConnectionIceErrorEvent,kotlin.Unit>?){}[0]
    final var oniceconnectionstatechange // io.ktor.client.webrtc.browser/RTCPeerConnection.oniceconnectionstatechange|{}oniceconnectionstatechange[0]
        // Targets: [js]
        final fun <get-oniceconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.oniceconnectionstatechange.<get-oniceconnectionstatechange>|<get-oniceconnectionstatechange>(){}[0]

        // Targets: [js]
        final fun <set-oniceconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.oniceconnectionstatechange.<set-oniceconnectionstatechange>|<set-oniceconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-oniceconnectionstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.oniceconnectionstatechange.<get-oniceconnectionstatechange>|<get-oniceconnectionstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-oniceconnectionstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.oniceconnectionstatechange.<set-oniceconnectionstatechange>|<set-oniceconnectionstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onicegatheringstatechange // io.ktor.client.webrtc.browser/RTCPeerConnection.onicegatheringstatechange|{}onicegatheringstatechange[0]
        // Targets: [js]
        final fun <get-onicegatheringstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onicegatheringstatechange.<get-onicegatheringstatechange>|<get-onicegatheringstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onicegatheringstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onicegatheringstatechange.<set-onicegatheringstatechange>|<set-onicegatheringstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onicegatheringstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onicegatheringstatechange.<get-onicegatheringstatechange>|<get-onicegatheringstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onicegatheringstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onicegatheringstatechange.<set-onicegatheringstatechange>|<set-onicegatheringstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onnegotiationneeded // io.ktor.client.webrtc.browser/RTCPeerConnection.onnegotiationneeded|{}onnegotiationneeded[0]
        // Targets: [js]
        final fun <get-onnegotiationneeded>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onnegotiationneeded.<get-onnegotiationneeded>|<get-onnegotiationneeded>(){}[0]

        // Targets: [js]
        final fun <set-onnegotiationneeded>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onnegotiationneeded.<set-onnegotiationneeded>|<set-onnegotiationneeded>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onnegotiationneeded>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onnegotiationneeded.<get-onnegotiationneeded>|<get-onnegotiationneeded>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onnegotiationneeded>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onnegotiationneeded.<set-onnegotiationneeded>|<set-onnegotiationneeded>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onsignalingstatechange // io.ktor.client.webrtc.browser/RTCPeerConnection.onsignalingstatechange|{}onsignalingstatechange[0]
        // Targets: [js]
        final fun <get-onsignalingstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onsignalingstatechange.<get-onsignalingstatechange>|<get-onsignalingstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onsignalingstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onsignalingstatechange.<set-onsignalingstatechange>|<set-onsignalingstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onsignalingstatechange>(): kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onsignalingstatechange.<get-onsignalingstatechange>|<get-onsignalingstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onsignalingstatechange>(kotlin/Function1<org.w3c.dom.events/Event, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onsignalingstatechange.<set-onsignalingstatechange>|<set-onsignalingstatechange>(kotlin.Function1<org.w3c.dom.events.Event,kotlin.Unit>?){}[0]
    final var onstatsended // io.ktor.client.webrtc.browser/RTCPeerConnection.onstatsended|{}onstatsended[0]
        // Targets: [js]
        final fun <get-onstatsended>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onstatsended.<get-onstatsended>|<get-onstatsended>(){}[0]

        // Targets: [js]
        final fun <set-onstatsended>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onstatsended.<set-onstatsended>|<set-onstatsended>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCStatsEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatsended>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.onstatsended.<get-onstatsended>|<get-onstatsended>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatsended>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.onstatsended.<set-onstatsended>|<set-onstatsended>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCStatsEvent,kotlin.Unit>?){}[0]
    final var ontrack // io.ktor.client.webrtc.browser/RTCPeerConnection.ontrack|{}ontrack[0]
        // Targets: [js]
        final fun <get-ontrack>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCTrackEvent, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCPeerConnection.ontrack.<get-ontrack>|<get-ontrack>(){}[0]

        // Targets: [js]
        final fun <set-ontrack>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCTrackEvent, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.ontrack.<set-ontrack>|<set-ontrack>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCTrackEvent,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-ontrack>(): kotlin/Function1<io.ktor.client.webrtc.browser/RTCTrackEvent, kotlin/Unit>? // io.ktor.client.webrtc.browser/RTCPeerConnection.ontrack.<get-ontrack>|<get-ontrack>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ontrack>(kotlin/Function1<io.ktor.client.webrtc.browser/RTCTrackEvent, kotlin/Unit>?) // io.ktor.client.webrtc.browser/RTCPeerConnection.ontrack.<set-ontrack>|<set-ontrack>(kotlin.Function1<io.ktor.client.webrtc.browser.RTCTrackEvent,kotlin.Unit>?){}[0]
    final var peerIdentity // io.ktor.client.webrtc.browser/RTCPeerConnection.peerIdentity|{}peerIdentity[0]
        final fun <get-peerIdentity>(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCIdentityAssertion> // io.ktor.client.webrtc.browser/RTCPeerConnection.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        final fun <set-peerIdentity>(kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCIdentityAssertion>) // io.ktor.client.webrtc.browser/RTCPeerConnection.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.Promise<io.ktor.client.webrtc.browser.RTCIdentityAssertion>){}[0]
    final var pendingLocalDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingLocalDescription|{}pendingLocalDescription[0]
        final fun <get-pendingLocalDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingLocalDescription.<get-pendingLocalDescription>|<get-pendingLocalDescription>(){}[0]
        final fun <set-pendingLocalDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingLocalDescription.<set-pendingLocalDescription>|<set-pendingLocalDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var pendingRemoteDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingRemoteDescription|{}pendingRemoteDescription[0]
        final fun <get-pendingRemoteDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingRemoteDescription.<get-pendingRemoteDescription>|<get-pendingRemoteDescription>(){}[0]
        final fun <set-pendingRemoteDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.pendingRemoteDescription.<set-pendingRemoteDescription>|<set-pendingRemoteDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var remoteDescription // io.ktor.client.webrtc.browser/RTCPeerConnection.remoteDescription|{}remoteDescription[0]
        final fun <get-remoteDescription>(): io.ktor.client.webrtc.browser/RTCSessionDescription? // io.ktor.client.webrtc.browser/RTCPeerConnection.remoteDescription.<get-remoteDescription>|<get-remoteDescription>(){}[0]
        final fun <set-remoteDescription>(io.ktor.client.webrtc.browser/RTCSessionDescription?) // io.ktor.client.webrtc.browser/RTCPeerConnection.remoteDescription.<set-remoteDescription>|<set-remoteDescription>(io.ktor.client.webrtc.browser.RTCSessionDescription?){}[0]
    final var sctp // io.ktor.client.webrtc.browser/RTCPeerConnection.sctp|{}sctp[0]
        final fun <get-sctp>(): io.ktor.client.webrtc.browser/RTCSctpTransport? // io.ktor.client.webrtc.browser/RTCPeerConnection.sctp.<get-sctp>|<get-sctp>(){}[0]
        final fun <set-sctp>(io.ktor.client.webrtc.browser/RTCSctpTransport?) // io.ktor.client.webrtc.browser/RTCPeerConnection.sctp.<set-sctp>|<set-sctp>(io.ktor.client.webrtc.browser.RTCSctpTransport?){}[0]
    final var signalingState // io.ktor.client.webrtc.browser/RTCPeerConnection.signalingState|{}signalingState[0]
        // Targets: [js]
        final fun <get-signalingState>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnection.signalingState.<get-signalingState>|<get-signalingState>(){}[0]

        // Targets: [js]
        final fun <set-signalingState>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnection.signalingState.<set-signalingState>|<set-signalingState>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-signalingState>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnection.signalingState.<get-signalingState>|<get-signalingState>(){}[0]

        // Targets: [wasmJs]
        final fun <set-signalingState>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnection.signalingState.<set-signalingState>|<set-signalingState>(kotlin.js.JsString){}[0]

    final fun addTrack(org.w3c.dom.mediacapture/MediaStreamTrack, kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...): io.ktor.client.webrtc.browser/RTCRtpSender // io.ktor.client.webrtc.browser/RTCPeerConnection.addTrack|addTrack(org.w3c.dom.mediacapture.MediaStreamTrack;kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
    final fun addTransceiver(org.w3c.dom.mediacapture/MediaStreamTrack): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    final fun addTransceiver(org.w3c.dom.mediacapture/MediaStreamTrack, io.ktor.client.webrtc.browser/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(org.w3c.dom.mediacapture.MediaStreamTrack;io.ktor.client.webrtc.browser.RTCRtpTransceiverInit){}[0]
    final fun close() // io.ktor.client.webrtc.browser/RTCPeerConnection.close|close(){}[0]
    final fun createAnswer(io.ktor.client.webrtc.browser/RTCOfferOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(io.ktor.client.webrtc.browser.RTCOfferOptions){}[0]
    final fun getConfiguration(): io.ktor.client.webrtc.browser/RTCConfiguration // io.ktor.client.webrtc.browser/RTCPeerConnection.getConfiguration|getConfiguration(){}[0]
    final fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCPeerConnection.getStats|getStats(){}[0]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack? = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    final fun removeTrack(io.ktor.client.webrtc.browser/RTCRtpSender) // io.ktor.client.webrtc.browser/RTCPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.browser.RTCRtpSender){}[0]
    final fun restartIce() // io.ktor.client.webrtc.browser/RTCPeerConnection.restartIce|restartIce(){}[0]
    final fun setConfiguration(io.ktor.client.webrtc.browser/RTCConfiguration) // io.ktor.client.webrtc.browser/RTCPeerConnection.setConfiguration|setConfiguration(io.ktor.client.webrtc.browser.RTCConfiguration){}[0]

    // Targets: [js]
    final fun addIceCandidate(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidate = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidate){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidate, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidate;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidateInit = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidateInit){}[0]

    // Targets: [js]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidateInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidateInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun addTransceiver(kotlin/String): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.String){}[0]

    // Targets: [js]
    final fun addTransceiver(kotlin/String, io.ktor.client.webrtc.browser/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.String;io.ktor.client.webrtc.browser.RTCRtpTransceiverInit){}[0]

    // Targets: [js]
    final fun createAnswer(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescription> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(){}[0]

    // Targets: [js]
    final fun createAnswer(io.ktor.client.webrtc.browser/RTCAnswerOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescription> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(io.ktor.client.webrtc.browser.RTCAnswerOptions){}[0]

    // Targets: [js]
    final fun createAnswer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String, io.ktor.client.webrtc.browser/RTCDataChannelInit = ...): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String;io.ktor.client.webrtc.browser.RTCDataChannelInit){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String?): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String?){}[0]

    // Targets: [js]
    final fun createDataChannel(kotlin/String?, io.ktor.client.webrtc.browser/RTCDataChannelInit = ...): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.String?;io.ktor.client.webrtc.browser.RTCDataChannelInit){}[0]

    // Targets: [js]
    final fun createOffer(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescription> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(){}[0]

    // Targets: [js]
    final fun createOffer(io.ktor.client.webrtc.browser/RTCOfferOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescription> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(io.ktor.client.webrtc.browser.RTCOfferOptions){}[0]

    // Targets: [js]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>, io.ktor.client.webrtc.browser/RTCOfferOptions = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>;io.ktor.client.webrtc.browser.RTCOfferOptions){}[0]

    // Targets: [js]
    final fun getIdentityAssertion(): kotlin.js/Promise<kotlin/String> // io.ktor.client.webrtc.browser/RTCPeerConnection.getIdentityAssertion|getIdentityAssertion(){}[0]

    // Targets: [js]
    final fun getReceivers(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpReceiver> // io.ktor.client.webrtc.browser/RTCPeerConnection.getReceivers|getReceivers(){}[0]

    // Targets: [js]
    final fun getSenders(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpSender> // io.ktor.client.webrtc.browser/RTCPeerConnection.getSenders|getSenders(){}[0]

    // Targets: [js]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack?, kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsReport, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?;kotlin.Function1<io.ktor.client.webrtc.browser.RTCStatsReport,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun getTransceivers(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpTransceiver> // io.ktor.client.webrtc.browser/RTCPeerConnection.getTransceivers|getTransceivers(){}[0]

    // Targets: [js]
    final fun setIdentityProvider(kotlin/String, io.ktor.client.webrtc.browser/RTCIdentityProviderOptions = ...) // io.ktor.client.webrtc.browser/RTCPeerConnection.setIdentityProvider|setIdentityProvider(kotlin.String;io.ktor.client.webrtc.browser.RTCIdentityProviderOptions){}[0]

    // Targets: [js]
    final fun setLocalDescription(io.ktor.client.webrtc.browser/RTCSessionDescription): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.browser.RTCSessionDescription){}[0]

    // Targets: [js]
    final fun setLocalDescription(io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.browser.RTCSessionDescriptionInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [js]
    final fun setRemoteDescription(io.ktor.client.webrtc.browser/RTCSessionDescription): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.browser.RTCSessionDescription){}[0]

    // Targets: [js]
    final fun setRemoteDescription(io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Function0<kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.browser.RTCSessionDescriptionInit;kotlin.Function0<kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidate = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidate){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidate, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidate;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidateInit = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidateInit){}[0]

    // Targets: [wasmJs]
    final fun addIceCandidate(io.ktor.client.webrtc.browser/RTCIceCandidateInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.browser.RTCIceCandidateInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun addTransceiver(kotlin.js/JsString): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.js.JsString){}[0]

    // Targets: [wasmJs]
    final fun addTransceiver(kotlin.js/JsString, io.ktor.client.webrtc.browser/RTCRtpTransceiverInit = ...): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCPeerConnection.addTransceiver|addTransceiver(kotlin.js.JsString;io.ktor.client.webrtc.browser.RTCRtpTransceiverInit){}[0]

    // Targets: [wasmJs]
    final fun createAnswer(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(){}[0]

    // Targets: [wasmJs]
    final fun createAnswer(io.ktor.client.webrtc.browser/RTCAnswerOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(io.ktor.client.webrtc.browser.RTCAnswerOptions){}[0]

    // Targets: [wasmJs]
    final fun createAnswer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.createAnswer|createAnswer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString, io.ktor.client.webrtc.browser/RTCDataChannelInit = ...): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString;io.ktor.client.webrtc.browser.RTCDataChannelInit){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString?): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString?){}[0]

    // Targets: [wasmJs]
    final fun createDataChannel(kotlin.js/JsString?, io.ktor.client.webrtc.browser/RTCDataChannelInit = ...): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc.browser/RTCPeerConnection.createDataChannel|createDataChannel(kotlin.js.JsString?;io.ktor.client.webrtc.browser.RTCDataChannelInit){}[0]

    // Targets: [wasmJs]
    final fun createOffer(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(){}[0]

    // Targets: [wasmJs]
    final fun createOffer(io.ktor.client.webrtc.browser/RTCOfferOptions = ...): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(io.ktor.client.webrtc.browser.RTCOfferOptions){}[0]

    // Targets: [wasmJs]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun createOffer(kotlin/Function1<io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Unit>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>, io.ktor.client.webrtc.browser/RTCOfferOptions = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.createOffer|createOffer(kotlin.Function1<io.ktor.client.webrtc.browser.RTCSessionDescriptionInit,kotlin.Unit>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>;io.ktor.client.webrtc.browser.RTCOfferOptions){}[0]

    // Targets: [wasmJs]
    final fun getIdentityAssertion(): kotlin.js/Promise<kotlin.js/JsString> // io.ktor.client.webrtc.browser/RTCPeerConnection.getIdentityAssertion|getIdentityAssertion(){}[0]

    // Targets: [wasmJs]
    final fun getReceivers(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpReceiver> // io.ktor.client.webrtc.browser/RTCPeerConnection.getReceivers|getReceivers(){}[0]

    // Targets: [wasmJs]
    final fun getSenders(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpSender> // io.ktor.client.webrtc.browser/RTCPeerConnection.getSenders|getSenders(){}[0]

    // Targets: [wasmJs]
    final fun getStats(org.w3c.dom.mediacapture/MediaStreamTrack?, kotlin/Function1<io.ktor.client.webrtc.browser/RTCStatsReport, kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.getStats|getStats(org.w3c.dom.mediacapture.MediaStreamTrack?;kotlin.Function1<io.ktor.client.webrtc.browser.RTCStatsReport,kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun getTransceivers(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpTransceiver> // io.ktor.client.webrtc.browser/RTCPeerConnection.getTransceivers|getTransceivers(){}[0]

    // Targets: [wasmJs]
    final fun setIdentityProvider(kotlin.js/JsString, io.ktor.client.webrtc.browser/RTCIdentityProviderOptions = ...) // io.ktor.client.webrtc.browser/RTCPeerConnection.setIdentityProvider|setIdentityProvider(kotlin.js.JsString;io.ktor.client.webrtc.browser.RTCIdentityProviderOptions){}[0]

    // Targets: [wasmJs]
    final fun setLocalDescription(io.ktor.client.webrtc.browser/RTCSessionDescription): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.browser.RTCSessionDescription){}[0]

    // Targets: [wasmJs]
    final fun setLocalDescription(io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.browser.RTCSessionDescriptionInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]

    // Targets: [wasmJs]
    final fun setRemoteDescription(io.ktor.client.webrtc.browser/RTCSessionDescription): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.browser.RTCSessionDescription){}[0]

    // Targets: [wasmJs]
    final fun setRemoteDescription(io.ktor.client.webrtc.browser/RTCSessionDescriptionInit, kotlin/Function0<kotlin.js/JsAny?>, kotlin/Function1<io.ktor.client.webrtc.browser/DOMException, kotlin/Unit>): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.browser.RTCSessionDescriptionInit;kotlin.Function0<kotlin.js.JsAny?>;kotlin.Function1<io.ktor.client.webrtc.browser.DOMException,kotlin.Unit>){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.<init>|<init>(){}[0]

    final var errorCode // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorCode|{}errorCode[0]
        // Targets: [js]
        final fun <get-errorCode>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [js]
        final fun <set-errorCode>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorCode.<set-errorCode>|<set-errorCode>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-errorCode>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorCode.<get-errorCode>|<get-errorCode>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorCode>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorCode.<set-errorCode>|<set-errorCode>(kotlin.js.JsNumber){}[0]
    final var errorText // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorText|{}errorText[0]
        // Targets: [js]
        final fun <get-errorText>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorText.<get-errorText>|<get-errorText>(){}[0]

        // Targets: [js]
        final fun <set-errorText>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorText.<set-errorText>|<set-errorText>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-errorText>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorText.<get-errorText>|<get-errorText>(){}[0]

        // Targets: [wasmJs]
        final fun <set-errorText>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.errorText.<set-errorText>|<set-errorText>(kotlin.js.JsString){}[0]
    final var hostCandidate // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.hostCandidate|{}hostCandidate[0]
        // Targets: [js]
        final fun <get-hostCandidate>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [js]
        final fun <set-hostCandidate>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-hostCandidate>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.hostCandidate.<get-hostCandidate>|<get-hostCandidate>(){}[0]

        // Targets: [wasmJs]
        final fun <set-hostCandidate>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.hostCandidate.<set-hostCandidate>|<set-hostCandidate>(kotlin.js.JsString){}[0]
    final var url // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.url|{}url[0]
        // Targets: [js]
        final fun <get-url>(): kotlin/String // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        final fun <set-url>(kotlin/String) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.url.<set-url>|<set-url>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-url>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        final fun <set-url>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceErrorEvent.url.<set-url>|<set-url>(kotlin.js.JsString){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.<init>|<init>(){}[0]

    final var candidate // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.candidate|{}candidate[0]
        final fun <get-candidate>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.candidate.<set-candidate>|<set-candidate>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
    final var url // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.url|{}url[0]
        // Targets: [js]
        final fun <get-url>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [js]
        final fun <set-url>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.url.<set-url>|<set-url>(kotlin.String?){}[0]

        // Targets: [wasmJs]
        final fun <get-url>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.url.<get-url>|<get-url>(){}[0]

        // Targets: [wasmJs]
        final fun <set-url>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCPeerConnectionIceEvent.url.<set-url>|<set-url>(kotlin.js.JsString?){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCSctpTransport : org.w3c.dom.events/EventTarget { // io.ktor.client.webrtc.browser/RTCSctpTransport|null[0]
    final var maxChannels // io.ktor.client.webrtc.browser/RTCSctpTransport.maxChannels|{}maxChannels[0]
        // Targets: [js]
        final fun <get-maxChannels>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCSctpTransport.maxChannels.<get-maxChannels>|<get-maxChannels>(){}[0]

        // Targets: [js]
        final fun <set-maxChannels>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCSctpTransport.maxChannels.<set-maxChannels>|<set-maxChannels>(kotlin.Number?){}[0]

        // Targets: [wasmJs]
        final fun <get-maxChannels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCSctpTransport.maxChannels.<get-maxChannels>|<get-maxChannels>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxChannels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCSctpTransport.maxChannels.<set-maxChannels>|<set-maxChannels>(kotlin.js.JsNumber?){}[0]
    final var maxMessageSize // io.ktor.client.webrtc.browser/RTCSctpTransport.maxMessageSize|{}maxMessageSize[0]
        // Targets: [js]
        final fun <get-maxMessageSize>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCSctpTransport.maxMessageSize.<get-maxMessageSize>|<get-maxMessageSize>(){}[0]

        // Targets: [js]
        final fun <set-maxMessageSize>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCSctpTransport.maxMessageSize.<set-maxMessageSize>|<set-maxMessageSize>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-maxMessageSize>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCSctpTransport.maxMessageSize.<get-maxMessageSize>|<get-maxMessageSize>(){}[0]

        // Targets: [wasmJs]
        final fun <set-maxMessageSize>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCSctpTransport.maxMessageSize.<set-maxMessageSize>|<set-maxMessageSize>(kotlin.js.JsNumber){}[0]
    final var onstatechange // io.ktor.client.webrtc.browser/RTCSctpTransport.onstatechange|{}onstatechange[0]
        // Targets: [js]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCSctpTransport, org.w3c.dom.events/Event, kotlin/Any>? // io.ktor.client.webrtc.browser/RTCSctpTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [js]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCSctpTransport, org.w3c.dom.events/Event, kotlin/Any>?) // io.ktor.client.webrtc.browser/RTCSctpTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCSctpTransport,org.w3c.dom.events.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        final fun <get-onstatechange>(): kotlin/Function2<io.ktor.client.webrtc.browser/RTCSctpTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>? // io.ktor.client.webrtc.browser/RTCSctpTransport.onstatechange.<get-onstatechange>|<get-onstatechange>(){}[0]

        // Targets: [wasmJs]
        final fun <set-onstatechange>(kotlin/Function2<io.ktor.client.webrtc.browser/RTCSctpTransport, org.w3c.dom.events/Event, kotlin.js/JsAny>?) // io.ktor.client.webrtc.browser/RTCSctpTransport.onstatechange.<set-onstatechange>|<set-onstatechange>(kotlin.Function2<io.ktor.client.webrtc.browser.RTCSctpTransport,org.w3c.dom.events.Event,kotlin.js.JsAny>?){}[0]
    final var state // io.ktor.client.webrtc.browser/RTCSctpTransport.state|{}state[0]
        // Targets: [js]
        final fun <get-state>(): kotlin/String // io.ktor.client.webrtc.browser/RTCSctpTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [js]
        final fun <set-state>(kotlin/String) // io.ktor.client.webrtc.browser/RTCSctpTransport.state.<set-state>|<set-state>(kotlin.String){}[0]

        // Targets: [wasmJs]
        final fun <get-state>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCSctpTransport.state.<get-state>|<get-state>(){}[0]

        // Targets: [wasmJs]
        final fun <set-state>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCSctpTransport.state.<set-state>|<set-state>(kotlin.js.JsString){}[0]
    final var transport // io.ktor.client.webrtc.browser/RTCSctpTransport.transport|{}transport[0]
        final fun <get-transport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport // io.ktor.client.webrtc.browser/RTCSctpTransport.transport.<get-transport>|<get-transport>(){}[0]
        final fun <set-transport>(io.ktor.client.webrtc.browser/RTCDtlsTransport) // io.ktor.client.webrtc.browser/RTCSctpTransport.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.browser.RTCDtlsTransport){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCSsrcConflictEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.<init>|<init>(){}[0]

    final var ssrc // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.ssrc|{}ssrc[0]
        // Targets: [js]
        final fun <get-ssrc>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.ssrc.<get-ssrc>|<get-ssrc>(){}[0]

        // Targets: [js]
        final fun <set-ssrc>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        final fun <get-ssrc>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.ssrc.<get-ssrc>|<get-ssrc>(){}[0]

        // Targets: [wasmJs]
        final fun <set-ssrc>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCSsrcConflictEvent.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCStatsEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCStatsEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCStatsEvent.<init>|<init>(){}[0]

    final var report // io.ktor.client.webrtc.browser/RTCStatsEvent.report|{}report[0]
        final fun <get-report>(): io.ktor.client.webrtc.browser/RTCStatsReport // io.ktor.client.webrtc.browser/RTCStatsEvent.report.<get-report>|<get-report>(){}[0]
        final fun <set-report>(io.ktor.client.webrtc.browser/RTCStatsReport) // io.ktor.client.webrtc.browser/RTCStatsEvent.report.<set-report>|<set-report>(io.ktor.client.webrtc.browser.RTCStatsReport){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc.browser/RTCTrackEvent : org.w3c.dom.events/Event { // io.ktor.client.webrtc.browser/RTCTrackEvent|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCTrackEvent.<init>|<init>(){}[0]

    final var receiver // io.ktor.client.webrtc.browser/RTCTrackEvent.receiver|{}receiver[0]
        final fun <get-receiver>(): io.ktor.client.webrtc.browser/RTCRtpReceiver // io.ktor.client.webrtc.browser/RTCTrackEvent.receiver.<get-receiver>|<get-receiver>(){}[0]
        final fun <set-receiver>(io.ktor.client.webrtc.browser/RTCRtpReceiver) // io.ktor.client.webrtc.browser/RTCTrackEvent.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.browser.RTCRtpReceiver){}[0]
    final var streams // io.ktor.client.webrtc.browser/RTCTrackEvent.streams|{}streams[0]
        // Targets: [js]
        final fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream> // io.ktor.client.webrtc.browser/RTCTrackEvent.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [js]
        final fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>) // io.ktor.client.webrtc.browser/RTCTrackEvent.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>){}[0]

        // Targets: [wasmJs]
        final fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream> // io.ktor.client.webrtc.browser/RTCTrackEvent.streams.<get-streams>|<get-streams>(){}[0]

        // Targets: [wasmJs]
        final fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>) // io.ktor.client.webrtc.browser/RTCTrackEvent.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>){}[0]
    final var track // io.ktor.client.webrtc.browser/RTCTrackEvent.track|{}track[0]
        final fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.browser/RTCTrackEvent.track.<get-track>|<get-track>(){}[0]
        final fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.browser/RTCTrackEvent.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    final var transceiver // io.ktor.client.webrtc.browser/RTCTrackEvent.transceiver|{}transceiver[0]
        final fun <get-transceiver>(): io.ktor.client.webrtc.browser/RTCRtpTransceiver // io.ktor.client.webrtc.browser/RTCTrackEvent.transceiver.<get-transceiver>|<get-transceiver>(){}[0]
        final fun <set-transceiver>(io.ktor.client.webrtc.browser/RTCRtpTransceiver) // io.ktor.client.webrtc.browser/RTCTrackEvent.transceiver.<set-transceiver>|<set-transceiver>(io.ktor.client.webrtc.browser.RTCRtpTransceiver){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc/JsWebRtcEngine : io.ktor.client.webrtc/MediaTrackFactory, io.ktor.client.webrtc/WebRtcEngineBase { // io.ktor.client.webrtc/JsWebRtcEngine|null[0]
    constructor <init>(io.ktor.client.webrtc/JsWebRtcEngineConfig, io.ktor.client.webrtc/MediaTrackFactory = ...) // io.ktor.client.webrtc/JsWebRtcEngine.<init>|<init>(io.ktor.client.webrtc.JsWebRtcEngineConfig;io.ktor.client.webrtc.MediaTrackFactory){}[0]

    final val config // io.ktor.client.webrtc/JsWebRtcEngine.config|{}config[0]
        final fun <get-config>(): io.ktor.client.webrtc/JsWebRtcEngineConfig // io.ktor.client.webrtc/JsWebRtcEngine.config.<get-config>|<get-config>(){}[0]

    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.AudioTrack // io.ktor.client.webrtc/JsWebRtcEngine.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRtcMedia.AudioTrackConstraints){}[0]
    final suspend fun createPeerConnection(io.ktor.client.webrtc/WebRtcConnectionConfig): io.ktor.client.webrtc/WebRtcPeerConnection // io.ktor.client.webrtc/JsWebRtcEngine.createPeerConnection|createPeerConnection(io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.VideoTrack // io.ktor.client.webrtc/JsWebRtcEngine.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRtcMedia.VideoTrackConstraints){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.webrtc/JsWebRtcEngineConfig : io.ktor.client.webrtc/WebRtcConfig { // io.ktor.client.webrtc/JsWebRtcEngineConfig|null[0]
    constructor <init>() // io.ktor.client.webrtc/JsWebRtcEngineConfig.<init>|<init>(){}[0]
}

// Targets: [js, wasmJs]
open class io.ktor.client.webrtc.browser/DOMException { // io.ktor.client.webrtc.browser/DOMException|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/DOMException.<init>|<init>(){}[0]

    // Targets: [js]
    final var code // io.ktor.client.webrtc.browser/DOMException.code|{}code[0]
        final fun <get-code>(): kotlin/Number // io.ktor.client.webrtc.browser/DOMException.code.<get-code>|<get-code>(){}[0]
        final fun <set-code>(kotlin/Number) // io.ktor.client.webrtc.browser/DOMException.code.<set-code>|<set-code>(kotlin.Number){}[0]

    // Targets: [js]
    final var message // io.ktor.client.webrtc.browser/DOMException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.webrtc.browser/DOMException.message.<get-message>|<get-message>(){}[0]
        final fun <set-message>(kotlin/String) // io.ktor.client.webrtc.browser/DOMException.message.<set-message>|<set-message>(kotlin.String){}[0]

    // Targets: [js]
    final var name // io.ktor.client.webrtc.browser/DOMException.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.client.webrtc.browser/DOMException.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // io.ktor.client.webrtc.browser/DOMException.name.<set-name>|<set-name>(kotlin.String){}[0]

    // Targets: [wasmJs]
    final val code // io.ktor.client.webrtc.browser/DOMException.code|{}code[0]
        final fun <get-code>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.code.<get-code>|<get-code>(){}[0]

    // Targets: [wasmJs]
    final val message // io.ktor.client.webrtc.browser/DOMException.message|{}message[0]
        final fun <get-message>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/DOMException.message.<get-message>|<get-message>(){}[0]

    // Targets: [wasmJs]
    final val name // io.ktor.client.webrtc.browser/DOMException.name|{}name[0]
        final fun <get-name>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/DOMException.name.<get-name>|<get-name>(){}[0]

    // Targets: [wasmJs]
    final object Companion { // io.ktor.client.webrtc.browser/DOMException.Companion|null[0]
        final val ABORT_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.ABORT_ERR|{}ABORT_ERR[0]
            final fun <get-ABORT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.ABORT_ERR.<get-ABORT_ERR>|<get-ABORT_ERR>(){}[0]
        final val DATA_CLONE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.DATA_CLONE_ERR|{}DATA_CLONE_ERR[0]
            final fun <get-DATA_CLONE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.DATA_CLONE_ERR.<get-DATA_CLONE_ERR>|<get-DATA_CLONE_ERR>(){}[0]
        final val DOMSTRING_SIZE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.DOMSTRING_SIZE_ERR|{}DOMSTRING_SIZE_ERR[0]
            final fun <get-DOMSTRING_SIZE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.DOMSTRING_SIZE_ERR.<get-DOMSTRING_SIZE_ERR>|<get-DOMSTRING_SIZE_ERR>(){}[0]
        final val HIERARCHY_REQUEST_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.HIERARCHY_REQUEST_ERR|{}HIERARCHY_REQUEST_ERR[0]
            final fun <get-HIERARCHY_REQUEST_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.HIERARCHY_REQUEST_ERR.<get-HIERARCHY_REQUEST_ERR>|<get-HIERARCHY_REQUEST_ERR>(){}[0]
        final val INDEX_SIZE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INDEX_SIZE_ERR|{}INDEX_SIZE_ERR[0]
            final fun <get-INDEX_SIZE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INDEX_SIZE_ERR.<get-INDEX_SIZE_ERR>|<get-INDEX_SIZE_ERR>(){}[0]
        final val INUSE_ATTRIBUTE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INUSE_ATTRIBUTE_ERR|{}INUSE_ATTRIBUTE_ERR[0]
            final fun <get-INUSE_ATTRIBUTE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INUSE_ATTRIBUTE_ERR.<get-INUSE_ATTRIBUTE_ERR>|<get-INUSE_ATTRIBUTE_ERR>(){}[0]
        final val INVALID_ACCESS_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_ACCESS_ERR|{}INVALID_ACCESS_ERR[0]
            final fun <get-INVALID_ACCESS_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_ACCESS_ERR.<get-INVALID_ACCESS_ERR>|<get-INVALID_ACCESS_ERR>(){}[0]
        final val INVALID_CHARACTER_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_CHARACTER_ERR|{}INVALID_CHARACTER_ERR[0]
            final fun <get-INVALID_CHARACTER_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_CHARACTER_ERR.<get-INVALID_CHARACTER_ERR>|<get-INVALID_CHARACTER_ERR>(){}[0]
        final val INVALID_MODIFICATION_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_MODIFICATION_ERR|{}INVALID_MODIFICATION_ERR[0]
            final fun <get-INVALID_MODIFICATION_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_MODIFICATION_ERR.<get-INVALID_MODIFICATION_ERR>|<get-INVALID_MODIFICATION_ERR>(){}[0]
        final val INVALID_NODE_TYPE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_NODE_TYPE_ERR|{}INVALID_NODE_TYPE_ERR[0]
            final fun <get-INVALID_NODE_TYPE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_NODE_TYPE_ERR.<get-INVALID_NODE_TYPE_ERR>|<get-INVALID_NODE_TYPE_ERR>(){}[0]
        final val INVALID_STATE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_STATE_ERR|{}INVALID_STATE_ERR[0]
            final fun <get-INVALID_STATE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.INVALID_STATE_ERR.<get-INVALID_STATE_ERR>|<get-INVALID_STATE_ERR>(){}[0]
        final val NAMESPACE_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NAMESPACE_ERR|{}NAMESPACE_ERR[0]
            final fun <get-NAMESPACE_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NAMESPACE_ERR.<get-NAMESPACE_ERR>|<get-NAMESPACE_ERR>(){}[0]
        final val NETWORK_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NETWORK_ERR|{}NETWORK_ERR[0]
            final fun <get-NETWORK_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NETWORK_ERR.<get-NETWORK_ERR>|<get-NETWORK_ERR>(){}[0]
        final val NOT_FOUND_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NOT_FOUND_ERR|{}NOT_FOUND_ERR[0]
            final fun <get-NOT_FOUND_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NOT_FOUND_ERR.<get-NOT_FOUND_ERR>|<get-NOT_FOUND_ERR>(){}[0]
        final val NOT_SUPPORTED_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NOT_SUPPORTED_ERR|{}NOT_SUPPORTED_ERR[0]
            final fun <get-NOT_SUPPORTED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NOT_SUPPORTED_ERR.<get-NOT_SUPPORTED_ERR>|<get-NOT_SUPPORTED_ERR>(){}[0]
        final val NO_DATA_ALLOWED_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NO_DATA_ALLOWED_ERR|{}NO_DATA_ALLOWED_ERR[0]
            final fun <get-NO_DATA_ALLOWED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NO_DATA_ALLOWED_ERR.<get-NO_DATA_ALLOWED_ERR>|<get-NO_DATA_ALLOWED_ERR>(){}[0]
        final val NO_MODIFICATION_ALLOWED_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.NO_MODIFICATION_ALLOWED_ERR|{}NO_MODIFICATION_ALLOWED_ERR[0]
            final fun <get-NO_MODIFICATION_ALLOWED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.NO_MODIFICATION_ALLOWED_ERR.<get-NO_MODIFICATION_ALLOWED_ERR>|<get-NO_MODIFICATION_ALLOWED_ERR>(){}[0]
        final val QUOTA_EXCEEDED_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.QUOTA_EXCEEDED_ERR|{}QUOTA_EXCEEDED_ERR[0]
            final fun <get-QUOTA_EXCEEDED_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.QUOTA_EXCEEDED_ERR.<get-QUOTA_EXCEEDED_ERR>|<get-QUOTA_EXCEEDED_ERR>(){}[0]
        final val SECURITY_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.SECURITY_ERR|{}SECURITY_ERR[0]
            final fun <get-SECURITY_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.SECURITY_ERR.<get-SECURITY_ERR>|<get-SECURITY_ERR>(){}[0]
        final val SYNTAX_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.SYNTAX_ERR|{}SYNTAX_ERR[0]
            final fun <get-SYNTAX_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.SYNTAX_ERR.<get-SYNTAX_ERR>|<get-SYNTAX_ERR>(){}[0]
        final val TIMEOUT_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.TIMEOUT_ERR|{}TIMEOUT_ERR[0]
            final fun <get-TIMEOUT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.TIMEOUT_ERR.<get-TIMEOUT_ERR>|<get-TIMEOUT_ERR>(){}[0]
        final val TYPE_MISMATCH_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.TYPE_MISMATCH_ERR|{}TYPE_MISMATCH_ERR[0]
            final fun <get-TYPE_MISMATCH_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.TYPE_MISMATCH_ERR.<get-TYPE_MISMATCH_ERR>|<get-TYPE_MISMATCH_ERR>(){}[0]
        final val URL_MISMATCH_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.URL_MISMATCH_ERR|{}URL_MISMATCH_ERR[0]
            final fun <get-URL_MISMATCH_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.URL_MISMATCH_ERR.<get-URL_MISMATCH_ERR>|<get-URL_MISMATCH_ERR>(){}[0]
        final val VALIDATION_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.VALIDATION_ERR|{}VALIDATION_ERR[0]
            final fun <get-VALIDATION_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.VALIDATION_ERR.<get-VALIDATION_ERR>|<get-VALIDATION_ERR>(){}[0]
        final val WRONG_DOCUMENT_ERR // io.ktor.client.webrtc.browser/DOMException.Companion.WRONG_DOCUMENT_ERR|{}WRONG_DOCUMENT_ERR[0]
            final fun <get-WRONG_DOCUMENT_ERR>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/DOMException.Companion.WRONG_DOCUMENT_ERR.<get-WRONG_DOCUMENT_ERR>|<get-WRONG_DOCUMENT_ERR>(){}[0]
    }
}

// Targets: [js, wasmJs]
final object io.ktor.client.webrtc/JsWebRtc : io.ktor.client.webrtc/WebRtcClientEngineFactory<io.ktor.client.webrtc/JsWebRtcEngineConfig> { // io.ktor.client.webrtc/JsWebRtc|null[0]
    final fun create(kotlin/Function1<io.ktor.client.webrtc/JsWebRtcEngineConfig, kotlin/Unit>): io.ktor.client.webrtc/WebRtcEngine // io.ktor.client.webrtc/JsWebRtc.create|create(kotlin.Function1<io.ktor.client.webrtc.JsWebRtcEngineConfig,kotlin.Unit>){}[0]
}

// Targets: [js, wasmJs]
final object io.ktor.client.webrtc/NavigatorMediaDevices : io.ktor.client.webrtc/MediaTrackFactory { // io.ktor.client.webrtc/NavigatorMediaDevices|null[0]
    final suspend fun createAudioTrack(io.ktor.client.webrtc/WebRtcMedia.AudioTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.AudioTrack // io.ktor.client.webrtc/NavigatorMediaDevices.createAudioTrack|createAudioTrack(io.ktor.client.webrtc.WebRtcMedia.AudioTrackConstraints){}[0]
    final suspend fun createVideoTrack(io.ktor.client.webrtc/WebRtcMedia.VideoTrackConstraints): io.ktor.client.webrtc/WebRtcMedia.VideoTrack // io.ktor.client.webrtc/NavigatorMediaDevices.createVideoTrack|createVideoTrack(io.ktor.client.webrtc.WebRtcMedia.VideoTrackConstraints){}[0]
}

// Targets: [js, wasmJs]
final val io.ktor.client.webrtc.browser/navigator // io.ktor.client.webrtc.browser/navigator|{}navigator[0]
    final fun <get-navigator>(): io.ktor.client.webrtc.browser/Navigator // io.ktor.client.webrtc.browser/navigator.<get-navigator>|<get-navigator>(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtc.DtmfSender).io.ktor.client.webrtc/getNative(): io.ktor.client.webrtc.browser/RTCDTMFSender // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtc.DtmfSender(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtc.RtpParameters).io.ktor.client.webrtc/getNative(): io.ktor.client.webrtc.browser/RTCRtpSendParameters // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtc.RtpParameters(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtc.RtpSender).io.ktor.client.webrtc/getNative(): io.ktor.client.webrtc.browser/RTCRtpSender // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtc.RtpSender(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtcDataChannel).io.ktor.client.webrtc/getNative(): io.ktor.client.webrtc.browser/RTCDataChannel // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtcDataChannel(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtcMedia.Track).io.ktor.client.webrtc/getNative(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtcMedia.Track(){}[0]

// Targets: [js, wasmJs]
final fun (io.ktor.client.webrtc/WebRtcPeerConnection).io.ktor.client.webrtc/getNative(): io.ktor.client.webrtc.browser/RTCPeerConnection // io.ktor.client.webrtc/getNative|getNative@io.ktor.client.webrtc.WebRtcPeerConnection(){}[0]

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.webrtc.browser/ReadonlyMap { // io.ktor.client.webrtc.browser/ReadonlyMap|null[0]
    abstract val size // io.ktor.client.webrtc.browser/ReadonlyMap.size|{}size[0]
        abstract fun <get-size>(): kotlin/Number // io.ktor.client.webrtc.browser/ReadonlyMap.size.<get-size>|<get-size>(){}[0]

    abstract fun <#A1: kotlin/Any?> get(#A): #A1? // io.ktor.client.webrtc.browser/ReadonlyMap.get|get(1:0){0§<kotlin.Any?>}[0]
    abstract fun entries(): kotlin.collections/Iterator<dynamic> // io.ktor.client.webrtc.browser/ReadonlyMap.entries|entries(){}[0]
    abstract fun forEach(kotlin/Function3<dynamic, #A, io.ktor.client.webrtc.browser/ReadonlyMap<#A>, kotlin/Unit>, kotlin/Any = ...) // io.ktor.client.webrtc.browser/ReadonlyMap.forEach|forEach(kotlin.Function3<<dynamic>,1:0,io.ktor.client.webrtc.browser.ReadonlyMap<1:0>,kotlin.Unit>;kotlin.Any){}[0]
    abstract fun has(#A): kotlin/Boolean // io.ktor.client.webrtc.browser/ReadonlyMap.has|has(1:0){}[0]
    abstract fun keys(): kotlin.collections/Iterable<#A> // io.ktor.client.webrtc.browser/ReadonlyMap.keys|keys(){}[0]
    abstract fun values(): kotlin.collections/Iterator<dynamic> // io.ktor.client.webrtc.browser/ReadonlyMap.values|values(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCCertificate { // io.ktor.client.webrtc.browser/RTCCertificate|null[0]
    abstract var expires // io.ktor.client.webrtc.browser/RTCCertificate.expires|{}expires[0]
        abstract fun <get-expires>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCCertificate.expires.<get-expires>|<get-expires>(){}[0]
        abstract fun <set-expires>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCCertificate.expires.<set-expires>|<set-expires>(kotlin.Number){}[0]

    abstract fun getAlgorithm(): kotlin/String // io.ktor.client.webrtc.browser/RTCCertificate.getAlgorithm|getAlgorithm(){}[0]
    abstract fun getFingerprints(): kotlin/Array<io.ktor.client.webrtc.browser/RTCDtlsFingerprint> // io.ktor.client.webrtc.browser/RTCCertificate.getFingerprints|getFingerprints(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCConfiguration { // io.ktor.client.webrtc.browser/RTCConfiguration|null[0]
    open var bundlePolicy // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy|{}bundlePolicy[0]
        open fun <get-bundlePolicy>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy.<get-bundlePolicy>|<get-bundlePolicy>(){}[0]
        open fun <set-bundlePolicy>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy.<set-bundlePolicy>|<set-bundlePolicy>(kotlin.String?){}[0]
    open var certificates // io.ktor.client.webrtc.browser/RTCConfiguration.certificates|{}certificates[0]
        open fun <get-certificates>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCCertificate>? // io.ktor.client.webrtc.browser/RTCConfiguration.certificates.<get-certificates>|<get-certificates>(){}[0]
        open fun <set-certificates>(kotlin/Array<io.ktor.client.webrtc.browser/RTCCertificate>?) // io.ktor.client.webrtc.browser/RTCConfiguration.certificates.<set-certificates>|<set-certificates>(kotlin.Array<io.ktor.client.webrtc.browser.RTCCertificate>?){}[0]
    open var iceCandidatePoolSize // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize|{}iceCandidatePoolSize[0]
        open fun <get-iceCandidatePoolSize>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize.<get-iceCandidatePoolSize>|<get-iceCandidatePoolSize>(){}[0]
        open fun <set-iceCandidatePoolSize>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize.<set-iceCandidatePoolSize>|<set-iceCandidatePoolSize>(kotlin.Number?){}[0]
    open var iceServers // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers|{}iceServers[0]
        open fun <get-iceServers>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCIceServer>? // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        open fun <set-iceServers>(kotlin/Array<io.ktor.client.webrtc.browser/RTCIceServer>?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers.<set-iceServers>|<set-iceServers>(kotlin.Array<io.ktor.client.webrtc.browser.RTCIceServer>?){}[0]
    open var iceTransportPolicy // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy|{}iceTransportPolicy[0]
        open fun <get-iceTransportPolicy>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy.<get-iceTransportPolicy>|<get-iceTransportPolicy>(){}[0]
        open fun <set-iceTransportPolicy>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy.<set-iceTransportPolicy>|<set-iceTransportPolicy>(kotlin.String?){}[0]
    open var peerIdentity // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.String?){}[0]
    open var rtcpMuxPolicy // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy|{}rtcpMuxPolicy[0]
        open fun <get-rtcpMuxPolicy>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy.<get-rtcpMuxPolicy>|<get-rtcpMuxPolicy>(){}[0]
        open fun <set-rtcpMuxPolicy>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy.<set-rtcpMuxPolicy>|<set-rtcpMuxPolicy>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCDataChannelInit { // io.ktor.client.webrtc.browser/RTCDataChannelInit|null[0]
    open var id // io.ktor.client.webrtc.browser/RTCDataChannelInit.id|{}id[0]
        open fun <get-id>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCDataChannelInit.id.<get-id>|<get-id>(){}[0]
        open fun <set-id>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.id.<set-id>|<set-id>(kotlin.Number?){}[0]
    open var maxPacketLifeTime // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime|{}maxPacketLifeTime[0]
        open fun <get-maxPacketLifeTime>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
        open fun <set-maxPacketLifeTime>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.Number?){}[0]
    open var maxRetransmits // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits|{}maxRetransmits[0]
        open fun <get-maxRetransmits>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
        open fun <set-maxRetransmits>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.Number?){}[0]
    open var negotiated // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated|{}negotiated[0]
        open fun <get-negotiated>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        open fun <set-negotiated>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean?){}[0]
    open var ordered // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered|{}ordered[0]
        open fun <get-ordered>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered.<get-ordered>|<get-ordered>(){}[0]
        open fun <set-ordered>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean?){}[0]
    open var priority // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority|{}priority[0]
        open fun <get-priority>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority.<set-priority>|<set-priority>(kotlin.String?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCDtlsFingerprint { // io.ktor.client.webrtc.browser/RTCDtlsFingerprint|null[0]
    open var algorithm // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm|{}algorithm[0]
        open fun <get-algorithm>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm.<get-algorithm>|<get-algorithm>(){}[0]
        open fun <set-algorithm>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm.<set-algorithm>|<set-algorithm>(kotlin.String?){}[0]
    open var value // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value|{}value[0]
        open fun <get-value>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value.<get-value>|<get-value>(){}[0]
        open fun <set-value>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value.<set-value>|<set-value>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCErrorInit { // io.ktor.client.webrtc.browser/RTCErrorInit|null[0]
    abstract var errorDetail // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail|{}errorDetail[0]
        abstract fun <get-errorDetail>(): kotlin/String // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]
        abstract fun <set-errorDetail>(kotlin/String) // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.String){}[0]
    open var httpRequestStatusCode // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode|{}httpRequestStatusCode[0]
        open fun <get-httpRequestStatusCode>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]
        open fun <set-httpRequestStatusCode>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.Number?){}[0]
    open var receivedAlert // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert|{}receivedAlert[0]
        open fun <get-receivedAlert>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]
        open fun <set-receivedAlert>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.Number?){}[0]
    open var sctpCauseCode // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode|{}sctpCauseCode[0]
        open fun <get-sctpCauseCode>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]
        open fun <set-sctpCauseCode>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.Number?){}[0]
    open var sdpLineNumber // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber|{}sdpLineNumber[0]
        open fun <get-sdpLineNumber>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]
        open fun <set-sdpLineNumber>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.Number?){}[0]
    open var sentAlert // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert|{}sentAlert[0]
        open fun <get-sentAlert>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]
        open fun <set-sentAlert>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidateDictionary { // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary|null[0]
    open var foundation // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation|{}foundation[0]
        open fun <get-foundation>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation.<get-foundation>|<get-foundation>(){}[0]
        open fun <set-foundation>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation.<set-foundation>|<set-foundation>(kotlin.String?){}[0]
    open var ip // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip|{}ip[0]
        open fun <get-ip>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip.<get-ip>|<get-ip>(){}[0]
        open fun <set-ip>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip.<set-ip>|<set-ip>(kotlin.String?){}[0]
    open var msMTurnSessionId // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId|{}msMTurnSessionId[0]
        open fun <get-msMTurnSessionId>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId.<get-msMTurnSessionId>|<get-msMTurnSessionId>(){}[0]
        open fun <set-msMTurnSessionId>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId.<set-msMTurnSessionId>|<set-msMTurnSessionId>(kotlin.String?){}[0]
    open var port // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port|{}port[0]
        open fun <get-port>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port.<get-port>|<get-port>(){}[0]
        open fun <set-port>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port.<set-port>|<set-port>(kotlin.Number?){}[0]
    open var priority // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority|{}priority[0]
        open fun <get-priority>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority.<set-priority>|<set-priority>(kotlin.Number?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
    open var relatedAddress // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress|{}relatedAddress[0]
        open fun <get-relatedAddress>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        open fun <set-relatedAddress>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.String?){}[0]
    open var relatedPort // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort|{}relatedPort[0]
        open fun <get-relatedPort>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        open fun <set-relatedPort>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.Number?){}[0]
    open var tcpType // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType|{}tcpType[0]
        open fun <get-tcpType>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        open fun <set-tcpType>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType.<set-tcpType>|<set-tcpType>(kotlin.String?){}[0]
    open var type // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type|{}type[0]
        open fun <get-type>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type.<set-type>|<set-type>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidateInit { // io.ktor.client.webrtc.browser/RTCIceCandidateInit|null[0]
    open var candidate // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate|{}candidate[0]
        open fun <get-candidate>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate.<set-candidate>|<set-candidate>(kotlin.String?){}[0]
    open var sdpMLineIndex // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex|{}sdpMLineIndex[0]
        open fun <get-sdpMLineIndex>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        open fun <set-sdpMLineIndex>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.Number?){}[0]
    open var sdpMid // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid|{}sdpMid[0]
        open fun <get-sdpMid>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        open fun <set-sdpMid>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.String?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidatePair { // io.ktor.client.webrtc.browser/RTCIceCandidatePair|null[0]
    open var local // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local|{}local[0]
        open fun <get-local>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local.<get-local>|<get-local>(){}[0]
        open fun <set-local>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local.<set-local>|<set-local>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
    open var remote // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote|{}remote[0]
        open fun <get-remote>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote.<get-remote>|<get-remote>(){}[0]
        open fun <set-remote>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote.<set-remote>|<set-remote>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIceParameters { // io.ktor.client.webrtc.browser/RTCIceParameters|null[0]
    open var iceLite // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite|{}iceLite[0]
        open fun <get-iceLite>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite.<get-iceLite>|<get-iceLite>(){}[0]
        open fun <set-iceLite>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite.<set-iceLite>|<set-iceLite>(kotlin.Boolean?){}[0]
    open var password // io.ktor.client.webrtc.browser/RTCIceParameters.password|{}password[0]
        open fun <get-password>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceParameters.password.<get-password>|<get-password>(){}[0]
        open fun <set-password>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceParameters.password.<set-password>|<set-password>(kotlin.String?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIceServer { // io.ktor.client.webrtc.browser/RTCIceServer|null[0]
    open var credential // io.ktor.client.webrtc.browser/RTCIceServer.credential|{}credential[0]
        open fun <get-credential>(): dynamic // io.ktor.client.webrtc.browser/RTCIceServer.credential.<get-credential>|<get-credential>(){}[0]
        open fun <set-credential>(dynamic) // io.ktor.client.webrtc.browser/RTCIceServer.credential.<set-credential>|<set-credential>(<dynamic>){}[0]
    open var credentialType // io.ktor.client.webrtc.browser/RTCIceServer.credentialType|{}credentialType[0]
        open fun <get-credentialType>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceServer.credentialType.<get-credentialType>|<get-credentialType>(){}[0]
        open fun <set-credentialType>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceServer.credentialType.<set-credentialType>|<set-credentialType>(kotlin.String?){}[0]
    open var urls // io.ktor.client.webrtc.browser/RTCIceServer.urls|{}urls[0]
        open fun <get-urls>(): dynamic // io.ktor.client.webrtc.browser/RTCIceServer.urls.<get-urls>|<get-urls>(){}[0]
        open fun <set-urls>(dynamic) // io.ktor.client.webrtc.browser/RTCIceServer.urls.<set-urls>|<set-urls>(<dynamic>){}[0]
    open var username // io.ktor.client.webrtc.browser/RTCIceServer.username|{}username[0]
        open fun <get-username>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceServer.username.<get-username>|<get-username>(){}[0]
        open fun <set-username>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceServer.username.<set-username>|<set-username>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCIdentityProviderOptions { // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions|null[0]
    open var peerIdentity // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.String?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol.<set-protocol>|<set-protocol>(kotlin.String?){}[0]
    open var usernameHint // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint|{}usernameHint[0]
        open fun <get-usernameHint>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint.<get-usernameHint>|<get-usernameHint>(){}[0]
        open fun <set-usernameHint>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint.<set-usernameHint>|<set-usernameHint>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCOAuthCredential { // io.ktor.client.webrtc.browser/RTCOAuthCredential|null[0]
    abstract var accessToken // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken|{}accessToken[0]
        abstract fun <get-accessToken>(): kotlin/String // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken.<get-accessToken>|<get-accessToken>(){}[0]
        abstract fun <set-accessToken>(kotlin/String) // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken.<set-accessToken>|<set-accessToken>(kotlin.String){}[0]
    abstract var macKey // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey|{}macKey[0]
        abstract fun <get-macKey>(): kotlin/String // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey.<get-macKey>|<get-macKey>(){}[0]
        abstract fun <set-macKey>(kotlin/String) // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey.<set-macKey>|<set-macKey>(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCOfferAnswerOptions { // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions|null[0]
    open var voiceActivityDetection // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection|{}voiceActivityDetection[0]
        open fun <get-voiceActivityDetection>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection.<get-voiceActivityDetection>|<get-voiceActivityDetection>(){}[0]
        open fun <set-voiceActivityDetection>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection.<set-voiceActivityDetection>|<set-voiceActivityDetection>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCPeerConnectionStatic { // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic|null[0]
    abstract var defaultIceServers // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers|{}defaultIceServers[0]
        abstract fun <get-defaultIceServers>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCIceServer> // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers.<get-defaultIceServers>|<get-defaultIceServers>(){}[0]
        abstract fun <set-defaultIceServers>(kotlin/Array<io.ktor.client.webrtc.browser/RTCIceServer>) // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers.<set-defaultIceServers>|<set-defaultIceServers>(kotlin.Array<io.ktor.client.webrtc.browser.RTCIceServer>){}[0]

    abstract fun generateCertificate(kotlin/String): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCCertificate> // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.generateCertificate|generateCertificate(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtcpParameters { // io.ktor.client.webrtc.browser/RTCRtcpParameters|null[0]
    open var cname // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname|{}cname[0]
        open fun <get-cname>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname.<get-cname>|<get-cname>(){}[0]
        open fun <set-cname>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname.<set-cname>|<set-cname>(kotlin.String?){}[0]
    open var reducedSize // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize|{}reducedSize[0]
        open fun <get-reducedSize>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize.<get-reducedSize>|<get-reducedSize>(){}[0]
        open fun <set-reducedSize>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize.<set-reducedSize>|<set-reducedSize>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCapabilities { // io.ktor.client.webrtc.browser/RTCRtpCapabilities|null[0]
    abstract var codecs // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpCodecCapability> // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpCodecCapability>) // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs.<set-codecs>|<set-codecs>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpCodecCapability>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability> // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability>) // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpHeaderExtensionCapability>){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodecCapability { // io.ktor.client.webrtc.browser/RTCRtpCodecCapability|null[0]
    abstract var clockRate // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate.<set-clockRate>|<set-clockRate>(kotlin.Number){}[0]
    abstract var mimeType // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType.<set-mimeType>|<set-mimeType>(kotlin.String){}[0]
    open var channels // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels|{}channels[0]
        open fun <get-channels>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels.<set-channels>|<set-channels>(kotlin.Number?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodecParameters { // io.ktor.client.webrtc.browser/RTCRtpCodecParameters|null[0]
    abstract var clockRate // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate.<set-clockRate>|<set-clockRate>(kotlin.Number){}[0]
    abstract var mimeType // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType.<set-mimeType>|<set-mimeType>(kotlin.String){}[0]
    abstract var payloadType // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType|{}payloadType[0]
        abstract fun <get-payloadType>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType.<get-payloadType>|<get-payloadType>(){}[0]
        abstract fun <set-payloadType>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType.<set-payloadType>|<set-payloadType>(kotlin.Number){}[0]
    open var channels // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels|{}channels[0]
        open fun <get-channels>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels.<set-channels>|<set-channels>(kotlin.Number?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodingParameters { // io.ktor.client.webrtc.browser/RTCRtpCodingParameters|null[0]
    open var rid // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid|{}rid[0]
        open fun <get-rid>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid.<get-rid>|<get-rid>(){}[0]
        open fun <set-rid>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid.<set-rid>|<set-rid>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpContributingSource { // io.ktor.client.webrtc.browser/RTCRtpContributingSource|null[0]
    abstract var rtpTimestamp // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp|{}rtpTimestamp[0]
        abstract fun <get-rtpTimestamp>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp.<get-rtpTimestamp>|<get-rtpTimestamp>(){}[0]
        abstract fun <set-rtpTimestamp>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp.<set-rtpTimestamp>|<set-rtpTimestamp>(kotlin.Number){}[0]
    abstract var source // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source|{}source[0]
        abstract fun <get-source>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source.<get-source>|<get-source>(){}[0]
        abstract fun <set-source>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source.<set-source>|<set-source>(kotlin.Number){}[0]
    abstract var timestamp // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        abstract fun <set-timestamp>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp.<set-timestamp>|<set-timestamp>(kotlin.Number){}[0]
    open var audioLevel // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel|{}audioLevel[0]
        open fun <get-audioLevel>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
        open fun <set-audioLevel>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel.<set-audioLevel>|<set-audioLevel>(kotlin.Number?){}[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpFecParameters { // io.ktor.client.webrtc.browser/RTCRtpFecParameters|null[0]
    open var mechanism // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism|{}mechanism[0]
        open fun <get-mechanism>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism.<get-mechanism>|<get-mechanism>(){}[0]
        open fun <set-mechanism>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism.<set-mechanism>|<set-mechanism>(kotlin.String?){}[0]
    open var ssrc // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability { // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability|null[0]
    open var uri // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri|{}uri[0]
        open fun <get-uri>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri.<get-uri>|<get-uri>(){}[0]
        open fun <set-uri>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri.<set-uri>|<set-uri>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters { // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters|null[0]
    abstract var id // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id|{}id[0]
        abstract fun <get-id>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        abstract fun <set-id>(kotlin/Number) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id.<set-id>|<set-id>(kotlin.Number){}[0]
    abstract var uri // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri|{}uri[0]
        abstract fun <get-uri>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]
        abstract fun <set-uri>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri.<set-uri>|<set-uri>(kotlin.String){}[0]
    open var encrypted // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted|{}encrypted[0]
        open fun <get-encrypted>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        open fun <set-encrypted>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted.<set-encrypted>|<set-encrypted>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpParameters { // io.ktor.client.webrtc.browser/RTCRtpParameters|null[0]
    abstract var codecs // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpCodecParameters> // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpCodecParameters>) // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs.<set-codecs>|<set-codecs>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpCodecParameters>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters> // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters>) // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpHeaderExtensionParameters>){}[0]
    abstract var rtcp // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp|{}rtcp[0]
        abstract fun <get-rtcp>(): io.ktor.client.webrtc.browser/RTCRtcpParameters // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract fun <set-rtcp>(io.ktor.client.webrtc.browser/RTCRtcpParameters) // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp.<set-rtcp>|<set-rtcp>(io.ktor.client.webrtc.browser.RTCRtcpParameters){}[0]
    abstract var transactionId // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId|{}transactionId[0]
        abstract fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
        abstract fun <set-transactionId>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpReceiver { // io.ktor.client.webrtc.browser/RTCRtpReceiver|null[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.browser/RTCRtpReceiver.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.browser/RTCRtpReceiver.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.browser/RTCRtpReceiver.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transport // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]

    abstract fun getContributingSources(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpContributingSource> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getContributingSources|getContributingSources(){}[0]
    abstract fun getParameters(): dynamic // io.ktor.client.webrtc.browser/RTCRtpReceiver.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getStats|getStats(){}[0]
    abstract fun getSynchronizationSources(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getSynchronizationSources|getSynchronizationSources(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpRtxParameters { // io.ktor.client.webrtc.browser/RTCRtpRtxParameters|null[0]
    open var ssrc // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpSender { // io.ktor.client.webrtc.browser/RTCRtpSender|null[0]
    abstract var dtmf // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf|{}dtmf[0]
        abstract fun <get-dtmf>(): io.ktor.client.webrtc.browser/RTCDTMFSender? // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract fun <set-dtmf>(io.ktor.client.webrtc.browser/RTCDTMFSender?) // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf.<set-dtmf>|<set-dtmf>(io.ktor.client.webrtc.browser.RTCDTMFSender?){}[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.browser/RTCRtpSender.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack? // io.ktor.client.webrtc.browser/RTCRtpSender.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack?) // io.ktor.client.webrtc.browser/RTCRtpSender.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract var transport // io.ktor.client.webrtc.browser/RTCRtpSender.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpSender.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpSender.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]

    abstract fun getParameters(): dynamic // io.ktor.client.webrtc.browser/RTCRtpSender.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCRtpSender.getStats|getStats(){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack?): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract fun setParameters(): kotlin.js/Promise<dynamic> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.browser/RTCRtpParameters = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.browser.RTCRtpParameters){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.browser/RTCRtpSendParameters): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.browser.RTCRtpSendParameters){}[0]
    abstract fun setStreams(kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...) // io.ktor.client.webrtc.browser/RTCRtpSender.setStreams|setStreams(kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpTransceiver { // io.ktor.client.webrtc.browser/RTCRtpTransceiver|null[0]
    abstract var currentDirection // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection|{}currentDirection[0]
        abstract fun <get-currentDirection>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection.<get-currentDirection>|<get-currentDirection>(){}[0]
        abstract fun <set-currentDirection>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection.<set-currentDirection>|<set-currentDirection>(kotlin.String){}[0]
    abstract var direction // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction|{}direction[0]
        abstract fun <get-direction>(): kotlin/String // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction.<get-direction>|<get-direction>(){}[0]
        abstract fun <set-direction>(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction.<set-direction>|<set-direction>(kotlin.String){}[0]
    abstract var mid // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid|{}mid[0]
        abstract fun <get-mid>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid.<get-mid>|<get-mid>(){}[0]
        abstract fun <set-mid>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid.<set-mid>|<set-mid>(kotlin.String?){}[0]
    abstract var receiver // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.browser/RTCRtpReceiver // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.browser/RTCRtpReceiver) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.browser.RTCRtpReceiver){}[0]
    abstract var sender // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender|{}sender[0]
        abstract fun <get-sender>(): io.ktor.client.webrtc.browser/RTCRtpSender // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender.<get-sender>|<get-sender>(){}[0]
        abstract fun <set-sender>(io.ktor.client.webrtc.browser/RTCRtpSender) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender.<set-sender>|<set-sender>(io.ktor.client.webrtc.browser.RTCRtpSender){}[0]
    abstract var stopped // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped|{}stopped[0]
        abstract fun <get-stopped>(): kotlin/Boolean // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped.<get-stopped>|<get-stopped>(){}[0]
        abstract fun <set-stopped>(kotlin/Boolean) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped.<set-stopped>|<set-stopped>(kotlin.Boolean){}[0]

    abstract fun setCodecPreferences(kotlin.collections/Iterable<io.ktor.client.webrtc.browser/RTCRtpCodecCapability>) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.collections.Iterable<io.ktor.client.webrtc.browser.RTCRtpCodecCapability>){}[0]
    abstract fun setCodecPreferences(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpCodecCapability>) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpCodecCapability>){}[0]
    abstract fun setDirection(kotlin/String) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.setDirection|setDirection(kotlin.String){}[0]
    abstract fun stop() // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stop|stop(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCRtpTransceiverInit { // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit|null[0]
    open var direction // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction|{}direction[0]
        open fun <get-direction>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction.<get-direction>|<get-direction>(){}[0]
        open fun <set-direction>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction.<set-direction>|<set-direction>(kotlin.String?){}[0]
    open var sendEncodings // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings|{}sendEncodings[0]
        open fun <get-sendEncodings>(): kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings.<get-sendEncodings>|<get-sendEncodings>(){}[0]
        open fun <set-sendEncodings>(kotlin/Array<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings.<set-sendEncodings>|<set-sendEncodings>(kotlin.Array<io.ktor.client.webrtc.browser.RTCRtpEncodingParameters>?){}[0]
    open var streams // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams|{}streams[0]
        open fun <get-streams>(): kotlin/Array<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams.<get-streams>|<get-streams>(){}[0]
        open fun <set-streams>(kotlin/Array<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams.<set-streams>|<set-streams>(kotlin.Array<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCSessionDescriptionInit { // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit|null[0]
    open var sdp // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp|{}sdp[0]
        open fun <get-sdp>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp.<get-sdp>|<get-sdp>(){}[0]
        open fun <set-sdp>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp.<set-sdp>|<set-sdp>(kotlin.String?){}[0]
    open var type // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type|{}type[0]
        open fun <get-type>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type.<set-type>|<set-type>(kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCStats { // io.ktor.client.webrtc.browser/RTCStats|null[0]
    abstract val id // io.ktor.client.webrtc.browser/RTCStats.id|{}id[0]
        abstract fun <get-id>(): kotlin/String // io.ktor.client.webrtc.browser/RTCStats.id.<get-id>|<get-id>(){}[0]
    abstract val timestamp // io.ktor.client.webrtc.browser/RTCStats.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin/Number // io.ktor.client.webrtc.browser/RTCStats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    abstract val type // io.ktor.client.webrtc.browser/RTCStats.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.webrtc.browser/RTCStats.type.<get-type>|<get-type>(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.webrtc.browser/RTCStatsReport : io.ktor.client.webrtc.browser/ReadonlyMap<kotlin/String> { // io.ktor.client.webrtc.browser/RTCStatsReport|null[0]
    abstract fun forEach(kotlin/Function3<kotlin/Any, kotlin/String, io.ktor.client.webrtc.browser/RTCStatsReport, kotlin/Unit>, kotlin/Any = ...) // io.ktor.client.webrtc.browser/RTCStatsReport.forEach|forEach(kotlin.Function3<kotlin.Any,kotlin.String,io.ktor.client.webrtc.browser.RTCStatsReport,kotlin.Unit>;kotlin.Any){}[0]
}

// Targets: [js]
abstract class io.ktor.client.webrtc.browser/HTMLCanvasElement : org.w3c.dom/HTMLCanvasElement { // io.ktor.client.webrtc.browser/HTMLCanvasElement|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/HTMLCanvasElement.<init>|<init>(){}[0]

    final fun captureStream(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc.browser/HTMLCanvasElement.captureStream|captureStream(){}[0]
}

// Targets: [js]
abstract class io.ktor.client.webrtc/JsMediaTrack : io.ktor.client.webrtc/WebRtcMedia.Track { // io.ktor.client.webrtc/JsMediaTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/JsMediaTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]

    open val enabled // io.ktor.client.webrtc/JsMediaTrack.enabled|{}enabled[0]
        open fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/JsMediaTrack.enabled.<get-enabled>|<get-enabled>(){}[0]
    open val id // io.ktor.client.webrtc/JsMediaTrack.id|{}id[0]
        open fun <get-id>(): kotlin/String // io.ktor.client.webrtc/JsMediaTrack.id.<get-id>|<get-id>(){}[0]
    open val kind // io.ktor.client.webrtc/JsMediaTrack.kind|{}kind[0]
        open fun <get-kind>(): io.ktor.client.webrtc/WebRtcMedia.TrackType // io.ktor.client.webrtc/JsMediaTrack.kind.<get-kind>|<get-kind>(){}[0]

    open fun close() // io.ktor.client.webrtc/JsMediaTrack.close|close(){}[0]
    open fun enable(kotlin/Boolean) // io.ktor.client.webrtc/JsMediaTrack.enable|enable(kotlin.Boolean){}[0]

    final object Companion { // io.ktor.client.webrtc/JsMediaTrack.Companion|null[0]
        final fun from(org.w3c.dom.mediacapture/MediaStreamTrack): io.ktor.client.webrtc/JsMediaTrack // io.ktor.client.webrtc/JsMediaTrack.Companion.from|from(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    }
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/AudioContext { // io.ktor.client.webrtc.browser/AudioContext|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/AudioContext.<init>|<init>(){}[0]

    final fun createMediaStreamDestination(): io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode // io.ktor.client.webrtc.browser/AudioContext.createMediaStreamDestination|createMediaStreamDestination(){}[0]
    final fun createOscillator(): io.ktor.client.webrtc.browser/OscillatorNode // io.ktor.client.webrtc.browser/AudioContext.createOscillator|createOscillator(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode { // io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode.<init>|<init>(){}[0]

    final var stream // io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode.stream|{}stream[0]
        final fun <get-stream>(): org.w3c.dom.mediacapture/MediaStream // io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode.stream.<get-stream>|<get-stream>(){}[0]
        final fun <set-stream>(org.w3c.dom.mediacapture/MediaStream) // io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode.stream.<set-stream>|<set-stream>(org.w3c.dom.mediacapture.MediaStream){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/OscillatorNode { // io.ktor.client.webrtc.browser/OscillatorNode|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/OscillatorNode.<init>|<init>(){}[0]

    final fun connect(io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode): io.ktor.client.webrtc.browser/MediaStreamAudioDestinationNode // io.ktor.client.webrtc.browser/OscillatorNode.connect|connect(io.ktor.client.webrtc.browser.MediaStreamAudioDestinationNode){}[0]
    final fun start() // io.ktor.client.webrtc.browser/OscillatorNode.start|start(){}[0]
    final fun stop() // io.ktor.client.webrtc.browser/OscillatorNode.stop|stop(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/RTCIceCandidate { // io.ktor.client.webrtc.browser/RTCIceCandidate|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCIceCandidateInit) // io.ktor.client.webrtc.browser/RTCIceCandidate.<init>|<init>(io.ktor.client.webrtc.browser.RTCIceCandidateInit){}[0]

    final var candidate // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate|{}candidate[0]
        final fun <get-candidate>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate.<set-candidate>|<set-candidate>(kotlin.String){}[0]
    final var component // io.ktor.client.webrtc.browser/RTCIceCandidate.component|{}component[0]
        final fun <get-component>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceCandidate.component.<get-component>|<get-component>(){}[0]
        final fun <set-component>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceCandidate.component.<set-component>|<set-component>(kotlin.String){}[0]
    final var foundation // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation|{}foundation[0]
        final fun <get-foundation>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation.<get-foundation>|<get-foundation>(){}[0]
        final fun <set-foundation>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation.<set-foundation>|<set-foundation>(kotlin.String?){}[0]
    final var port // io.ktor.client.webrtc.browser/RTCIceCandidate.port|{}port[0]
        final fun <get-port>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidate.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidate.port.<set-port>|<set-port>(kotlin.Number?){}[0]
    final var priority // io.ktor.client.webrtc.browser/RTCIceCandidate.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidate.priority.<get-priority>|<get-priority>(){}[0]
        final fun <set-priority>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidate.priority.<set-priority>|<set-priority>(kotlin.Number?){}[0]
    final var protocol // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol.<set-protocol>|<set-protocol>(kotlin.String){}[0]
    final var relatedAddress // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress|{}relatedAddress[0]
        final fun <get-relatedAddress>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        final fun <set-relatedAddress>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.String?){}[0]
    final var relatedPort // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort|{}relatedPort[0]
        final fun <get-relatedPort>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        final fun <set-relatedPort>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.Number?){}[0]
    final var sdpMLineIndex // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
        final fun <get-sdpMLineIndex>(): kotlin/Number? // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final fun <set-sdpMLineIndex>(kotlin/Number?) // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.Number?){}[0]
    final var sdpMid // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid|{}sdpMid[0]
        final fun <get-sdpMid>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        final fun <set-sdpMid>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.String?){}[0]
    final var tcpType // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType|{}tcpType[0]
        final fun <get-tcpType>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        final fun <set-tcpType>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType.<set-tcpType>|<set-tcpType>(kotlin.String){}[0]
    final var type // io.ktor.client.webrtc.browser/RTCIceCandidate.type|{}type[0]
        final fun <get-type>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIceCandidate.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIceCandidate.type.<set-type>|<set-type>(kotlin.String){}[0]
    final var usernameFragment // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment|{}usernameFragment[0]
        final fun <get-usernameFragment>(): kotlin/String? // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        final fun <set-usernameFragment>(kotlin/String?) // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.String?){}[0]

    final fun toJSON(): io.ktor.client.webrtc.browser/RTCIceCandidateInit // io.ktor.client.webrtc.browser/RTCIceCandidate.toJSON|toJSON(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/RTCIdentityAssertion { // io.ktor.client.webrtc.browser/RTCIdentityAssertion|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIdentityAssertion.<init>|<init>(){}[0]

    final var idp // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp|{}idp[0]
        final fun <get-idp>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp.<get-idp>|<get-idp>(){}[0]
        final fun <set-idp>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp.<set-idp>|<set-idp>(kotlin.String){}[0]
    final var name // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name.<set-name>|<set-name>(kotlin.String){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc.browser/RTCSessionDescription { // io.ktor.client.webrtc.browser/RTCSessionDescription|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCSessionDescription.<init>|<init>(){}[0]

    final var sdp // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp|{}sdp[0]
        final fun <get-sdp>(): kotlin/String // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final fun <set-sdp>(kotlin/String) // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp.<set-sdp>|<set-sdp>(kotlin.String){}[0]
    final var type // io.ktor.client.webrtc.browser/RTCSessionDescription.type|{}type[0]
        final fun <get-type>(): kotlin/String // io.ktor.client.webrtc.browser/RTCSessionDescription.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin/String) // io.ktor.client.webrtc.browser/RTCSessionDescription.type.<set-type>|<set-type>(kotlin.String){}[0]

    final fun toJSON(): kotlin/Any // io.ktor.client.webrtc.browser/RTCSessionDescription.toJSON|toJSON(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsAudioTrack : io.ktor.client.webrtc/JsMediaTrack, io.ktor.client.webrtc/WebRtcMedia.AudioTrack { // io.ktor.client.webrtc/JsAudioTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/JsAudioTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsDtmfSender : io.ktor.client.webrtc/WebRtc.DtmfSender { // io.ktor.client.webrtc/JsDtmfSender|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCDTMFSender) // io.ktor.client.webrtc/JsDtmfSender.<init>|<init>(io.ktor.client.webrtc.browser.RTCDTMFSender){}[0]

    final val canInsertDtmf // io.ktor.client.webrtc/JsDtmfSender.canInsertDtmf|{}canInsertDtmf[0]
        final fun <get-canInsertDtmf>(): kotlin/Boolean // io.ktor.client.webrtc/JsDtmfSender.canInsertDtmf.<get-canInsertDtmf>|<get-canInsertDtmf>(){}[0]
    final val toneBuffer // io.ktor.client.webrtc/JsDtmfSender.toneBuffer|{}toneBuffer[0]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/JsDtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

    final fun insertDtmf(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/JsDtmfSender.insertDtmf|insertDtmf(kotlin.String;kotlin.Int;kotlin.Int){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsRtpParameters : io.ktor.client.webrtc/WebRtc.RtpParameters { // io.ktor.client.webrtc/JsRtpParameters|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCRtpSendParameters) // io.ktor.client.webrtc/JsRtpParameters.<init>|<init>(io.ktor.client.webrtc.browser.RTCRtpSendParameters){}[0]

    final val codecs // io.ktor.client.webrtc/JsRtpParameters.codecs|{}codecs[0]
        final fun <get-codecs>(): kotlin.collections/Iterable<io.ktor.client.webrtc.browser/RTCRtpCodecParameters> // io.ktor.client.webrtc/JsRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
    final val degradationPreference // io.ktor.client.webrtc/JsRtpParameters.degradationPreference|{}degradationPreference[0]
        final fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRtc.DegradationPreference // io.ktor.client.webrtc/JsRtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
    final val encodings // io.ktor.client.webrtc/JsRtpParameters.encodings|{}encodings[0]
        final fun <get-encodings>(): kotlin.collections/Iterable<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters> // io.ktor.client.webrtc/JsRtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
    final val headerExtensions // io.ktor.client.webrtc/JsRtpParameters.headerExtensions|{}headerExtensions[0]
        final fun <get-headerExtensions>(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/JsRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
    final val rtcp // io.ktor.client.webrtc/JsRtpParameters.rtcp|{}rtcp[0]
        final fun <get-rtcp>(): io.ktor.client.webrtc.browser/RTCRtcpParameters // io.ktor.client.webrtc/JsRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
    final val transactionId // io.ktor.client.webrtc/JsRtpParameters.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/JsRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsRtpSender : io.ktor.client.webrtc/WebRtc.RtpSender { // io.ktor.client.webrtc/JsRtpSender|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCRtpSender) // io.ktor.client.webrtc/JsRtpSender.<init>|<init>(io.ktor.client.webrtc.browser.RTCRtpSender){}[0]

    final val dtmf // io.ktor.client.webrtc/JsRtpSender.dtmf|{}dtmf[0]
        final fun <get-dtmf>(): io.ktor.client.webrtc/WebRtc.DtmfSender? // io.ktor.client.webrtc/JsRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
    final val track // io.ktor.client.webrtc/JsRtpSender.track|{}track[0]
        final fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track? // io.ktor.client.webrtc/JsRtpSender.track.<get-track>|<get-track>(){}[0]

    final suspend fun getParameters(): io.ktor.client.webrtc/WebRtc.RtpParameters // io.ktor.client.webrtc/JsRtpSender.getParameters|getParameters(){}[0]
    final suspend fun replaceTrack(io.ktor.client.webrtc/WebRtcMedia.Track?) // io.ktor.client.webrtc/JsRtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRtcMedia.Track?){}[0]
    final suspend fun setParameters(io.ktor.client.webrtc/WebRtc.RtpParameters) // io.ktor.client.webrtc/JsRtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRtc.RtpParameters){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsVideoTrack : io.ktor.client.webrtc/JsMediaTrack, io.ktor.client.webrtc/WebRtcMedia.VideoTrack { // io.ktor.client.webrtc/JsVideoTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/JsVideoTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsWebRtcDataChannel : io.ktor.client.webrtc/WebRtcDataChannel { // io.ktor.client.webrtc/JsWebRtcDataChannel|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCDataChannel, io.ktor.client.webrtc/WebRtcDataChannelOptions) // io.ktor.client.webrtc/JsWebRtcDataChannel.<init>|<init>(io.ktor.client.webrtc.browser.RTCDataChannel;io.ktor.client.webrtc.WebRtcDataChannelOptions){}[0]

    final val bufferedAmount // io.ktor.client.webrtc/JsWebRtcDataChannel.bufferedAmount|{}bufferedAmount[0]
        final fun <get-bufferedAmount>(): kotlin/Long // io.ktor.client.webrtc/JsWebRtcDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]
    final val bufferedAmountLowThreshold // io.ktor.client.webrtc/JsWebRtcDataChannel.bufferedAmountLowThreshold|{}bufferedAmountLowThreshold[0]
        final fun <get-bufferedAmountLowThreshold>(): kotlin/Long // io.ktor.client.webrtc/JsWebRtcDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]
    final val id // io.ktor.client.webrtc/JsWebRtcDataChannel.id|{}id[0]
        final fun <get-id>(): kotlin/Int // io.ktor.client.webrtc/JsWebRtcDataChannel.id.<get-id>|<get-id>(){}[0]
    final val label // io.ktor.client.webrtc/JsWebRtcDataChannel.label|{}label[0]
        final fun <get-label>(): kotlin/String // io.ktor.client.webrtc/JsWebRtcDataChannel.label.<get-label>|<get-label>(){}[0]
    final val maxPacketLifeTime // io.ktor.client.webrtc/JsWebRtcDataChannel.maxPacketLifeTime|{}maxPacketLifeTime[0]
        final fun <get-maxPacketLifeTime>(): kotlin/Int? // io.ktor.client.webrtc/JsWebRtcDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
    final val maxRetransmits // io.ktor.client.webrtc/JsWebRtcDataChannel.maxRetransmits|{}maxRetransmits[0]
        final fun <get-maxRetransmits>(): kotlin/Int? // io.ktor.client.webrtc/JsWebRtcDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
    final val negotiated // io.ktor.client.webrtc/JsWebRtcDataChannel.negotiated|{}negotiated[0]
        final fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc/JsWebRtcDataChannel.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
    final val ordered // io.ktor.client.webrtc/JsWebRtcDataChannel.ordered|{}ordered[0]
        final fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc/JsWebRtcDataChannel.ordered.<get-ordered>|<get-ordered>(){}[0]
    final val protocol // io.ktor.client.webrtc/JsWebRtcDataChannel.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc/JsWebRtcDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]
    final val state // io.ktor.client.webrtc/JsWebRtcDataChannel.state|{}state[0]
        final fun <get-state>(): io.ktor.client.webrtc/WebRtc.DataChannelState // io.ktor.client.webrtc/JsWebRtcDataChannel.state.<get-state>|<get-state>(){}[0]

    final fun close() // io.ktor.client.webrtc/JsWebRtcDataChannel.close|close(){}[0]
    final fun send(kotlin/ByteArray) // io.ktor.client.webrtc/JsWebRtcDataChannel.send|send(kotlin.ByteArray){}[0]
    final fun send(kotlin/String) // io.ktor.client.webrtc/JsWebRtcDataChannel.send|send(kotlin.String){}[0]
    final fun setBufferedAmountLowThreshold(kotlin/Long) // io.ktor.client.webrtc/JsWebRtcDataChannel.setBufferedAmountLowThreshold|setBufferedAmountLowThreshold(kotlin.Long){}[0]
}

// Targets: [js]
final class io.ktor.client.webrtc/JsWebRtcPeerConnection : io.ktor.client.webrtc/WebRtcPeerConnection { // io.ktor.client.webrtc/JsWebRtcPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCPeerConnection, kotlin.coroutines/CoroutineContext, io.ktor.client.webrtc/WebRtcConnectionConfig) // io.ktor.client.webrtc/JsWebRtcPeerConnection.<init>|<init>(io.ktor.client.webrtc.browser.RTCPeerConnection;kotlin.coroutines.CoroutineContext;io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]

    final val localDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.localDescription|{}localDescription[0]
        final fun <get-localDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/JsWebRtcPeerConnection.localDescription.<get-localDescription>|<get-localDescription>(){}[0]
    final val remoteDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.remoteDescription|{}remoteDescription[0]
        final fun <get-remoteDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/JsWebRtcPeerConnection.remoteDescription.<get-remoteDescription>|<get-remoteDescription>(){}[0]

    final fun close() // io.ktor.client.webrtc/JsWebRtcPeerConnection.close|close(){}[0]
    final fun restartIce() // io.ktor.client.webrtc/JsWebRtcPeerConnection.restartIce|restartIce(){}[0]
    final suspend fun addIceCandidate(io.ktor.client.webrtc/WebRtc.IceCandidate) // io.ktor.client.webrtc/JsWebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRtc.IceCandidate){}[0]
    final suspend fun addTrack(io.ktor.client.webrtc/WebRtcMedia.Track): io.ktor.client.webrtc/WebRtc.RtpSender // io.ktor.client.webrtc/JsWebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    final suspend fun createAnswer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    final suspend fun createDataChannel(kotlin/String, kotlin/Function1<io.ktor.client.webrtc/WebRtcDataChannelOptions, kotlin/Unit>): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/JsWebRtcPeerConnection.createDataChannel|createDataChannel(kotlin.String;kotlin.Function1<io.ktor.client.webrtc.WebRtcDataChannelOptions,kotlin.Unit>){}[0]
    final suspend fun createOffer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/JsWebRtcPeerConnection.createOffer|createOffer(){}[0]
    final suspend fun getStatistics(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats> // io.ktor.client.webrtc/JsWebRtcPeerConnection.getStatistics|getStatistics(){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRtc.RtpSender) // io.ktor.client.webrtc/JsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtc.RtpSender){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRtcMedia.Track) // io.ktor.client.webrtc/JsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    final suspend fun setLocalDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/JsWebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
    final suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/JsWebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny> io.ktor.client.webrtc.browser/ReadonlyMap : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/ReadonlyMap|null[0]
    abstract val size // io.ktor.client.webrtc.browser/ReadonlyMap.size|{}size[0]
        abstract fun <get-size>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/ReadonlyMap.size.<get-size>|<get-size>(){}[0]

    abstract fun <#A1: kotlin.js/JsAny> get(#A): #A1? // io.ktor.client.webrtc.browser/ReadonlyMap.get|get(1:0){0§<kotlin.js.JsAny>}[0]
    abstract fun entries(): kotlin.js/JsAny // io.ktor.client.webrtc.browser/ReadonlyMap.entries|entries(){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny, #A, io.ktor.client.webrtc.browser/ReadonlyMap<#A>, kotlin/Unit>, kotlin.js/JsAny = ...) // io.ktor.client.webrtc.browser/ReadonlyMap.forEach|forEach(kotlin.Function3<kotlin.js.JsAny,1:0,io.ktor.client.webrtc.browser.ReadonlyMap<1:0>,kotlin.Unit>;kotlin.js.JsAny){}[0]
    abstract fun has(#A): kotlin.js/JsBoolean // io.ktor.client.webrtc.browser/ReadonlyMap.has|has(1:0){}[0]
    abstract fun keys(): kotlin.js/JsAny // io.ktor.client.webrtc.browser/ReadonlyMap.keys|keys(){}[0]
    abstract fun values(): kotlin.js/JsAny // io.ktor.client.webrtc.browser/ReadonlyMap.values|values(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCCertificate : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCCertificate|null[0]
    abstract var expires // io.ktor.client.webrtc.browser/RTCCertificate.expires|{}expires[0]
        abstract fun <get-expires>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCCertificate.expires.<get-expires>|<get-expires>(){}[0]
        abstract fun <set-expires>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCCertificate.expires.<set-expires>|<set-expires>(kotlin.js.JsNumber){}[0]

    abstract fun getAlgorithm(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCCertificate.getAlgorithm|getAlgorithm(){}[0]
    abstract fun getFingerprints(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCDtlsFingerprint> // io.ktor.client.webrtc.browser/RTCCertificate.getFingerprints|getFingerprints(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCConfiguration : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCConfiguration|null[0]
    open var bundlePolicy // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy|{}bundlePolicy[0]
        open fun <get-bundlePolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy.<get-bundlePolicy>|<get-bundlePolicy>(){}[0]
        open fun <set-bundlePolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCConfiguration.bundlePolicy.<set-bundlePolicy>|<set-bundlePolicy>(kotlin.js.JsString?){}[0]
    open var certificates // io.ktor.client.webrtc.browser/RTCConfiguration.certificates|{}certificates[0]
        open fun <get-certificates>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCCertificate>? // io.ktor.client.webrtc.browser/RTCConfiguration.certificates.<get-certificates>|<get-certificates>(){}[0]
        open fun <set-certificates>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCCertificate>?) // io.ktor.client.webrtc.browser/RTCConfiguration.certificates.<set-certificates>|<set-certificates>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCCertificate>?){}[0]
    open var iceCandidatePoolSize // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize|{}iceCandidatePoolSize[0]
        open fun <get-iceCandidatePoolSize>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize.<get-iceCandidatePoolSize>|<get-iceCandidatePoolSize>(){}[0]
        open fun <set-iceCandidatePoolSize>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceCandidatePoolSize.<set-iceCandidatePoolSize>|<set-iceCandidatePoolSize>(kotlin.js.JsNumber?){}[0]
    open var iceServers // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers|{}iceServers[0]
        open fun <get-iceServers>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceServer>? // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers.<get-iceServers>|<get-iceServers>(){}[0]
        open fun <set-iceServers>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceServer>?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceServers.<set-iceServers>|<set-iceServers>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCIceServer>?){}[0]
    open var iceTransportPolicy // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy|{}iceTransportPolicy[0]
        open fun <get-iceTransportPolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy.<get-iceTransportPolicy>|<get-iceTransportPolicy>(){}[0]
        open fun <set-iceTransportPolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCConfiguration.iceTransportPolicy.<set-iceTransportPolicy>|<set-iceTransportPolicy>(kotlin.js.JsString?){}[0]
    open var peerIdentity // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCConfiguration.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.JsString?){}[0]
    open var rtcpMuxPolicy // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy|{}rtcpMuxPolicy[0]
        open fun <get-rtcpMuxPolicy>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy.<get-rtcpMuxPolicy>|<get-rtcpMuxPolicy>(){}[0]
        open fun <set-rtcpMuxPolicy>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCConfiguration.rtcpMuxPolicy.<set-rtcpMuxPolicy>|<set-rtcpMuxPolicy>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCDataChannelInit : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCDataChannelInit|null[0]
    open var id // io.ktor.client.webrtc.browser/RTCDataChannelInit.id|{}id[0]
        open fun <get-id>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannelInit.id.<get-id>|<get-id>(){}[0]
        open fun <set-id>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.id.<set-id>|<set-id>(kotlin.js.JsNumber?){}[0]
    open var maxPacketLifeTime // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime|{}maxPacketLifeTime[0]
        open fun <get-maxPacketLifeTime>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
        open fun <set-maxPacketLifeTime>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxPacketLifeTime.<set-maxPacketLifeTime>|<set-maxPacketLifeTime>(kotlin.js.JsNumber?){}[0]
    open var maxRetransmits // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits|{}maxRetransmits[0]
        open fun <get-maxRetransmits>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
        open fun <set-maxRetransmits>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.maxRetransmits.<set-maxRetransmits>|<set-maxRetransmits>(kotlin.js.JsNumber?){}[0]
    open var negotiated // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated|{}negotiated[0]
        open fun <get-negotiated>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
        open fun <set-negotiated>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.negotiated.<set-negotiated>|<set-negotiated>(kotlin.Boolean?){}[0]
    open var ordered // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered|{}ordered[0]
        open fun <get-ordered>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered.<get-ordered>|<get-ordered>(){}[0]
        open fun <set-ordered>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.ordered.<set-ordered>|<set-ordered>(kotlin.Boolean?){}[0]
    open var priority // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority|{}priority[0]
        open fun <get-priority>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.priority.<set-priority>|<set-priority>(kotlin.js.JsString?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCDataChannelInit.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCDtlsFingerprint : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCDtlsFingerprint|null[0]
    open var algorithm // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm|{}algorithm[0]
        open fun <get-algorithm>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm.<get-algorithm>|<get-algorithm>(){}[0]
        open fun <set-algorithm>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.algorithm.<set-algorithm>|<set-algorithm>(kotlin.js.JsString?){}[0]
    open var value // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value|{}value[0]
        open fun <get-value>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value.<get-value>|<get-value>(){}[0]
        open fun <set-value>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCDtlsFingerprint.value.<set-value>|<set-value>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCErrorInit : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCErrorInit|null[0]
    abstract var errorDetail // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail|{}errorDetail[0]
        abstract fun <get-errorDetail>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail.<get-errorDetail>|<get-errorDetail>(){}[0]
        abstract fun <set-errorDetail>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCErrorInit.errorDetail.<set-errorDetail>|<set-errorDetail>(kotlin.js.JsString){}[0]
    open var httpRequestStatusCode // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode|{}httpRequestStatusCode[0]
        open fun <get-httpRequestStatusCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode.<get-httpRequestStatusCode>|<get-httpRequestStatusCode>(){}[0]
        open fun <set-httpRequestStatusCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCErrorInit.httpRequestStatusCode.<set-httpRequestStatusCode>|<set-httpRequestStatusCode>(kotlin.js.JsNumber?){}[0]
    open var receivedAlert // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert|{}receivedAlert[0]
        open fun <get-receivedAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert.<get-receivedAlert>|<get-receivedAlert>(){}[0]
        open fun <set-receivedAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCErrorInit.receivedAlert.<set-receivedAlert>|<set-receivedAlert>(kotlin.js.JsNumber?){}[0]
    open var sctpCauseCode // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode|{}sctpCauseCode[0]
        open fun <get-sctpCauseCode>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode.<get-sctpCauseCode>|<get-sctpCauseCode>(){}[0]
        open fun <set-sctpCauseCode>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCErrorInit.sctpCauseCode.<set-sctpCauseCode>|<set-sctpCauseCode>(kotlin.js.JsNumber?){}[0]
    open var sdpLineNumber // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber|{}sdpLineNumber[0]
        open fun <get-sdpLineNumber>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber.<get-sdpLineNumber>|<get-sdpLineNumber>(){}[0]
        open fun <set-sdpLineNumber>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCErrorInit.sdpLineNumber.<set-sdpLineNumber>|<set-sdpLineNumber>(kotlin.js.JsNumber?){}[0]
    open var sentAlert // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert|{}sentAlert[0]
        open fun <get-sentAlert>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert.<get-sentAlert>|<get-sentAlert>(){}[0]
        open fun <set-sentAlert>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCErrorInit.sentAlert.<set-sentAlert>|<set-sentAlert>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidateDictionary : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary|null[0]
    open var foundation // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation|{}foundation[0]
        open fun <get-foundation>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation.<get-foundation>|<get-foundation>(){}[0]
        open fun <set-foundation>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.foundation.<set-foundation>|<set-foundation>(kotlin.js.JsString?){}[0]
    open var ip // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip|{}ip[0]
        open fun <get-ip>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip.<get-ip>|<get-ip>(){}[0]
        open fun <set-ip>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.ip.<set-ip>|<set-ip>(kotlin.js.JsString?){}[0]
    open var msMTurnSessionId // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId|{}msMTurnSessionId[0]
        open fun <get-msMTurnSessionId>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId.<get-msMTurnSessionId>|<get-msMTurnSessionId>(){}[0]
        open fun <set-msMTurnSessionId>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.msMTurnSessionId.<set-msMTurnSessionId>|<set-msMTurnSessionId>(kotlin.js.JsString?){}[0]
    open var port // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port|{}port[0]
        open fun <get-port>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port.<get-port>|<get-port>(){}[0]
        open fun <set-port>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.port.<set-port>|<set-port>(kotlin.js.JsNumber?){}[0]
    open var priority // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority|{}priority[0]
        open fun <get-priority>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority.<get-priority>|<get-priority>(){}[0]
        open fun <set-priority>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.priority.<set-priority>|<set-priority>(kotlin.js.JsNumber?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
    open var relatedAddress // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress|{}relatedAddress[0]
        open fun <get-relatedAddress>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        open fun <set-relatedAddress>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.js.JsString?){}[0]
    open var relatedPort // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort|{}relatedPort[0]
        open fun <get-relatedPort>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        open fun <set-relatedPort>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.js.JsNumber?){}[0]
    open var tcpType // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType|{}tcpType[0]
        open fun <get-tcpType>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        open fun <set-tcpType>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.tcpType.<set-tcpType>|<set-tcpType>(kotlin.js.JsString?){}[0]
    open var type // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type|{}type[0]
        open fun <get-type>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateDictionary.type.<set-type>|<set-type>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidateInit : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceCandidateInit|null[0]
    open var candidate // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate|{}candidate[0]
        open fun <get-candidate>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate.<get-candidate>|<get-candidate>(){}[0]
        open fun <set-candidate>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsString?){}[0]
    open var sdpMLineIndex // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex|{}sdpMLineIndex[0]
        open fun <get-sdpMLineIndex>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        open fun <set-sdpMLineIndex>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.js.JsNumber?){}[0]
    open var sdpMid // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid|{}sdpMid[0]
        open fun <get-sdpMid>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        open fun <set-sdpMid>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.js.JsString?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidateInit.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceCandidatePair : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceCandidatePair|null[0]
    open var local // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local|{}local[0]
        open fun <get-local>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local.<get-local>|<get-local>(){}[0]
        open fun <set-local>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCIceCandidatePair.local.<set-local>|<set-local>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
    open var remote // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote|{}remote[0]
        open fun <get-remote>(): io.ktor.client.webrtc.browser/RTCIceCandidate? // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote.<get-remote>|<get-remote>(){}[0]
        open fun <set-remote>(io.ktor.client.webrtc.browser/RTCIceCandidate?) // io.ktor.client.webrtc.browser/RTCIceCandidatePair.remote.<set-remote>|<set-remote>(io.ktor.client.webrtc.browser.RTCIceCandidate?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceParameters|null[0]
    open var iceLite // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite|{}iceLite[0]
        open fun <get-iceLite>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite.<get-iceLite>|<get-iceLite>(){}[0]
        open fun <set-iceLite>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCIceParameters.iceLite.<set-iceLite>|<set-iceLite>(kotlin.Boolean?){}[0]
    open var password // io.ktor.client.webrtc.browser/RTCIceParameters.password|{}password[0]
        open fun <get-password>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceParameters.password.<get-password>|<get-password>(){}[0]
        open fun <set-password>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceParameters.password.<set-password>|<set-password>(kotlin.js.JsString?){}[0]
    open var usernameFragment // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment|{}usernameFragment[0]
        open fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        open fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceParameters.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIceServer : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceServer|null[0]
    open var credential // io.ktor.client.webrtc.browser/RTCIceServer.credential|{}credential[0]
        open fun <get-credential>(): kotlin.js/JsAny? // io.ktor.client.webrtc.browser/RTCIceServer.credential.<get-credential>|<get-credential>(){}[0]
        open fun <set-credential>(kotlin.js/JsAny?) // io.ktor.client.webrtc.browser/RTCIceServer.credential.<set-credential>|<set-credential>(kotlin.js.JsAny?){}[0]
    open var credentialType // io.ktor.client.webrtc.browser/RTCIceServer.credentialType|{}credentialType[0]
        open fun <get-credentialType>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceServer.credentialType.<get-credentialType>|<get-credentialType>(){}[0]
        open fun <set-credentialType>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceServer.credentialType.<set-credentialType>|<set-credentialType>(kotlin.js.JsString?){}[0]
    open var urls // io.ktor.client.webrtc.browser/RTCIceServer.urls|{}urls[0]
        open fun <get-urls>(): kotlin.js/JsAny? // io.ktor.client.webrtc.browser/RTCIceServer.urls.<get-urls>|<get-urls>(){}[0]
        open fun <set-urls>(kotlin.js/JsAny?) // io.ktor.client.webrtc.browser/RTCIceServer.urls.<set-urls>|<set-urls>(kotlin.js.JsAny?){}[0]
    open var username // io.ktor.client.webrtc.browser/RTCIceServer.username|{}username[0]
        open fun <get-username>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceServer.username.<get-username>|<get-username>(){}[0]
        open fun <set-username>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceServer.username.<set-username>|<set-username>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCIdentityProviderOptions : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions|null[0]
    open var peerIdentity // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity|{}peerIdentity[0]
        open fun <get-peerIdentity>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity.<get-peerIdentity>|<get-peerIdentity>(){}[0]
        open fun <set-peerIdentity>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.peerIdentity.<set-peerIdentity>|<set-peerIdentity>(kotlin.js.JsString?){}[0]
    open var protocol // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol|{}protocol[0]
        open fun <get-protocol>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol.<get-protocol>|<get-protocol>(){}[0]
        open fun <set-protocol>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString?){}[0]
    open var usernameHint // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint|{}usernameHint[0]
        open fun <get-usernameHint>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint.<get-usernameHint>|<get-usernameHint>(){}[0]
        open fun <set-usernameHint>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIdentityProviderOptions.usernameHint.<set-usernameHint>|<set-usernameHint>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCOAuthCredential : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCOAuthCredential|null[0]
    abstract var accessToken // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken|{}accessToken[0]
        abstract fun <get-accessToken>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken.<get-accessToken>|<get-accessToken>(){}[0]
        abstract fun <set-accessToken>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCOAuthCredential.accessToken.<set-accessToken>|<set-accessToken>(kotlin.js.JsString){}[0]
    abstract var macKey // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey|{}macKey[0]
        abstract fun <get-macKey>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey.<get-macKey>|<get-macKey>(){}[0]
        abstract fun <set-macKey>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCOAuthCredential.macKey.<set-macKey>|<set-macKey>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCOfferAnswerOptions : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions|null[0]
    open var voiceActivityDetection // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection|{}voiceActivityDetection[0]
        open fun <get-voiceActivityDetection>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection.<get-voiceActivityDetection>|<get-voiceActivityDetection>(){}[0]
        open fun <set-voiceActivityDetection>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCOfferAnswerOptions.voiceActivityDetection.<set-voiceActivityDetection>|<set-voiceActivityDetection>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCPeerConnectionStatic : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic|null[0]
    abstract var defaultIceServers // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers|{}defaultIceServers[0]
        abstract fun <get-defaultIceServers>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceServer> // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers.<get-defaultIceServers>|<get-defaultIceServers>(){}[0]
        abstract fun <set-defaultIceServers>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCIceServer>) // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.defaultIceServers.<set-defaultIceServers>|<set-defaultIceServers>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCIceServer>){}[0]

    abstract fun generateCertificate(kotlin.js/JsString): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCCertificate> // io.ktor.client.webrtc.browser/RTCPeerConnectionStatic.generateCertificate|generateCertificate(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtcpParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtcpParameters|null[0]
    open var cname // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname|{}cname[0]
        open fun <get-cname>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname.<get-cname>|<get-cname>(){}[0]
        open fun <set-cname>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtcpParameters.cname.<set-cname>|<set-cname>(kotlin.js.JsString?){}[0]
    open var reducedSize // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize|{}reducedSize[0]
        open fun <get-reducedSize>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize.<get-reducedSize>|<get-reducedSize>(){}[0]
        open fun <set-reducedSize>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtcpParameters.reducedSize.<set-reducedSize>|<set-reducedSize>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCapabilities : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpCapabilities|null[0]
    abstract var codecs // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpCodecCapability> // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpCodecCapability>) // io.ktor.client.webrtc.browser/RTCRtpCapabilities.codecs.<set-codecs>|<set-codecs>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpCodecCapability>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability> // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability>) // io.ktor.client.webrtc.browser/RTCRtpCapabilities.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpHeaderExtensionCapability>){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodecCapability : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpCodecCapability|null[0]
    abstract var clockRate // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.clockRate.<set-clockRate>|<set-clockRate>(kotlin.js.JsNumber){}[0]
    abstract var mimeType // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.mimeType.<set-mimeType>|<set-mimeType>(kotlin.js.JsString){}[0]
    open var channels // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels|{}channels[0]
        open fun <get-channels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.channels.<set-channels>|<set-channels>(kotlin.js.JsNumber?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpCodecCapability.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodecParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpCodecParameters|null[0]
    abstract var clockRate // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate|{}clockRate[0]
        abstract fun <get-clockRate>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate.<get-clockRate>|<get-clockRate>(){}[0]
        abstract fun <set-clockRate>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.clockRate.<set-clockRate>|<set-clockRate>(kotlin.js.JsNumber){}[0]
    abstract var mimeType // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType|{}mimeType[0]
        abstract fun <get-mimeType>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType.<get-mimeType>|<get-mimeType>(){}[0]
        abstract fun <set-mimeType>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.mimeType.<set-mimeType>|<set-mimeType>(kotlin.js.JsString){}[0]
    abstract var payloadType // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType|{}payloadType[0]
        abstract fun <get-payloadType>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType.<get-payloadType>|<get-payloadType>(){}[0]
        abstract fun <set-payloadType>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.payloadType.<set-payloadType>|<set-payloadType>(kotlin.js.JsNumber){}[0]
    open var channels // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels|{}channels[0]
        open fun <get-channels>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels.<get-channels>|<get-channels>(){}[0]
        open fun <set-channels>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.channels.<set-channels>|<set-channels>(kotlin.js.JsNumber?){}[0]
    open var sdpFmtpLine // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine|{}sdpFmtpLine[0]
        open fun <get-sdpFmtpLine>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine.<get-sdpFmtpLine>|<get-sdpFmtpLine>(){}[0]
        open fun <set-sdpFmtpLine>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpCodecParameters.sdpFmtpLine.<set-sdpFmtpLine>|<set-sdpFmtpLine>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpCodingParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpCodingParameters|null[0]
    open var rid // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid|{}rid[0]
        open fun <get-rid>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid.<get-rid>|<get-rid>(){}[0]
        open fun <set-rid>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpCodingParameters.rid.<set-rid>|<set-rid>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpContributingSource : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpContributingSource|null[0]
    abstract var rtpTimestamp // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp|{}rtpTimestamp[0]
        abstract fun <get-rtpTimestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp.<get-rtpTimestamp>|<get-rtpTimestamp>(){}[0]
        abstract fun <set-rtpTimestamp>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.rtpTimestamp.<set-rtpTimestamp>|<set-rtpTimestamp>(kotlin.js.JsNumber){}[0]
    abstract var source // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source|{}source[0]
        abstract fun <get-source>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source.<get-source>|<get-source>(){}[0]
        abstract fun <set-source>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.source.<set-source>|<set-source>(kotlin.js.JsNumber){}[0]
    abstract var timestamp // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        abstract fun <set-timestamp>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.timestamp.<set-timestamp>|<set-timestamp>(kotlin.js.JsNumber){}[0]
    open var audioLevel // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel|{}audioLevel[0]
        open fun <get-audioLevel>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel.<get-audioLevel>|<get-audioLevel>(){}[0]
        open fun <set-audioLevel>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.audioLevel.<set-audioLevel>|<set-audioLevel>(kotlin.js.JsNumber?){}[0]
    open var voiceActivityFlag // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag|{}voiceActivityFlag[0]
        open fun <get-voiceActivityFlag>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag.<get-voiceActivityFlag>|<get-voiceActivityFlag>(){}[0]
        open fun <set-voiceActivityFlag>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpContributingSource.voiceActivityFlag.<set-voiceActivityFlag>|<set-voiceActivityFlag>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpFecParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpFecParameters|null[0]
    open var mechanism // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism|{}mechanism[0]
        open fun <get-mechanism>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism.<get-mechanism>|<get-mechanism>(){}[0]
        open fun <set-mechanism>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpFecParameters.mechanism.<set-mechanism>|<set-mechanism>(kotlin.js.JsString?){}[0]
    open var ssrc // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpFecParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability|null[0]
    open var uri // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri|{}uri[0]
        open fun <get-uri>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri.<get-uri>|<get-uri>(){}[0]
        open fun <set-uri>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionCapability.uri.<set-uri>|<set-uri>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters|null[0]
    abstract var id // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id|{}id[0]
        abstract fun <get-id>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id.<get-id>|<get-id>(){}[0]
        abstract fun <set-id>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.id.<set-id>|<set-id>(kotlin.js.JsNumber){}[0]
    abstract var uri // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri|{}uri[0]
        abstract fun <get-uri>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri.<get-uri>|<get-uri>(){}[0]
        abstract fun <set-uri>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.uri.<set-uri>|<set-uri>(kotlin.js.JsString){}[0]
    open var encrypted // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted|{}encrypted[0]
        open fun <get-encrypted>(): kotlin/Boolean? // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted.<get-encrypted>|<get-encrypted>(){}[0]
        open fun <set-encrypted>(kotlin/Boolean?) // io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters.encrypted.<set-encrypted>|<set-encrypted>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpParameters|null[0]
    abstract var codecs // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs|{}codecs[0]
        abstract fun <get-codecs>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpCodecParameters> // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
        abstract fun <set-codecs>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpCodecParameters>) // io.ktor.client.webrtc.browser/RTCRtpParameters.codecs.<set-codecs>|<set-codecs>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpCodecParameters>){}[0]
    abstract var headerExtensions // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions|{}headerExtensions[0]
        abstract fun <get-headerExtensions>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters> // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
        abstract fun <set-headerExtensions>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpHeaderExtensionParameters>) // io.ktor.client.webrtc.browser/RTCRtpParameters.headerExtensions.<set-headerExtensions>|<set-headerExtensions>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpHeaderExtensionParameters>){}[0]
    abstract var rtcp // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp|{}rtcp[0]
        abstract fun <get-rtcp>(): io.ktor.client.webrtc.browser/RTCRtcpParameters // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
        abstract fun <set-rtcp>(io.ktor.client.webrtc.browser/RTCRtcpParameters) // io.ktor.client.webrtc.browser/RTCRtpParameters.rtcp.<set-rtcp>|<set-rtcp>(io.ktor.client.webrtc.browser.RTCRtcpParameters){}[0]
    abstract var transactionId // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId|{}transactionId[0]
        abstract fun <get-transactionId>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
        abstract fun <set-transactionId>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpParameters.transactionId.<set-transactionId>|<set-transactionId>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpReceiver : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpReceiver|null[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpReceiver.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.browser/RTCRtpReceiver.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack // io.ktor.client.webrtc.browser/RTCRtpReceiver.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc.browser/RTCRtpReceiver.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract var transport // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpReceiver.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]

    abstract fun getContributingSources(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpContributingSource> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getContributingSources|getContributingSources(){}[0]
    abstract fun getParameters(): kotlin.js/JsAny? // io.ktor.client.webrtc.browser/RTCRtpReceiver.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getStats|getStats(){}[0]
    abstract fun getSynchronizationSources(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpSynchronizationSource> // io.ktor.client.webrtc.browser/RTCRtpReceiver.getSynchronizationSources|getSynchronizationSources(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpRtxParameters : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpRtxParameters|null[0]
    open var ssrc // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc|{}ssrc[0]
        open fun <get-ssrc>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc.<get-ssrc>|<get-ssrc>(){}[0]
        open fun <set-ssrc>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCRtpRtxParameters.ssrc.<set-ssrc>|<set-ssrc>(kotlin.js.JsNumber?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpSender : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpSender|null[0]
    abstract var dtmf // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf|{}dtmf[0]
        abstract fun <get-dtmf>(): io.ktor.client.webrtc.browser/RTCDTMFSender? // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
        abstract fun <set-dtmf>(io.ktor.client.webrtc.browser/RTCDTMFSender?) // io.ktor.client.webrtc.browser/RTCRtpSender.dtmf.<set-dtmf>|<set-dtmf>(io.ktor.client.webrtc.browser.RTCDTMFSender?){}[0]
    abstract var rtcpTransport // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport|{}rtcpTransport[0]
        abstract fun <get-rtcpTransport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport.<get-rtcpTransport>|<get-rtcpTransport>(){}[0]
        abstract fun <set-rtcpTransport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpSender.rtcpTransport.<set-rtcpTransport>|<set-rtcpTransport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]
    abstract var track // io.ktor.client.webrtc.browser/RTCRtpSender.track|{}track[0]
        abstract fun <get-track>(): org.w3c.dom.mediacapture/MediaStreamTrack? // io.ktor.client.webrtc.browser/RTCRtpSender.track.<get-track>|<get-track>(){}[0]
        abstract fun <set-track>(org.w3c.dom.mediacapture/MediaStreamTrack?) // io.ktor.client.webrtc.browser/RTCRtpSender.track.<set-track>|<set-track>(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract var transport // io.ktor.client.webrtc.browser/RTCRtpSender.transport|{}transport[0]
        abstract fun <get-transport>(): io.ktor.client.webrtc.browser/RTCDtlsTransport? // io.ktor.client.webrtc.browser/RTCRtpSender.transport.<get-transport>|<get-transport>(){}[0]
        abstract fun <set-transport>(io.ktor.client.webrtc.browser/RTCDtlsTransport?) // io.ktor.client.webrtc.browser/RTCRtpSender.transport.<set-transport>|<set-transport>(io.ktor.client.webrtc.browser.RTCDtlsTransport?){}[0]

    abstract fun getParameters(): kotlin.js/JsAny? // io.ktor.client.webrtc.browser/RTCRtpSender.getParameters|getParameters(){}[0]
    abstract fun getStats(): kotlin.js/Promise<io.ktor.client.webrtc.browser/RTCStatsReport> // io.ktor.client.webrtc.browser/RTCRtpSender.getStats|getStats(){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    abstract fun replaceTrack(org.w3c.dom.mediacapture/MediaStreamTrack?): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCRtpSender.replaceTrack|replaceTrack(org.w3c.dom.mediacapture.MediaStreamTrack?){}[0]
    abstract fun setParameters(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.browser/RTCRtpParameters = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.browser.RTCRtpParameters){}[0]
    abstract fun setParameters(io.ktor.client.webrtc.browser/RTCRtpSendParameters): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.webrtc.browser/RTCRtpSender.setParameters|setParameters(io.ktor.client.webrtc.browser.RTCRtpSendParameters){}[0]
    abstract fun setStreams(kotlin/Array<out org.w3c.dom.mediacapture/MediaStream>...) // io.ktor.client.webrtc.browser/RTCRtpSender.setStreams|setStreams(kotlin.Array<out|org.w3c.dom.mediacapture.MediaStream>...){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpTransceiver : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpTransceiver|null[0]
    abstract var currentDirection // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection|{}currentDirection[0]
        abstract fun <get-currentDirection>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection.<get-currentDirection>|<get-currentDirection>(){}[0]
        abstract fun <set-currentDirection>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.currentDirection.<set-currentDirection>|<set-currentDirection>(kotlin.js.JsString){}[0]
    abstract var direction // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction|{}direction[0]
        abstract fun <get-direction>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction.<get-direction>|<get-direction>(){}[0]
        abstract fun <set-direction>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.direction.<set-direction>|<set-direction>(kotlin.js.JsString){}[0]
    abstract var mid // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid|{}mid[0]
        abstract fun <get-mid>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid.<get-mid>|<get-mid>(){}[0]
        abstract fun <set-mid>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.mid.<set-mid>|<set-mid>(kotlin.js.JsString?){}[0]
    abstract var receiver // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver|{}receiver[0]
        abstract fun <get-receiver>(): io.ktor.client.webrtc.browser/RTCRtpReceiver // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver.<get-receiver>|<get-receiver>(){}[0]
        abstract fun <set-receiver>(io.ktor.client.webrtc.browser/RTCRtpReceiver) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.receiver.<set-receiver>|<set-receiver>(io.ktor.client.webrtc.browser.RTCRtpReceiver){}[0]
    abstract var sender // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender|{}sender[0]
        abstract fun <get-sender>(): io.ktor.client.webrtc.browser/RTCRtpSender // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender.<get-sender>|<get-sender>(){}[0]
        abstract fun <set-sender>(io.ktor.client.webrtc.browser/RTCRtpSender) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.sender.<set-sender>|<set-sender>(io.ktor.client.webrtc.browser.RTCRtpSender){}[0]
    abstract var stopped // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped|{}stopped[0]
        abstract fun <get-stopped>(): kotlin/Boolean // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped.<get-stopped>|<get-stopped>(){}[0]
        abstract fun <set-stopped>(kotlin/Boolean) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stopped.<set-stopped>|<set-stopped>(kotlin.Boolean){}[0]

    abstract fun setCodecPreferences(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpCodecCapability>) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.setCodecPreferences|setCodecPreferences(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpCodecCapability>){}[0]
    abstract fun setDirection(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCRtpTransceiver.setDirection|setDirection(kotlin.js.JsString){}[0]
    abstract fun stop() // io.ktor.client.webrtc.browser/RTCRtpTransceiver.stop|stop(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCRtpTransceiverInit : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit|null[0]
    open var direction // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction|{}direction[0]
        open fun <get-direction>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction.<get-direction>|<get-direction>(){}[0]
        open fun <set-direction>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.direction.<set-direction>|<set-direction>(kotlin.js.JsString?){}[0]
    open var sendEncodings // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings|{}sendEncodings[0]
        open fun <get-sendEncodings>(): kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings.<get-sendEncodings>|<get-sendEncodings>(){}[0]
        open fun <set-sendEncodings>(kotlin.js/JsArray<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters>?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.sendEncodings.<set-sendEncodings>|<set-sendEncodings>(kotlin.js.JsArray<io.ktor.client.webrtc.browser.RTCRtpEncodingParameters>?){}[0]
    open var streams // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams|{}streams[0]
        open fun <get-streams>(): kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>? // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams.<get-streams>|<get-streams>(){}[0]
        open fun <set-streams>(kotlin.js/JsArray<org.w3c.dom.mediacapture/MediaStream>?) // io.ktor.client.webrtc.browser/RTCRtpTransceiverInit.streams.<set-streams>|<set-streams>(kotlin.js.JsArray<org.w3c.dom.mediacapture.MediaStream>?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCSessionDescriptionInit : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit|null[0]
    open var sdp // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp|{}sdp[0]
        open fun <get-sdp>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp.<get-sdp>|<get-sdp>(){}[0]
        open fun <set-sdp>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.sdp.<set-sdp>|<set-sdp>(kotlin.js.JsString?){}[0]
    open var type // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type|{}type[0]
        open fun <get-type>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCSessionDescriptionInit.type.<set-type>|<set-type>(kotlin.js.JsString?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCStats : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCStats|null[0]
    abstract val id // io.ktor.client.webrtc.browser/RTCStats.id|{}id[0]
        abstract fun <get-id>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCStats.id.<get-id>|<get-id>(){}[0]
    abstract val timestamp // io.ktor.client.webrtc.browser/RTCStats.timestamp|{}timestamp[0]
        abstract fun <get-timestamp>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCStats.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    abstract val type // io.ktor.client.webrtc.browser/RTCStats.type|{}type[0]
        abstract fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCStats.type.<get-type>|<get-type>(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.webrtc.browser/RTCStatsReport : io.ktor.client.webrtc.browser/ReadonlyMap<kotlin.js/JsString> { // io.ktor.client.webrtc.browser/RTCStatsReport|null[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny, kotlin.js/JsString, io.ktor.client.webrtc.browser/RTCStatsReport, kotlin.js/JsAny?>, kotlin.js/JsAny = ...) // io.ktor.client.webrtc.browser/RTCStatsReport.forEach|forEach(kotlin.Function3<kotlin.js.JsAny,kotlin.js.JsString,io.ktor.client.webrtc.browser.RTCStatsReport,kotlin.js.JsAny?>;kotlin.js.JsAny){}[0]
}

// Targets: [wasmJs]
abstract class io.ktor.client.webrtc/WasmJsMediaTrack : io.ktor.client.webrtc/WebRtcMedia.Track { // io.ktor.client.webrtc/WasmJsMediaTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/WasmJsMediaTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]

    open val enabled // io.ktor.client.webrtc/WasmJsMediaTrack.enabled|{}enabled[0]
        open fun <get-enabled>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsMediaTrack.enabled.<get-enabled>|<get-enabled>(){}[0]
    open val id // io.ktor.client.webrtc/WasmJsMediaTrack.id|{}id[0]
        open fun <get-id>(): kotlin/String // io.ktor.client.webrtc/WasmJsMediaTrack.id.<get-id>|<get-id>(){}[0]
    open val kind // io.ktor.client.webrtc/WasmJsMediaTrack.kind|{}kind[0]
        open fun <get-kind>(): io.ktor.client.webrtc/WebRtcMedia.TrackType // io.ktor.client.webrtc/WasmJsMediaTrack.kind.<get-kind>|<get-kind>(){}[0]

    open fun close() // io.ktor.client.webrtc/WasmJsMediaTrack.close|close(){}[0]
    open fun enable(kotlin/Boolean) // io.ktor.client.webrtc/WasmJsMediaTrack.enable|enable(kotlin.Boolean){}[0]

    final object Companion { // io.ktor.client.webrtc/WasmJsMediaTrack.Companion|null[0]
        final fun from(org.w3c.dom.mediacapture/MediaStreamTrack): io.ktor.client.webrtc/WasmJsMediaTrack // io.ktor.client.webrtc/WasmJsMediaTrack.Companion.from|from(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
    }
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.browser/RTCIceCandidate : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIceCandidate|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCIceCandidateInit) // io.ktor.client.webrtc.browser/RTCIceCandidate.<init>|<init>(io.ktor.client.webrtc.browser.RTCIceCandidateInit){}[0]

    final var candidate // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate|{}candidate[0]
        final fun <get-candidate>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate.<get-candidate>|<get-candidate>(){}[0]
        final fun <set-candidate>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.candidate.<set-candidate>|<set-candidate>(kotlin.js.JsString){}[0]
    final var component // io.ktor.client.webrtc.browser/RTCIceCandidate.component|{}component[0]
        final fun <get-component>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.component.<get-component>|<get-component>(){}[0]
        final fun <set-component>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.component.<set-component>|<set-component>(kotlin.js.JsString){}[0]
    final var foundation // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation|{}foundation[0]
        final fun <get-foundation>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation.<get-foundation>|<get-foundation>(){}[0]
        final fun <set-foundation>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidate.foundation.<set-foundation>|<set-foundation>(kotlin.js.JsString?){}[0]
    final var port // io.ktor.client.webrtc.browser/RTCIceCandidate.port|{}port[0]
        final fun <get-port>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidate.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidate.port.<set-port>|<set-port>(kotlin.js.JsNumber?){}[0]
    final var priority // io.ktor.client.webrtc.browser/RTCIceCandidate.priority|{}priority[0]
        final fun <get-priority>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidate.priority.<get-priority>|<get-priority>(){}[0]
        final fun <set-priority>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidate.priority.<set-priority>|<set-priority>(kotlin.js.JsNumber?){}[0]
    final var protocol // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.protocol.<set-protocol>|<set-protocol>(kotlin.js.JsString){}[0]
    final var relatedAddress // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress|{}relatedAddress[0]
        final fun <get-relatedAddress>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress.<get-relatedAddress>|<get-relatedAddress>(){}[0]
        final fun <set-relatedAddress>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedAddress.<set-relatedAddress>|<set-relatedAddress>(kotlin.js.JsString?){}[0]
    final var relatedPort // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort|{}relatedPort[0]
        final fun <get-relatedPort>(): kotlin.js/JsNumber? // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort.<get-relatedPort>|<get-relatedPort>(){}[0]
        final fun <set-relatedPort>(kotlin.js/JsNumber?) // io.ktor.client.webrtc.browser/RTCIceCandidate.relatedPort.<set-relatedPort>|<set-relatedPort>(kotlin.js.JsNumber?){}[0]
    final var sdpMLineIndex // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex|{}sdpMLineIndex[0]
        final fun <get-sdpMLineIndex>(): kotlin.js/JsNumber // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex.<get-sdpMLineIndex>|<get-sdpMLineIndex>(){}[0]
        final fun <set-sdpMLineIndex>(kotlin.js/JsNumber) // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMLineIndex.<set-sdpMLineIndex>|<set-sdpMLineIndex>(kotlin.js.JsNumber){}[0]
    final var sdpMid // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid|{}sdpMid[0]
        final fun <get-sdpMid>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid.<get-sdpMid>|<get-sdpMid>(){}[0]
        final fun <set-sdpMid>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.sdpMid.<set-sdpMid>|<set-sdpMid>(kotlin.js.JsString){}[0]
    final var tcpType // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType|{}tcpType[0]
        final fun <get-tcpType>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType.<get-tcpType>|<get-tcpType>(){}[0]
        final fun <set-tcpType>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.tcpType.<set-tcpType>|<set-tcpType>(kotlin.js.JsString){}[0]
    final var type // io.ktor.client.webrtc.browser/RTCIceCandidate.type|{}type[0]
        final fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIceCandidate.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIceCandidate.type.<set-type>|<set-type>(kotlin.js.JsString){}[0]
    final var usernameFragment // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment|{}usernameFragment[0]
        final fun <get-usernameFragment>(): kotlin.js/JsString? // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment.<get-usernameFragment>|<get-usernameFragment>(){}[0]
        final fun <set-usernameFragment>(kotlin.js/JsString?) // io.ktor.client.webrtc.browser/RTCIceCandidate.usernameFragment.<set-usernameFragment>|<set-usernameFragment>(kotlin.js.JsString?){}[0]

    final fun toJSON(): io.ktor.client.webrtc.browser/RTCIceCandidateInit // io.ktor.client.webrtc.browser/RTCIceCandidate.toJSON|toJSON(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.browser/RTCIdentityAssertion : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCIdentityAssertion|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCIdentityAssertion.<init>|<init>(){}[0]

    final var idp // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp|{}idp[0]
        final fun <get-idp>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp.<get-idp>|<get-idp>(){}[0]
        final fun <set-idp>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIdentityAssertion.idp.<set-idp>|<set-idp>(kotlin.js.JsString){}[0]
    final var name // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name|{}name[0]
        final fun <get-name>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCIdentityAssertion.name.<set-name>|<set-name>(kotlin.js.JsString){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc.browser/RTCSessionDescription : kotlin.js/JsAny { // io.ktor.client.webrtc.browser/RTCSessionDescription|null[0]
    constructor <init>() // io.ktor.client.webrtc.browser/RTCSessionDescription.<init>|<init>(){}[0]

    final var sdp // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp|{}sdp[0]
        final fun <get-sdp>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp.<get-sdp>|<get-sdp>(){}[0]
        final fun <set-sdp>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCSessionDescription.sdp.<set-sdp>|<set-sdp>(kotlin.js.JsString){}[0]
    final var type // io.ktor.client.webrtc.browser/RTCSessionDescription.type|{}type[0]
        final fun <get-type>(): kotlin.js/JsString // io.ktor.client.webrtc.browser/RTCSessionDescription.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotlin.js/JsString) // io.ktor.client.webrtc.browser/RTCSessionDescription.type.<set-type>|<set-type>(kotlin.js.JsString){}[0]

    final fun toJSON(): kotlin.js/JsAny // io.ktor.client.webrtc.browser/RTCSessionDescription.toJSON|toJSON(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsAudioTrack : io.ktor.client.webrtc/WasmJsMediaTrack, io.ktor.client.webrtc/WebRtcMedia.AudioTrack { // io.ktor.client.webrtc/WasmJsAudioTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/WasmJsAudioTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsDtmfSender : io.ktor.client.webrtc/WebRtc.DtmfSender { // io.ktor.client.webrtc/WasmJsDtmfSender|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCDTMFSender) // io.ktor.client.webrtc/WasmJsDtmfSender.<init>|<init>(io.ktor.client.webrtc.browser.RTCDTMFSender){}[0]

    final val canInsertDtmf // io.ktor.client.webrtc/WasmJsDtmfSender.canInsertDtmf|{}canInsertDtmf[0]
        final fun <get-canInsertDtmf>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsDtmfSender.canInsertDtmf.<get-canInsertDtmf>|<get-canInsertDtmf>(){}[0]
    final val toneBuffer // io.ktor.client.webrtc/WasmJsDtmfSender.toneBuffer|{}toneBuffer[0]
        final fun <get-toneBuffer>(): kotlin/String // io.ktor.client.webrtc/WasmJsDtmfSender.toneBuffer.<get-toneBuffer>|<get-toneBuffer>(){}[0]

    final fun insertDtmf(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.client.webrtc/WasmJsDtmfSender.insertDtmf|insertDtmf(kotlin.String;kotlin.Int;kotlin.Int){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsRtpParameters : io.ktor.client.webrtc/WebRtc.RtpParameters { // io.ktor.client.webrtc/WasmJsRtpParameters|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCRtpSendParameters) // io.ktor.client.webrtc/WasmJsRtpParameters.<init>|<init>(io.ktor.client.webrtc.browser.RTCRtpSendParameters){}[0]

    final val codecs // io.ktor.client.webrtc/WasmJsRtpParameters.codecs|{}codecs[0]
        final fun <get-codecs>(): kotlin.collections/Iterable<io.ktor.client.webrtc.browser/RTCRtpCodecParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.codecs.<get-codecs>|<get-codecs>(){}[0]
    final val degradationPreference // io.ktor.client.webrtc/WasmJsRtpParameters.degradationPreference|{}degradationPreference[0]
        final fun <get-degradationPreference>(): io.ktor.client.webrtc/WebRtc.DegradationPreference // io.ktor.client.webrtc/WasmJsRtpParameters.degradationPreference.<get-degradationPreference>|<get-degradationPreference>(){}[0]
    final val encodings // io.ktor.client.webrtc/WasmJsRtpParameters.encodings|{}encodings[0]
        final fun <get-encodings>(): kotlin.collections/Iterable<io.ktor.client.webrtc.browser/RTCRtpEncodingParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.encodings.<get-encodings>|<get-encodings>(){}[0]
    final val headerExtensions // io.ktor.client.webrtc/WasmJsRtpParameters.headerExtensions|{}headerExtensions[0]
        final fun <get-headerExtensions>(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.RtpHeaderExtensionParameters> // io.ktor.client.webrtc/WasmJsRtpParameters.headerExtensions.<get-headerExtensions>|<get-headerExtensions>(){}[0]
    final val rtcp // io.ktor.client.webrtc/WasmJsRtpParameters.rtcp|{}rtcp[0]
        final fun <get-rtcp>(): io.ktor.client.webrtc.browser/RTCRtcpParameters // io.ktor.client.webrtc/WasmJsRtpParameters.rtcp.<get-rtcp>|<get-rtcp>(){}[0]
    final val transactionId // io.ktor.client.webrtc/WasmJsRtpParameters.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/String // io.ktor.client.webrtc/WasmJsRtpParameters.transactionId.<get-transactionId>|<get-transactionId>(){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsRtpSender : io.ktor.client.webrtc/WebRtc.RtpSender { // io.ktor.client.webrtc/WasmJsRtpSender|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCRtpSender) // io.ktor.client.webrtc/WasmJsRtpSender.<init>|<init>(io.ktor.client.webrtc.browser.RTCRtpSender){}[0]

    final val dtmf // io.ktor.client.webrtc/WasmJsRtpSender.dtmf|{}dtmf[0]
        final fun <get-dtmf>(): io.ktor.client.webrtc/WebRtc.DtmfSender? // io.ktor.client.webrtc/WasmJsRtpSender.dtmf.<get-dtmf>|<get-dtmf>(){}[0]
    final val track // io.ktor.client.webrtc/WasmJsRtpSender.track|{}track[0]
        final fun <get-track>(): io.ktor.client.webrtc/WebRtcMedia.Track? // io.ktor.client.webrtc/WasmJsRtpSender.track.<get-track>|<get-track>(){}[0]

    final suspend fun getParameters(): io.ktor.client.webrtc/WebRtc.RtpParameters // io.ktor.client.webrtc/WasmJsRtpSender.getParameters|getParameters(){}[0]
    final suspend fun replaceTrack(io.ktor.client.webrtc/WebRtcMedia.Track?) // io.ktor.client.webrtc/WasmJsRtpSender.replaceTrack|replaceTrack(io.ktor.client.webrtc.WebRtcMedia.Track?){}[0]
    final suspend fun setParameters(io.ktor.client.webrtc/WebRtc.RtpParameters) // io.ktor.client.webrtc/WasmJsRtpSender.setParameters|setParameters(io.ktor.client.webrtc.WebRtc.RtpParameters){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsVideoTrack : io.ktor.client.webrtc/WasmJsMediaTrack, io.ktor.client.webrtc/WebRtcMedia.VideoTrack { // io.ktor.client.webrtc/WasmJsVideoTrack|null[0]
    constructor <init>(org.w3c.dom.mediacapture/MediaStreamTrack) // io.ktor.client.webrtc/WasmJsVideoTrack.<init>|<init>(org.w3c.dom.mediacapture.MediaStreamTrack){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsWebRtcDataChannel : io.ktor.client.webrtc/WebRtcDataChannel { // io.ktor.client.webrtc/WasmJsWebRtcDataChannel|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCDataChannel, io.ktor.client.webrtc/WebRtcDataChannelOptions) // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.<init>|<init>(io.ktor.client.webrtc.browser.RTCDataChannel;io.ktor.client.webrtc.WebRtcDataChannelOptions){}[0]

    final val bufferedAmount // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.bufferedAmount|{}bufferedAmount[0]
        final fun <get-bufferedAmount>(): kotlin/Long // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.bufferedAmount.<get-bufferedAmount>|<get-bufferedAmount>(){}[0]
    final val bufferedAmountLowThreshold // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.bufferedAmountLowThreshold|{}bufferedAmountLowThreshold[0]
        final fun <get-bufferedAmountLowThreshold>(): kotlin/Long // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.bufferedAmountLowThreshold.<get-bufferedAmountLowThreshold>|<get-bufferedAmountLowThreshold>(){}[0]
    final val id // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.id|{}id[0]
        final fun <get-id>(): kotlin/Int // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.id.<get-id>|<get-id>(){}[0]
    final val label // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.label|{}label[0]
        final fun <get-label>(): kotlin/String // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.label.<get-label>|<get-label>(){}[0]
    final val maxPacketLifeTime // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.maxPacketLifeTime|{}maxPacketLifeTime[0]
        final fun <get-maxPacketLifeTime>(): kotlin/Int? // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.maxPacketLifeTime.<get-maxPacketLifeTime>|<get-maxPacketLifeTime>(){}[0]
    final val maxRetransmits // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.maxRetransmits|{}maxRetransmits[0]
        final fun <get-maxRetransmits>(): kotlin/Int? // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.maxRetransmits.<get-maxRetransmits>|<get-maxRetransmits>(){}[0]
    final val negotiated // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.negotiated|{}negotiated[0]
        final fun <get-negotiated>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.negotiated.<get-negotiated>|<get-negotiated>(){}[0]
    final val ordered // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.ordered|{}ordered[0]
        final fun <get-ordered>(): kotlin/Boolean // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.ordered.<get-ordered>|<get-ordered>(){}[0]
    final val protocol // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.protocol|{}protocol[0]
        final fun <get-protocol>(): kotlin/String // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.protocol.<get-protocol>|<get-protocol>(){}[0]
    final val state // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.state|{}state[0]
        final fun <get-state>(): io.ktor.client.webrtc/WebRtc.DataChannelState // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.state.<get-state>|<get-state>(){}[0]

    final fun close() // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.close|close(){}[0]
    final fun send(kotlin/ByteArray) // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.send|send(kotlin.ByteArray){}[0]
    final fun send(kotlin/String) // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.send|send(kotlin.String){}[0]
    final fun setBufferedAmountLowThreshold(kotlin/Long) // io.ktor.client.webrtc/WasmJsWebRtcDataChannel.setBufferedAmountLowThreshold|setBufferedAmountLowThreshold(kotlin.Long){}[0]
}

// Targets: [wasmJs]
final class io.ktor.client.webrtc/WasmJsWebRtcPeerConnection : io.ktor.client.webrtc/WebRtcPeerConnection { // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection|null[0]
    constructor <init>(io.ktor.client.webrtc.browser/RTCPeerConnection, kotlin.coroutines/CoroutineContext, io.ktor.client.webrtc/WebRtcConnectionConfig) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.<init>|<init>(io.ktor.client.webrtc.browser.RTCPeerConnection;kotlin.coroutines.CoroutineContext;io.ktor.client.webrtc.WebRtcConnectionConfig){}[0]

    final val localDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.localDescription|{}localDescription[0]
        final fun <get-localDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.localDescription.<get-localDescription>|<get-localDescription>(){}[0]
    final val remoteDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.remoteDescription|{}remoteDescription[0]
        final fun <get-remoteDescription>(): io.ktor.client.webrtc/WebRtc.SessionDescription? // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.remoteDescription.<get-remoteDescription>|<get-remoteDescription>(){}[0]

    final fun close() // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.close|close(){}[0]
    final fun restartIce() // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.restartIce|restartIce(){}[0]
    final suspend fun addIceCandidate(io.ktor.client.webrtc/WebRtc.IceCandidate) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.addIceCandidate|addIceCandidate(io.ktor.client.webrtc.WebRtc.IceCandidate){}[0]
    final suspend fun addTrack(io.ktor.client.webrtc/WebRtcMedia.Track): io.ktor.client.webrtc/WebRtc.RtpSender // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.addTrack|addTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    final suspend fun createAnswer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.createAnswer|createAnswer(){}[0]
    final suspend fun createDataChannel(kotlin/String, kotlin/Function1<io.ktor.client.webrtc/WebRtcDataChannelOptions, kotlin/Unit>): io.ktor.client.webrtc/WebRtcDataChannel // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.createDataChannel|createDataChannel(kotlin.String;kotlin.Function1<io.ktor.client.webrtc.WebRtcDataChannelOptions,kotlin.Unit>){}[0]
    final suspend fun createOffer(): io.ktor.client.webrtc/WebRtc.SessionDescription // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.createOffer|createOffer(){}[0]
    final suspend fun getStatistics(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats> // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.getStatistics|getStatistics(){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRtc.RtpSender) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtc.RtpSender){}[0]
    final suspend fun removeTrack(io.ktor.client.webrtc/WebRtcMedia.Track) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.removeTrack|removeTrack(io.ktor.client.webrtc.WebRtcMedia.Track){}[0]
    final suspend fun setLocalDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.setLocalDescription|setLocalDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
    final suspend fun setRemoteDescription(io.ktor.client.webrtc/WebRtc.SessionDescription) // io.ktor.client.webrtc/WasmJsWebRtcPeerConnection.setRemoteDescription|setRemoteDescription(io.ktor.client.webrtc.WebRtc.SessionDescription){}[0]
}

// Targets: [wasmJs]
final fun (io.ktor.client.webrtc.browser/RTCStatsReport).io.ktor.client.webrtc.utils/toKtor(): kotlin.collections/List<io.ktor.client.webrtc/WebRtc.Stats> // io.ktor.client.webrtc.utils/toKtor|toKtor@io.ktor.client.webrtc.browser.RTCStatsReport(){}[0]

// Targets: [wasmJs]
final fun (io.ktor.client.webrtc/WebRtc.IceCandidate).io.ktor.client.webrtc.utils/toJs(): io.ktor.client.webrtc.browser/RTCIceCandidate // io.ktor.client.webrtc.utils/toJs|toJs@io.ktor.client.webrtc.WebRtc.IceCandidate(){}[0]

// Targets: [wasmJs]
final fun io.ktor.client.webrtc.utils/emptyObject(): kotlin.js/JsAny // io.ktor.client.webrtc.utils/emptyObject|emptyObject(){}[0]
