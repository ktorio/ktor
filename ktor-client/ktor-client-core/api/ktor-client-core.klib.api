// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: native => [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-client-core>
final enum class io.ktor.client.engine/ProxyType : kotlin/Enum<io.ktor.client.engine/ProxyType> { // io.ktor.client.engine/ProxyType|null[0]
    enum entry HTTP // io.ktor.client.engine/ProxyType.HTTP|null[0]
    enum entry SOCKS // io.ktor.client.engine/ProxyType.SOCKS|null[0]
    enum entry UNKNOWN // io.ktor.client.engine/ProxyType.UNKNOWN|null[0]

    final val entries // io.ktor.client.engine/ProxyType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.client.engine/ProxyType> // io.ktor.client.engine/ProxyType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.ktor.client.engine/ProxyType // io.ktor.client.engine/ProxyType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.client.engine/ProxyType> // io.ktor.client.engine/ProxyType.values|values#static(){}[0]
}

abstract fun interface io.ktor.client.content/ProgressListener { // io.ktor.client.content/ProgressListener|null[0]
    abstract suspend fun onProgress(kotlin/Long, kotlin/Long?) // io.ktor.client.content/ProgressListener.onProgress|onProgress(kotlin.Long;kotlin.Long?){}[0]
}

abstract fun interface io.ktor.client.request/ResponseAdapter { // io.ktor.client.request/ResponseAdapter|null[0]
    abstract fun adapt(io.ktor.client.request/HttpRequestData, io.ktor.http/HttpStatusCode, io.ktor.http/Headers, io.ktor.utils.io/ByteReadChannel, io.ktor.http.content/OutgoingContent, kotlin.coroutines/CoroutineContext): kotlin/Any? // io.ktor.client.request/ResponseAdapter.adapt|adapt(io.ktor.client.request.HttpRequestData;io.ktor.http.HttpStatusCode;io.ktor.http.Headers;io.ktor.utils.io.ByteReadChannel;io.ktor.http.content.OutgoingContent;kotlin.coroutines.CoroutineContext){}[0]
}

abstract interface <#A: kotlin/Any> io.ktor.client.plugins.api/ClientPlugin : io.ktor.client.plugins/HttpClientPlugin<#A, io.ktor.client.plugins.api/ClientPluginInstance<#A>> // io.ktor.client.plugins.api/ClientPlugin|null[0]

abstract interface <#A: kotlin/Any?> io.ktor.client.engine/HttpClientEngineCapability // io.ktor.client.engine/HttpClientEngineCapability|null[0]

abstract interface <#A: kotlin/Any?> io.ktor.client.plugins.api/ClientHook { // io.ktor.client.plugins.api/ClientHook|null[0]
    abstract fun install(io.ktor.client/HttpClient, #A) // io.ktor.client.plugins.api/ClientHook.install|install(io.ktor.client.HttpClient;1:0){}[0]
}

abstract interface <#A: out io.ktor.client.engine/HttpClientEngineConfig> io.ktor.client.engine/HttpClientEngineFactory { // io.ktor.client.engine/HttpClientEngineFactory|null[0]
    abstract fun create(kotlin/Function1<#A, kotlin/Unit> = ...): io.ktor.client.engine/HttpClientEngine // io.ktor.client.engine/HttpClientEngineFactory.create|create(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

abstract interface <#A: out kotlin/Any, #B: kotlin/Any> io.ktor.client.plugins/HttpClientPlugin { // io.ktor.client.plugins/HttpClientPlugin|null[0]
    abstract val key // io.ktor.client.plugins/HttpClientPlugin.key|{}key[0]
        abstract fun <get-key>(): io.ktor.util/AttributeKey<#B> // io.ktor.client.plugins/HttpClientPlugin.key.<get-key>|<get-key>(){}[0]

    abstract fun install(#B, io.ktor.client/HttpClient) // io.ktor.client.plugins/HttpClientPlugin.install|install(1:1;io.ktor.client.HttpClient){}[0]
    abstract fun prepare(kotlin/Function1<#A, kotlin/Unit> = ...): #B // io.ktor.client.plugins/HttpClientPlugin.prepare|prepare(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

abstract interface io.ktor.client.engine/HttpClientEngine : io.ktor.utils.io.core/Closeable, kotlinx.coroutines/CoroutineScope { // io.ktor.client.engine/HttpClientEngine|null[0]
    abstract val config // io.ktor.client.engine/HttpClientEngine.config|{}config[0]
        abstract fun <get-config>(): io.ktor.client.engine/HttpClientEngineConfig // io.ktor.client.engine/HttpClientEngine.config.<get-config>|<get-config>(){}[0]
    abstract val dispatcher // io.ktor.client.engine/HttpClientEngine.dispatcher|{}dispatcher[0]
        abstract fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.engine/HttpClientEngine.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
    open val supportedCapabilities // io.ktor.client.engine/HttpClientEngine.supportedCapabilities|{}supportedCapabilities[0]
        open fun <get-supportedCapabilities>(): kotlin.collections/Set<io.ktor.client.engine/HttpClientEngineCapability<*>> // io.ktor.client.engine/HttpClientEngine.supportedCapabilities.<get-supportedCapabilities>|<get-supportedCapabilities>(){}[0]

    abstract suspend fun execute(io.ktor.client.request/HttpRequestData): io.ktor.client.request/HttpResponseData // io.ktor.client.engine/HttpClientEngine.execute|execute(io.ktor.client.request.HttpRequestData){}[0]
    open fun install(io.ktor.client/HttpClient) // io.ktor.client.engine/HttpClientEngine.install|install(io.ktor.client.HttpClient){}[0]
}

abstract interface io.ktor.client.plugins.cache.storage/CacheStorage { // io.ktor.client.plugins.cache.storage/CacheStorage|null[0]
    abstract suspend fun find(io.ktor.http/Url, kotlin.collections/Map<kotlin/String, kotlin/String>): io.ktor.client.plugins.cache.storage/CachedResponseData? // io.ktor.client.plugins.cache.storage/CacheStorage.find|find(io.ktor.http.Url;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
    abstract suspend fun findAll(io.ktor.http/Url): kotlin.collections/Set<io.ktor.client.plugins.cache.storage/CachedResponseData> // io.ktor.client.plugins.cache.storage/CacheStorage.findAll|findAll(io.ktor.http.Url){}[0]
    abstract suspend fun store(io.ktor.http/Url, io.ktor.client.plugins.cache.storage/CachedResponseData) // io.ktor.client.plugins.cache.storage/CacheStorage.store|store(io.ktor.http.Url;io.ktor.client.plugins.cache.storage.CachedResponseData){}[0]

    final object Companion { // io.ktor.client.plugins.cache.storage/CacheStorage.Companion|null[0]
        final val Disabled // io.ktor.client.plugins.cache.storage/CacheStorage.Companion.Disabled|{}Disabled[0]
            final fun <get-Disabled>(): io.ktor.client.plugins.cache.storage/CacheStorage // io.ktor.client.plugins.cache.storage/CacheStorage.Companion.Disabled.<get-Disabled>|<get-Disabled>(){}[0]
        final val Unlimited // io.ktor.client.plugins.cache.storage/CacheStorage.Companion.Unlimited|{}Unlimited[0]
            final fun <get-Unlimited>(): kotlin/Function0<io.ktor.client.plugins.cache.storage/CacheStorage> // io.ktor.client.plugins.cache.storage/CacheStorage.Companion.Unlimited.<get-Unlimited>|<get-Unlimited>(){}[0]
    }
}

abstract interface io.ktor.client.plugins.cookies/CookiesStorage : io.ktor.utils.io.core/Closeable { // io.ktor.client.plugins.cookies/CookiesStorage|null[0]
    abstract suspend fun addCookie(io.ktor.http/Url, io.ktor.http/Cookie) // io.ktor.client.plugins.cookies/CookiesStorage.addCookie|addCookie(io.ktor.http.Url;io.ktor.http.Cookie){}[0]
    abstract suspend fun get(io.ktor.http/Url): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/CookiesStorage.get|get(io.ktor.http.Url){}[0]
}

abstract interface io.ktor.client.plugins.sse/SSESession : kotlinx.coroutines/CoroutineScope { // io.ktor.client.plugins.sse/SSESession|null[0]
    abstract val incoming // io.ktor.client.plugins.sse/SSESession.incoming|{}incoming[0]
        abstract fun <get-incoming>(): kotlinx.coroutines.flow/Flow<io.ktor.sse/ServerSentEvent> // io.ktor.client.plugins.sse/SSESession.incoming.<get-incoming>|<get-incoming>(){}[0]
}

abstract interface io.ktor.client.plugins.sse/SSESessionWithDeserialization : kotlinx.coroutines/CoroutineScope { // io.ktor.client.plugins.sse/SSESessionWithDeserialization|null[0]
    abstract val deserializer // io.ktor.client.plugins.sse/SSESessionWithDeserialization.deserializer|{}deserializer[0]
        abstract fun <get-deserializer>(): kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?> // io.ktor.client.plugins.sse/SSESessionWithDeserialization.deserializer.<get-deserializer>|<get-deserializer>(){}[0]
    abstract val incoming // io.ktor.client.plugins.sse/SSESessionWithDeserialization.incoming|{}incoming[0]
        abstract fun <get-incoming>(): kotlinx.coroutines.flow/Flow<io.ktor.sse/TypedServerSentEvent<kotlin/String>> // io.ktor.client.plugins.sse/SSESessionWithDeserialization.incoming.<get-incoming>|<get-incoming>(){}[0]
}

abstract interface io.ktor.client.plugins.websocket/ClientWebSocketSession : io.ktor.websocket/WebSocketSession { // io.ktor.client.plugins.websocket/ClientWebSocketSession|null[0]
    abstract val call // io.ktor.client.plugins.websocket/ClientWebSocketSession.call|{}call[0]
        abstract fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.websocket/ClientWebSocketSession.call.<get-call>|<get-call>(){}[0]
}

abstract interface io.ktor.client.plugins/Sender { // io.ktor.client.plugins/Sender|null[0]
    abstract suspend fun execute(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins/Sender.execute|execute(io.ktor.client.request.HttpRequestBuilder){}[0]
}

abstract interface io.ktor.client.request/HttpRequest : io.ktor.http/HttpMessage, kotlinx.coroutines/CoroutineScope { // io.ktor.client.request/HttpRequest|null[0]
    abstract val attributes // io.ktor.client.request/HttpRequest.attributes|{}attributes[0]
        abstract fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.request/HttpRequest.attributes.<get-attributes>|<get-attributes>(){}[0]
    abstract val call // io.ktor.client.request/HttpRequest.call|{}call[0]
        abstract fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.request/HttpRequest.call.<get-call>|<get-call>(){}[0]
    abstract val content // io.ktor.client.request/HttpRequest.content|{}content[0]
        abstract fun <get-content>(): io.ktor.http.content/OutgoingContent // io.ktor.client.request/HttpRequest.content.<get-content>|<get-content>(){}[0]
    abstract val method // io.ktor.client.request/HttpRequest.method|{}method[0]
        abstract fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.client.request/HttpRequest.method.<get-method>|<get-method>(){}[0]
    abstract val url // io.ktor.client.request/HttpRequest.url|{}url[0]
        abstract fun <get-url>(): io.ktor.http/Url // io.ktor.client.request/HttpRequest.url.<get-url>|<get-url>(){}[0]
    open val coroutineContext // io.ktor.client.request/HttpRequest.coroutineContext|{}coroutineContext[0]
        open fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.request/HttpRequest.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
}

abstract class io.ktor.client.engine/HttpClientEngineBase : io.ktor.client.engine/HttpClientEngine { // io.ktor.client.engine/HttpClientEngineBase|null[0]
    constructor <init>(kotlin/String) // io.ktor.client.engine/HttpClientEngineBase.<init>|<init>(kotlin.String){}[0]

    open val coroutineContext // io.ktor.client.engine/HttpClientEngineBase.coroutineContext|{}coroutineContext[0]
        open fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.engine/HttpClientEngineBase.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    open val dispatcher // io.ktor.client.engine/HttpClientEngineBase.dispatcher|{}dispatcher[0]
        open fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.engine/HttpClientEngineBase.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]

    open fun close() // io.ktor.client.engine/HttpClientEngineBase.close|close(){}[0]
}

abstract class io.ktor.client.plugins.cache.storage/HttpCacheStorage { // io.ktor.client.plugins.cache.storage/HttpCacheStorage|null[0]
    constructor <init>() // io.ktor.client.plugins.cache.storage/HttpCacheStorage.<init>|<init>(){}[0]

    abstract fun find(io.ktor.http/Url, kotlin.collections/Map<kotlin/String, kotlin/String>): io.ktor.client.plugins.cache/HttpCacheEntry? // io.ktor.client.plugins.cache.storage/HttpCacheStorage.find|find(io.ktor.http.Url;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
    abstract fun findByUrl(io.ktor.http/Url): kotlin.collections/Set<io.ktor.client.plugins.cache/HttpCacheEntry> // io.ktor.client.plugins.cache.storage/HttpCacheStorage.findByUrl|findByUrl(io.ktor.http.Url){}[0]
    abstract fun store(io.ktor.http/Url, io.ktor.client.plugins.cache/HttpCacheEntry) // io.ktor.client.plugins.cache.storage/HttpCacheStorage.store|store(io.ktor.http.Url;io.ktor.client.plugins.cache.HttpCacheEntry){}[0]

    final object Companion { // io.ktor.client.plugins.cache.storage/HttpCacheStorage.Companion|null[0]
        final val Disabled // io.ktor.client.plugins.cache.storage/HttpCacheStorage.Companion.Disabled|{}Disabled[0]
            final fun <get-Disabled>(): io.ktor.client.plugins.cache.storage/HttpCacheStorage // io.ktor.client.plugins.cache.storage/HttpCacheStorage.Companion.Disabled.<get-Disabled>|<get-Disabled>(){}[0]
        final val Unlimited // io.ktor.client.plugins.cache.storage/HttpCacheStorage.Companion.Unlimited|{}Unlimited[0]
            final fun <get-Unlimited>(): kotlin/Function0<io.ktor.client.plugins.cache.storage/HttpCacheStorage> // io.ktor.client.plugins.cache.storage/HttpCacheStorage.Companion.Unlimited.<get-Unlimited>|<get-Unlimited>(){}[0]
    }
}

abstract class io.ktor.client.request/ClientUpgradeContent : io.ktor.http.content/OutgoingContent.NoContent { // io.ktor.client.request/ClientUpgradeContent|null[0]
    constructor <init>() // io.ktor.client.request/ClientUpgradeContent.<init>|<init>(){}[0]

    final val output // io.ktor.client.request/ClientUpgradeContent.output|{}output[0]
        final fun <get-output>(): io.ktor.utils.io/ByteWriteChannel // io.ktor.client.request/ClientUpgradeContent.output.<get-output>|<get-output>(){}[0]

    abstract fun verify(io.ktor.http/Headers) // io.ktor.client.request/ClientUpgradeContent.verify|verify(io.ktor.http.Headers){}[0]
    final suspend fun pipeTo(io.ktor.utils.io/ByteWriteChannel) // io.ktor.client.request/ClientUpgradeContent.pipeTo|pipeTo(io.ktor.utils.io.ByteWriteChannel){}[0]
}

abstract class io.ktor.client.statement/HttpResponse : io.ktor.http/HttpMessage, kotlinx.coroutines/CoroutineScope { // io.ktor.client.statement/HttpResponse|null[0]
    constructor <init>() // io.ktor.client.statement/HttpResponse.<init>|<init>(){}[0]

    abstract val call // io.ktor.client.statement/HttpResponse.call|{}call[0]
        abstract fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.statement/HttpResponse.call.<get-call>|<get-call>(){}[0]
    abstract val rawContent // io.ktor.client.statement/HttpResponse.rawContent|{}rawContent[0]
        abstract fun <get-rawContent>(): io.ktor.utils.io/ByteReadChannel // io.ktor.client.statement/HttpResponse.rawContent.<get-rawContent>|<get-rawContent>(){}[0]
    abstract val requestTime // io.ktor.client.statement/HttpResponse.requestTime|{}requestTime[0]
        abstract fun <get-requestTime>(): io.ktor.util.date/GMTDate // io.ktor.client.statement/HttpResponse.requestTime.<get-requestTime>|<get-requestTime>(){}[0]
    abstract val responseTime // io.ktor.client.statement/HttpResponse.responseTime|{}responseTime[0]
        abstract fun <get-responseTime>(): io.ktor.util.date/GMTDate // io.ktor.client.statement/HttpResponse.responseTime.<get-responseTime>|<get-responseTime>(){}[0]
    abstract val status // io.ktor.client.statement/HttpResponse.status|{}status[0]
        abstract fun <get-status>(): io.ktor.http/HttpStatusCode // io.ktor.client.statement/HttpResponse.status.<get-status>|<get-status>(){}[0]
    abstract val version // io.ktor.client.statement/HttpResponse.version|{}version[0]
        abstract fun <get-version>(): io.ktor.http/HttpProtocolVersion // io.ktor.client.statement/HttpResponse.version.<get-version>|<get-version>(){}[0]

    open fun toString(): kotlin/String // io.ktor.client.statement/HttpResponse.toString|toString(){}[0]
}

final class <#A: io.ktor.client.engine/HttpClientEngineConfig> io.ktor.client/HttpClientConfig { // io.ktor.client/HttpClientConfig|null[0]
    constructor <init>() // io.ktor.client/HttpClientConfig.<init>|<init>(){}[0]

    final var developmentMode // io.ktor.client/HttpClientConfig.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.client/HttpClientConfig.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]
        final fun <set-developmentMode>(kotlin/Boolean) // io.ktor.client/HttpClientConfig.developmentMode.<set-developmentMode>|<set-developmentMode>(kotlin.Boolean){}[0]
    final var expectSuccess // io.ktor.client/HttpClientConfig.expectSuccess|{}expectSuccess[0]
        final fun <get-expectSuccess>(): kotlin/Boolean // io.ktor.client/HttpClientConfig.expectSuccess.<get-expectSuccess>|<get-expectSuccess>(){}[0]
        final fun <set-expectSuccess>(kotlin/Boolean) // io.ktor.client/HttpClientConfig.expectSuccess.<set-expectSuccess>|<set-expectSuccess>(kotlin.Boolean){}[0]
    final var followRedirects // io.ktor.client/HttpClientConfig.followRedirects|{}followRedirects[0]
        final fun <get-followRedirects>(): kotlin/Boolean // io.ktor.client/HttpClientConfig.followRedirects.<get-followRedirects>|<get-followRedirects>(){}[0]
        final fun <set-followRedirects>(kotlin/Boolean) // io.ktor.client/HttpClientConfig.followRedirects.<set-followRedirects>|<set-followRedirects>(kotlin.Boolean){}[0]
    final var useDefaultTransformers // io.ktor.client/HttpClientConfig.useDefaultTransformers|{}useDefaultTransformers[0]
        final fun <get-useDefaultTransformers>(): kotlin/Boolean // io.ktor.client/HttpClientConfig.useDefaultTransformers.<get-useDefaultTransformers>|<get-useDefaultTransformers>(){}[0]
        final fun <set-useDefaultTransformers>(kotlin/Boolean) // io.ktor.client/HttpClientConfig.useDefaultTransformers.<set-useDefaultTransformers>|<set-useDefaultTransformers>(kotlin.Boolean){}[0]

    final fun <#A1: kotlin/Any, #B1: kotlin/Any> install(io.ktor.client.plugins/HttpClientPlugin<#A1, #B1>, kotlin/Function1<#A1, kotlin/Unit> = ...) // io.ktor.client/HttpClientConfig.install|install(io.ktor.client.plugins.HttpClientPlugin<0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
    final fun clone(): io.ktor.client/HttpClientConfig<#A> // io.ktor.client/HttpClientConfig.clone|clone(){}[0]
    final fun engine(kotlin/Function1<#A, kotlin/Unit>) // io.ktor.client/HttpClientConfig.engine|engine(kotlin.Function1<1:0,kotlin.Unit>){}[0]
    final fun install(io.ktor.client/HttpClient) // io.ktor.client/HttpClientConfig.install|install(io.ktor.client.HttpClient){}[0]
    final fun install(kotlin/String, kotlin/Function1<io.ktor.client/HttpClient, kotlin/Unit>) // io.ktor.client/HttpClientConfig.install|install(kotlin.String;kotlin.Function1<io.ktor.client.HttpClient,kotlin.Unit>){}[0]
    final fun plusAssign(io.ktor.client/HttpClientConfig<out #A>) // io.ktor.client/HttpClientConfig.plusAssign|plusAssign(io.ktor.client.HttpClientConfig<out|1:0>){}[0]
}

final class <#A: kotlin/Any, #B: io.ktor.events/EventDefinition<#A>> io.ktor.client.plugins.api/MonitoringEvent : io.ktor.client.plugins.api/ClientHook<kotlin/Function1<#A, kotlin/Unit>> { // io.ktor.client.plugins.api/MonitoringEvent|null[0]
    constructor <init>(#B) // io.ktor.client.plugins.api/MonitoringEvent.<init>|<init>(1:1){}[0]

    final fun install(io.ktor.client/HttpClient, kotlin/Function1<#A, kotlin/Unit>) // io.ktor.client.plugins.api/MonitoringEvent.install|install(io.ktor.client.HttpClient;kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any> io.ktor.client.plugins.api/ClientPluginBuilder { // io.ktor.client.plugins.api/ClientPluginBuilder|null[0]
    final val client // io.ktor.client.plugins.api/ClientPluginBuilder.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient // io.ktor.client.plugins.api/ClientPluginBuilder.client.<get-client>|<get-client>(){}[0]
    final val pluginConfig // io.ktor.client.plugins.api/ClientPluginBuilder.pluginConfig|{}pluginConfig[0]
        final fun <get-pluginConfig>(): #A // io.ktor.client.plugins.api/ClientPluginBuilder.pluginConfig.<get-pluginConfig>|<get-pluginConfig>(){}[0]

    final fun <#A1: kotlin/Any?> on(io.ktor.client.plugins.api/ClientHook<#A1>, #A1) // io.ktor.client.plugins.api/ClientPluginBuilder.on|on(io.ktor.client.plugins.api.ClientHook<0:0>;0:0){0§<kotlin.Any?>}[0]
    final fun onClose(kotlin/Function0<kotlin/Unit>) // io.ktor.client.plugins.api/ClientPluginBuilder.onClose|onClose(kotlin.Function0<kotlin.Unit>){}[0]
    final fun onRequest(kotlin.coroutines/SuspendFunction3<io.ktor.client.plugins.api/OnRequestContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Any, kotlin/Unit>) // io.ktor.client.plugins.api/ClientPluginBuilder.onRequest|onRequest(kotlin.coroutines.SuspendFunction3<io.ktor.client.plugins.api.OnRequestContext,io.ktor.client.request.HttpRequestBuilder,kotlin.Any,kotlin.Unit>){}[0]
    final fun onResponse(kotlin.coroutines/SuspendFunction2<io.ktor.client.plugins.api/OnResponseContext, io.ktor.client.statement/HttpResponse, kotlin/Unit>) // io.ktor.client.plugins.api/ClientPluginBuilder.onResponse|onResponse(kotlin.coroutines.SuspendFunction2<io.ktor.client.plugins.api.OnResponseContext,io.ktor.client.statement.HttpResponse,kotlin.Unit>){}[0]
    final fun transformRequestBody(kotlin.coroutines/SuspendFunction4<io.ktor.client.plugins.api/TransformRequestBodyContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Any, io.ktor.util.reflect/TypeInfo?, io.ktor.http.content/OutgoingContent?>) // io.ktor.client.plugins.api/ClientPluginBuilder.transformRequestBody|transformRequestBody(kotlin.coroutines.SuspendFunction4<io.ktor.client.plugins.api.TransformRequestBodyContext,io.ktor.client.request.HttpRequestBuilder,kotlin.Any,io.ktor.util.reflect.TypeInfo?,io.ktor.http.content.OutgoingContent?>){}[0]
    final fun transformResponseBody(kotlin.coroutines/SuspendFunction4<io.ktor.client.plugins.api/TransformResponseBodyContext, io.ktor.client.statement/HttpResponse, io.ktor.utils.io/ByteReadChannel, io.ktor.util.reflect/TypeInfo, kotlin/Any?>) // io.ktor.client.plugins.api/ClientPluginBuilder.transformResponseBody|transformResponseBody(kotlin.coroutines.SuspendFunction4<io.ktor.client.plugins.api.TransformResponseBodyContext,io.ktor.client.statement.HttpResponse,io.ktor.utils.io.ByteReadChannel,io.ktor.util.reflect.TypeInfo,kotlin.Any?>){}[0]
}

final class <#A: kotlin/Any> io.ktor.client.plugins.api/ClientPluginInstance : io.ktor.utils.io.core/Closeable { // io.ktor.client.plugins.api/ClientPluginInstance|null[0]
    final fun close() // io.ktor.client.plugins.api/ClientPluginInstance.close|close(){}[0]
    final fun install(io.ktor.client/HttpClient) // io.ktor.client.plugins.api/ClientPluginInstance.install|install(io.ktor.client.HttpClient){}[0]
}

final class <#A: kotlin/Any> io.ktor.client.request.forms/FormPart { // io.ktor.client.request.forms/FormPart|null[0]
    constructor <init>(kotlin/String, #A, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormPart.<init>|<init>(kotlin.String;1:0;io.ktor.http.Headers){}[0]

    final val headers // io.ktor.client.request.forms/FormPart.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.request.forms/FormPart.headers.<get-headers>|<get-headers>(){}[0]
    final val key // io.ktor.client.request.forms/FormPart.key|{}key[0]
        final fun <get-key>(): kotlin/String // io.ktor.client.request.forms/FormPart.key.<get-key>|<get-key>(){}[0]
    final val value // io.ktor.client.request.forms/FormPart.value|{}value[0]
        final fun <get-value>(): #A // io.ktor.client.request.forms/FormPart.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.client.request.forms/FormPart.component1|component1(){}[0]
    final fun component2(): #A // io.ktor.client.request.forms/FormPart.component2|component2(){}[0]
    final fun component3(): io.ktor.http/Headers // io.ktor.client.request.forms/FormPart.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., #A = ..., io.ktor.http/Headers = ...): io.ktor.client.request.forms/FormPart<#A> // io.ktor.client.request.forms/FormPart.copy|copy(kotlin.String;1:0;io.ktor.http.Headers){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.request.forms/FormPart.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.request.forms/FormPart.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.request.forms/FormPart.toString|toString(){}[0]
}

final class io.ktor.client.call/DoubleReceiveException : kotlin/IllegalStateException { // io.ktor.client.call/DoubleReceiveException|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall) // io.ktor.client.call/DoubleReceiveException.<init>|<init>(io.ktor.client.call.HttpClientCall){}[0]

    final val message // io.ktor.client.call/DoubleReceiveException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.call/DoubleReceiveException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.call/NoTransformationFoundException : kotlin/UnsupportedOperationException { // io.ktor.client.call/NoTransformationFoundException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin.reflect/KClass<*>, kotlin.reflect/KClass<*>) // io.ktor.client.call/NoTransformationFoundException.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.reflect.KClass<*>;kotlin.reflect.KClass<*>){}[0]

    final val message // io.ktor.client.call/NoTransformationFoundException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.call/NoTransformationFoundException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.call/ReceivePipelineException : kotlin/IllegalStateException { // io.ktor.client.call/ReceivePipelineException|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.util.reflect/TypeInfo, kotlin/Throwable) // io.ktor.client.call/ReceivePipelineException.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.util.reflect.TypeInfo;kotlin.Throwable){}[0]

    final val cause // io.ktor.client.call/ReceivePipelineException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable // io.ktor.client.call/ReceivePipelineException.cause.<get-cause>|<get-cause>(){}[0]
    final val info // io.ktor.client.call/ReceivePipelineException.info|{}info[0]
        final fun <get-info>(): io.ktor.util.reflect/TypeInfo // io.ktor.client.call/ReceivePipelineException.info.<get-info>|<get-info>(){}[0]
    final val request // io.ktor.client.call/ReceivePipelineException.request|{}request[0]
        final fun <get-request>(): io.ktor.client.call/HttpClientCall // io.ktor.client.call/ReceivePipelineException.request.<get-request>|<get-request>(){}[0]
}

final class io.ktor.client.call/UnsupportedContentTypeException : kotlin/IllegalStateException { // io.ktor.client.call/UnsupportedContentTypeException|null[0]
    constructor <init>(io.ktor.http.content/OutgoingContent) // io.ktor.client.call/UnsupportedContentTypeException.<init>|<init>(io.ktor.http.content.OutgoingContent){}[0]
}

final class io.ktor.client.call/UnsupportedUpgradeProtocolException : kotlin/IllegalArgumentException { // io.ktor.client.call/UnsupportedUpgradeProtocolException|null[0]
    constructor <init>(io.ktor.http/Url) // io.ktor.client.call/UnsupportedUpgradeProtocolException.<init>|<init>(io.ktor.http.Url){}[0]
}

final class io.ktor.client.engine/ClientEngineClosedException : kotlin/IllegalStateException { // io.ktor.client.engine/ClientEngineClosedException|null[0]
    constructor <init>(kotlin/Throwable? = ...) // io.ktor.client.engine/ClientEngineClosedException.<init>|<init>(kotlin.Throwable?){}[0]

    final val cause // io.ktor.client.engine/ClientEngineClosedException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.engine/ClientEngineClosedException.cause.<get-cause>|<get-cause>(){}[0]
}

final class io.ktor.client.engine/ProxyConfig { // io.ktor.client.engine/ProxyConfig|null[0]
    // Targets: [native]
    constructor <init>(io.ktor.http/Url) // io.ktor.client.engine/ProxyConfig.<init>|<init>(io.ktor.http.Url){}[0]

    // Targets: [native]
    final val url // io.ktor.client.engine/ProxyConfig.url|{}url[0]
        final fun <get-url>(): io.ktor.http/Url // io.ktor.client.engine/ProxyConfig.url.<get-url>|<get-url>(){}[0]

    // Targets: [native]
    final fun toString(): kotlin/String // io.ktor.client.engine/ProxyConfig.toString|toString(){}[0]

    // Targets: [js, wasmJs]
    constructor <init>() // io.ktor.client.engine/ProxyConfig.<init>|<init>(){}[0]
}

final class io.ktor.client.network.sockets/ConnectTimeoutException : kotlinx.io/IOException { // io.ktor.client.network.sockets/ConnectTimeoutException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // io.ktor.client.network.sockets/ConnectTimeoutException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

final class io.ktor.client.network.sockets/SocketTimeoutException : io.ktor.client.network.sockets/InterruptedIOException { // io.ktor.client.network.sockets/SocketTimeoutException|null[0]
    final val cause // io.ktor.client.network.sockets/SocketTimeoutException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.network.sockets/SocketTimeoutException.cause.<get-cause>|<get-cause>(){}[0]
    final val message // io.ktor.client.network.sockets/SocketTimeoutException.message|{}message[0]
        final fun <get-message>(): kotlin/String? // io.ktor.client.network.sockets/SocketTimeoutException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.plugins.api/OnRequestContext // io.ktor.client.plugins.api/OnRequestContext|null[0]

final class io.ktor.client.plugins.api/OnResponseContext // io.ktor.client.plugins.api/OnResponseContext|null[0]

final class io.ktor.client.plugins.api/TransformRequestBodyContext // io.ktor.client.plugins.api/TransformRequestBodyContext|null[0]

final class io.ktor.client.plugins.api/TransformResponseBodyContext // io.ktor.client.plugins.api/TransformResponseBodyContext|null[0]

final class io.ktor.client.plugins.cache.storage/CachedResponseData { // io.ktor.client.plugins.cache.storage/CachedResponseData|null[0]
    constructor <init>(io.ktor.http/Url, io.ktor.http/HttpStatusCode, io.ktor.util.date/GMTDate, io.ktor.util.date/GMTDate, io.ktor.http/HttpProtocolVersion, io.ktor.util.date/GMTDate, io.ktor.http/Headers, kotlin.collections/Map<kotlin/String, kotlin/String>, kotlin/ByteArray) // io.ktor.client.plugins.cache.storage/CachedResponseData.<init>|<init>(io.ktor.http.Url;io.ktor.http.HttpStatusCode;io.ktor.util.date.GMTDate;io.ktor.util.date.GMTDate;io.ktor.http.HttpProtocolVersion;io.ktor.util.date.GMTDate;io.ktor.http.Headers;kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.ByteArray){}[0]

    final val body // io.ktor.client.plugins.cache.storage/CachedResponseData.body|{}body[0]
        final fun <get-body>(): kotlin/ByteArray // io.ktor.client.plugins.cache.storage/CachedResponseData.body.<get-body>|<get-body>(){}[0]
    final val expires // io.ktor.client.plugins.cache.storage/CachedResponseData.expires|{}expires[0]
        final fun <get-expires>(): io.ktor.util.date/GMTDate // io.ktor.client.plugins.cache.storage/CachedResponseData.expires.<get-expires>|<get-expires>(){}[0]
    final val headers // io.ktor.client.plugins.cache.storage/CachedResponseData.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.plugins.cache.storage/CachedResponseData.headers.<get-headers>|<get-headers>(){}[0]
    final val requestTime // io.ktor.client.plugins.cache.storage/CachedResponseData.requestTime|{}requestTime[0]
        final fun <get-requestTime>(): io.ktor.util.date/GMTDate // io.ktor.client.plugins.cache.storage/CachedResponseData.requestTime.<get-requestTime>|<get-requestTime>(){}[0]
    final val responseTime // io.ktor.client.plugins.cache.storage/CachedResponseData.responseTime|{}responseTime[0]
        final fun <get-responseTime>(): io.ktor.util.date/GMTDate // io.ktor.client.plugins.cache.storage/CachedResponseData.responseTime.<get-responseTime>|<get-responseTime>(){}[0]
    final val statusCode // io.ktor.client.plugins.cache.storage/CachedResponseData.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): io.ktor.http/HttpStatusCode // io.ktor.client.plugins.cache.storage/CachedResponseData.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
    final val url // io.ktor.client.plugins.cache.storage/CachedResponseData.url|{}url[0]
        final fun <get-url>(): io.ktor.http/Url // io.ktor.client.plugins.cache.storage/CachedResponseData.url.<get-url>|<get-url>(){}[0]
    final val varyKeys // io.ktor.client.plugins.cache.storage/CachedResponseData.varyKeys|{}varyKeys[0]
        final fun <get-varyKeys>(): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.client.plugins.cache.storage/CachedResponseData.varyKeys.<get-varyKeys>|<get-varyKeys>(){}[0]
    final val version // io.ktor.client.plugins.cache.storage/CachedResponseData.version|{}version[0]
        final fun <get-version>(): io.ktor.http/HttpProtocolVersion // io.ktor.client.plugins.cache.storage/CachedResponseData.version.<get-version>|<get-version>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins.cache.storage/CachedResponseData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins.cache.storage/CachedResponseData.hashCode|hashCode(){}[0]
}

final class io.ktor.client.plugins.cache/HttpCache { // io.ktor.client.plugins.cache/HttpCache|null[0]
    final class Config { // io.ktor.client.plugins.cache/HttpCache.Config|null[0]
        constructor <init>() // io.ktor.client.plugins.cache/HttpCache.Config.<init>|<init>(){}[0]

        final var isShared // io.ktor.client.plugins.cache/HttpCache.Config.isShared|{}isShared[0]
            final fun <get-isShared>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<get-isShared>|<get-isShared>(){}[0]
            final fun <set-isShared>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<set-isShared>|<set-isShared>(kotlin.Boolean){}[0]
        final var privateStorage // io.ktor.client.plugins.cache/HttpCache.Config.privateStorage|{}privateStorage[0]
            final fun <get-privateStorage>(): io.ktor.client.plugins.cache.storage/HttpCacheStorage // io.ktor.client.plugins.cache/HttpCache.Config.privateStorage.<get-privateStorage>|<get-privateStorage>(){}[0]
            final fun <set-privateStorage>(io.ktor.client.plugins.cache.storage/HttpCacheStorage) // io.ktor.client.plugins.cache/HttpCache.Config.privateStorage.<set-privateStorage>|<set-privateStorage>(io.ktor.client.plugins.cache.storage.HttpCacheStorage){}[0]
        final var publicStorage // io.ktor.client.plugins.cache/HttpCache.Config.publicStorage|{}publicStorage[0]
            final fun <get-publicStorage>(): io.ktor.client.plugins.cache.storage/HttpCacheStorage // io.ktor.client.plugins.cache/HttpCache.Config.publicStorage.<get-publicStorage>|<get-publicStorage>(){}[0]
            final fun <set-publicStorage>(io.ktor.client.plugins.cache.storage/HttpCacheStorage) // io.ktor.client.plugins.cache/HttpCache.Config.publicStorage.<set-publicStorage>|<set-publicStorage>(io.ktor.client.plugins.cache.storage.HttpCacheStorage){}[0]

        final fun privateStorage(io.ktor.client.plugins.cache.storage/CacheStorage) // io.ktor.client.plugins.cache/HttpCache.Config.privateStorage|privateStorage(io.ktor.client.plugins.cache.storage.CacheStorage){}[0]
        final fun publicStorage(io.ktor.client.plugins.cache.storage/CacheStorage) // io.ktor.client.plugins.cache/HttpCache.Config.publicStorage|publicStorage(io.ktor.client.plugins.cache.storage.CacheStorage){}[0]
    }

    final object Companion : io.ktor.client.plugins/HttpClientPlugin<io.ktor.client.plugins.cache/HttpCache.Config, io.ktor.client.plugins.cache/HttpCache> { // io.ktor.client.plugins.cache/HttpCache.Companion|null[0]
        final val HttpResponseFromCache // io.ktor.client.plugins.cache/HttpCache.Companion.HttpResponseFromCache|{}HttpResponseFromCache[0]
            final fun <get-HttpResponseFromCache>(): io.ktor.events/EventDefinition<io.ktor.client.statement/HttpResponse> // io.ktor.client.plugins.cache/HttpCache.Companion.HttpResponseFromCache.<get-HttpResponseFromCache>|<get-HttpResponseFromCache>(){}[0]
        final val key // io.ktor.client.plugins.cache/HttpCache.Companion.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins.cache/HttpCache> // io.ktor.client.plugins.cache/HttpCache.Companion.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.client.plugins.cache/HttpCache, io.ktor.client/HttpClient) // io.ktor.client.plugins.cache/HttpCache.Companion.install|install(io.ktor.client.plugins.cache.HttpCache;io.ktor.client.HttpClient){}[0]
        final fun prepare(kotlin/Function1<io.ktor.client.plugins.cache/HttpCache.Config, kotlin/Unit>): io.ktor.client.plugins.cache/HttpCache // io.ktor.client.plugins.cache/HttpCache.Companion.prepare|prepare(kotlin.Function1<io.ktor.client.plugins.cache.HttpCache.Config,kotlin.Unit>){}[0]
    }
}

final class io.ktor.client.plugins.cache/HttpCacheEntry { // io.ktor.client.plugins.cache/HttpCacheEntry|null[0]
    final val body // io.ktor.client.plugins.cache/HttpCacheEntry.body|{}body[0]
        final fun <get-body>(): kotlin/ByteArray // io.ktor.client.plugins.cache/HttpCacheEntry.body.<get-body>|<get-body>(){}[0]
    final val expires // io.ktor.client.plugins.cache/HttpCacheEntry.expires|{}expires[0]
        final fun <get-expires>(): io.ktor.util.date/GMTDate // io.ktor.client.plugins.cache/HttpCacheEntry.expires.<get-expires>|<get-expires>(){}[0]
    final val response // io.ktor.client.plugins.cache/HttpCacheEntry.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse // io.ktor.client.plugins.cache/HttpCacheEntry.response.<get-response>|<get-response>(){}[0]
    final val varyKeys // io.ktor.client.plugins.cache/HttpCacheEntry.varyKeys|{}varyKeys[0]
        final fun <get-varyKeys>(): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.client.plugins.cache/HttpCacheEntry.varyKeys.<get-varyKeys>|<get-varyKeys>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCacheEntry.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins.cache/HttpCacheEntry.hashCode|hashCode(){}[0]
}

final class io.ktor.client.plugins.cache/InvalidCacheStateException : kotlin/IllegalStateException { // io.ktor.client.plugins.cache/InvalidCacheStateException|null[0]
    constructor <init>(io.ktor.http/Url) // io.ktor.client.plugins.cache/InvalidCacheStateException.<init>|<init>(io.ktor.http.Url){}[0]
}

final class io.ktor.client.plugins.cookies/AcceptAllCookiesStorage : io.ktor.client.plugins.cookies/CookiesStorage { // io.ktor.client.plugins.cookies/AcceptAllCookiesStorage|null[0]
    constructor <init>(kotlin/Function0<kotlin/Long> = ...) // io.ktor.client.plugins.cookies/AcceptAllCookiesStorage.<init>|<init>(kotlin.Function0<kotlin.Long>){}[0]

    final fun close() // io.ktor.client.plugins.cookies/AcceptAllCookiesStorage.close|close(){}[0]
    final suspend fun addCookie(io.ktor.http/Url, io.ktor.http/Cookie) // io.ktor.client.plugins.cookies/AcceptAllCookiesStorage.addCookie|addCookie(io.ktor.http.Url;io.ktor.http.Cookie){}[0]
    final suspend fun get(io.ktor.http/Url): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/AcceptAllCookiesStorage.get|get(io.ktor.http.Url){}[0]
}

final class io.ktor.client.plugins.cookies/ConstantCookiesStorage : io.ktor.client.plugins.cookies/CookiesStorage { // io.ktor.client.plugins.cookies/ConstantCookiesStorage|null[0]
    constructor <init>(kotlin/Array<out io.ktor.http/Cookie>...) // io.ktor.client.plugins.cookies/ConstantCookiesStorage.<init>|<init>(kotlin.Array<out|io.ktor.http.Cookie>...){}[0]

    final fun close() // io.ktor.client.plugins.cookies/ConstantCookiesStorage.close|close(){}[0]
    final suspend fun addCookie(io.ktor.http/Url, io.ktor.http/Cookie) // io.ktor.client.plugins.cookies/ConstantCookiesStorage.addCookie|addCookie(io.ktor.http.Url;io.ktor.http.Cookie){}[0]
    final suspend fun get(io.ktor.http/Url): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/ConstantCookiesStorage.get|get(io.ktor.http.Url){}[0]
}

final class io.ktor.client.plugins.cookies/HttpCookies : io.ktor.utils.io.core/Closeable { // io.ktor.client.plugins.cookies/HttpCookies|null[0]
    final fun close() // io.ktor.client.plugins.cookies/HttpCookies.close|close(){}[0]
    final suspend fun get(io.ktor.http/Url): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/HttpCookies.get|get(io.ktor.http.Url){}[0]

    final class Config { // io.ktor.client.plugins.cookies/HttpCookies.Config|null[0]
        constructor <init>() // io.ktor.client.plugins.cookies/HttpCookies.Config.<init>|<init>(){}[0]

        final var storage // io.ktor.client.plugins.cookies/HttpCookies.Config.storage|{}storage[0]
            final fun <get-storage>(): io.ktor.client.plugins.cookies/CookiesStorage // io.ktor.client.plugins.cookies/HttpCookies.Config.storage.<get-storage>|<get-storage>(){}[0]
            final fun <set-storage>(io.ktor.client.plugins.cookies/CookiesStorage) // io.ktor.client.plugins.cookies/HttpCookies.Config.storage.<set-storage>|<set-storage>(io.ktor.client.plugins.cookies.CookiesStorage){}[0]

        final fun default(kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.cookies/CookiesStorage, kotlin/Unit>) // io.ktor.client.plugins.cookies/HttpCookies.Config.default|default(kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.cookies.CookiesStorage,kotlin.Unit>){}[0]
    }

    final object Companion : io.ktor.client.plugins/HttpClientPlugin<io.ktor.client.plugins.cookies/HttpCookies.Config, io.ktor.client.plugins.cookies/HttpCookies> { // io.ktor.client.plugins.cookies/HttpCookies.Companion|null[0]
        final val key // io.ktor.client.plugins.cookies/HttpCookies.Companion.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins.cookies/HttpCookies> // io.ktor.client.plugins.cookies/HttpCookies.Companion.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.client.plugins.cookies/HttpCookies, io.ktor.client/HttpClient) // io.ktor.client.plugins.cookies/HttpCookies.Companion.install|install(io.ktor.client.plugins.cookies.HttpCookies;io.ktor.client.HttpClient){}[0]
        final fun prepare(kotlin/Function1<io.ktor.client.plugins.cookies/HttpCookies.Config, kotlin/Unit>): io.ktor.client.plugins.cookies/HttpCookies // io.ktor.client.plugins.cookies/HttpCookies.Companion.prepare|prepare(kotlin.Function1<io.ktor.client.plugins.cookies.HttpCookies.Config,kotlin.Unit>){}[0]
    }
}

final class io.ktor.client.plugins.internal/SaveBodyAbandonedReadException : kotlin/RuntimeException { // io.ktor.client.plugins.internal/SaveBodyAbandonedReadException|null[0]
    constructor <init>() // io.ktor.client.plugins.internal/SaveBodyAbandonedReadException.<init>|<init>(){}[0]
}

final class io.ktor.client.plugins.observer/ResponseObserverConfig { // io.ktor.client.plugins.observer/ResponseObserverConfig|null[0]
    constructor <init>() // io.ktor.client.plugins.observer/ResponseObserverConfig.<init>|<init>(){}[0]

    final fun filter(kotlin/Function1<io.ktor.client.call/HttpClientCall, kotlin/Boolean>) // io.ktor.client.plugins.observer/ResponseObserverConfig.filter|filter(kotlin.Function1<io.ktor.client.call.HttpClientCall,kotlin.Boolean>){}[0]
    final fun onResponse(kotlin.coroutines/SuspendFunction1<io.ktor.client.statement/HttpResponse, kotlin/Unit>) // io.ktor.client.plugins.observer/ResponseObserverConfig.onResponse|onResponse(kotlin.coroutines.SuspendFunction1<io.ktor.client.statement.HttpResponse,kotlin.Unit>){}[0]
}

final class io.ktor.client.plugins.sse/ClientSSESession : io.ktor.client.plugins.sse/SSESession { // io.ktor.client.plugins.sse/ClientSSESession|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.client.plugins.sse/SSESession) // io.ktor.client.plugins.sse/ClientSSESession.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.client.plugins.sse.SSESession){}[0]

    final val call // io.ktor.client.plugins.sse/ClientSSESession.call|{}call[0]
        final fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.sse/ClientSSESession.call.<get-call>|<get-call>(){}[0]
    final val coroutineContext // io.ktor.client.plugins.sse/ClientSSESession.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.plugins.sse/ClientSSESession.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val incoming // io.ktor.client.plugins.sse/ClientSSESession.incoming|{}incoming[0]
        final fun <get-incoming>(): kotlinx.coroutines.flow/Flow<io.ktor.sse/ServerSentEvent> // io.ktor.client.plugins.sse/ClientSSESession.incoming.<get-incoming>|<get-incoming>(){}[0]
}

final class io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization : io.ktor.client.plugins.sse/SSESessionWithDeserialization { // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.client.plugins.sse/SSESessionWithDeserialization) // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.client.plugins.sse.SSESessionWithDeserialization){}[0]

    final val call // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.call|{}call[0]
        final fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.call.<get-call>|<get-call>(){}[0]
    final val coroutineContext // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val deserializer // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.deserializer|{}deserializer[0]
        final fun <get-deserializer>(): kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?> // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.deserializer.<get-deserializer>|<get-deserializer>(){}[0]
    final val incoming // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.incoming|{}incoming[0]
        final fun <get-incoming>(): kotlinx.coroutines.flow/Flow<io.ktor.sse/TypedServerSentEvent<kotlin/String>> // io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization.incoming.<get-incoming>|<get-incoming>(){}[0]
}

final class io.ktor.client.plugins.sse/DefaultClientSSESession : io.ktor.client.plugins.sse/SSESession { // io.ktor.client.plugins.sse/DefaultClientSSESession|null[0]
    constructor <init>(io.ktor.client.plugins.sse/SSEClientContent, io.ktor.utils.io/ByteReadChannel, kotlin.coroutines/CoroutineContext) // io.ktor.client.plugins.sse/DefaultClientSSESession.<init>|<init>(io.ktor.client.plugins.sse.SSEClientContent;io.ktor.utils.io.ByteReadChannel;kotlin.coroutines.CoroutineContext){}[0]

    final val coroutineContext // io.ktor.client.plugins.sse/DefaultClientSSESession.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.plugins.sse/DefaultClientSSESession.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val incoming // io.ktor.client.plugins.sse/DefaultClientSSESession.incoming|{}incoming[0]
        final fun <get-incoming>(): kotlinx.coroutines.flow/Flow<io.ktor.sse/ServerSentEvent> // io.ktor.client.plugins.sse/DefaultClientSSESession.incoming.<get-incoming>|<get-incoming>(){}[0]
}

final class io.ktor.client.plugins.sse/SSEClientContent : io.ktor.http.content/OutgoingContent.ContentWrapper { // io.ktor.client.plugins.sse/SSEClientContent|null[0]
    constructor <init>(kotlin.time/Duration, kotlin/Boolean, kotlin/Boolean, io.ktor.http.content/OutgoingContent) // io.ktor.client.plugins.sse/SSEClientContent.<init>|<init>(kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;io.ktor.http.content.OutgoingContent){}[0]

    final val headers // io.ktor.client.plugins.sse/SSEClientContent.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.plugins.sse/SSEClientContent.headers.<get-headers>|<get-headers>(){}[0]
    final val reconnectionTime // io.ktor.client.plugins.sse/SSEClientContent.reconnectionTime|{}reconnectionTime[0]
        final fun <get-reconnectionTime>(): kotlin.time/Duration // io.ktor.client.plugins.sse/SSEClientContent.reconnectionTime.<get-reconnectionTime>|<get-reconnectionTime>(){}[0]
    final val showCommentEvents // io.ktor.client.plugins.sse/SSEClientContent.showCommentEvents|{}showCommentEvents[0]
        final fun <get-showCommentEvents>(): kotlin/Boolean // io.ktor.client.plugins.sse/SSEClientContent.showCommentEvents.<get-showCommentEvents>|<get-showCommentEvents>(){}[0]
    final val showRetryEvents // io.ktor.client.plugins.sse/SSEClientContent.showRetryEvents|{}showRetryEvents[0]
        final fun <get-showRetryEvents>(): kotlin/Boolean // io.ktor.client.plugins.sse/SSEClientContent.showRetryEvents.<get-showRetryEvents>|<get-showRetryEvents>(){}[0]

    final fun copy(io.ktor.http.content/OutgoingContent): io.ktor.client.plugins.sse/SSEClientContent // io.ktor.client.plugins.sse/SSEClientContent.copy|copy(io.ktor.http.content.OutgoingContent){}[0]
    final fun toString(): kotlin/String // io.ktor.client.plugins.sse/SSEClientContent.toString|toString(){}[0]
}

final class io.ktor.client.plugins.sse/SSEClientException : kotlin/IllegalStateException { // io.ktor.client.plugins.sse/SSEClientException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse? = ..., kotlin/Throwable? = ..., kotlin/String? = ...) // io.ktor.client.plugins.sse/SSEClientException.<init>|<init>(io.ktor.client.statement.HttpResponse?;kotlin.Throwable?;kotlin.String?){}[0]

    final val cause // io.ktor.client.plugins.sse/SSEClientException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.plugins.sse/SSEClientException.cause.<get-cause>|<get-cause>(){}[0]
    final val message // io.ktor.client.plugins.sse/SSEClientException.message|{}message[0]
        final fun <get-message>(): kotlin/String? // io.ktor.client.plugins.sse/SSEClientException.message.<get-message>|<get-message>(){}[0]
    final val response // io.ktor.client.plugins.sse/SSEClientException.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse? // io.ktor.client.plugins.sse/SSEClientException.response.<get-response>|<get-response>(){}[0]
}

final class io.ktor.client.plugins.sse/SSEConfig { // io.ktor.client.plugins.sse/SSEConfig|null[0]
    constructor <init>() // io.ktor.client.plugins.sse/SSEConfig.<init>|<init>(){}[0]

    final var reconnectionTime // io.ktor.client.plugins.sse/SSEConfig.reconnectionTime|{}reconnectionTime[0]
        final fun <get-reconnectionTime>(): kotlin.time/Duration // io.ktor.client.plugins.sse/SSEConfig.reconnectionTime.<get-reconnectionTime>|<get-reconnectionTime>(){}[0]
        final fun <set-reconnectionTime>(kotlin.time/Duration) // io.ktor.client.plugins.sse/SSEConfig.reconnectionTime.<set-reconnectionTime>|<set-reconnectionTime>(kotlin.time.Duration){}[0]

    final fun showCommentEvents() // io.ktor.client.plugins.sse/SSEConfig.showCommentEvents|showCommentEvents(){}[0]
    final fun showRetryEvents() // io.ktor.client.plugins.sse/SSEConfig.showRetryEvents|showRetryEvents(){}[0]
}

final class io.ktor.client.plugins.websocket/DefaultClientWebSocketSession : io.ktor.client.plugins.websocket/ClientWebSocketSession, io.ktor.websocket/DefaultWebSocketSession { // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.websocket/DefaultWebSocketSession) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.websocket.DefaultWebSocketSession){}[0]

    final val call // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.call|{}call[0]
        final fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.call.<get-call>|<get-call>(){}[0]
    final val closeReason // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.closeReason|{}closeReason[0]
        final fun <get-closeReason>(): kotlinx.coroutines/Deferred<io.ktor.websocket/CloseReason?> // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.closeReason.<get-closeReason>|<get-closeReason>(){}[0]
    final val coroutineContext // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val extensions // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/List<io.ktor.websocket/WebSocketExtension<*>> // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.extensions.<get-extensions>|<get-extensions>(){}[0]
    final val incoming // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.incoming|{}incoming[0]
        final fun <get-incoming>(): kotlinx.coroutines.channels/ReceiveChannel<io.ktor.websocket/Frame> // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.incoming.<get-incoming>|<get-incoming>(){}[0]
    final val outgoing // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.outgoing|{}outgoing[0]
        final fun <get-outgoing>(): kotlinx.coroutines.channels/SendChannel<io.ktor.websocket/Frame> // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.outgoing.<get-outgoing>|<get-outgoing>(){}[0]

    final var masking // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.masking|{}masking[0]
        final fun <get-masking>(): kotlin/Boolean // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.masking.<get-masking>|<get-masking>(){}[0]
        final fun <set-masking>(kotlin/Boolean) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.masking.<set-masking>|<set-masking>(kotlin.Boolean){}[0]
    final var maxFrameSize // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.maxFrameSize|{}maxFrameSize[0]
        final fun <get-maxFrameSize>(): kotlin/Long // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.maxFrameSize.<get-maxFrameSize>|<get-maxFrameSize>(){}[0]
        final fun <set-maxFrameSize>(kotlin/Long) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.maxFrameSize.<set-maxFrameSize>|<set-maxFrameSize>(kotlin.Long){}[0]
    final var pingIntervalMillis // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.pingIntervalMillis|{}pingIntervalMillis[0]
        final fun <get-pingIntervalMillis>(): kotlin/Long // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.pingIntervalMillis.<get-pingIntervalMillis>|<get-pingIntervalMillis>(){}[0]
        final fun <set-pingIntervalMillis>(kotlin/Long) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.pingIntervalMillis.<set-pingIntervalMillis>|<set-pingIntervalMillis>(kotlin.Long){}[0]
    final var timeoutMillis // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.timeoutMillis|{}timeoutMillis[0]
        final fun <get-timeoutMillis>(): kotlin/Long // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.timeoutMillis.<get-timeoutMillis>|<get-timeoutMillis>(){}[0]
        final fun <set-timeoutMillis>(kotlin/Long) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.timeoutMillis.<set-timeoutMillis>|<set-timeoutMillis>(kotlin.Long){}[0]

    final fun start(kotlin.collections/List<io.ktor.websocket/WebSocketExtension<*>>) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.start|start(kotlin.collections.List<io.ktor.websocket.WebSocketExtension<*>>){}[0]
    final fun terminate() // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.terminate|terminate(){}[0]
    final suspend fun flush() // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.flush|flush(){}[0]
    final suspend fun send(io.ktor.websocket/Frame) // io.ktor.client.plugins.websocket/DefaultClientWebSocketSession.send|send(io.ktor.websocket.Frame){}[0]
}

final class io.ktor.client.plugins.websocket/WebSocketException : kotlin/IllegalStateException { // io.ktor.client.plugins.websocket/WebSocketException|null[0]
    constructor <init>(kotlin/String) // io.ktor.client.plugins.websocket/WebSocketException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable?) // io.ktor.client.plugins.websocket/WebSocketException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

final class io.ktor.client.plugins.websocket/WebSockets { // io.ktor.client.plugins.websocket/WebSockets|null[0]
    constructor <init>() // io.ktor.client.plugins.websocket/WebSockets.<init>|<init>(){}[0]
    constructor <init>(kotlin/Long = ..., kotlin/Long = ...) // io.ktor.client.plugins.websocket/WebSockets.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val contentConverter // io.ktor.client.plugins.websocket/WebSockets.contentConverter|{}contentConverter[0]
        final fun <get-contentConverter>(): io.ktor.serialization/WebsocketContentConverter? // io.ktor.client.plugins.websocket/WebSockets.contentConverter.<get-contentConverter>|<get-contentConverter>(){}[0]
    final val maxFrameSize // io.ktor.client.plugins.websocket/WebSockets.maxFrameSize|{}maxFrameSize[0]
        final fun <get-maxFrameSize>(): kotlin/Long // io.ktor.client.plugins.websocket/WebSockets.maxFrameSize.<get-maxFrameSize>|<get-maxFrameSize>(){}[0]
    final val pingIntervalMillis // io.ktor.client.plugins.websocket/WebSockets.pingIntervalMillis|{}pingIntervalMillis[0]
        final fun <get-pingIntervalMillis>(): kotlin/Long // io.ktor.client.plugins.websocket/WebSockets.pingIntervalMillis.<get-pingIntervalMillis>|<get-pingIntervalMillis>(){}[0]

    final class Config { // io.ktor.client.plugins.websocket/WebSockets.Config|null[0]
        constructor <init>() // io.ktor.client.plugins.websocket/WebSockets.Config.<init>|<init>(){}[0]

        final var contentConverter // io.ktor.client.plugins.websocket/WebSockets.Config.contentConverter|{}contentConverter[0]
            final fun <get-contentConverter>(): io.ktor.serialization/WebsocketContentConverter? // io.ktor.client.plugins.websocket/WebSockets.Config.contentConverter.<get-contentConverter>|<get-contentConverter>(){}[0]
            final fun <set-contentConverter>(io.ktor.serialization/WebsocketContentConverter?) // io.ktor.client.plugins.websocket/WebSockets.Config.contentConverter.<set-contentConverter>|<set-contentConverter>(io.ktor.serialization.WebsocketContentConverter?){}[0]
        final var maxFrameSize // io.ktor.client.plugins.websocket/WebSockets.Config.maxFrameSize|{}maxFrameSize[0]
            final fun <get-maxFrameSize>(): kotlin/Long // io.ktor.client.plugins.websocket/WebSockets.Config.maxFrameSize.<get-maxFrameSize>|<get-maxFrameSize>(){}[0]
            final fun <set-maxFrameSize>(kotlin/Long) // io.ktor.client.plugins.websocket/WebSockets.Config.maxFrameSize.<set-maxFrameSize>|<set-maxFrameSize>(kotlin.Long){}[0]
        final var pingIntervalMillis // io.ktor.client.plugins.websocket/WebSockets.Config.pingIntervalMillis|{}pingIntervalMillis[0]
            final fun <get-pingIntervalMillis>(): kotlin/Long // io.ktor.client.plugins.websocket/WebSockets.Config.pingIntervalMillis.<get-pingIntervalMillis>|<get-pingIntervalMillis>(){}[0]
            final fun <set-pingIntervalMillis>(kotlin/Long) // io.ktor.client.plugins.websocket/WebSockets.Config.pingIntervalMillis.<set-pingIntervalMillis>|<set-pingIntervalMillis>(kotlin.Long){}[0]

        final fun extensions(kotlin/Function1<io.ktor.websocket/WebSocketExtensionsConfig, kotlin/Unit>) // io.ktor.client.plugins.websocket/WebSockets.Config.extensions|extensions(kotlin.Function1<io.ktor.websocket.WebSocketExtensionsConfig,kotlin.Unit>){}[0]
    }

    final object Plugin : io.ktor.client.plugins/HttpClientPlugin<io.ktor.client.plugins.websocket/WebSockets.Config, io.ktor.client.plugins.websocket/WebSockets> { // io.ktor.client.plugins.websocket/WebSockets.Plugin|null[0]
        final val key // io.ktor.client.plugins.websocket/WebSockets.Plugin.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins.websocket/WebSockets> // io.ktor.client.plugins.websocket/WebSockets.Plugin.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.client.plugins.websocket/WebSockets, io.ktor.client/HttpClient) // io.ktor.client.plugins.websocket/WebSockets.Plugin.install|install(io.ktor.client.plugins.websocket.WebSockets;io.ktor.client.HttpClient){}[0]
        final fun prepare(kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit>): io.ktor.client.plugins.websocket/WebSockets // io.ktor.client.plugins.websocket/WebSockets.Plugin.prepare|prepare(kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>){}[0]
    }
}

final class io.ktor.client.plugins/ClientRequestException : io.ktor.client.plugins/ResponseException { // io.ktor.client.plugins/ClientRequestException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin/String) // io.ktor.client.plugins/ClientRequestException.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.String){}[0]

    final val message // io.ktor.client.plugins/ClientRequestException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.plugins/ClientRequestException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.plugins/DefaultRequest { // io.ktor.client.plugins/DefaultRequest|null[0]
    final class DefaultRequestBuilder : io.ktor.http/HttpMessageBuilder { // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder|null[0]
        final val attributes // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.attributes|{}attributes[0]
            final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.attributes.<get-attributes>|<get-attributes>(){}[0]
        final val headers // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.headers|{}headers[0]
            final fun <get-headers>(): io.ktor.http/HeadersBuilder // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.headers.<get-headers>|<get-headers>(){}[0]
        final val url // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.url|{}url[0]
            final fun <get-url>(): io.ktor.http/URLBuilder // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.url.<get-url>|<get-url>(){}[0]

        final var host // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.host|{}host[0]
            final fun <get-host>(): kotlin/String // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.host.<get-host>|<get-host>(){}[0]
            final fun <set-host>(kotlin/String) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.host.<set-host>|<set-host>(kotlin.String){}[0]
        final var port // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.port|{}port[0]
            final fun <get-port>(): kotlin/Int // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.port.<get-port>|<get-port>(){}[0]
            final fun <set-port>(kotlin/Int) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.port.<set-port>|<set-port>(kotlin.Int){}[0]

        final fun setAttributes(kotlin/Function1<io.ktor.util/Attributes, kotlin/Unit>) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.setAttributes|setAttributes(kotlin.Function1<io.ktor.util.Attributes,kotlin.Unit>){}[0]
        final fun url(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.url|url(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
        final fun url(kotlin/String) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.url|url(kotlin.String){}[0]
        final fun url(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit> = ...) // io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder.url|url(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
    }

    final object Plugin : io.ktor.client.plugins/HttpClientPlugin<io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder, io.ktor.client.plugins/DefaultRequest> { // io.ktor.client.plugins/DefaultRequest.Plugin|null[0]
        final val key // io.ktor.client.plugins/DefaultRequest.Plugin.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins/DefaultRequest> // io.ktor.client.plugins/DefaultRequest.Plugin.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.client.plugins/DefaultRequest, io.ktor.client/HttpClient) // io.ktor.client.plugins/DefaultRequest.Plugin.install|install(io.ktor.client.plugins.DefaultRequest;io.ktor.client.HttpClient){}[0]
        final fun prepare(kotlin/Function1<io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder, kotlin/Unit>): io.ktor.client.plugins/DefaultRequest // io.ktor.client.plugins/DefaultRequest.Plugin.prepare|prepare(kotlin.Function1<io.ktor.client.plugins.DefaultRequest.DefaultRequestBuilder,kotlin.Unit>){}[0]
    }
}

final class io.ktor.client.plugins/HttpCallValidatorConfig { // io.ktor.client.plugins/HttpCallValidatorConfig|null[0]
    constructor <init>() // io.ktor.client.plugins/HttpCallValidatorConfig.<init>|<init>(){}[0]

    final fun handleResponseException(kotlin.coroutines/SuspendFunction2<kotlin/Throwable, io.ktor.client.request/HttpRequest, kotlin/Unit>) // io.ktor.client.plugins/HttpCallValidatorConfig.handleResponseException|handleResponseException(kotlin.coroutines.SuspendFunction2<kotlin.Throwable,io.ktor.client.request.HttpRequest,kotlin.Unit>){}[0]
    final fun handleResponseExceptionWithRequest(kotlin.coroutines/SuspendFunction2<kotlin/Throwable, io.ktor.client.request/HttpRequest, kotlin/Unit>) // io.ktor.client.plugins/HttpCallValidatorConfig.handleResponseExceptionWithRequest|handleResponseExceptionWithRequest(kotlin.coroutines.SuspendFunction2<kotlin.Throwable,io.ktor.client.request.HttpRequest,kotlin.Unit>){}[0]
    final fun validateResponse(kotlin.coroutines/SuspendFunction1<io.ktor.client.statement/HttpResponse, kotlin/Unit>) // io.ktor.client.plugins/HttpCallValidatorConfig.validateResponse|validateResponse(kotlin.coroutines.SuspendFunction1<io.ktor.client.statement.HttpResponse,kotlin.Unit>){}[0]
}

final class io.ktor.client.plugins/HttpPlainTextConfig { // io.ktor.client.plugins/HttpPlainTextConfig|null[0]
    constructor <init>() // io.ktor.client.plugins/HttpPlainTextConfig.<init>|<init>(){}[0]

    final var responseCharsetFallback // io.ktor.client.plugins/HttpPlainTextConfig.responseCharsetFallback|{}responseCharsetFallback[0]
        final fun <get-responseCharsetFallback>(): io.ktor.utils.io.charsets/Charset // io.ktor.client.plugins/HttpPlainTextConfig.responseCharsetFallback.<get-responseCharsetFallback>|<get-responseCharsetFallback>(){}[0]
        final fun <set-responseCharsetFallback>(io.ktor.utils.io.charsets/Charset) // io.ktor.client.plugins/HttpPlainTextConfig.responseCharsetFallback.<set-responseCharsetFallback>|<set-responseCharsetFallback>(io.ktor.utils.io.charsets.Charset){}[0]
    final var sendCharset // io.ktor.client.plugins/HttpPlainTextConfig.sendCharset|{}sendCharset[0]
        final fun <get-sendCharset>(): io.ktor.utils.io.charsets/Charset? // io.ktor.client.plugins/HttpPlainTextConfig.sendCharset.<get-sendCharset>|<get-sendCharset>(){}[0]
        final fun <set-sendCharset>(io.ktor.utils.io.charsets/Charset?) // io.ktor.client.plugins/HttpPlainTextConfig.sendCharset.<set-sendCharset>|<set-sendCharset>(io.ktor.utils.io.charsets.Charset?){}[0]

    final fun register(io.ktor.utils.io.charsets/Charset, kotlin/Float? = ...) // io.ktor.client.plugins/HttpPlainTextConfig.register|register(io.ktor.utils.io.charsets.Charset;kotlin.Float?){}[0]
}

final class io.ktor.client.plugins/HttpRedirectConfig { // io.ktor.client.plugins/HttpRedirectConfig|null[0]
    constructor <init>() // io.ktor.client.plugins/HttpRedirectConfig.<init>|<init>(){}[0]

    final var allowHttpsDowngrade // io.ktor.client.plugins/HttpRedirectConfig.allowHttpsDowngrade|{}allowHttpsDowngrade[0]
        final fun <get-allowHttpsDowngrade>(): kotlin/Boolean // io.ktor.client.plugins/HttpRedirectConfig.allowHttpsDowngrade.<get-allowHttpsDowngrade>|<get-allowHttpsDowngrade>(){}[0]
        final fun <set-allowHttpsDowngrade>(kotlin/Boolean) // io.ktor.client.plugins/HttpRedirectConfig.allowHttpsDowngrade.<set-allowHttpsDowngrade>|<set-allowHttpsDowngrade>(kotlin.Boolean){}[0]
    final var checkHttpMethod // io.ktor.client.plugins/HttpRedirectConfig.checkHttpMethod|{}checkHttpMethod[0]
        final fun <get-checkHttpMethod>(): kotlin/Boolean // io.ktor.client.plugins/HttpRedirectConfig.checkHttpMethod.<get-checkHttpMethod>|<get-checkHttpMethod>(){}[0]
        final fun <set-checkHttpMethod>(kotlin/Boolean) // io.ktor.client.plugins/HttpRedirectConfig.checkHttpMethod.<set-checkHttpMethod>|<set-checkHttpMethod>(kotlin.Boolean){}[0]
}

final class io.ktor.client.plugins/HttpRequestRetryConfig { // io.ktor.client.plugins/HttpRequestRetryConfig|null[0]
    constructor <init>() // io.ktor.client.plugins/HttpRequestRetryConfig.<init>|<init>(){}[0]

    final val retryIf // io.ktor.client.plugins/HttpRequestRetryConfig.retryIf|{}retryIf[0]
        final fun <get-retryIf>(): kotlin/Function3<io.ktor.client.plugins/HttpRetryShouldRetryContext, io.ktor.client.request/HttpRequest, io.ktor.client.statement/HttpResponse, kotlin/Boolean>? // io.ktor.client.plugins/HttpRequestRetryConfig.retryIf.<get-retryIf>|<get-retryIf>(){}[0]
    final val retryOnExceptionIf // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnExceptionIf|{}retryOnExceptionIf[0]
        final fun <get-retryOnExceptionIf>(): kotlin/Function3<io.ktor.client.plugins/HttpRetryShouldRetryContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Throwable, kotlin/Boolean>? // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnExceptionIf.<get-retryOnExceptionIf>|<get-retryOnExceptionIf>(){}[0]

    final var maxRetries // io.ktor.client.plugins/HttpRequestRetryConfig.maxRetries|{}maxRetries[0]
        final fun <get-maxRetries>(): kotlin/Int // io.ktor.client.plugins/HttpRequestRetryConfig.maxRetries.<get-maxRetries>|<get-maxRetries>(){}[0]
        final fun <set-maxRetries>(kotlin/Int) // io.ktor.client.plugins/HttpRequestRetryConfig.maxRetries.<set-maxRetries>|<set-maxRetries>(kotlin.Int){}[0]
    final var modifyRequest // io.ktor.client.plugins/HttpRequestRetryConfig.modifyRequest|{}modifyRequest[0]
        final fun <get-modifyRequest>(): kotlin/Function2<io.ktor.client.plugins/HttpRetryModifyRequestContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> // io.ktor.client.plugins/HttpRequestRetryConfig.modifyRequest.<get-modifyRequest>|<get-modifyRequest>(){}[0]

    final fun constantDelay(kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...) // io.ktor.client.plugins/HttpRequestRetryConfig.constantDelay|constantDelay(kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final fun delay(kotlin.coroutines/SuspendFunction1<kotlin/Long, kotlin/Unit>) // io.ktor.client.plugins/HttpRequestRetryConfig.delay|delay(kotlin.coroutines.SuspendFunction1<kotlin.Long,kotlin.Unit>){}[0]
    final fun delayMillis(kotlin/Boolean = ..., kotlin/Function2<io.ktor.client.plugins/HttpRetryDelayContext, kotlin/Int, kotlin/Long>) // io.ktor.client.plugins/HttpRequestRetryConfig.delayMillis|delayMillis(kotlin.Boolean;kotlin.Function2<io.ktor.client.plugins.HttpRetryDelayContext,kotlin.Int,kotlin.Long>){}[0]
    final fun exponentialDelay(kotlin/Double = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Boolean = ...) // io.ktor.client.plugins/HttpRequestRetryConfig.exponentialDelay|exponentialDelay(kotlin.Double;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final fun modifyRequest(kotlin/Function2<io.ktor.client.plugins/HttpRetryModifyRequestContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>) // io.ktor.client.plugins/HttpRequestRetryConfig.modifyRequest|modifyRequest(kotlin.Function2<io.ktor.client.plugins.HttpRetryModifyRequestContext,io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
    final fun noRetry() // io.ktor.client.plugins/HttpRequestRetryConfig.noRetry|noRetry(){}[0]
    final fun retryIf(kotlin/Int = ..., kotlin/Function3<io.ktor.client.plugins/HttpRetryShouldRetryContext, io.ktor.client.request/HttpRequest, io.ktor.client.statement/HttpResponse, kotlin/Boolean>) // io.ktor.client.plugins/HttpRequestRetryConfig.retryIf|retryIf(kotlin.Int;kotlin.Function3<io.ktor.client.plugins.HttpRetryShouldRetryContext,io.ktor.client.request.HttpRequest,io.ktor.client.statement.HttpResponse,kotlin.Boolean>){}[0]
    final fun retryOnException(kotlin/Int = ..., kotlin/Boolean = ...) // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnException|retryOnException(kotlin.Int;kotlin.Boolean){}[0]
    final fun retryOnExceptionIf(kotlin/Int = ..., kotlin/Function3<io.ktor.client.plugins/HttpRetryShouldRetryContext, io.ktor.client.request/HttpRequestBuilder, kotlin/Throwable, kotlin/Boolean>) // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnExceptionIf|retryOnExceptionIf(kotlin.Int;kotlin.Function3<io.ktor.client.plugins.HttpRetryShouldRetryContext,io.ktor.client.request.HttpRequestBuilder,kotlin.Throwable,kotlin.Boolean>){}[0]
    final fun retryOnExceptionOrServerErrors(kotlin/Int = ...) // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnExceptionOrServerErrors|retryOnExceptionOrServerErrors(kotlin.Int){}[0]
    final fun retryOnServerErrors(kotlin/Int = ...) // io.ktor.client.plugins/HttpRequestRetryConfig.retryOnServerErrors|retryOnServerErrors(kotlin.Int){}[0]
}

final class io.ktor.client.plugins/HttpRequestTimeoutException : kotlinx.coroutines/CopyableThrowable<io.ktor.client.plugins/HttpRequestTimeoutException>, kotlinx.io/IOException { // io.ktor.client.plugins/HttpRequestTimeoutException|null[0]
    constructor <init>(io.ktor.client.request/HttpRequestBuilder) // io.ktor.client.plugins/HttpRequestTimeoutException.<init>|<init>(io.ktor.client.request.HttpRequestBuilder){}[0]
    constructor <init>(io.ktor.client.request/HttpRequestData) // io.ktor.client.plugins/HttpRequestTimeoutException.<init>|<init>(io.ktor.client.request.HttpRequestData){}[0]
    constructor <init>(kotlin/String, kotlin/Long?, kotlin/Throwable? = ...) // io.ktor.client.plugins/HttpRequestTimeoutException.<init>|<init>(kotlin.String;kotlin.Long?;kotlin.Throwable?){}[0]

    final fun createCopy(): io.ktor.client.plugins/HttpRequestTimeoutException // io.ktor.client.plugins/HttpRequestTimeoutException.createCopy|createCopy(){}[0]
}

final class io.ktor.client.plugins/HttpRetryDelayContext { // io.ktor.client.plugins/HttpRetryDelayContext|null[0]
    final val cause // io.ktor.client.plugins/HttpRetryDelayContext.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.plugins/HttpRetryDelayContext.cause.<get-cause>|<get-cause>(){}[0]
    final val request // io.ktor.client.plugins/HttpRetryDelayContext.request|{}request[0]
        final fun <get-request>(): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.plugins/HttpRetryDelayContext.request.<get-request>|<get-request>(){}[0]
    final val response // io.ktor.client.plugins/HttpRetryDelayContext.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse? // io.ktor.client.plugins/HttpRetryDelayContext.response.<get-response>|<get-response>(){}[0]
}

final class io.ktor.client.plugins/HttpRetryEventData { // io.ktor.client.plugins/HttpRetryEventData|null[0]
    final val cause // io.ktor.client.plugins/HttpRetryEventData.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.plugins/HttpRetryEventData.cause.<get-cause>|<get-cause>(){}[0]
    final val request // io.ktor.client.plugins/HttpRetryEventData.request|{}request[0]
        final fun <get-request>(): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.plugins/HttpRetryEventData.request.<get-request>|<get-request>(){}[0]
    final val response // io.ktor.client.plugins/HttpRetryEventData.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse? // io.ktor.client.plugins/HttpRetryEventData.response.<get-response>|<get-response>(){}[0]
    final val retryCount // io.ktor.client.plugins/HttpRetryEventData.retryCount|{}retryCount[0]
        final fun <get-retryCount>(): kotlin/Int // io.ktor.client.plugins/HttpRetryEventData.retryCount.<get-retryCount>|<get-retryCount>(){}[0]
}

final class io.ktor.client.plugins/HttpRetryModifyRequestContext { // io.ktor.client.plugins/HttpRetryModifyRequestContext|null[0]
    final val cause // io.ktor.client.plugins/HttpRetryModifyRequestContext.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.client.plugins/HttpRetryModifyRequestContext.cause.<get-cause>|<get-cause>(){}[0]
    final val request // io.ktor.client.plugins/HttpRetryModifyRequestContext.request|{}request[0]
        final fun <get-request>(): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.plugins/HttpRetryModifyRequestContext.request.<get-request>|<get-request>(){}[0]
    final val response // io.ktor.client.plugins/HttpRetryModifyRequestContext.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse? // io.ktor.client.plugins/HttpRetryModifyRequestContext.response.<get-response>|<get-response>(){}[0]
    final val retryCount // io.ktor.client.plugins/HttpRetryModifyRequestContext.retryCount|{}retryCount[0]
        final fun <get-retryCount>(): kotlin/Int // io.ktor.client.plugins/HttpRetryModifyRequestContext.retryCount.<get-retryCount>|<get-retryCount>(){}[0]
}

final class io.ktor.client.plugins/HttpRetryShouldRetryContext { // io.ktor.client.plugins/HttpRetryShouldRetryContext|null[0]
    constructor <init>(kotlin/Int) // io.ktor.client.plugins/HttpRetryShouldRetryContext.<init>|<init>(kotlin.Int){}[0]

    final val retryCount // io.ktor.client.plugins/HttpRetryShouldRetryContext.retryCount|{}retryCount[0]
        final fun <get-retryCount>(): kotlin/Int // io.ktor.client.plugins/HttpRetryShouldRetryContext.retryCount.<get-retryCount>|<get-retryCount>(){}[0]
}

final class io.ktor.client.plugins/HttpSend { // io.ktor.client.plugins/HttpSend|null[0]
    final fun intercept(kotlin.coroutines/SuspendFunction2<io.ktor.client.plugins/Sender, io.ktor.client.request/HttpRequestBuilder, io.ktor.client.call/HttpClientCall>) // io.ktor.client.plugins/HttpSend.intercept|intercept(kotlin.coroutines.SuspendFunction2<io.ktor.client.plugins.Sender,io.ktor.client.request.HttpRequestBuilder,io.ktor.client.call.HttpClientCall>){}[0]

    final class Config { // io.ktor.client.plugins/HttpSend.Config|null[0]
        constructor <init>() // io.ktor.client.plugins/HttpSend.Config.<init>|<init>(){}[0]

        final var maxSendCount // io.ktor.client.plugins/HttpSend.Config.maxSendCount|{}maxSendCount[0]
            final fun <get-maxSendCount>(): kotlin/Int // io.ktor.client.plugins/HttpSend.Config.maxSendCount.<get-maxSendCount>|<get-maxSendCount>(){}[0]
            final fun <set-maxSendCount>(kotlin/Int) // io.ktor.client.plugins/HttpSend.Config.maxSendCount.<set-maxSendCount>|<set-maxSendCount>(kotlin.Int){}[0]
    }

    final object Plugin : io.ktor.client.plugins/HttpClientPlugin<io.ktor.client.plugins/HttpSend.Config, io.ktor.client.plugins/HttpSend> { // io.ktor.client.plugins/HttpSend.Plugin|null[0]
        final val key // io.ktor.client.plugins/HttpSend.Plugin.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins/HttpSend> // io.ktor.client.plugins/HttpSend.Plugin.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.client.plugins/HttpSend, io.ktor.client/HttpClient) // io.ktor.client.plugins/HttpSend.Plugin.install|install(io.ktor.client.plugins.HttpSend;io.ktor.client.HttpClient){}[0]
        final fun prepare(kotlin/Function1<io.ktor.client.plugins/HttpSend.Config, kotlin/Unit>): io.ktor.client.plugins/HttpSend // io.ktor.client.plugins/HttpSend.Plugin.prepare|prepare(kotlin.Function1<io.ktor.client.plugins.HttpSend.Config,kotlin.Unit>){}[0]
    }
}

final class io.ktor.client.plugins/HttpTimeoutConfig { // io.ktor.client.plugins/HttpTimeoutConfig|null[0]
    constructor <init>(kotlin/Long? = ..., kotlin/Long? = ..., kotlin/Long? = ...) // io.ktor.client.plugins/HttpTimeoutConfig.<init>|<init>(kotlin.Long?;kotlin.Long?;kotlin.Long?){}[0]

    final var connectTimeoutMillis // io.ktor.client.plugins/HttpTimeoutConfig.connectTimeoutMillis|{}connectTimeoutMillis[0]
        final fun <get-connectTimeoutMillis>(): kotlin/Long? // io.ktor.client.plugins/HttpTimeoutConfig.connectTimeoutMillis.<get-connectTimeoutMillis>|<get-connectTimeoutMillis>(){}[0]
        final fun <set-connectTimeoutMillis>(kotlin/Long?) // io.ktor.client.plugins/HttpTimeoutConfig.connectTimeoutMillis.<set-connectTimeoutMillis>|<set-connectTimeoutMillis>(kotlin.Long?){}[0]
    final var requestTimeoutMillis // io.ktor.client.plugins/HttpTimeoutConfig.requestTimeoutMillis|{}requestTimeoutMillis[0]
        final fun <get-requestTimeoutMillis>(): kotlin/Long? // io.ktor.client.plugins/HttpTimeoutConfig.requestTimeoutMillis.<get-requestTimeoutMillis>|<get-requestTimeoutMillis>(){}[0]
        final fun <set-requestTimeoutMillis>(kotlin/Long?) // io.ktor.client.plugins/HttpTimeoutConfig.requestTimeoutMillis.<set-requestTimeoutMillis>|<set-requestTimeoutMillis>(kotlin.Long?){}[0]
    final var socketTimeoutMillis // io.ktor.client.plugins/HttpTimeoutConfig.socketTimeoutMillis|{}socketTimeoutMillis[0]
        final fun <get-socketTimeoutMillis>(): kotlin/Long? // io.ktor.client.plugins/HttpTimeoutConfig.socketTimeoutMillis.<get-socketTimeoutMillis>|<get-socketTimeoutMillis>(){}[0]
        final fun <set-socketTimeoutMillis>(kotlin/Long?) // io.ktor.client.plugins/HttpTimeoutConfig.socketTimeoutMillis.<set-socketTimeoutMillis>|<set-socketTimeoutMillis>(kotlin.Long?){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins/HttpTimeoutConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins/HttpTimeoutConfig.hashCode|hashCode(){}[0]

    final object Companion { // io.ktor.client.plugins/HttpTimeoutConfig.Companion|null[0]
        final const val INFINITE_TIMEOUT_MS // io.ktor.client.plugins/HttpTimeoutConfig.Companion.INFINITE_TIMEOUT_MS|{}INFINITE_TIMEOUT_MS[0]
            final fun <get-INFINITE_TIMEOUT_MS>(): kotlin/Long // io.ktor.client.plugins/HttpTimeoutConfig.Companion.INFINITE_TIMEOUT_MS.<get-INFINITE_TIMEOUT_MS>|<get-INFINITE_TIMEOUT_MS>(){}[0]

        final val key // io.ktor.client.plugins/HttpTimeoutConfig.Companion.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.client.plugins/HttpTimeoutConfig> // io.ktor.client.plugins/HttpTimeoutConfig.Companion.key.<get-key>|<get-key>(){}[0]
    }
}

final class io.ktor.client.plugins/RedirectResponseException : io.ktor.client.plugins/ResponseException { // io.ktor.client.plugins/RedirectResponseException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin/String) // io.ktor.client.plugins/RedirectResponseException.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.String){}[0]

    final val message // io.ktor.client.plugins/RedirectResponseException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.plugins/RedirectResponseException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.plugins/SaveBodyPluginConfig { // io.ktor.client.plugins/SaveBodyPluginConfig|null[0]
    constructor <init>() // io.ktor.client.plugins/SaveBodyPluginConfig.<init>|<init>(){}[0]

    final var disabled // io.ktor.client.plugins/SaveBodyPluginConfig.disabled|{}disabled[0]
        final fun <get-disabled>(): kotlin/Boolean // io.ktor.client.plugins/SaveBodyPluginConfig.disabled.<get-disabled>|<get-disabled>(){}[0]
        final fun <set-disabled>(kotlin/Boolean) // io.ktor.client.plugins/SaveBodyPluginConfig.disabled.<set-disabled>|<set-disabled>(kotlin.Boolean){}[0]
}

final class io.ktor.client.plugins/SendCountExceedException : kotlin/IllegalStateException { // io.ktor.client.plugins/SendCountExceedException|null[0]
    constructor <init>(kotlin/String) // io.ktor.client.plugins/SendCountExceedException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.client.plugins/ServerResponseException : io.ktor.client.plugins/ResponseException { // io.ktor.client.plugins/ServerResponseException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin/String) // io.ktor.client.plugins/ServerResponseException.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.String){}[0]

    final val message // io.ktor.client.plugins/ServerResponseException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.client.plugins/ServerResponseException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.client.plugins/UserAgentConfig { // io.ktor.client.plugins/UserAgentConfig|null[0]
    constructor <init>(kotlin/String = ...) // io.ktor.client.plugins/UserAgentConfig.<init>|<init>(kotlin.String){}[0]

    final var agent // io.ktor.client.plugins/UserAgentConfig.agent|{}agent[0]
        final fun <get-agent>(): kotlin/String // io.ktor.client.plugins/UserAgentConfig.agent.<get-agent>|<get-agent>(){}[0]
        final fun <set-agent>(kotlin/String) // io.ktor.client.plugins/UserAgentConfig.agent.<set-agent>|<set-agent>(kotlin.String){}[0]
}

final class io.ktor.client.request.forms/ChannelProvider { // io.ktor.client.request.forms/ChannelProvider|null[0]
    constructor <init>(kotlin/Long? = ..., kotlin/Function0<io.ktor.utils.io/ByteReadChannel>) // io.ktor.client.request.forms/ChannelProvider.<init>|<init>(kotlin.Long?;kotlin.Function0<io.ktor.utils.io.ByteReadChannel>){}[0]

    final val block // io.ktor.client.request.forms/ChannelProvider.block|{}block[0]
        final fun <get-block>(): kotlin/Function0<io.ktor.utils.io/ByteReadChannel> // io.ktor.client.request.forms/ChannelProvider.block.<get-block>|<get-block>(){}[0]
    final val size // io.ktor.client.request.forms/ChannelProvider.size|{}size[0]
        final fun <get-size>(): kotlin/Long? // io.ktor.client.request.forms/ChannelProvider.size.<get-size>|<get-size>(){}[0]
}

final class io.ktor.client.request.forms/FormBuilder { // io.ktor.client.request.forms/FormBuilder|null[0]
    final fun <#A1: kotlin/Any> append(io.ktor.client.request.forms/FormPart<#A1>) // io.ktor.client.request.forms/FormBuilder.append|append(io.ktor.client.request.forms.FormPart<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> append(kotlin/String, #A1, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;0:0;io.ktor.http.Headers){0§<kotlin.Any>}[0]
    final fun append(kotlin/String, io.ktor.client.request.forms/ChannelProvider, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;io.ktor.client.request.forms.ChannelProvider;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, io.ktor.client.request.forms/InputProvider, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;io.ktor.client.request.forms.InputProvider;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin.collections/Iterable<kotlin/String>, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.collections.Iterable<kotlin.String>;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin/Array<kotlin/String>, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.Array<kotlin.String>;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin/Boolean, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.Boolean;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin/ByteArray, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.ByteArray;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin/Number, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.Number;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlin/String, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlin.String;io.ktor.http.Headers){}[0]
    final fun append(kotlin/String, kotlinx.io/Source, io.ktor.http/Headers = ...) // io.ktor.client.request.forms/FormBuilder.append|append(kotlin.String;kotlinx.io.Source;io.ktor.http.Headers){}[0]
    final fun appendInput(kotlin/String, io.ktor.http/Headers = ..., kotlin/Long? = ..., kotlin/Function0<kotlinx.io/Source>) // io.ktor.client.request.forms/FormBuilder.appendInput|appendInput(kotlin.String;io.ktor.http.Headers;kotlin.Long?;kotlin.Function0<kotlinx.io.Source>){}[0]
}

final class io.ktor.client.request.forms/FormDataContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // io.ktor.client.request.forms/FormDataContent|null[0]
    constructor <init>(io.ktor.http/Parameters) // io.ktor.client.request.forms/FormDataContent.<init>|<init>(io.ktor.http.Parameters){}[0]

    final val contentLength // io.ktor.client.request.forms/FormDataContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // io.ktor.client.request.forms/FormDataContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // io.ktor.client.request.forms/FormDataContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // io.ktor.client.request.forms/FormDataContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val formData // io.ktor.client.request.forms/FormDataContent.formData|{}formData[0]
        final fun <get-formData>(): io.ktor.http/Parameters // io.ktor.client.request.forms/FormDataContent.formData.<get-formData>|<get-formData>(){}[0]

    final fun bytes(): kotlin/ByteArray // io.ktor.client.request.forms/FormDataContent.bytes|bytes(){}[0]
}

final class io.ktor.client.request.forms/InputProvider { // io.ktor.client.request.forms/InputProvider|null[0]
    constructor <init>(kotlin/Long? = ..., kotlin/Function0<kotlinx.io/Source>) // io.ktor.client.request.forms/InputProvider.<init>|<init>(kotlin.Long?;kotlin.Function0<kotlinx.io.Source>){}[0]

    final val block // io.ktor.client.request.forms/InputProvider.block|{}block[0]
        final fun <get-block>(): kotlin/Function0<kotlinx.io/Source> // io.ktor.client.request.forms/InputProvider.block.<get-block>|<get-block>(){}[0]
    final val size // io.ktor.client.request.forms/InputProvider.size|{}size[0]
        final fun <get-size>(): kotlin/Long? // io.ktor.client.request.forms/InputProvider.size.<get-size>|<get-size>(){}[0]
}

final class io.ktor.client.request.forms/MultiPartFormDataContent : io.ktor.http.content/OutgoingContent.WriteChannelContent { // io.ktor.client.request.forms/MultiPartFormDataContent|null[0]
    constructor <init>(kotlin.collections/List<io.ktor.http.content/PartData>, kotlin/String = ..., io.ktor.http/ContentType = ...) // io.ktor.client.request.forms/MultiPartFormDataContent.<init>|<init>(kotlin.collections.List<io.ktor.http.content.PartData>;kotlin.String;io.ktor.http.ContentType){}[0]

    final val boundary // io.ktor.client.request.forms/MultiPartFormDataContent.boundary|{}boundary[0]
        final fun <get-boundary>(): kotlin/String // io.ktor.client.request.forms/MultiPartFormDataContent.boundary.<get-boundary>|<get-boundary>(){}[0]
    final val contentType // io.ktor.client.request.forms/MultiPartFormDataContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // io.ktor.client.request.forms/MultiPartFormDataContent.contentType.<get-contentType>|<get-contentType>(){}[0]

    final var contentLength // io.ktor.client.request.forms/MultiPartFormDataContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long? // io.ktor.client.request.forms/MultiPartFormDataContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]

    final suspend fun writeTo(io.ktor.utils.io/ByteWriteChannel) // io.ktor.client.request.forms/MultiPartFormDataContent.writeTo|writeTo(io.ktor.utils.io.ByteWriteChannel){}[0]
}

final class io.ktor.client.request/HttpRequestBuilder : io.ktor.http/HttpMessageBuilder { // io.ktor.client.request/HttpRequestBuilder|null[0]
    constructor <init>() // io.ktor.client.request/HttpRequestBuilder.<init>|<init>(){}[0]

    final val attributes // io.ktor.client.request/HttpRequestBuilder.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.request/HttpRequestBuilder.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val headers // io.ktor.client.request/HttpRequestBuilder.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/HeadersBuilder // io.ktor.client.request/HttpRequestBuilder.headers.<get-headers>|<get-headers>(){}[0]
    final val url // io.ktor.client.request/HttpRequestBuilder.url|{}url[0]
        final fun <get-url>(): io.ktor.http/URLBuilder // io.ktor.client.request/HttpRequestBuilder.url.<get-url>|<get-url>(){}[0]

    final var body // io.ktor.client.request/HttpRequestBuilder.body|{}body[0]
        final fun <get-body>(): kotlin/Any // io.ktor.client.request/HttpRequestBuilder.body.<get-body>|<get-body>(){}[0]
        final fun <set-body>(kotlin/Any) // io.ktor.client.request/HttpRequestBuilder.body.<set-body>|<set-body>(kotlin.Any){}[0]
    final var bodyType // io.ktor.client.request/HttpRequestBuilder.bodyType|{}bodyType[0]
        final fun <get-bodyType>(): io.ktor.util.reflect/TypeInfo? // io.ktor.client.request/HttpRequestBuilder.bodyType.<get-bodyType>|<get-bodyType>(){}[0]
        final fun <set-bodyType>(io.ktor.util.reflect/TypeInfo?) // io.ktor.client.request/HttpRequestBuilder.bodyType.<set-bodyType>|<set-bodyType>(io.ktor.util.reflect.TypeInfo?){}[0]
    final var executionContext // io.ktor.client.request/HttpRequestBuilder.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): kotlinx.coroutines/Job // io.ktor.client.request/HttpRequestBuilder.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final var method // io.ktor.client.request/HttpRequestBuilder.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.client.request/HttpRequestBuilder.method.<get-method>|<get-method>(){}[0]
        final fun <set-method>(io.ktor.http/HttpMethod) // io.ktor.client.request/HttpRequestBuilder.method.<set-method>|<set-method>(io.ktor.http.HttpMethod){}[0]

    final fun <#A1: kotlin/Any> getCapabilityOrNull(io.ktor.client.engine/HttpClientEngineCapability<#A1>): #A1? // io.ktor.client.request/HttpRequestBuilder.getCapabilityOrNull|getCapabilityOrNull(io.ktor.client.engine.HttpClientEngineCapability<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> setCapability(io.ktor.client.engine/HttpClientEngineCapability<#A1>, #A1) // io.ktor.client.request/HttpRequestBuilder.setCapability|setCapability(io.ktor.client.engine.HttpClientEngineCapability<0:0>;0:0){0§<kotlin.Any>}[0]
    final fun build(): io.ktor.client.request/HttpRequestData // io.ktor.client.request/HttpRequestBuilder.build|build(){}[0]
    final fun setAttributes(kotlin/Function1<io.ktor.util/Attributes, kotlin/Unit>) // io.ktor.client.request/HttpRequestBuilder.setAttributes|setAttributes(kotlin.Function1<io.ktor.util.Attributes,kotlin.Unit>){}[0]
    final fun takeFrom(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/HttpRequestBuilder.takeFrom|takeFrom(io.ktor.client.request.HttpRequestBuilder){}[0]
    final fun takeFromWithExecutionContext(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/HttpRequestBuilder.takeFromWithExecutionContext|takeFromWithExecutionContext(io.ktor.client.request.HttpRequestBuilder){}[0]
    final fun url(kotlin/Function2<io.ktor.http/URLBuilder, io.ktor.http/URLBuilder, kotlin/Unit>) // io.ktor.client.request/HttpRequestBuilder.url|url(kotlin.Function2<io.ktor.http.URLBuilder,io.ktor.http.URLBuilder,kotlin.Unit>){}[0]

    final object Companion // io.ktor.client.request/HttpRequestBuilder.Companion|null[0]
}

final class io.ktor.client.request/HttpRequestData { // io.ktor.client.request/HttpRequestData|null[0]
    constructor <init>(io.ktor.http/Url, io.ktor.http/HttpMethod, io.ktor.http/Headers, io.ktor.http.content/OutgoingContent, kotlinx.coroutines/Job, io.ktor.util/Attributes) // io.ktor.client.request/HttpRequestData.<init>|<init>(io.ktor.http.Url;io.ktor.http.HttpMethod;io.ktor.http.Headers;io.ktor.http.content.OutgoingContent;kotlinx.coroutines.Job;io.ktor.util.Attributes){}[0]

    final val attributes // io.ktor.client.request/HttpRequestData.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.request/HttpRequestData.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val body // io.ktor.client.request/HttpRequestData.body|{}body[0]
        final fun <get-body>(): io.ktor.http.content/OutgoingContent // io.ktor.client.request/HttpRequestData.body.<get-body>|<get-body>(){}[0]
    final val executionContext // io.ktor.client.request/HttpRequestData.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): kotlinx.coroutines/Job // io.ktor.client.request/HttpRequestData.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val headers // io.ktor.client.request/HttpRequestData.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.request/HttpRequestData.headers.<get-headers>|<get-headers>(){}[0]
    final val method // io.ktor.client.request/HttpRequestData.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.client.request/HttpRequestData.method.<get-method>|<get-method>(){}[0]
    final val url // io.ktor.client.request/HttpRequestData.url|{}url[0]
        final fun <get-url>(): io.ktor.http/Url // io.ktor.client.request/HttpRequestData.url.<get-url>|<get-url>(){}[0]

    final fun <#A1: kotlin/Any?> getCapabilityOrNull(io.ktor.client.engine/HttpClientEngineCapability<#A1>): #A1? // io.ktor.client.request/HttpRequestData.getCapabilityOrNull|getCapabilityOrNull(io.ktor.client.engine.HttpClientEngineCapability<0:0>){0§<kotlin.Any?>}[0]
    final fun toString(): kotlin/String // io.ktor.client.request/HttpRequestData.toString|toString(){}[0]
}

final class io.ktor.client.request/HttpRequestPipeline : io.ktor.util.pipeline/Pipeline<kotlin/Any, io.ktor.client.request/HttpRequestBuilder> { // io.ktor.client.request/HttpRequestPipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.client.request/HttpRequestPipeline.<init>|<init>(kotlin.Boolean){}[0]

    final val developmentMode // io.ktor.client.request/HttpRequestPipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.client.request/HttpRequestPipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.client.request/HttpRequestPipeline.Phases|null[0]
        final val Before // io.ktor.client.request/HttpRequestPipeline.Phases.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpRequestPipeline.Phases.Before.<get-Before>|<get-Before>(){}[0]
        final val Render // io.ktor.client.request/HttpRequestPipeline.Phases.Render|{}Render[0]
            final fun <get-Render>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpRequestPipeline.Phases.Render.<get-Render>|<get-Render>(){}[0]
        final val Send // io.ktor.client.request/HttpRequestPipeline.Phases.Send|{}Send[0]
            final fun <get-Send>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpRequestPipeline.Phases.Send.<get-Send>|<get-Send>(){}[0]
        final val State // io.ktor.client.request/HttpRequestPipeline.Phases.State|{}State[0]
            final fun <get-State>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpRequestPipeline.Phases.State.<get-State>|<get-State>(){}[0]
        final val Transform // io.ktor.client.request/HttpRequestPipeline.Phases.Transform|{}Transform[0]
            final fun <get-Transform>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpRequestPipeline.Phases.Transform.<get-Transform>|<get-Transform>(){}[0]
    }
}

final class io.ktor.client.request/HttpResponseData { // io.ktor.client.request/HttpResponseData|null[0]
    constructor <init>(io.ktor.http/HttpStatusCode, io.ktor.util.date/GMTDate, io.ktor.http/Headers, io.ktor.http/HttpProtocolVersion, kotlin/Any, kotlin.coroutines/CoroutineContext) // io.ktor.client.request/HttpResponseData.<init>|<init>(io.ktor.http.HttpStatusCode;io.ktor.util.date.GMTDate;io.ktor.http.Headers;io.ktor.http.HttpProtocolVersion;kotlin.Any;kotlin.coroutines.CoroutineContext){}[0]

    final val body // io.ktor.client.request/HttpResponseData.body|{}body[0]
        final fun <get-body>(): kotlin/Any // io.ktor.client.request/HttpResponseData.body.<get-body>|<get-body>(){}[0]
    final val callContext // io.ktor.client.request/HttpResponseData.callContext|{}callContext[0]
        final fun <get-callContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.request/HttpResponseData.callContext.<get-callContext>|<get-callContext>(){}[0]
    final val headers // io.ktor.client.request/HttpResponseData.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.request/HttpResponseData.headers.<get-headers>|<get-headers>(){}[0]
    final val requestTime // io.ktor.client.request/HttpResponseData.requestTime|{}requestTime[0]
        final fun <get-requestTime>(): io.ktor.util.date/GMTDate // io.ktor.client.request/HttpResponseData.requestTime.<get-requestTime>|<get-requestTime>(){}[0]
    final val responseTime // io.ktor.client.request/HttpResponseData.responseTime|{}responseTime[0]
        final fun <get-responseTime>(): io.ktor.util.date/GMTDate // io.ktor.client.request/HttpResponseData.responseTime.<get-responseTime>|<get-responseTime>(){}[0]
    final val statusCode // io.ktor.client.request/HttpResponseData.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): io.ktor.http/HttpStatusCode // io.ktor.client.request/HttpResponseData.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
    final val version // io.ktor.client.request/HttpResponseData.version|{}version[0]
        final fun <get-version>(): io.ktor.http/HttpProtocolVersion // io.ktor.client.request/HttpResponseData.version.<get-version>|<get-version>(){}[0]

    final fun toString(): kotlin/String // io.ktor.client.request/HttpResponseData.toString|toString(){}[0]
}

final class io.ktor.client.request/HttpSendPipeline : io.ktor.util.pipeline/Pipeline<kotlin/Any, io.ktor.client.request/HttpRequestBuilder> { // io.ktor.client.request/HttpSendPipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.client.request/HttpSendPipeline.<init>|<init>(kotlin.Boolean){}[0]

    final val developmentMode // io.ktor.client.request/HttpSendPipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.client.request/HttpSendPipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.client.request/HttpSendPipeline.Phases|null[0]
        final val Before // io.ktor.client.request/HttpSendPipeline.Phases.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpSendPipeline.Phases.Before.<get-Before>|<get-Before>(){}[0]
        final val Engine // io.ktor.client.request/HttpSendPipeline.Phases.Engine|{}Engine[0]
            final fun <get-Engine>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpSendPipeline.Phases.Engine.<get-Engine>|<get-Engine>(){}[0]
        final val Monitoring // io.ktor.client.request/HttpSendPipeline.Phases.Monitoring|{}Monitoring[0]
            final fun <get-Monitoring>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpSendPipeline.Phases.Monitoring.<get-Monitoring>|<get-Monitoring>(){}[0]
        final val Receive // io.ktor.client.request/HttpSendPipeline.Phases.Receive|{}Receive[0]
            final fun <get-Receive>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpSendPipeline.Phases.Receive.<get-Receive>|<get-Receive>(){}[0]
        final val State // io.ktor.client.request/HttpSendPipeline.Phases.State|{}State[0]
            final fun <get-State>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.request/HttpSendPipeline.Phases.State.<get-State>|<get-State>(){}[0]
    }
}

final class io.ktor.client.request/SSEClientResponseAdapter : io.ktor.client.request/ResponseAdapter { // io.ktor.client.request/SSEClientResponseAdapter|null[0]
    constructor <init>() // io.ktor.client.request/SSEClientResponseAdapter.<init>|<init>(){}[0]

    final fun adapt(io.ktor.client.request/HttpRequestData, io.ktor.http/HttpStatusCode, io.ktor.http/Headers, io.ktor.utils.io/ByteReadChannel, io.ktor.http.content/OutgoingContent, kotlin.coroutines/CoroutineContext): kotlin/Any? // io.ktor.client.request/SSEClientResponseAdapter.adapt|adapt(io.ktor.client.request.HttpRequestData;io.ktor.http.HttpStatusCode;io.ktor.http.Headers;io.ktor.utils.io.ByteReadChannel;io.ktor.http.content.OutgoingContent;kotlin.coroutines.CoroutineContext){}[0]
}

final class io.ktor.client.statement/DefaultHttpResponse : io.ktor.client.statement/HttpResponse { // io.ktor.client.statement/DefaultHttpResponse|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.client.request/HttpResponseData) // io.ktor.client.statement/DefaultHttpResponse.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.client.request.HttpResponseData){}[0]

    final val call // io.ktor.client.statement/DefaultHttpResponse.call|{}call[0]
        final fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.statement/DefaultHttpResponse.call.<get-call>|<get-call>(){}[0]
    final val coroutineContext // io.ktor.client.statement/DefaultHttpResponse.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.statement/DefaultHttpResponse.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val headers // io.ktor.client.statement/DefaultHttpResponse.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.statement/DefaultHttpResponse.headers.<get-headers>|<get-headers>(){}[0]
    final val rawContent // io.ktor.client.statement/DefaultHttpResponse.rawContent|{}rawContent[0]
        final fun <get-rawContent>(): io.ktor.utils.io/ByteReadChannel // io.ktor.client.statement/DefaultHttpResponse.rawContent.<get-rawContent>|<get-rawContent>(){}[0]
    final val requestTime // io.ktor.client.statement/DefaultHttpResponse.requestTime|{}requestTime[0]
        final fun <get-requestTime>(): io.ktor.util.date/GMTDate // io.ktor.client.statement/DefaultHttpResponse.requestTime.<get-requestTime>|<get-requestTime>(){}[0]
    final val responseTime // io.ktor.client.statement/DefaultHttpResponse.responseTime|{}responseTime[0]
        final fun <get-responseTime>(): io.ktor.util.date/GMTDate // io.ktor.client.statement/DefaultHttpResponse.responseTime.<get-responseTime>|<get-responseTime>(){}[0]
    final val status // io.ktor.client.statement/DefaultHttpResponse.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode // io.ktor.client.statement/DefaultHttpResponse.status.<get-status>|<get-status>(){}[0]
    final val version // io.ktor.client.statement/DefaultHttpResponse.version|{}version[0]
        final fun <get-version>(): io.ktor.http/HttpProtocolVersion // io.ktor.client.statement/DefaultHttpResponse.version.<get-version>|<get-version>(){}[0]
}

final class io.ktor.client.statement/HttpReceivePipeline : io.ktor.util.pipeline/Pipeline<io.ktor.client.statement/HttpResponse, kotlin/Unit> { // io.ktor.client.statement/HttpReceivePipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.client.statement/HttpReceivePipeline.<init>|<init>(kotlin.Boolean){}[0]

    final val developmentMode // io.ktor.client.statement/HttpReceivePipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.client.statement/HttpReceivePipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.client.statement/HttpReceivePipeline.Phases|null[0]
        final val After // io.ktor.client.statement/HttpReceivePipeline.Phases.After|{}After[0]
            final fun <get-After>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpReceivePipeline.Phases.After.<get-After>|<get-After>(){}[0]
        final val Before // io.ktor.client.statement/HttpReceivePipeline.Phases.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpReceivePipeline.Phases.Before.<get-Before>|<get-Before>(){}[0]
        final val State // io.ktor.client.statement/HttpReceivePipeline.Phases.State|{}State[0]
            final fun <get-State>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpReceivePipeline.Phases.State.<get-State>|<get-State>(){}[0]
    }
}

final class io.ktor.client.statement/HttpResponseContainer { // io.ktor.client.statement/HttpResponseContainer|null[0]
    constructor <init>(io.ktor.util.reflect/TypeInfo, kotlin/Any) // io.ktor.client.statement/HttpResponseContainer.<init>|<init>(io.ktor.util.reflect.TypeInfo;kotlin.Any){}[0]

    final val expectedType // io.ktor.client.statement/HttpResponseContainer.expectedType|{}expectedType[0]
        final fun <get-expectedType>(): io.ktor.util.reflect/TypeInfo // io.ktor.client.statement/HttpResponseContainer.expectedType.<get-expectedType>|<get-expectedType>(){}[0]
    final val response // io.ktor.client.statement/HttpResponseContainer.response|{}response[0]
        final fun <get-response>(): kotlin/Any // io.ktor.client.statement/HttpResponseContainer.response.<get-response>|<get-response>(){}[0]

    final fun component1(): io.ktor.util.reflect/TypeInfo // io.ktor.client.statement/HttpResponseContainer.component1|component1(){}[0]
    final fun component2(): kotlin/Any // io.ktor.client.statement/HttpResponseContainer.component2|component2(){}[0]
    final fun copy(io.ktor.util.reflect/TypeInfo = ..., kotlin/Any = ...): io.ktor.client.statement/HttpResponseContainer // io.ktor.client.statement/HttpResponseContainer.copy|copy(io.ktor.util.reflect.TypeInfo;kotlin.Any){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.statement/HttpResponseContainer.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.statement/HttpResponseContainer.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.statement/HttpResponseContainer.toString|toString(){}[0]
}

final class io.ktor.client.statement/HttpResponsePipeline : io.ktor.util.pipeline/Pipeline<io.ktor.client.statement/HttpResponseContainer, io.ktor.client.call/HttpClientCall> { // io.ktor.client.statement/HttpResponsePipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.client.statement/HttpResponsePipeline.<init>|<init>(kotlin.Boolean){}[0]

    final val developmentMode // io.ktor.client.statement/HttpResponsePipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.client.statement/HttpResponsePipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.client.statement/HttpResponsePipeline.Phases|null[0]
        final val After // io.ktor.client.statement/HttpResponsePipeline.Phases.After|{}After[0]
            final fun <get-After>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpResponsePipeline.Phases.After.<get-After>|<get-After>(){}[0]
        final val Parse // io.ktor.client.statement/HttpResponsePipeline.Phases.Parse|{}Parse[0]
            final fun <get-Parse>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpResponsePipeline.Phases.Parse.<get-Parse>|<get-Parse>(){}[0]
        final val Receive // io.ktor.client.statement/HttpResponsePipeline.Phases.Receive|{}Receive[0]
            final fun <get-Receive>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpResponsePipeline.Phases.Receive.<get-Receive>|<get-Receive>(){}[0]
        final val State // io.ktor.client.statement/HttpResponsePipeline.Phases.State|{}State[0]
            final fun <get-State>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpResponsePipeline.Phases.State.<get-State>|<get-State>(){}[0]
        final val Transform // io.ktor.client.statement/HttpResponsePipeline.Phases.Transform|{}Transform[0]
            final fun <get-Transform>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.client.statement/HttpResponsePipeline.Phases.Transform.<get-Transform>|<get-Transform>(){}[0]
    }
}

final class io.ktor.client.statement/HttpStatement { // io.ktor.client.statement/HttpStatement|null[0]
    constructor <init>(io.ktor.client.request/HttpRequestBuilder, io.ktor.client/HttpClient) // io.ktor.client.statement/HttpStatement.<init>|<init>(io.ktor.client.request.HttpRequestBuilder;io.ktor.client.HttpClient){}[0]

    final val client // io.ktor.client.statement/HttpStatement.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient // io.ktor.client.statement/HttpStatement.client.<get-client>|<get-client>(){}[0]

    final fun toString(): kotlin/String // io.ktor.client.statement/HttpStatement.toString|toString(){}[0]
    final suspend fun (io.ktor.client.statement/HttpResponse).cleanup() // io.ktor.client.statement/HttpStatement.cleanup|cleanup@io.ktor.client.statement.HttpResponse(){}[0]
    final suspend fun <#A1: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction1<io.ktor.client.statement/HttpResponse, #A1>): #A1 // io.ktor.client.statement/HttpStatement.execute|execute(kotlin.coroutines.SuspendFunction1<io.ktor.client.statement.HttpResponse,0:0>){0§<kotlin.Any?>}[0]
    final suspend fun execute(): io.ktor.client.statement/HttpResponse // io.ktor.client.statement/HttpStatement.execute|execute(){}[0]
    final suspend fun fetchResponse(): io.ktor.client.statement/HttpResponse // io.ktor.client.statement/HttpStatement.fetchResponse|fetchResponse(){}[0]
    final suspend fun fetchStreamingResponse(): io.ktor.client.statement/HttpResponse // io.ktor.client.statement/HttpStatement.fetchStreamingResponse|fetchStreamingResponse(){}[0]
    final suspend inline fun <#A1: reified kotlin/Any?, #B1: kotlin/Any?> body(crossinline kotlin.coroutines/SuspendFunction1<#A1, #B1>): #B1 // io.ktor.client.statement/HttpStatement.body|body(kotlin.coroutines.SuspendFunction1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend inline fun <#A1: reified kotlin/Any?> body(): #A1 // io.ktor.client.statement/HttpStatement.body|body(){0§<kotlin.Any?>}[0]
}

final class io.ktor.client.utils/HttpResponseReceiveFail { // io.ktor.client.utils/HttpResponseReceiveFail|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin/Throwable) // io.ktor.client.utils/HttpResponseReceiveFail.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.Throwable){}[0]

    final val cause // io.ktor.client.utils/HttpResponseReceiveFail.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable // io.ktor.client.utils/HttpResponseReceiveFail.cause.<get-cause>|<get-cause>(){}[0]
    final val response // io.ktor.client.utils/HttpResponseReceiveFail.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse // io.ktor.client.utils/HttpResponseReceiveFail.response.<get-response>|<get-response>(){}[0]
}

final class io.ktor.client/HttpClient : io.ktor.utils.io.core/Closeable, kotlinx.coroutines/CoroutineScope { // io.ktor.client/HttpClient|null[0]
    constructor <init>(io.ktor.client.engine/HttpClientEngine, io.ktor.client/HttpClientConfig<out io.ktor.client.engine/HttpClientEngineConfig> = ...) // io.ktor.client/HttpClient.<init>|<init>(io.ktor.client.engine.HttpClientEngine;io.ktor.client.HttpClientConfig<out|io.ktor.client.engine.HttpClientEngineConfig>){}[0]

    final val attributes // io.ktor.client/HttpClient.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client/HttpClient.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val coroutineContext // io.ktor.client/HttpClient.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client/HttpClient.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val engine // io.ktor.client/HttpClient.engine|{}engine[0]
        final fun <get-engine>(): io.ktor.client.engine/HttpClientEngine // io.ktor.client/HttpClient.engine.<get-engine>|<get-engine>(){}[0]
    final val engineConfig // io.ktor.client/HttpClient.engineConfig|{}engineConfig[0]
        final fun <get-engineConfig>(): io.ktor.client.engine/HttpClientEngineConfig // io.ktor.client/HttpClient.engineConfig.<get-engineConfig>|<get-engineConfig>(){}[0]
    final val monitor // io.ktor.client/HttpClient.monitor|{}monitor[0]
        final fun <get-monitor>(): io.ktor.events/Events // io.ktor.client/HttpClient.monitor.<get-monitor>|<get-monitor>(){}[0]
    final val receivePipeline // io.ktor.client/HttpClient.receivePipeline|{}receivePipeline[0]
        final fun <get-receivePipeline>(): io.ktor.client.statement/HttpReceivePipeline // io.ktor.client/HttpClient.receivePipeline.<get-receivePipeline>|<get-receivePipeline>(){}[0]
    final val requestPipeline // io.ktor.client/HttpClient.requestPipeline|{}requestPipeline[0]
        final fun <get-requestPipeline>(): io.ktor.client.request/HttpRequestPipeline // io.ktor.client/HttpClient.requestPipeline.<get-requestPipeline>|<get-requestPipeline>(){}[0]
    final val responsePipeline // io.ktor.client/HttpClient.responsePipeline|{}responsePipeline[0]
        final fun <get-responsePipeline>(): io.ktor.client.statement/HttpResponsePipeline // io.ktor.client/HttpClient.responsePipeline.<get-responsePipeline>|<get-responsePipeline>(){}[0]
    final val sendPipeline // io.ktor.client/HttpClient.sendPipeline|{}sendPipeline[0]
        final fun <get-sendPipeline>(): io.ktor.client.request/HttpSendPipeline // io.ktor.client/HttpClient.sendPipeline.<get-sendPipeline>|<get-sendPipeline>(){}[0]

    final fun close() // io.ktor.client/HttpClient.close|close(){}[0]
    final fun config(kotlin/Function1<io.ktor.client/HttpClientConfig<*>, kotlin/Unit>): io.ktor.client/HttpClient // io.ktor.client/HttpClient.config|config(kotlin.Function1<io.ktor.client.HttpClientConfig<*>,kotlin.Unit>){}[0]
    final fun isSupported(io.ktor.client.engine/HttpClientEngineCapability<*>): kotlin/Boolean // io.ktor.client/HttpClient.isSupported|isSupported(io.ktor.client.engine.HttpClientEngineCapability<*>){}[0]
    final fun toString(): kotlin/String // io.ktor.client/HttpClient.toString|toString(){}[0]
}

open class io.ktor.client.call/HttpClientCall : kotlinx.coroutines/CoroutineScope { // io.ktor.client.call/HttpClientCall|null[0]
    constructor <init>(io.ktor.client/HttpClient) // io.ktor.client.call/HttpClientCall.<init>|<init>(io.ktor.client.HttpClient){}[0]
    constructor <init>(io.ktor.client/HttpClient, io.ktor.client.request/HttpRequestData, io.ktor.client.request/HttpResponseData) // io.ktor.client.call/HttpClientCall.<init>|<init>(io.ktor.client.HttpClient;io.ktor.client.request.HttpRequestData;io.ktor.client.request.HttpResponseData){}[0]

    final val attributes // io.ktor.client.call/HttpClientCall.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.call/HttpClientCall.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val client // io.ktor.client.call/HttpClientCall.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient // io.ktor.client.call/HttpClientCall.client.<get-client>|<get-client>(){}[0]
    open val allowDoubleReceive // io.ktor.client.call/HttpClientCall.allowDoubleReceive|{}allowDoubleReceive[0]
        open fun <get-allowDoubleReceive>(): kotlin/Boolean // io.ktor.client.call/HttpClientCall.allowDoubleReceive.<get-allowDoubleReceive>|<get-allowDoubleReceive>(){}[0]
    open val coroutineContext // io.ktor.client.call/HttpClientCall.coroutineContext|{}coroutineContext[0]
        open fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.call/HttpClientCall.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

    final var request // io.ktor.client.call/HttpClientCall.request|{}request[0]
        final fun <get-request>(): io.ktor.client.request/HttpRequest // io.ktor.client.call/HttpClientCall.request.<get-request>|<get-request>(){}[0]
        final fun <set-request>(io.ktor.client.request/HttpRequest) // io.ktor.client.call/HttpClientCall.request.<set-request>|<set-request>(io.ktor.client.request.HttpRequest){}[0]
    final var response // io.ktor.client.call/HttpClientCall.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse // io.ktor.client.call/HttpClientCall.response.<get-response>|<get-response>(){}[0]
        final fun <set-response>(io.ktor.client.statement/HttpResponse) // io.ktor.client.call/HttpClientCall.response.<set-response>|<set-response>(io.ktor.client.statement.HttpResponse){}[0]

    final suspend fun body(io.ktor.util.reflect/TypeInfo): kotlin/Any // io.ktor.client.call/HttpClientCall.body|body(io.ktor.util.reflect.TypeInfo){}[0]
    final suspend fun bodyNullable(io.ktor.util.reflect/TypeInfo): kotlin/Any? // io.ktor.client.call/HttpClientCall.bodyNullable|bodyNullable(io.ktor.util.reflect.TypeInfo){}[0]
    open fun toString(): kotlin/String // io.ktor.client.call/HttpClientCall.toString|toString(){}[0]
    open suspend fun getResponseContent(): io.ktor.utils.io/ByteReadChannel // io.ktor.client.call/HttpClientCall.getResponseContent|getResponseContent(){}[0]

    final object Companion // io.ktor.client.call/HttpClientCall.Companion|null[0]
}

open class io.ktor.client.engine/HttpClientEngineConfig { // io.ktor.client.engine/HttpClientEngineConfig|null[0]
    constructor <init>() // io.ktor.client.engine/HttpClientEngineConfig.<init>|<init>(){}[0]

    final var dispatcher // io.ktor.client.engine/HttpClientEngineConfig.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher? // io.ktor.client.engine/HttpClientEngineConfig.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final fun <set-dispatcher>(kotlinx.coroutines/CoroutineDispatcher?) // io.ktor.client.engine/HttpClientEngineConfig.dispatcher.<set-dispatcher>|<set-dispatcher>(kotlinx.coroutines.CoroutineDispatcher?){}[0]
    final var pipelining // io.ktor.client.engine/HttpClientEngineConfig.pipelining|{}pipelining[0]
        final fun <get-pipelining>(): kotlin/Boolean // io.ktor.client.engine/HttpClientEngineConfig.pipelining.<get-pipelining>|<get-pipelining>(){}[0]
        final fun <set-pipelining>(kotlin/Boolean) // io.ktor.client.engine/HttpClientEngineConfig.pipelining.<set-pipelining>|<set-pipelining>(kotlin.Boolean){}[0]
    final var proxy // io.ktor.client.engine/HttpClientEngineConfig.proxy|{}proxy[0]
        final fun <get-proxy>(): io.ktor.client.engine/ProxyConfig? // io.ktor.client.engine/HttpClientEngineConfig.proxy.<get-proxy>|<get-proxy>(){}[0]
        final fun <set-proxy>(io.ktor.client.engine/ProxyConfig?) // io.ktor.client.engine/HttpClientEngineConfig.proxy.<set-proxy>|<set-proxy>(io.ktor.client.engine.ProxyConfig?){}[0]
    final var threadsCount // io.ktor.client.engine/HttpClientEngineConfig.threadsCount|{}threadsCount[0]
        final fun <get-threadsCount>(): kotlin/Int // io.ktor.client.engine/HttpClientEngineConfig.threadsCount.<get-threadsCount>|<get-threadsCount>(){}[0]
        final fun <set-threadsCount>(kotlin/Int) // io.ktor.client.engine/HttpClientEngineConfig.threadsCount.<set-threadsCount>|<set-threadsCount>(kotlin.Int){}[0]
}

open class io.ktor.client.network.sockets/InterruptedIOException : kotlinx.io/IOException { // io.ktor.client.network.sockets/InterruptedIOException|null[0]
    constructor <init>() // io.ktor.client.network.sockets/InterruptedIOException.<init>|<init>(){}[0]
}

open class io.ktor.client.plugins/ResponseException : kotlin/IllegalStateException { // io.ktor.client.plugins/ResponseException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, kotlin/String) // io.ktor.client.plugins/ResponseException.<init>|<init>(io.ktor.client.statement.HttpResponse;kotlin.String){}[0]

    final val response // io.ktor.client.plugins/ResponseException.response|{}response[0]
        final fun <get-response>(): io.ktor.client.statement/HttpResponse // io.ktor.client.plugins/ResponseException.response.<get-response>|<get-response>(){}[0]
}

open class io.ktor.client.request/DefaultHttpRequest : io.ktor.client.request/HttpRequest { // io.ktor.client.request/DefaultHttpRequest|null[0]
    constructor <init>(io.ktor.client.call/HttpClientCall, io.ktor.client.request/HttpRequestData) // io.ktor.client.request/DefaultHttpRequest.<init>|<init>(io.ktor.client.call.HttpClientCall;io.ktor.client.request.HttpRequestData){}[0]

    open val attributes // io.ktor.client.request/DefaultHttpRequest.attributes|{}attributes[0]
        open fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.client.request/DefaultHttpRequest.attributes.<get-attributes>|<get-attributes>(){}[0]
    open val call // io.ktor.client.request/DefaultHttpRequest.call|{}call[0]
        open fun <get-call>(): io.ktor.client.call/HttpClientCall // io.ktor.client.request/DefaultHttpRequest.call.<get-call>|<get-call>(){}[0]
    open val content // io.ktor.client.request/DefaultHttpRequest.content|{}content[0]
        open fun <get-content>(): io.ktor.http.content/OutgoingContent // io.ktor.client.request/DefaultHttpRequest.content.<get-content>|<get-content>(){}[0]
    open val coroutineContext // io.ktor.client.request/DefaultHttpRequest.coroutineContext|{}coroutineContext[0]
        open fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.request/DefaultHttpRequest.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    open val headers // io.ktor.client.request/DefaultHttpRequest.headers|{}headers[0]
        open fun <get-headers>(): io.ktor.http/Headers // io.ktor.client.request/DefaultHttpRequest.headers.<get-headers>|<get-headers>(){}[0]
    open val method // io.ktor.client.request/DefaultHttpRequest.method|{}method[0]
        open fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.client.request/DefaultHttpRequest.method.<get-method>|<get-method>(){}[0]
    open val url // io.ktor.client.request/DefaultHttpRequest.url|{}url[0]
        open fun <get-url>(): io.ktor.http/Url // io.ktor.client.request/DefaultHttpRequest.url.<get-url>|<get-url>(){}[0]
}

final object io.ktor.client.engine/ProxyBuilder { // io.ktor.client.engine/ProxyBuilder|null[0]
    final fun http(io.ktor.http/Url): io.ktor.client.engine/ProxyConfig // io.ktor.client.engine/ProxyBuilder.http|http(io.ktor.http.Url){}[0]
    final fun socks(kotlin/String, kotlin/Int): io.ktor.client.engine/ProxyConfig // io.ktor.client.engine/ProxyBuilder.socks|socks(kotlin.String;kotlin.Int){}[0]
}

final object io.ktor.client.engine/engines : kotlin.collections/Iterable<io.ktor.client.engine/HttpClientEngineFactory<io.ktor.client.engine/HttpClientEngineConfig>> { // io.ktor.client.engine/engines|null[0]
    final fun append(io.ktor.client.engine/HttpClientEngineFactory<io.ktor.client.engine/HttpClientEngineConfig>) // io.ktor.client.engine/engines.append|append(io.ktor.client.engine.HttpClientEngineFactory<io.ktor.client.engine.HttpClientEngineConfig>){}[0]
    final fun iterator(): kotlin.collections/Iterator<io.ktor.client.engine/HttpClientEngineFactory<io.ktor.client.engine/HttpClientEngineConfig>> // io.ktor.client.engine/engines.iterator|iterator(){}[0]
}

final object io.ktor.client.plugins.api/Send : io.ktor.client.plugins.api/ClientHook<kotlin.coroutines/SuspendFunction2<io.ktor.client.plugins.api/Send.Sender, io.ktor.client.request/HttpRequestBuilder, io.ktor.client.call/HttpClientCall>> { // io.ktor.client.plugins.api/Send|null[0]
    final fun install(io.ktor.client/HttpClient, kotlin.coroutines/SuspendFunction2<io.ktor.client.plugins.api/Send.Sender, io.ktor.client.request/HttpRequestBuilder, io.ktor.client.call/HttpClientCall>) // io.ktor.client.plugins.api/Send.install|install(io.ktor.client.HttpClient;kotlin.coroutines.SuspendFunction2<io.ktor.client.plugins.api.Send.Sender,io.ktor.client.request.HttpRequestBuilder,io.ktor.client.call.HttpClientCall>){}[0]

    final class Sender : kotlinx.coroutines/CoroutineScope { // io.ktor.client.plugins.api/Send.Sender|null[0]
        final val coroutineContext // io.ktor.client.plugins.api/Send.Sender.coroutineContext|{}coroutineContext[0]
            final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.client.plugins.api/Send.Sender.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

        final suspend fun proceed(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.api/Send.Sender.proceed|proceed(io.ktor.client.request.HttpRequestBuilder){}[0]
    }
}

final object io.ktor.client.plugins.api/SendingRequest : io.ktor.client.plugins.api/ClientHook<kotlin.coroutines/SuspendFunction2<io.ktor.client.request/HttpRequestBuilder, io.ktor.http.content/OutgoingContent, kotlin/Unit>> { // io.ktor.client.plugins.api/SendingRequest|null[0]
    final fun install(io.ktor.client/HttpClient, kotlin.coroutines/SuspendFunction2<io.ktor.client.request/HttpRequestBuilder, io.ktor.http.content/OutgoingContent, kotlin/Unit>) // io.ktor.client.plugins.api/SendingRequest.install|install(io.ktor.client.HttpClient;kotlin.coroutines.SuspendFunction2<io.ktor.client.request.HttpRequestBuilder,io.ktor.http.content.OutgoingContent,kotlin.Unit>){}[0]
}

final object io.ktor.client.plugins.api/SetupRequest : io.ktor.client.plugins.api/ClientHook<kotlin.coroutines/SuspendFunction1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>> { // io.ktor.client.plugins.api/SetupRequest|null[0]
    final fun install(io.ktor.client/HttpClient, kotlin.coroutines/SuspendFunction1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>) // io.ktor.client.plugins.api/SetupRequest.install|install(io.ktor.client.HttpClient;kotlin.coroutines.SuspendFunction1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
}

final object io.ktor.client.plugins.sse/SSECapability : io.ktor.client.engine/HttpClientEngineCapability<kotlin/Unit> { // io.ktor.client.plugins.sse/SSECapability|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins.sse/SSECapability.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins.sse/SSECapability.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.plugins.sse/SSECapability.toString|toString(){}[0]
}

final object io.ktor.client.plugins.websocket/WebSocketCapability : io.ktor.client.engine/HttpClientEngineCapability<kotlin/Unit> { // io.ktor.client.plugins.websocket/WebSocketCapability|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins.websocket/WebSocketCapability.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins.websocket/WebSocketCapability.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.plugins.websocket/WebSocketCapability.toString|toString(){}[0]
}

final object io.ktor.client.plugins.websocket/WebSocketExtensionsCapability : io.ktor.client.engine/HttpClientEngineCapability<kotlin/Unit> { // io.ktor.client.plugins.websocket/WebSocketExtensionsCapability|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins.websocket/WebSocketExtensionsCapability.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins.websocket/WebSocketExtensionsCapability.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.plugins.websocket/WebSocketExtensionsCapability.toString|toString(){}[0]
}

final object io.ktor.client.plugins/DataConversion : io.ktor.client.plugins/HttpClientPlugin<io.ktor.util.converters/DataConversion.Configuration, io.ktor.util.converters/DataConversion> { // io.ktor.client.plugins/DataConversion|null[0]
    final val key // io.ktor.client.plugins/DataConversion.key|{}key[0]
        final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.util.converters/DataConversion> // io.ktor.client.plugins/DataConversion.key.<get-key>|<get-key>(){}[0]

    final fun install(io.ktor.util.converters/DataConversion, io.ktor.client/HttpClient) // io.ktor.client.plugins/DataConversion.install|install(io.ktor.util.converters.DataConversion;io.ktor.client.HttpClient){}[0]
    final fun prepare(kotlin/Function1<io.ktor.util.converters/DataConversion.Configuration, kotlin/Unit>): io.ktor.util.converters/DataConversion // io.ktor.client.plugins/DataConversion.prepare|prepare(kotlin.Function1<io.ktor.util.converters.DataConversion.Configuration,kotlin.Unit>){}[0]
}

final object io.ktor.client.plugins/HttpTimeoutCapability : io.ktor.client.engine/HttpClientEngineCapability<io.ktor.client.plugins/HttpTimeoutConfig> { // io.ktor.client.plugins/HttpTimeoutCapability|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.plugins/HttpTimeoutCapability.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.plugins/HttpTimeoutCapability.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.plugins/HttpTimeoutCapability.toString|toString(){}[0]
}

final object io.ktor.client.plugins/SetupRequestContext : io.ktor.client.plugins.api/ClientHook<kotlin.coroutines/SuspendFunction2<io.ktor.client.request/HttpRequestBuilder, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>> { // io.ktor.client.plugins/SetupRequestContext|null[0]
    final fun install(io.ktor.client/HttpClient, kotlin.coroutines/SuspendFunction2<io.ktor.client.request/HttpRequestBuilder, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>) // io.ktor.client.plugins/SetupRequestContext.install|install(io.ktor.client.HttpClient;kotlin.coroutines.SuspendFunction2<io.ktor.client.request.HttpRequestBuilder,kotlin.coroutines.SuspendFunction0<kotlin.Unit>,kotlin.Unit>){}[0]
}

final object io.ktor.client.utils/CacheControl { // io.ktor.client.utils/CacheControl|null[0]
    final const val MAX_AGE // io.ktor.client.utils/CacheControl.MAX_AGE|{}MAX_AGE[0]
        final fun <get-MAX_AGE>(): kotlin/String // io.ktor.client.utils/CacheControl.MAX_AGE.<get-MAX_AGE>|<get-MAX_AGE>(){}[0]
    final const val MAX_STALE // io.ktor.client.utils/CacheControl.MAX_STALE|{}MAX_STALE[0]
        final fun <get-MAX_STALE>(): kotlin/String // io.ktor.client.utils/CacheControl.MAX_STALE.<get-MAX_STALE>|<get-MAX_STALE>(){}[0]
    final const val MIN_FRESH // io.ktor.client.utils/CacheControl.MIN_FRESH|{}MIN_FRESH[0]
        final fun <get-MIN_FRESH>(): kotlin/String // io.ktor.client.utils/CacheControl.MIN_FRESH.<get-MIN_FRESH>|<get-MIN_FRESH>(){}[0]
    final const val MUST_REVALIDATE // io.ktor.client.utils/CacheControl.MUST_REVALIDATE|{}MUST_REVALIDATE[0]
        final fun <get-MUST_REVALIDATE>(): kotlin/String // io.ktor.client.utils/CacheControl.MUST_REVALIDATE.<get-MUST_REVALIDATE>|<get-MUST_REVALIDATE>(){}[0]
    final const val NO_CACHE // io.ktor.client.utils/CacheControl.NO_CACHE|{}NO_CACHE[0]
        final fun <get-NO_CACHE>(): kotlin/String // io.ktor.client.utils/CacheControl.NO_CACHE.<get-NO_CACHE>|<get-NO_CACHE>(){}[0]
    final const val NO_STORE // io.ktor.client.utils/CacheControl.NO_STORE|{}NO_STORE[0]
        final fun <get-NO_STORE>(): kotlin/String // io.ktor.client.utils/CacheControl.NO_STORE.<get-NO_STORE>|<get-NO_STORE>(){}[0]
    final const val NO_TRANSFORM // io.ktor.client.utils/CacheControl.NO_TRANSFORM|{}NO_TRANSFORM[0]
        final fun <get-NO_TRANSFORM>(): kotlin/String // io.ktor.client.utils/CacheControl.NO_TRANSFORM.<get-NO_TRANSFORM>|<get-NO_TRANSFORM>(){}[0]
    final const val ONLY_IF_CACHED // io.ktor.client.utils/CacheControl.ONLY_IF_CACHED|{}ONLY_IF_CACHED[0]
        final fun <get-ONLY_IF_CACHED>(): kotlin/String // io.ktor.client.utils/CacheControl.ONLY_IF_CACHED.<get-ONLY_IF_CACHED>|<get-ONLY_IF_CACHED>(){}[0]
    final const val PRIVATE // io.ktor.client.utils/CacheControl.PRIVATE|{}PRIVATE[0]
        final fun <get-PRIVATE>(): kotlin/String // io.ktor.client.utils/CacheControl.PRIVATE.<get-PRIVATE>|<get-PRIVATE>(){}[0]
    final const val PROXY_REVALIDATE // io.ktor.client.utils/CacheControl.PROXY_REVALIDATE|{}PROXY_REVALIDATE[0]
        final fun <get-PROXY_REVALIDATE>(): kotlin/String // io.ktor.client.utils/CacheControl.PROXY_REVALIDATE.<get-PROXY_REVALIDATE>|<get-PROXY_REVALIDATE>(){}[0]
    final const val PUBLIC // io.ktor.client.utils/CacheControl.PUBLIC|{}PUBLIC[0]
        final fun <get-PUBLIC>(): kotlin/String // io.ktor.client.utils/CacheControl.PUBLIC.<get-PUBLIC>|<get-PUBLIC>(){}[0]
    final const val S_MAX_AGE // io.ktor.client.utils/CacheControl.S_MAX_AGE|{}S_MAX_AGE[0]
        final fun <get-S_MAX_AGE>(): kotlin/String // io.ktor.client.utils/CacheControl.S_MAX_AGE.<get-S_MAX_AGE>|<get-S_MAX_AGE>(){}[0]
}

final object io.ktor.client.utils/EmptyContent : io.ktor.http.content/OutgoingContent.NoContent { // io.ktor.client.utils/EmptyContent|null[0]
    final val contentLength // io.ktor.client.utils/EmptyContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // io.ktor.client.utils/EmptyContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.utils/EmptyContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.utils/EmptyContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.utils/EmptyContent.toString|toString(){}[0]
}

final const val io.ktor.client.utils/DEFAULT_HTTP_BUFFER_SIZE // io.ktor.client.utils/DEFAULT_HTTP_BUFFER_SIZE|{}DEFAULT_HTTP_BUFFER_SIZE[0]
    final fun <get-DEFAULT_HTTP_BUFFER_SIZE>(): kotlin/Int // io.ktor.client.utils/DEFAULT_HTTP_BUFFER_SIZE.<get-DEFAULT_HTTP_BUFFER_SIZE>|<get-DEFAULT_HTTP_BUFFER_SIZE>(){}[0]
final const val io.ktor.client.utils/DEFAULT_HTTP_POOL_SIZE // io.ktor.client.utils/DEFAULT_HTTP_POOL_SIZE|{}DEFAULT_HTTP_POOL_SIZE[0]
    final fun <get-DEFAULT_HTTP_POOL_SIZE>(): kotlin/Int // io.ktor.client.utils/DEFAULT_HTTP_POOL_SIZE.<get-DEFAULT_HTTP_POOL_SIZE>|<get-DEFAULT_HTTP_POOL_SIZE>(){}[0]

final val io.ktor.client.engine/DEFAULT_CAPABILITIES // io.ktor.client.engine/DEFAULT_CAPABILITIES|{}DEFAULT_CAPABILITIES[0]
    final fun <get-DEFAULT_CAPABILITIES>(): kotlin.collections/Set<io.ktor.client.engine/HttpClientEngineCapability<*>> // io.ktor.client.engine/DEFAULT_CAPABILITIES.<get-DEFAULT_CAPABILITIES>|<get-DEFAULT_CAPABILITIES>(){}[0]
final val io.ktor.client.engine/KTOR_DEFAULT_USER_AGENT // io.ktor.client.engine/KTOR_DEFAULT_USER_AGENT|{}KTOR_DEFAULT_USER_AGENT[0]
    final fun <get-KTOR_DEFAULT_USER_AGENT>(): kotlin/String // io.ktor.client.engine/KTOR_DEFAULT_USER_AGENT.<get-KTOR_DEFAULT_USER_AGENT>|<get-KTOR_DEFAULT_USER_AGENT>(){}[0]
final val io.ktor.client.engine/type // io.ktor.client.engine/type|@io.ktor.client.engine.ProxyConfig{}type[0]
    final fun (io.ktor.client.engine/ProxyConfig).<get-type>(): io.ktor.client.engine/ProxyType // io.ktor.client.engine/type.<get-type>|<get-type>@io.ktor.client.engine.ProxyConfig(){}[0]
final val io.ktor.client.plugins.observer/ResponseObserver // io.ktor.client.plugins.observer/ResponseObserver|{}ResponseObserver[0]
    final fun <get-ResponseObserver>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins.observer/ResponseObserverConfig> // io.ktor.client.plugins.observer/ResponseObserver.<get-ResponseObserver>|<get-ResponseObserver>(){}[0]
final val io.ktor.client.plugins.sse/SSE // io.ktor.client.plugins.sse/SSE|{}SSE[0]
    final fun <get-SSE>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins.sse/SSEConfig> // io.ktor.client.plugins.sse/SSE.<get-SSE>|<get-SSE>(){}[0]
final val io.ktor.client.plugins.websocket/converter // io.ktor.client.plugins.websocket/converter|@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession{}converter[0]
    final fun (io.ktor.client.plugins.websocket/DefaultClientWebSocketSession).<get-converter>(): io.ktor.serialization/WebsocketContentConverter? // io.ktor.client.plugins.websocket/converter.<get-converter>|<get-converter>@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession(){}[0]
final val io.ktor.client.plugins.websocket/pingInterval // io.ktor.client.plugins.websocket/pingInterval|@io.ktor.client.plugins.websocket.WebSockets{}pingInterval[0]
    final inline fun (io.ktor.client.plugins.websocket/WebSockets).<get-pingInterval>(): kotlin.time/Duration? // io.ktor.client.plugins.websocket/pingInterval.<get-pingInterval>|<get-pingInterval>@io.ktor.client.plugins.websocket.WebSockets(){}[0]
final val io.ktor.client.plugins/BodyProgress // io.ktor.client.plugins/BodyProgress|{}BodyProgress[0]
    final fun <get-BodyProgress>(): io.ktor.client.plugins.api/ClientPlugin<kotlin/Unit> // io.ktor.client.plugins/BodyProgress.<get-BodyProgress>|<get-BodyProgress>(){}[0]
final val io.ktor.client.plugins/HttpCallValidator // io.ktor.client.plugins/HttpCallValidator|{}HttpCallValidator[0]
    final fun <get-HttpCallValidator>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/HttpCallValidatorConfig> // io.ktor.client.plugins/HttpCallValidator.<get-HttpCallValidator>|<get-HttpCallValidator>(){}[0]
final val io.ktor.client.plugins/HttpPlainText // io.ktor.client.plugins/HttpPlainText|{}HttpPlainText[0]
    final fun <get-HttpPlainText>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/HttpPlainTextConfig> // io.ktor.client.plugins/HttpPlainText.<get-HttpPlainText>|<get-HttpPlainText>(){}[0]
final val io.ktor.client.plugins/HttpRedirect // io.ktor.client.plugins/HttpRedirect|{}HttpRedirect[0]
    final fun <get-HttpRedirect>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/HttpRedirectConfig> // io.ktor.client.plugins/HttpRedirect.<get-HttpRedirect>|<get-HttpRedirect>(){}[0]
final val io.ktor.client.plugins/HttpRequestLifecycle // io.ktor.client.plugins/HttpRequestLifecycle|{}HttpRequestLifecycle[0]
    final fun <get-HttpRequestLifecycle>(): io.ktor.client.plugins.api/ClientPlugin<kotlin/Unit> // io.ktor.client.plugins/HttpRequestLifecycle.<get-HttpRequestLifecycle>|<get-HttpRequestLifecycle>(){}[0]
final val io.ktor.client.plugins/HttpRequestRetry // io.ktor.client.plugins/HttpRequestRetry|{}HttpRequestRetry[0]
    final fun <get-HttpRequestRetry>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/HttpRequestRetryConfig> // io.ktor.client.plugins/HttpRequestRetry.<get-HttpRequestRetry>|<get-HttpRequestRetry>(){}[0]
final val io.ktor.client.plugins/HttpRequestRetryEvent // io.ktor.client.plugins/HttpRequestRetryEvent|{}HttpRequestRetryEvent[0]
    final fun <get-HttpRequestRetryEvent>(): io.ktor.events/EventDefinition<io.ktor.client.plugins/HttpRetryEventData> // io.ktor.client.plugins/HttpRequestRetryEvent.<get-HttpRequestRetryEvent>|<get-HttpRequestRetryEvent>(){}[0]
final val io.ktor.client.plugins/HttpResponseRedirectEvent // io.ktor.client.plugins/HttpResponseRedirectEvent|{}HttpResponseRedirectEvent[0]
    final fun <get-HttpResponseRedirectEvent>(): io.ktor.events/EventDefinition<io.ktor.client.statement/HttpResponse> // io.ktor.client.plugins/HttpResponseRedirectEvent.<get-HttpResponseRedirectEvent>|<get-HttpResponseRedirectEvent>(){}[0]
final val io.ktor.client.plugins/HttpTimeout // io.ktor.client.plugins/HttpTimeout|{}HttpTimeout[0]
    final fun <get-HttpTimeout>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/HttpTimeoutConfig> // io.ktor.client.plugins/HttpTimeout.<get-HttpTimeout>|<get-HttpTimeout>(){}[0]
final val io.ktor.client.plugins/SaveBodyPlugin // io.ktor.client.plugins/SaveBodyPlugin|{}SaveBodyPlugin[0]
    final fun <get-SaveBodyPlugin>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/SaveBodyPluginConfig> // io.ktor.client.plugins/SaveBodyPlugin.<get-SaveBodyPlugin>|<get-SaveBodyPlugin>(){}[0]
final val io.ktor.client.plugins/UserAgent // io.ktor.client.plugins/UserAgent|{}UserAgent[0]
    final fun <get-UserAgent>(): io.ktor.client.plugins.api/ClientPlugin<io.ktor.client.plugins/UserAgentConfig> // io.ktor.client.plugins/UserAgent.<get-UserAgent>|<get-UserAgent>(){}[0]
final val io.ktor.client.plugins/isSaved // io.ktor.client.plugins/isSaved|@io.ktor.client.statement.HttpResponse{}isSaved[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isSaved>(): kotlin/Boolean // io.ktor.client.plugins/isSaved.<get-isSaved>|<get-isSaved>@io.ktor.client.statement.HttpResponse(){}[0]
final val io.ktor.client.request/ResponseAdapterAttributeKey // io.ktor.client.request/ResponseAdapterAttributeKey|{}ResponseAdapterAttributeKey[0]
    final fun <get-ResponseAdapterAttributeKey>(): io.ktor.util/AttributeKey<io.ktor.client.request/ResponseAdapter> // io.ktor.client.request/ResponseAdapterAttributeKey.<get-ResponseAdapterAttributeKey>|<get-ResponseAdapterAttributeKey>(){}[0]
final val io.ktor.client.statement/content // io.ktor.client.statement/content|@io.ktor.client.statement.HttpResponse{}content[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-content>(): io.ktor.utils.io/ByteReadChannel // io.ktor.client.statement/content.<get-content>|<get-content>@io.ktor.client.statement.HttpResponse(){}[0]
final val io.ktor.client.statement/request // io.ktor.client.statement/request|@io.ktor.client.statement.HttpResponse{}request[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-request>(): io.ktor.client.request/HttpRequest // io.ktor.client.statement/request.<get-request>|<get-request>@io.ktor.client.statement.HttpResponse(){}[0]
final val io.ktor.client.utils/HttpRequestCreated // io.ktor.client.utils/HttpRequestCreated|{}HttpRequestCreated[0]
    final fun <get-HttpRequestCreated>(): io.ktor.events/EventDefinition<io.ktor.client.request/HttpRequestBuilder> // io.ktor.client.utils/HttpRequestCreated.<get-HttpRequestCreated>|<get-HttpRequestCreated>(){}[0]
final val io.ktor.client.utils/HttpRequestIsReadyForSending // io.ktor.client.utils/HttpRequestIsReadyForSending|{}HttpRequestIsReadyForSending[0]
    final fun <get-HttpRequestIsReadyForSending>(): io.ktor.events/EventDefinition<io.ktor.client.request/HttpRequestBuilder> // io.ktor.client.utils/HttpRequestIsReadyForSending.<get-HttpRequestIsReadyForSending>|<get-HttpRequestIsReadyForSending>(){}[0]
final val io.ktor.client.utils/HttpResponseCancelled // io.ktor.client.utils/HttpResponseCancelled|{}HttpResponseCancelled[0]
    final fun <get-HttpResponseCancelled>(): io.ktor.events/EventDefinition<io.ktor.client.statement/HttpResponse> // io.ktor.client.utils/HttpResponseCancelled.<get-HttpResponseCancelled>|<get-HttpResponseCancelled>(){}[0]
final val io.ktor.client.utils/HttpResponseReceiveFailed // io.ktor.client.utils/HttpResponseReceiveFailed|{}HttpResponseReceiveFailed[0]
    final fun <get-HttpResponseReceiveFailed>(): io.ktor.events/EventDefinition<io.ktor.client.utils/HttpResponseReceiveFail> // io.ktor.client.utils/HttpResponseReceiveFailed.<get-HttpResponseReceiveFailed>|<get-HttpResponseReceiveFailed>(){}[0]
final val io.ktor.client.utils/HttpResponseReceived // io.ktor.client.utils/HttpResponseReceived|{}HttpResponseReceived[0]
    final fun <get-HttpResponseReceived>(): io.ktor.events/EventDefinition<io.ktor.client.statement/HttpResponse> // io.ktor.client.utils/HttpResponseReceived.<get-HttpResponseReceived>|<get-HttpResponseReceived>(){}[0]

final var io.ktor.client.plugins.websocket/pingInterval // io.ktor.client.plugins.websocket/pingInterval|@io.ktor.client.plugins.websocket.WebSockets.Config{}pingInterval[0]
    final inline fun (io.ktor.client.plugins.websocket/WebSockets.Config).<get-pingInterval>(): kotlin.time/Duration? // io.ktor.client.plugins.websocket/pingInterval.<get-pingInterval>|<get-pingInterval>@io.ktor.client.plugins.websocket.WebSockets.Config(){}[0]
    final inline fun (io.ktor.client.plugins.websocket/WebSockets.Config).<set-pingInterval>(kotlin.time/Duration?) // io.ktor.client.plugins.websocket/pingInterval.<set-pingInterval>|<set-pingInterval>@io.ktor.client.plugins.websocket.WebSockets.Config(kotlin.time.Duration?){}[0]
final var io.ktor.client.plugins/expectSuccess // io.ktor.client.plugins/expectSuccess|@io.ktor.client.request.HttpRequestBuilder{}expectSuccess[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<get-expectSuccess>(): kotlin/Boolean // io.ktor.client.plugins/expectSuccess.<get-expectSuccess>|<get-expectSuccess>@io.ktor.client.request.HttpRequestBuilder(){}[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<set-expectSuccess>(kotlin/Boolean) // io.ktor.client.plugins/expectSuccess.<set-expectSuccess>|<set-expectSuccess>@io.ktor.client.request.HttpRequestBuilder(kotlin.Boolean){}[0]
final var io.ktor.client.request/host // io.ktor.client.request/host|@io.ktor.client.request.HttpRequestBuilder{}host[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<get-host>(): kotlin/String // io.ktor.client.request/host.<get-host>|<get-host>@io.ktor.client.request.HttpRequestBuilder(){}[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<set-host>(kotlin/String) // io.ktor.client.request/host.<set-host>|<set-host>@io.ktor.client.request.HttpRequestBuilder(kotlin.String){}[0]
final var io.ktor.client.request/port // io.ktor.client.request/port|@io.ktor.client.request.HttpRequestBuilder{}port[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<get-port>(): kotlin/Int // io.ktor.client.request/port.<get-port>|<get-port>@io.ktor.client.request.HttpRequestBuilder(){}[0]
    final fun (io.ktor.client.request/HttpRequestBuilder).<set-port>(kotlin/Int) // io.ktor.client.request/port.<set-port>|<set-port>@io.ktor.client.request.HttpRequestBuilder(kotlin.Int){}[0]

final fun (io.ktor.client.call/HttpClientCall).io.ktor.client.plugins.observer/wrap(io.ktor.utils.io/ByteReadChannel, io.ktor.http/Headers): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.observer/wrap|wrap@io.ktor.client.call.HttpClientCall(io.ktor.utils.io.ByteReadChannel;io.ktor.http.Headers){}[0]
final fun (io.ktor.client.call/HttpClientCall).io.ktor.client.plugins.observer/wrapWithContent(io.ktor.utils.io/ByteReadChannel): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.observer/wrapWithContent|wrapWithContent@io.ktor.client.call.HttpClientCall(io.ktor.utils.io.ByteReadChannel){}[0]
final fun (io.ktor.client.call/HttpClientCall).io.ktor.client.plugins.observer/wrapWithContent(kotlin/Function0<io.ktor.utils.io/ByteReadChannel>): io.ktor.client.call/HttpClientCall // io.ktor.client.plugins.observer/wrapWithContent|wrapWithContent@io.ktor.client.call.HttpClientCall(kotlin.Function0<io.ktor.utils.io.ByteReadChannel>){}[0]
final fun (io.ktor.client.engine/ProxyBuilder).io.ktor.client.engine/http(kotlin/String): io.ktor.client.engine/ProxyConfig // io.ktor.client.engine/http|http@io.ktor.client.engine.ProxyBuilder(kotlin.String){}[0]
final fun (io.ktor.client.engine/ProxyConfig).io.ktor.client.engine/resolveAddress(): io.ktor.util.network/NetworkAddress // io.ktor.client.engine/resolveAddress|resolveAddress@io.ktor.client.engine.ProxyConfig(){}[0]
final fun (io.ktor.client.request.forms/FormBuilder).io.ktor.client.request.forms/append(kotlin/String, kotlin/String, io.ktor.http/ContentType? = ..., kotlin/Long? = ..., kotlin/Function1<kotlinx.io/Sink, kotlin/Unit>) // io.ktor.client.request.forms/append|append@io.ktor.client.request.forms.FormBuilder(kotlin.String;kotlin.String;io.ktor.http.ContentType?;kotlin.Long?;kotlin.Function1<kotlinx.io.Sink,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.plugins/onDownload(io.ktor.client.content/ProgressListener?) // io.ktor.client.plugins/onDownload|onDownload@io.ktor.client.request.HttpRequestBuilder(io.ktor.client.content.ProgressListener?){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.plugins/onUpload(io.ktor.client.content/ProgressListener?) // io.ktor.client.plugins/onUpload|onUpload@io.ktor.client.request.HttpRequestBuilder(io.ktor.client.content.ProgressListener?){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.plugins/retry(kotlin/Function1<io.ktor.client.plugins/HttpRequestRetryConfig, kotlin/Unit>) // io.ktor.client.plugins/retry|retry@io.ktor.client.request.HttpRequestBuilder(kotlin.Function1<io.ktor.client.plugins.HttpRequestRetryConfig,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.plugins/skipSavingBody() // io.ktor.client.plugins/skipSavingBody|skipSavingBody@io.ktor.client.request.HttpRequestBuilder(){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.plugins/timeout(kotlin/Function1<io.ktor.client.plugins/HttpTimeoutConfig, kotlin/Unit>) // io.ktor.client.plugins/timeout|timeout@io.ktor.client.request.HttpRequestBuilder(kotlin.Function1<io.ktor.client.plugins.HttpTimeoutConfig,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/parameter(kotlin/String, kotlin/Any?) // io.ktor.client.request/parameter|parameter@io.ktor.client.request.HttpRequestBuilder(kotlin.String;kotlin.Any?){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/setBody(kotlin/Any?, io.ktor.util.reflect/TypeInfo) // io.ktor.client.request/setBody|setBody@io.ktor.client.request.HttpRequestBuilder(kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/takeFrom(io.ktor.client.request/HttpRequest): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/takeFrom|takeFrom@io.ktor.client.request.HttpRequestBuilder(io.ktor.client.request.HttpRequest){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/takeFrom(io.ktor.client.request/HttpRequestData): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/takeFrom|takeFrom@io.ktor.client.request.HttpRequestBuilder(io.ktor.client.request.HttpRequestData){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/url(io.ktor.http/Url) // io.ktor.client.request/url|url@io.ktor.client.request.HttpRequestBuilder(io.ktor.http.Url){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/url(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>) // io.ktor.client.request/url|url@io.ktor.client.request.HttpRequestBuilder(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/url(kotlin/String) // io.ktor.client.request/url|url@io.ktor.client.request.HttpRequestBuilder(kotlin.String){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/url(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit> = ...) // io.ktor.client.request/url|url@io.ktor.client.request.HttpRequestBuilder(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder.Companion).io.ktor.client.request/invoke(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/invoke|invoke@io.ktor.client.request.HttpRequestBuilder.Companion(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestBuilder.Companion).io.ktor.client.request/invoke(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit> = ...): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/invoke|invoke@io.ktor.client.request.HttpRequestBuilder.Companion(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.client.request/HttpRequestData).io.ktor.client.request/isSseRequest(): kotlin/Boolean // io.ktor.client.request/isSseRequest|isSseRequest@io.ktor.client.request.HttpRequestData(){}[0]
final fun (io.ktor.client.request/HttpRequestData).io.ktor.client.request/isUpgradeRequest(): kotlin/Boolean // io.ktor.client.request/isUpgradeRequest|isUpgradeRequest@io.ktor.client.request.HttpRequestData(){}[0]
final fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/complete() // io.ktor.client.statement/complete|complete@io.ktor.client.statement.HttpResponse(){}[0]
final fun (io.ktor.client/HttpClient).io.ktor.client.plugins/defaultTransformers() // io.ktor.client.plugins/defaultTransformers|defaultTransformers@io.ktor.client.HttpClient(){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins.observer/ResponseObserver(kotlin.coroutines/SuspendFunction1<io.ktor.client.statement/HttpResponse, kotlin/Unit>) // io.ktor.client.plugins.observer/ResponseObserver|ResponseObserver@io.ktor.client.HttpClientConfig<*>(kotlin.coroutines.SuspendFunction1<io.ktor.client.statement.HttpResponse,kotlin.Unit>){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins.sse/SSE(kotlin/Function1<io.ktor.client.plugins.sse/SSEConfig, kotlin/Unit>) // io.ktor.client.plugins.sse/SSE|SSE@io.ktor.client.HttpClientConfig<*>(kotlin.Function1<io.ktor.client.plugins.sse.SSEConfig,kotlin.Unit>){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins.websocket/WebSockets(kotlin/Function1<io.ktor.client.plugins.websocket/WebSockets.Config, kotlin/Unit>) // io.ktor.client.plugins.websocket/WebSockets|WebSockets@io.ktor.client.HttpClientConfig<*>(kotlin.Function1<io.ktor.client.plugins.websocket.WebSockets.Config,kotlin.Unit>){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/BrowserUserAgent() // io.ktor.client.plugins/BrowserUserAgent|BrowserUserAgent@io.ktor.client.HttpClientConfig<*>(){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/Charsets(kotlin/Function1<io.ktor.client.plugins/HttpPlainTextConfig, kotlin/Unit>) // io.ktor.client.plugins/Charsets|Charsets@io.ktor.client.HttpClientConfig<*>(kotlin.Function1<io.ktor.client.plugins.HttpPlainTextConfig,kotlin.Unit>){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/CurlUserAgent() // io.ktor.client.plugins/CurlUserAgent|CurlUserAgent@io.ktor.client.HttpClientConfig<*>(){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/HttpResponseValidator(kotlin/Function1<io.ktor.client.plugins/HttpCallValidatorConfig, kotlin/Unit>) // io.ktor.client.plugins/HttpResponseValidator|HttpResponseValidator@io.ktor.client.HttpClientConfig<*>(kotlin.Function1<io.ktor.client.plugins.HttpCallValidatorConfig,kotlin.Unit>){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/addDefaultResponseValidation() // io.ktor.client.plugins/addDefaultResponseValidation|addDefaultResponseValidation@io.ktor.client.HttpClientConfig<*>(){}[0]
final fun (io.ktor.client/HttpClientConfig<*>).io.ktor.client.plugins/defaultRequest(kotlin/Function1<io.ktor.client.plugins/DefaultRequest.DefaultRequestBuilder, kotlin/Unit>) // io.ktor.client.plugins/defaultRequest|defaultRequest@io.ktor.client.HttpClientConfig<*>(kotlin.Function1<io.ktor.client.plugins.DefaultRequest.DefaultRequestBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.http.content/OutgoingContent).io.ktor.client.utils/wrapHeaders(kotlin/Function1<io.ktor.http/Headers, io.ktor.http/Headers>): io.ktor.http.content/OutgoingContent // io.ktor.client.utils/wrapHeaders|wrapHeaders@io.ktor.http.content.OutgoingContent(kotlin.Function1<io.ktor.http.Headers,io.ktor.http.Headers>){}[0]
final fun (io.ktor.http/Cookie).io.ktor.client.plugins.cookies/fillDefaults(io.ktor.http/Url): io.ktor.http/Cookie // io.ktor.client.plugins.cookies/fillDefaults|fillDefaults@io.ktor.http.Cookie(io.ktor.http.Url){}[0]
final fun (io.ktor.http/Cookie).io.ktor.client.plugins.cookies/matches(io.ktor.http/Url): kotlin/Boolean // io.ktor.client.plugins.cookies/matches|matches@io.ktor.http.Cookie(io.ktor.http.Url){}[0]
final fun (io.ktor.http/HeadersBuilder).io.ktor.client.utils/dropCompressionHeaders(io.ktor.http/HttpMethod, io.ktor.util/Attributes, kotlin/Boolean = ...) // io.ktor.client.utils/dropCompressionHeaders|dropCompressionHeaders@io.ktor.http.HeadersBuilder(io.ktor.http.HttpMethod;io.ktor.util.Attributes;kotlin.Boolean){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/accept(io.ktor.http/ContentType) // io.ktor.client.request/accept|accept@io.ktor.http.HttpMessageBuilder(io.ktor.http.ContentType){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/basicAuth(kotlin/String, kotlin/String) // io.ktor.client.request/basicAuth|basicAuth@io.ktor.http.HttpMessageBuilder(kotlin.String;kotlin.String){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/bearerAuth(kotlin/String) // io.ktor.client.request/bearerAuth|bearerAuth@io.ktor.http.HttpMessageBuilder(kotlin.String){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/cookie(kotlin/String, kotlin/String, kotlin/Int = ..., io.ktor.util.date/GMTDate? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/String?> = ...) // io.ktor.client.request/cookie|cookie@io.ktor.http.HttpMessageBuilder(kotlin.String;kotlin.String;kotlin.Int;io.ktor.util.date.GMTDate?;kotlin.String?;kotlin.String?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.String?>){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/header(kotlin/String, kotlin/Any?) // io.ktor.client.request/header|header@io.ktor.http.HttpMessageBuilder(kotlin.String;kotlin.Any?){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.client.request/headers(kotlin/Function1<io.ktor.http/HeadersBuilder, kotlin/Unit>): io.ktor.http/HeadersBuilder // io.ktor.client.request/headers|headers@io.ktor.http.HttpMessageBuilder(kotlin.Function1<io.ktor.http.HeadersBuilder,kotlin.Unit>){}[0]
final fun (kotlin.collections/List<io.ktor.http/Cookie>).io.ktor.client.plugins.cookies/get(kotlin/String): io.ktor.http/Cookie? // io.ktor.client.plugins.cookies/get|get@kotlin.collections.List<io.ktor.http.Cookie>(kotlin.String){}[0]
final fun (kotlin/Throwable).io.ktor.client.utils/unwrapCancellationException(): kotlin/Throwable // io.ktor.client.utils/unwrapCancellationException|unwrapCancellationException@kotlin.Throwable(){}[0]
final fun (kotlinx.coroutines/Dispatchers).io.ktor.client.utils/clientDispatcher(kotlin/Int, kotlin/String = ...): kotlinx.coroutines/CoroutineDispatcher // io.ktor.client.utils/clientDispatcher|clientDispatcher@kotlinx.coroutines.Dispatchers(kotlin.Int;kotlin.String){}[0]
final fun <#A: io.ktor.client.engine/HttpClientEngineConfig> (io.ktor.client.engine/HttpClientEngineFactory<#A>).io.ktor.client.engine/config(kotlin/Function1<#A, kotlin/Unit>): io.ktor.client.engine/HttpClientEngineFactory<#A> // io.ktor.client.engine/config|config@io.ktor.client.engine.HttpClientEngineFactory<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<io.ktor.client.engine.HttpClientEngineConfig>}[0]
final fun <#A: io.ktor.client.engine/HttpClientEngineConfig> io.ktor.client/HttpClient(io.ktor.client.engine/HttpClientEngineFactory<#A>, kotlin/Function1<io.ktor.client/HttpClientConfig<#A>, kotlin/Unit> = ...): io.ktor.client/HttpClient // io.ktor.client/HttpClient|HttpClient(io.ktor.client.engine.HttpClientEngineFactory<0:0>;kotlin.Function1<io.ktor.client.HttpClientConfig<0:0>,kotlin.Unit>){0§<io.ktor.client.engine.HttpClientEngineConfig>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> (io.ktor.client/HttpClient).io.ktor.client.plugins/plugin(io.ktor.client.plugins/HttpClientPlugin<#A, #B>): #B // io.ktor.client.plugins/plugin|plugin@io.ktor.client.HttpClient(io.ktor.client.plugins.HttpClientPlugin<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> (io.ktor.client/HttpClient).io.ktor.client.plugins/pluginOrNull(io.ktor.client.plugins/HttpClientPlugin<#A, #B>): #B? // io.ktor.client.plugins/pluginOrNull|pluginOrNull@io.ktor.client.HttpClient(io.ktor.client.plugins.HttpClientPlugin<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> io.ktor.client.plugins.api/createClientPlugin(kotlin/String, kotlin/Function0<#A>, kotlin/Function1<io.ktor.client.plugins.api/ClientPluginBuilder<#A>, kotlin/Unit>): io.ktor.client.plugins.api/ClientPlugin<#A> // io.ktor.client.plugins.api/createClientPlugin|createClientPlugin(kotlin.String;kotlin.Function0<0:0>;kotlin.Function1<io.ktor.client.plugins.api.ClientPluginBuilder<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun io.ktor.client.engine/mergeHeaders(io.ktor.http/Headers, io.ktor.http.content/OutgoingContent, kotlin/Function2<kotlin/String, kotlin/String, kotlin/Unit>) // io.ktor.client.engine/mergeHeaders|mergeHeaders(io.ktor.http.Headers;io.ktor.http.content.OutgoingContent;kotlin.Function2<kotlin.String,kotlin.String,kotlin.Unit>){}[0]
final fun io.ktor.client.network.sockets/SocketTimeoutException(kotlin/String, kotlin/Throwable? = ...): io.ktor.client.network.sockets/SocketTimeoutException // io.ktor.client.network.sockets/SocketTimeoutException|SocketTimeoutException(kotlin.String;kotlin.Throwable?){}[0]
final fun io.ktor.client.plugins.api/createClientPlugin(kotlin/String, kotlin/Function1<io.ktor.client.plugins.api/ClientPluginBuilder<kotlin/Unit>, kotlin/Unit>): io.ktor.client.plugins.api/ClientPlugin<kotlin/Unit> // io.ktor.client.plugins.api/createClientPlugin|createClientPlugin(kotlin.String;kotlin.Function1<io.ktor.client.plugins.api.ClientPluginBuilder<kotlin.Unit>,kotlin.Unit>){}[0]
final fun io.ktor.client.plugins.websocket/WebSockets(kotlin.time/Duration?, kotlin/Long = ...): io.ktor.client.plugins.websocket/WebSockets // io.ktor.client.plugins.websocket/WebSockets|WebSockets(kotlin.time.Duration?;kotlin.Long){}[0]
final fun io.ktor.client.plugins/ConnectTimeoutException(io.ktor.client.request/HttpRequestData, kotlin/Throwable? = ...): io.ktor.client.network.sockets/ConnectTimeoutException // io.ktor.client.plugins/ConnectTimeoutException|ConnectTimeoutException(io.ktor.client.request.HttpRequestData;kotlin.Throwable?){}[0]
final fun io.ktor.client.plugins/ConnectTimeoutException(kotlin/String, kotlin/Long?, kotlin/Throwable? = ...): io.ktor.client.network.sockets/ConnectTimeoutException // io.ktor.client.plugins/ConnectTimeoutException|ConnectTimeoutException(kotlin.String;kotlin.Long?;kotlin.Throwable?){}[0]
final fun io.ktor.client.plugins/SocketTimeoutException(io.ktor.client.request/HttpRequestData, kotlin/Throwable? = ...): io.ktor.client.network.sockets/SocketTimeoutException // io.ktor.client.plugins/SocketTimeoutException|SocketTimeoutException(io.ktor.client.request.HttpRequestData;kotlin.Throwable?){}[0]
final fun io.ktor.client.plugins/convertLongTimeoutToIntWithInfiniteAsZero(kotlin/Long): kotlin/Int // io.ktor.client.plugins/convertLongTimeoutToIntWithInfiniteAsZero|convertLongTimeoutToIntWithInfiniteAsZero(kotlin.Long){}[0]
final fun io.ktor.client.plugins/convertLongTimeoutToLongWithInfiniteAsZero(kotlin/Long): kotlin/Long // io.ktor.client.plugins/convertLongTimeoutToLongWithInfiniteAsZero|convertLongTimeoutToLongWithInfiniteAsZero(kotlin.Long){}[0]
final fun io.ktor.client.request.forms/formData(kotlin/Array<out io.ktor.client.request.forms/FormPart<*>>...): kotlin.collections/List<io.ktor.http.content/PartData> // io.ktor.client.request.forms/formData|formData(kotlin.Array<out|io.ktor.client.request.forms.FormPart<*>>...){}[0]
final fun io.ktor.client.request.forms/formData(kotlin/Function1<io.ktor.client.request.forms/FormBuilder, kotlin/Unit>): kotlin.collections/List<io.ktor.http.content/PartData> // io.ktor.client.request.forms/formData|formData(kotlin.Function1<io.ktor.client.request.forms.FormBuilder,kotlin.Unit>){}[0]
final fun io.ktor.client.request/request(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.request/HttpRequestBuilder // io.ktor.client.request/request|request(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final fun io.ktor.client.utils/buildHeaders(kotlin/Function1<io.ktor.http/HeadersBuilder, kotlin/Unit> = ...): io.ktor.http/Headers // io.ktor.client.utils/buildHeaders|buildHeaders(kotlin.Function1<io.ktor.http.HeadersBuilder,kotlin.Unit>){}[0]
final fun io.ktor.client/HttpClient(io.ktor.client.engine/HttpClientEngine, kotlin/Function1<io.ktor.client/HttpClientConfig<*>, kotlin/Unit>): io.ktor.client/HttpClient // io.ktor.client/HttpClient|HttpClient(io.ktor.client.engine.HttpClientEngine;kotlin.Function1<io.ktor.client.HttpClientConfig<*>,kotlin.Unit>){}[0]
final fun io.ktor.client/HttpClient(kotlin/Function1<io.ktor.client/HttpClientConfig<*>, kotlin/Unit> = ...): io.ktor.client/HttpClient // io.ktor.client/HttpClient|HttpClient(kotlin.Function1<io.ktor.client.HttpClientConfig<*>,kotlin.Unit>){}[0]
final inline fun (io.ktor.client.request.forms/FormBuilder).io.ktor.client.request.forms/append(kotlin/String, io.ktor.http/Headers = ..., kotlin/Long? = ..., crossinline kotlin/Function1<kotlinx.io/Sink, kotlin/Unit>) // io.ktor.client.request.forms/append|append@io.ktor.client.request.forms.FormBuilder(kotlin.String;io.ktor.http.Headers;kotlin.Long?;kotlin.Function1<kotlinx.io.Sink,kotlin.Unit>){}[0]
final inline fun <#A: kotlin/Any?> io.ktor.client.plugins/unwrapRequestTimeoutException(kotlin/Function0<#A>): #A // io.ktor.client.plugins/unwrapRequestTimeoutException|unwrapRequestTimeoutException(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.client.plugins.sse/SSESessionWithDeserialization).io.ktor.client.plugins.sse/deserialize(io.ktor.sse/TypedServerSentEvent<kotlin/String>): #A? // io.ktor.client.plugins.sse/deserialize|deserialize@io.ktor.client.plugins.sse.SSESessionWithDeserialization(io.ktor.sse.TypedServerSentEvent<kotlin.String>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.client.plugins.sse/SSESessionWithDeserialization).io.ktor.client.plugins.sse/deserialize(kotlin/String?): #A? // io.ktor.client.plugins.sse/deserialize|deserialize@io.ktor.client.plugins.sse.SSESessionWithDeserialization(kotlin.String?){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.client.request/HttpRequestBuilder).io.ktor.client.request/setBody(#A) // io.ktor.client.request/setBody|setBody@io.ktor.client.request.HttpRequestBuilder(0:0){0§<kotlin.Any?>}[0]
final suspend fun (io.ktor.client.call/HttpClientCall).io.ktor.client.call/save(): io.ktor.client.call/HttpClientCall // io.ktor.client.call/save|save@io.ktor.client.call.HttpClientCall(){}[0]
final suspend fun (io.ktor.client.plugins.cache.storage/CacheStorage).io.ktor.client.plugins.cache.storage/store(io.ktor.client.statement/HttpResponse): io.ktor.client.plugins.cache.storage/CachedResponseData // io.ktor.client.plugins.cache.storage/store|store@io.ktor.client.plugins.cache.storage.CacheStorage(io.ktor.client.statement.HttpResponse){}[0]
final suspend fun (io.ktor.client.plugins.cache.storage/CacheStorage).io.ktor.client.plugins.cache.storage/store(io.ktor.client.statement/HttpResponse, kotlin.collections/Map<kotlin/String, kotlin/String>, kotlin/Boolean = ...): io.ktor.client.plugins.cache.storage/CachedResponseData // io.ktor.client.plugins.cache.storage/store|store@io.ktor.client.plugins.cache.storage.CacheStorage(io.ktor.client.statement.HttpResponse;kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.Boolean){}[0]
final suspend fun (io.ktor.client.plugins.cookies/CookiesStorage).io.ktor.client.plugins.cookies/addCookie(kotlin/String, io.ktor.http/Cookie) // io.ktor.client.plugins.cookies/addCookie|addCookie@io.ktor.client.plugins.cookies.CookiesStorage(kotlin.String;io.ktor.http.Cookie){}[0]
final suspend fun (io.ktor.client.plugins.websocket/DefaultClientWebSocketSession).io.ktor.client.plugins.websocket/sendSerialized(kotlin/Any?, io.ktor.util.reflect/TypeInfo) // io.ktor.client.plugins.websocket/sendSerialized|sendSerialized@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession(kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/bodyAsBytes(): kotlin/ByteArray // io.ktor.client.statement/bodyAsBytes|bodyAsBytes@io.ktor.client.statement.HttpResponse(){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/bodyAsChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.client.statement/bodyAsChannel|bodyAsChannel@io.ktor.client.statement.HttpResponse(){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/bodyAsText(io.ktor.utils.io.charsets/Charset = ...): kotlin/String // io.ktor.client.statement/bodyAsText|bodyAsText@io.ktor.client.statement.HttpResponse(io.ktor.utils.io.charsets.Charset){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/discardRemaining() // io.ktor.client.statement/discardRemaining|discardRemaining@io.ktor.client.statement.HttpResponse(){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/readBytes(): kotlin/ByteArray // io.ktor.client.statement/readBytes|readBytes@io.ktor.client.statement.HttpResponse(){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/readBytes(kotlin/Int): kotlin/ByteArray // io.ktor.client.statement/readBytes|readBytes@io.ktor.client.statement.HttpResponse(kotlin.Int){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).io.ktor.client.statement/readRawBytes(): kotlin/ByteArray // io.ktor.client.statement/readRawBytes|readRawBytes@io.ktor.client.statement.HttpResponse(){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.cookies/cookies(io.ktor.http/Url): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/cookies|cookies@io.ktor.client.HttpClient(io.ktor.http.Url){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.cookies/cookies(kotlin/String): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.client.plugins.cookies/cookies|cookies@io.ktor.client.HttpClient(kotlin.String){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/String, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.String;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/String, kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.String;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEvents(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/serverSentEvents|serverSentEvents@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin/String, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.String;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin/String, kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.String;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/serverSentEventsSession(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/serverSentEventsSession|serverSentEventsSession@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESession, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sse(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization, kotlin/Unit>) // io.ktor.client.plugins.sse/sse|sse@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.sse.ClientSSESessionWithDeserialization,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin/String, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.String;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin/String, kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.String;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESession // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.sse/sseSession(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function2<io.ktor.util.reflect/TypeInfo, kotlin/String, kotlin/Any?>, kotlin.time/Duration? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.sse/ClientSSESessionWithDeserialization // io.ktor.client.plugins.sse/sseSession|sseSession@io.ktor.client.HttpClient(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function2<io.ktor.util.reflect.TypeInfo,kotlin.String,kotlin.Any?>;kotlin.time.Duration?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocket(io.ktor.http/HttpMethod = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/webSocket|webSocket@io.ktor.client.HttpClient(io.ktor.http.HttpMethod;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocket(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/webSocket|webSocket@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocket(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/webSocket|webSocket@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocketSession(io.ktor.http/HttpMethod = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.websocket/DefaultClientWebSocketSession // io.ktor.client.plugins.websocket/webSocketSession|webSocketSession@io.ktor.client.HttpClient(io.ktor.http.HttpMethod;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocketSession(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.plugins.websocket/DefaultClientWebSocketSession // io.ktor.client.plugins.websocket/webSocketSession|webSocketSession@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/webSocketSession(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.plugins.websocket/DefaultClientWebSocketSession // io.ktor.client.plugins.websocket/webSocketSession|webSocketSession@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/ws(io.ktor.http/HttpMethod = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/ws|ws@io.ktor.client.HttpClient(io.ktor.http.HttpMethod;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/ws(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/ws|ws@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/ws(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/ws|ws@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/wss(io.ktor.http/HttpMethod = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/wss|wss@io.ktor.client.HttpClient(io.ktor.http.HttpMethod;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/wss(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>, kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/wss|wss@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.plugins.websocket/wss(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ..., kotlin.coroutines/SuspendFunction1<io.ktor.client.plugins.websocket/DefaultClientWebSocketSession, kotlin/Unit>) // io.ktor.client.plugins.websocket/wss|wss@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>;kotlin.coroutines.SuspendFunction1<io.ktor.client.plugins.websocket.DefaultClientWebSocketSession,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/prepareForm(kotlin/String, io.ktor.http/Parameters = ..., kotlin/Boolean = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request.forms/prepareForm|prepareForm@io.ktor.client.HttpClient(kotlin.String;io.ktor.http.Parameters;kotlin.Boolean;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/submitForm(kotlin/String, io.ktor.http/Parameters = ..., kotlin/Boolean = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request.forms/submitForm|submitForm@io.ktor.client.HttpClient(kotlin.String;io.ktor.http.Parameters;kotlin.Boolean;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend fun <#A: kotlin/Any?> (io.ktor.client.plugins.websocket/DefaultClientWebSocketSession).io.ktor.client.plugins.websocket/receiveDeserialized(io.ktor.util.reflect/TypeInfo): #A // io.ktor.client.plugins.websocket/receiveDeserialized|receiveDeserialized@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.ktor.client.statement/HttpResponse).io.ktor.client.call/body(io.ktor.util.reflect/TypeInfo): #A // io.ktor.client.call/body|body@io.ktor.client.statement.HttpResponse(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>}[0]
final suspend fun io.ktor.client.engine/callContext(): kotlin.coroutines/CoroutineContext // io.ktor.client.engine/callContext|callContext(){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/prepareForm(io.ktor.http/Parameters = ..., kotlin/Boolean = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request.forms/prepareForm|prepareForm@io.ktor.client.HttpClient(io.ktor.http.Parameters;kotlin.Boolean;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/prepareFormWithBinaryData(kotlin.collections/List<io.ktor.http.content/PartData>, crossinline kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request.forms/prepareFormWithBinaryData|prepareFormWithBinaryData@io.ktor.client.HttpClient(kotlin.collections.List<io.ktor.http.content.PartData>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/prepareFormWithBinaryData(kotlin/String, kotlin.collections/List<io.ktor.http.content/PartData>, crossinline kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request.forms/prepareFormWithBinaryData|prepareFormWithBinaryData@io.ktor.client.HttpClient(kotlin.String;kotlin.collections.List<io.ktor.http.content.PartData>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/submitForm(io.ktor.http/Parameters = ..., kotlin/Boolean = ..., kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request.forms/submitForm|submitForm@io.ktor.client.HttpClient(io.ktor.http.Parameters;kotlin.Boolean;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/submitFormWithBinaryData(kotlin.collections/List<io.ktor.http.content/PartData>, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request.forms/submitFormWithBinaryData|submitFormWithBinaryData@io.ktor.client.HttpClient(kotlin.collections.List<io.ktor.http.content.PartData>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request.forms/submitFormWithBinaryData(kotlin/String, kotlin.collections/List<io.ktor.http.content/PartData>, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request.forms/submitFormWithBinaryData|submitFormWithBinaryData@io.ktor.client.HttpClient(kotlin.String;kotlin.collections.List<io.ktor.http.content.PartData>;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/delete(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/delete|delete@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/delete(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/delete|delete@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/delete(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/delete|delete@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/delete(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/delete|delete@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/get(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/get|get@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/get(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/get|get@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/get(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/get|get@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/get(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/get|get@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/head(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/head|head@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/head(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/head|head@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/head(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/head|head@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/head(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/head|head@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/options(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/options|options@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/options(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/options|options@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/options(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/options|options@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/options(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/options|options@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/patch(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/patch|patch@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/patch(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/patch|patch@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/patch(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/patch|patch@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/patch(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/patch|patch@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/post(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/post|post@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/post(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/post|post@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/post(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/post|post@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/post(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/post|post@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareDelete(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareDelete|prepareDelete@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareDelete(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareDelete|prepareDelete@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareDelete(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareDelete|prepareDelete@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareDelete(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareDelete|prepareDelete@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareGet(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareGet|prepareGet@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareGet(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareGet|prepareGet@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareGet(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareGet|prepareGet@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareGet(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareGet|prepareGet@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareHead(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareHead|prepareHead@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareHead(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareHead|prepareHead@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareHead(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareHead|prepareHead@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareHead(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareHead|prepareHead@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareOptions(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareOptions|prepareOptions@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareOptions(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareOptions|prepareOptions@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareOptions(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareOptions|prepareOptions@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareOptions(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareOptions|prepareOptions@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePatch(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePatch|preparePatch@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePatch(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePatch|preparePatch@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePatch(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePatch|preparePatch@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePatch(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePatch|preparePatch@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePost(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePost|preparePost@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePost(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePost|preparePost@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePost(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePost|preparePost@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePost(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePost|preparePost@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePut(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePut|preparePut@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePut(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePut|preparePut@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePut(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePut|preparePut@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/preparePut(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/preparePut|preparePut@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareRequest(io.ktor.client.request/HttpRequestBuilder = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareRequest|prepareRequest@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareRequest(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareRequest|prepareRequest@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareRequest(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareRequest|prepareRequest@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/prepareRequest(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpStatement // io.ktor.client.request/prepareRequest|prepareRequest@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/put(io.ktor.client.request/HttpRequestBuilder): io.ktor.client.statement/HttpResponse // io.ktor.client.request/put|put@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/put(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/put|put@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/put(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/put|put@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/put(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/put|put@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/request(io.ktor.client.request/HttpRequestBuilder = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/request|request@io.ktor.client.HttpClient(io.ktor.client.request.HttpRequestBuilder){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/request(io.ktor.http/Url, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/request|request@io.ktor.client.HttpClient(io.ktor.http.Url;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/request(kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit>): io.ktor.client.statement/HttpResponse // io.ktor.client.request/request|request@io.ktor.client.HttpClient(kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun (io.ktor.client/HttpClient).io.ktor.client.request/request(kotlin/String, kotlin/Function1<io.ktor.client.request/HttpRequestBuilder, kotlin/Unit> = ...): io.ktor.client.statement/HttpResponse // io.ktor.client.request/request|request@io.ktor.client.HttpClient(kotlin.String;kotlin.Function1<io.ktor.client.request.HttpRequestBuilder,kotlin.Unit>){}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.client.call/HttpClientCall).io.ktor.client.call/body(): #A // io.ktor.client.call/body|body@io.ktor.client.call.HttpClientCall(){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.client.plugins.websocket/DefaultClientWebSocketSession).io.ktor.client.plugins.websocket/receiveDeserialized(): #A // io.ktor.client.plugins.websocket/receiveDeserialized|receiveDeserialized@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession(){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.client.plugins.websocket/DefaultClientWebSocketSession).io.ktor.client.plugins.websocket/sendSerialized(#A) // io.ktor.client.plugins.websocket/sendSerialized|sendSerialized@io.ktor.client.plugins.websocket.DefaultClientWebSocketSession(0:0){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.client.statement/HttpResponse).io.ktor.client.call/body(): #A // io.ktor.client.call/body|body@io.ktor.client.statement.HttpResponse(){0§<kotlin.Any?>}[0]

// Targets: [js, wasmJs]
abstract interface io.ktor.client.fetch/AbortSignal : io.ktor.client.fetch/EventTarget { // io.ktor.client.fetch/AbortSignal|null[0]
    abstract var aborted // io.ktor.client.fetch/AbortSignal.aborted|{}aborted[0]
        abstract fun <get-aborted>(): kotlin/Boolean // io.ktor.client.fetch/AbortSignal.aborted.<get-aborted>|<get-aborted>(){}[0]
        abstract fun <set-aborted>(kotlin/Boolean) // io.ktor.client.fetch/AbortSignal.aborted.<set-aborted>|<set-aborted>(kotlin.Boolean){}[0]
    open var onabort // io.ktor.client.fetch/AbortSignal.onabort|{}onabort[0]
        // Targets: [js]
        open fun <get-onabort>(): kotlin/Function2<io.ktor.client.fetch/AbortSignal, io.ktor.client.fetch/Event, kotlin/Any>? // io.ktor.client.fetch/AbortSignal.onabort.<get-onabort>|<get-onabort>(){}[0]

        // Targets: [js]
        open fun <set-onabort>(kotlin/Function2<io.ktor.client.fetch/AbortSignal, io.ktor.client.fetch/Event, kotlin/Any>?) // io.ktor.client.fetch/AbortSignal.onabort.<set-onabort>|<set-onabort>(kotlin.Function2<io.ktor.client.fetch.AbortSignal,io.ktor.client.fetch.Event,kotlin.Any>?){}[0]

        // Targets: [wasmJs]
        open fun <get-onabort>(): kotlin/Function2<io.ktor.client.fetch/AbortSignal, io.ktor.client.fetch/Event, kotlin.js/JsAny>? // io.ktor.client.fetch/AbortSignal.onabort.<get-onabort>|<get-onabort>(){}[0]

        // Targets: [wasmJs]
        open fun <set-onabort>(kotlin/Function2<io.ktor.client.fetch/AbortSignal, io.ktor.client.fetch/Event, kotlin.js/JsAny>?) // io.ktor.client.fetch/AbortSignal.onabort.<set-onabort>|<set-onabort>(kotlin.Function2<io.ktor.client.fetch.AbortSignal,io.ktor.client.fetch.Event,kotlin.js.JsAny>?){}[0]

    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/AddEventListenerOptions?) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean?) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/AddEventListenerOptions?) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean?) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/EventListenerOptions?) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean?) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/EventListenerOptions?) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean?) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>){0§<kotlin.Any>}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>;io.ktor.client.fetch.AddEventListenerOptions?){0§<kotlin.Any>}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>, kotlin/Boolean? = ...) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>;kotlin.Boolean?){0§<kotlin.Any>}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>){0§<kotlin.Any>}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>;io.ktor.client.fetch.EventListenerOptions?){0§<kotlin.Any>}[0]

    // Targets: [js]
    abstract fun <#A1: kotlin/Any> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin/Any, kotlin/Any>, kotlin/Boolean? = ...) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.Any,kotlin.Any>;kotlin.Boolean?){0§<kotlin.Any>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>){0§<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;io.ktor.client.fetch.AddEventListenerOptions?){0§<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, kotlin/Boolean? = ...) // io.ktor.client.fetch/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;kotlin.Boolean?){0§<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>){0§<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;io.ktor.client.fetch.EventListenerOptions?){0§<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<io.ktor.client.fetch/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, kotlin/Boolean? = ...) // io.ktor.client.fetch/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<io.ktor.client.fetch.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;kotlin.Boolean?){0§<kotlin.js.JsAny>}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.fetch/AddEventListenerOptions : io.ktor.client.fetch/EventListenerOptions { // io.ktor.client.fetch/AddEventListenerOptions|null[0]
    open var once // io.ktor.client.fetch/AddEventListenerOptions.once|{}once[0]
        open fun <get-once>(): kotlin/Boolean? // io.ktor.client.fetch/AddEventListenerOptions.once.<get-once>|<get-once>(){}[0]
        open fun <set-once>(kotlin/Boolean?) // io.ktor.client.fetch/AddEventListenerOptions.once.<set-once>|<set-once>(kotlin.Boolean?){}[0]
    open var passive // io.ktor.client.fetch/AddEventListenerOptions.passive|{}passive[0]
        open fun <get-passive>(): kotlin/Boolean? // io.ktor.client.fetch/AddEventListenerOptions.passive.<get-passive>|<get-passive>(){}[0]
        open fun <set-passive>(kotlin/Boolean?) // io.ktor.client.fetch/AddEventListenerOptions.passive.<set-passive>|<set-passive>(kotlin.Boolean?){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.fetch/Request : io.ktor.client.fetch/Body { // io.ktor.client.fetch/Request|null[0]
    abstract var headers // io.ktor.client.fetch/Request.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.client.fetch/Headers // io.ktor.client.fetch/Request.headers.<get-headers>|<get-headers>(){}[0]
        abstract fun <set-headers>(io.ktor.client.fetch/Headers) // io.ktor.client.fetch/Request.headers.<set-headers>|<set-headers>(io.ktor.client.fetch.Headers){}[0]
    abstract var integrity // io.ktor.client.fetch/Request.integrity|{}integrity[0]
        abstract fun <get-integrity>(): kotlin/String // io.ktor.client.fetch/Request.integrity.<get-integrity>|<get-integrity>(){}[0]
        abstract fun <set-integrity>(kotlin/String) // io.ktor.client.fetch/Request.integrity.<set-integrity>|<set-integrity>(kotlin.String){}[0]
    abstract var isHistoryNavigation // io.ktor.client.fetch/Request.isHistoryNavigation|{}isHistoryNavigation[0]
        abstract fun <get-isHistoryNavigation>(): kotlin/Boolean // io.ktor.client.fetch/Request.isHistoryNavigation.<get-isHistoryNavigation>|<get-isHistoryNavigation>(){}[0]
        abstract fun <set-isHistoryNavigation>(kotlin/Boolean) // io.ktor.client.fetch/Request.isHistoryNavigation.<set-isHistoryNavigation>|<set-isHistoryNavigation>(kotlin.Boolean){}[0]
    abstract var isReloadNavigation // io.ktor.client.fetch/Request.isReloadNavigation|{}isReloadNavigation[0]
        abstract fun <get-isReloadNavigation>(): kotlin/Boolean // io.ktor.client.fetch/Request.isReloadNavigation.<get-isReloadNavigation>|<get-isReloadNavigation>(){}[0]
        abstract fun <set-isReloadNavigation>(kotlin/Boolean) // io.ktor.client.fetch/Request.isReloadNavigation.<set-isReloadNavigation>|<set-isReloadNavigation>(kotlin.Boolean){}[0]
    abstract var keepalive // io.ktor.client.fetch/Request.keepalive|{}keepalive[0]
        abstract fun <get-keepalive>(): kotlin/Boolean // io.ktor.client.fetch/Request.keepalive.<get-keepalive>|<get-keepalive>(){}[0]
        abstract fun <set-keepalive>(kotlin/Boolean) // io.ktor.client.fetch/Request.keepalive.<set-keepalive>|<set-keepalive>(kotlin.Boolean){}[0]
    abstract var method // io.ktor.client.fetch/Request.method|{}method[0]
        abstract fun <get-method>(): kotlin/String // io.ktor.client.fetch/Request.method.<get-method>|<get-method>(){}[0]
        abstract fun <set-method>(kotlin/String) // io.ktor.client.fetch/Request.method.<set-method>|<set-method>(kotlin.String){}[0]
    abstract var referrer // io.ktor.client.fetch/Request.referrer|{}referrer[0]
        abstract fun <get-referrer>(): kotlin/String // io.ktor.client.fetch/Request.referrer.<get-referrer>|<get-referrer>(){}[0]
        abstract fun <set-referrer>(kotlin/String) // io.ktor.client.fetch/Request.referrer.<set-referrer>|<set-referrer>(kotlin.String){}[0]
    abstract var signal // io.ktor.client.fetch/Request.signal|{}signal[0]
        abstract fun <get-signal>(): io.ktor.client.fetch/AbortSignal // io.ktor.client.fetch/Request.signal.<get-signal>|<get-signal>(){}[0]
        abstract fun <set-signal>(io.ktor.client.fetch/AbortSignal) // io.ktor.client.fetch/Request.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal){}[0]
    abstract var url // io.ktor.client.fetch/Request.url|{}url[0]
        abstract fun <get-url>(): kotlin/String // io.ktor.client.fetch/Request.url.<get-url>|<get-url>(){}[0]
        abstract fun <set-url>(kotlin/String) // io.ktor.client.fetch/Request.url.<set-url>|<set-url>(kotlin.String){}[0]
    open var cache // io.ktor.client.fetch/Request.cache|{}cache[0]
        // Targets: [js]
        open fun <get-cache>(): dynamic // io.ktor.client.fetch/Request.cache.<get-cache>|<get-cache>(){}[0]

        // Targets: [js]
        open fun <set-cache>(dynamic) // io.ktor.client.fetch/Request.cache.<set-cache>|<set-cache>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-cache>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.cache.<get-cache>|<get-cache>(){}[0]

        // Targets: [wasmJs]
        open fun <set-cache>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.cache.<set-cache>|<set-cache>(kotlin.js.JsAny?){}[0]
    open var credentials // io.ktor.client.fetch/Request.credentials|{}credentials[0]
        // Targets: [js]
        open fun <get-credentials>(): dynamic // io.ktor.client.fetch/Request.credentials.<get-credentials>|<get-credentials>(){}[0]

        // Targets: [js]
        open fun <set-credentials>(dynamic) // io.ktor.client.fetch/Request.credentials.<set-credentials>|<set-credentials>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-credentials>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.credentials.<get-credentials>|<get-credentials>(){}[0]

        // Targets: [wasmJs]
        open fun <set-credentials>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.credentials.<set-credentials>|<set-credentials>(kotlin.js.JsAny?){}[0]
    open var destination // io.ktor.client.fetch/Request.destination|{}destination[0]
        // Targets: [js]
        open fun <get-destination>(): dynamic // io.ktor.client.fetch/Request.destination.<get-destination>|<get-destination>(){}[0]

        // Targets: [js]
        open fun <set-destination>(dynamic) // io.ktor.client.fetch/Request.destination.<set-destination>|<set-destination>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-destination>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.destination.<get-destination>|<get-destination>(){}[0]

        // Targets: [wasmJs]
        open fun <set-destination>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.destination.<set-destination>|<set-destination>(kotlin.js.JsAny?){}[0]
    open var mode // io.ktor.client.fetch/Request.mode|{}mode[0]
        // Targets: [js]
        open fun <get-mode>(): dynamic // io.ktor.client.fetch/Request.mode.<get-mode>|<get-mode>(){}[0]

        // Targets: [js]
        open fun <set-mode>(dynamic) // io.ktor.client.fetch/Request.mode.<set-mode>|<set-mode>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-mode>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.mode.<get-mode>|<get-mode>(){}[0]

        // Targets: [wasmJs]
        open fun <set-mode>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.mode.<set-mode>|<set-mode>(kotlin.js.JsAny?){}[0]
    open var redirect // io.ktor.client.fetch/Request.redirect|{}redirect[0]
        // Targets: [js]
        open fun <get-redirect>(): dynamic // io.ktor.client.fetch/Request.redirect.<get-redirect>|<get-redirect>(){}[0]

        // Targets: [js]
        open fun <set-redirect>(dynamic) // io.ktor.client.fetch/Request.redirect.<set-redirect>|<set-redirect>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-redirect>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.redirect.<get-redirect>|<get-redirect>(){}[0]

        // Targets: [wasmJs]
        open fun <set-redirect>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.redirect.<set-redirect>|<set-redirect>(kotlin.js.JsAny?){}[0]
    open var referrerPolicy // io.ktor.client.fetch/Request.referrerPolicy|{}referrerPolicy[0]
        // Targets: [js]
        open fun <get-referrerPolicy>(): dynamic // io.ktor.client.fetch/Request.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]

        // Targets: [js]
        open fun <set-referrerPolicy>(dynamic) // io.ktor.client.fetch/Request.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-referrerPolicy>(): kotlin.js/JsAny? // io.ktor.client.fetch/Request.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]

        // Targets: [wasmJs]
        open fun <set-referrerPolicy>(kotlin.js/JsAny?) // io.ktor.client.fetch/Request.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(kotlin.js.JsAny?){}[0]

    abstract fun clone(): io.ktor.client.fetch/Request // io.ktor.client.fetch/Request.clone|clone(){}[0]
}

// Targets: [js, wasmJs]
abstract interface io.ktor.client.fetch/Response : io.ktor.client.fetch/Body { // io.ktor.client.fetch/Response|null[0]
    abstract var headers // io.ktor.client.fetch/Response.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.client.fetch/Headers // io.ktor.client.fetch/Response.headers.<get-headers>|<get-headers>(){}[0]
        abstract fun <set-headers>(io.ktor.client.fetch/Headers) // io.ktor.client.fetch/Response.headers.<set-headers>|<set-headers>(io.ktor.client.fetch.Headers){}[0]
    abstract var ok // io.ktor.client.fetch/Response.ok|{}ok[0]
        abstract fun <get-ok>(): kotlin/Boolean // io.ktor.client.fetch/Response.ok.<get-ok>|<get-ok>(){}[0]
        abstract fun <set-ok>(kotlin/Boolean) // io.ktor.client.fetch/Response.ok.<set-ok>|<set-ok>(kotlin.Boolean){}[0]
    abstract var redirected // io.ktor.client.fetch/Response.redirected|{}redirected[0]
        abstract fun <get-redirected>(): kotlin/Boolean // io.ktor.client.fetch/Response.redirected.<get-redirected>|<get-redirected>(){}[0]
        abstract fun <set-redirected>(kotlin/Boolean) // io.ktor.client.fetch/Response.redirected.<set-redirected>|<set-redirected>(kotlin.Boolean){}[0]
    abstract var status // io.ktor.client.fetch/Response.status|{}status[0]
        // Targets: [js]
        abstract fun <get-status>(): kotlin/Number // io.ktor.client.fetch/Response.status.<get-status>|<get-status>(){}[0]

        // Targets: [js]
        abstract fun <set-status>(kotlin/Number) // io.ktor.client.fetch/Response.status.<set-status>|<set-status>(kotlin.Number){}[0]

        // Targets: [wasmJs]
        abstract fun <get-status>(): kotlin/Int // io.ktor.client.fetch/Response.status.<get-status>|<get-status>(){}[0]

        // Targets: [wasmJs]
        abstract fun <set-status>(kotlin/Int) // io.ktor.client.fetch/Response.status.<set-status>|<set-status>(kotlin.Int){}[0]
    abstract var statusText // io.ktor.client.fetch/Response.statusText|{}statusText[0]
        abstract fun <get-statusText>(): kotlin/String // io.ktor.client.fetch/Response.statusText.<get-statusText>|<get-statusText>(){}[0]
        abstract fun <set-statusText>(kotlin/String) // io.ktor.client.fetch/Response.statusText.<set-statusText>|<set-statusText>(kotlin.String){}[0]
    abstract var trailer // io.ktor.client.fetch/Response.trailer|{}trailer[0]
        abstract fun <get-trailer>(): kotlin.js/Promise<io.ktor.client.fetch/Headers> // io.ktor.client.fetch/Response.trailer.<get-trailer>|<get-trailer>(){}[0]
        abstract fun <set-trailer>(kotlin.js/Promise<io.ktor.client.fetch/Headers>) // io.ktor.client.fetch/Response.trailer.<set-trailer>|<set-trailer>(kotlin.js.Promise<io.ktor.client.fetch.Headers>){}[0]
    abstract var url // io.ktor.client.fetch/Response.url|{}url[0]
        abstract fun <get-url>(): kotlin/String // io.ktor.client.fetch/Response.url.<get-url>|<get-url>(){}[0]
        abstract fun <set-url>(kotlin/String) // io.ktor.client.fetch/Response.url.<set-url>|<set-url>(kotlin.String){}[0]
    open var type // io.ktor.client.fetch/Response.type|{}type[0]
        // Targets: [js]
        open fun <get-type>(): dynamic // io.ktor.client.fetch/Response.type.<get-type>|<get-type>(){}[0]

        // Targets: [js]
        open fun <set-type>(dynamic) // io.ktor.client.fetch/Response.type.<set-type>|<set-type>(<dynamic>){}[0]

        // Targets: [wasmJs]
        open fun <get-type>(): kotlin.js/JsAny? // io.ktor.client.fetch/Response.type.<get-type>|<get-type>(){}[0]

        // Targets: [wasmJs]
        open fun <set-type>(kotlin.js/JsAny?) // io.ktor.client.fetch/Response.type.<set-type>|<set-type>(kotlin.js.JsAny?){}[0]

    abstract fun clone(): io.ktor.client.fetch/Response // io.ktor.client.fetch/Response.clone|clone(){}[0]
}

// Targets: [js, wasmJs]
final class io.ktor.client.engine.js/JsError : kotlin/Throwable { // io.ktor.client.engine.js/JsError|null[0]
    final val origin // io.ktor.client.engine.js/JsError.origin|{}origin[0]
        // Targets: [js]
        final fun <get-origin>(): dynamic // io.ktor.client.engine.js/JsError.origin.<get-origin>|<get-origin>(){}[0]

        // Targets: [wasmJs]
        final fun <get-origin>(): kotlin.js/JsAny // io.ktor.client.engine.js/JsError.origin.<get-origin>|<get-origin>(){}[0]

    // Targets: [js]
    constructor <init>(dynamic) // io.ktor.client.engine.js/JsError.<init>|<init>(<dynamic>){}[0]

    // Targets: [wasmJs]
    constructor <init>(kotlin.js/JsAny) // io.ktor.client.engine.js/JsError.<init>|<init>(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class io.ktor.client.engine.js/JsClientEngineConfig : io.ktor.client.engine/HttpClientEngineConfig { // io.ktor.client.engine.js/JsClientEngineConfig|null[0]
    constructor <init>() // io.ktor.client.engine.js/JsClientEngineConfig.<init>|<init>(){}[0]

    final var nodeOptions // io.ktor.client.engine.js/JsClientEngineConfig.nodeOptions|{}nodeOptions[0]
        // Targets: [js]
        final fun <get-nodeOptions>(): dynamic // io.ktor.client.engine.js/JsClientEngineConfig.nodeOptions.<get-nodeOptions>|<get-nodeOptions>(){}[0]

        // Targets: [js]
        final fun <set-nodeOptions>(dynamic) // io.ktor.client.engine.js/JsClientEngineConfig.nodeOptions.<set-nodeOptions>|<set-nodeOptions>(<dynamic>){}[0]

        // Targets: [wasmJs]
        final fun <get-nodeOptions>(): kotlin.js/JsAny // io.ktor.client.engine.js/JsClientEngineConfig.nodeOptions.<get-nodeOptions>|<get-nodeOptions>(){}[0]

        // Targets: [wasmJs]
        final fun <set-nodeOptions>(kotlin.js/JsAny) // io.ktor.client.engine.js/JsClientEngineConfig.nodeOptions.<set-nodeOptions>|<set-nodeOptions>(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
final object io.ktor.client.engine.js/Js : io.ktor.client.engine/HttpClientEngineFactory<io.ktor.client.engine.js/JsClientEngineConfig> { // io.ktor.client.engine.js/Js|null[0]
    final fun create(kotlin/Function1<io.ktor.client.engine.js/JsClientEngineConfig, kotlin/Unit>): io.ktor.client.engine/HttpClientEngine // io.ktor.client.engine.js/Js.create|create(kotlin.Function1<io.ktor.client.engine.js.JsClientEngineConfig,kotlin.Unit>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.client.engine.js/Js.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.client.engine.js/Js.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.client.engine.js/Js.toString|toString(){}[0]
}

// Targets: [js, wasmJs]
final fun io.ktor.client.engine.js/JsClient(): io.ktor.client.engine/HttpClientEngineFactory<io.ktor.client.engine.js/JsClientEngineConfig> // io.ktor.client.engine.js/JsClient|JsClient(){}[0]

// Targets: [js, wasmJs]
final fun io.ktor.client.fetch/fetch(kotlin/String, io.ktor.client.fetch/RequestInit? = ...): kotlin.js/Promise<org.w3c.fetch/Response> // io.ktor.client.fetch/fetch|fetch(kotlin.String;io.ktor.client.fetch.RequestInit?){}[0]

// Targets: [js, wasmJs]
final inline fun (io.ktor.client.fetch/EventListener).io.ktor.client.fetch/invoke(io.ktor.client.fetch/Event) // io.ktor.client.fetch/invoke|invoke@io.ktor.client.fetch.EventListener(io.ktor.client.fetch.Event){}[0]

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/ArrayLike { // io.ktor.client.fetch/ArrayLike|null[0]
    abstract var length // io.ktor.client.fetch/ArrayLike.length|{}length[0]
        abstract fun <get-length>(): kotlin/Number // io.ktor.client.fetch/ArrayLike.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Number) // io.ktor.client.fetch/ArrayLike.length.<set-length>|<set-length>(kotlin.Number){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/ReadableStream { // io.ktor.client.fetch/ReadableStream|null[0]
    abstract var locked // io.ktor.client.fetch/ReadableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // io.ktor.client.fetch/ReadableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // io.ktor.client.fetch/ReadableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun cancel(kotlin/Any? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStream.cancel|cancel(kotlin.Any?){}[0]
    abstract fun getReader(): io.ktor.client.fetch/ReadableStreamDefaultReader<#A> // io.ktor.client.fetch/ReadableStream.getReader|getReader(){}[0]
    abstract fun getReader(dynamic): io.ktor.client.fetch/ReadableStreamBYOBReader // io.ktor.client.fetch/ReadableStream.getReader|getReader(<dynamic>){}[0]
    abstract fun pipeTo(io.ktor.client.fetch/WritableStream<#A>, io.ktor.client.fetch/PipeOptions? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStream.pipeTo|pipeTo(io.ktor.client.fetch.WritableStream<1:0>;io.ktor.client.fetch.PipeOptions?){}[0]
    abstract fun tee(): dynamic // io.ktor.client.fetch/ReadableStream.tee|tee(){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/ReadableStreamDefaultReader { // io.ktor.client.fetch/ReadableStreamDefaultReader|null[0]
    abstract var closed // io.ktor.client.fetch/ReadableStreamDefaultReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStreamDefaultReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin/Unit>) // io.ktor.client.fetch/ReadableStreamDefaultReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.Unit>){}[0]

    abstract fun cancel(kotlin/Any? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStreamDefaultReader.cancel|cancel(kotlin.Any?){}[0]
    abstract fun read(): kotlin.js/Promise<io.ktor.client.fetch/ReadableStreamReadResult<#A>> // io.ktor.client.fetch/ReadableStreamDefaultReader.read|read(){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/ReadableStreamDefaultReader.releaseLock|releaseLock(){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/ReadableStreamReadResult { // io.ktor.client.fetch/ReadableStreamReadResult|null[0]
    abstract var done // io.ktor.client.fetch/ReadableStreamReadResult.done|{}done[0]
        abstract fun <get-done>(): kotlin/Boolean // io.ktor.client.fetch/ReadableStreamReadResult.done.<get-done>|<get-done>(){}[0]
        abstract fun <set-done>(kotlin/Boolean) // io.ktor.client.fetch/ReadableStreamReadResult.done.<set-done>|<set-done>(kotlin.Boolean){}[0]
    abstract var value // io.ktor.client.fetch/ReadableStreamReadResult.value|{}value[0]
        abstract fun <get-value>(): #A // io.ktor.client.fetch/ReadableStreamReadResult.value.<get-value>|<get-value>(){}[0]
        abstract fun <set-value>(#A) // io.ktor.client.fetch/ReadableStreamReadResult.value.<set-value>|<set-value>(1:0){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/WritableStream { // io.ktor.client.fetch/WritableStream|null[0]
    abstract var locked // io.ktor.client.fetch/WritableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // io.ktor.client.fetch/WritableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // io.ktor.client.fetch/WritableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun abort(kotlin/Any? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStream.abort|abort(kotlin.Any?){}[0]
    abstract fun getWriter(): io.ktor.client.fetch/WritableStreamDefaultWriter<#A> // io.ktor.client.fetch/WritableStream.getWriter|getWriter(){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?> io.ktor.client.fetch/WritableStreamDefaultWriter { // io.ktor.client.fetch/WritableStreamDefaultWriter|null[0]
    abstract var closed // io.ktor.client.fetch/WritableStreamDefaultWriter.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStreamDefaultWriter.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin/Unit>) // io.ktor.client.fetch/WritableStreamDefaultWriter.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.Unit>){}[0]
    abstract var ready // io.ktor.client.fetch/WritableStreamDefaultWriter.ready|{}ready[0]
        abstract fun <get-ready>(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStreamDefaultWriter.ready.<get-ready>|<get-ready>(){}[0]
        abstract fun <set-ready>(kotlin.js/Promise<kotlin/Unit>) // io.ktor.client.fetch/WritableStreamDefaultWriter.ready.<set-ready>|<set-ready>(kotlin.js.Promise<kotlin.Unit>){}[0]
    open var desiredSize // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize|{}desiredSize[0]
        open fun <get-desiredSize>(): kotlin/Number? // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize.<get-desiredSize>|<get-desiredSize>(){}[0]
        open fun <set-desiredSize>(kotlin/Number?) // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize.<set-desiredSize>|<set-desiredSize>(kotlin.Number?){}[0]

    abstract fun abort(kotlin/Any? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStreamDefaultWriter.abort|abort(kotlin.Any?){}[0]
    abstract fun close(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStreamDefaultWriter.close|close(){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/WritableStreamDefaultWriter.releaseLock|releaseLock(){}[0]
    abstract fun write(#A): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/WritableStreamDefaultWriter.write|write(1:0){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/AbortController { // io.ktor.client.fetch/AbortController|null[0]
    abstract var signal // io.ktor.client.fetch/AbortController.signal|{}signal[0]
        abstract fun <get-signal>(): io.ktor.client.fetch/AbortSignal // io.ktor.client.fetch/AbortController.signal.<get-signal>|<get-signal>(){}[0]
        abstract fun <set-signal>(io.ktor.client.fetch/AbortSignal) // io.ktor.client.fetch/AbortController.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal){}[0]

    abstract fun abort() // io.ktor.client.fetch/AbortController.abort|abort(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/ArrayBuffer { // io.ktor.client.fetch/ArrayBuffer|null[0]
    abstract var byteLength // io.ktor.client.fetch/ArrayBuffer.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Number // io.ktor.client.fetch/ArrayBuffer.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Number) // io.ktor.client.fetch/ArrayBuffer.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Number){}[0]

    abstract fun slice(kotlin/Number, kotlin/Number? = ...): io.ktor.client.fetch/ArrayBuffer // io.ktor.client.fetch/ArrayBuffer.slice|slice(kotlin.Number;kotlin.Number?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/ArrayBufferConstructor { // io.ktor.client.fetch/ArrayBufferConstructor|null[0]
    abstract var prototype // io.ktor.client.fetch/ArrayBufferConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): io.ktor.client.fetch/ArrayBuffer // io.ktor.client.fetch/ArrayBufferConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(io.ktor.client.fetch/ArrayBuffer) // io.ktor.client.fetch/ArrayBufferConstructor.prototype.<set-prototype>|<set-prototype>(io.ktor.client.fetch.ArrayBuffer){}[0]

    abstract fun isView(kotlin/Any): kotlin/Boolean // io.ktor.client.fetch/ArrayBufferConstructor.isView|isView(kotlin.Any){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/ArrayBufferView { // io.ktor.client.fetch/ArrayBufferView|null[0]
    abstract var buffer // io.ktor.client.fetch/ArrayBufferView.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin/Any // io.ktor.client.fetch/ArrayBufferView.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin/Any) // io.ktor.client.fetch/ArrayBufferView.buffer.<set-buffer>|<set-buffer>(kotlin.Any){}[0]
    abstract var byteLength // io.ktor.client.fetch/ArrayBufferView.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Number // io.ktor.client.fetch/ArrayBufferView.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Number) // io.ktor.client.fetch/ArrayBufferView.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Number){}[0]
    abstract var byteOffset // io.ktor.client.fetch/ArrayBufferView.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Number // io.ktor.client.fetch/ArrayBufferView.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Number) // io.ktor.client.fetch/ArrayBufferView.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Number){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Blob { // io.ktor.client.fetch/Blob|null[0]
    abstract var size // io.ktor.client.fetch/Blob.size|{}size[0]
        abstract fun <get-size>(): kotlin/Number // io.ktor.client.fetch/Blob.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(kotlin/Number) // io.ktor.client.fetch/Blob.size.<set-size>|<set-size>(kotlin.Number){}[0]
    abstract var type // io.ktor.client.fetch/Blob.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.fetch/Blob.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // io.ktor.client.fetch/Blob.type.<set-type>|<set-type>(kotlin.String){}[0]

    abstract fun slice(kotlin/Number? = ..., kotlin/Number? = ..., kotlin/String? = ...): io.ktor.client.fetch/Blob // io.ktor.client.fetch/Blob.slice|slice(kotlin.Number?;kotlin.Number?;kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Body { // io.ktor.client.fetch/Body|null[0]
    abstract var bodyUsed // io.ktor.client.fetch/Body.bodyUsed|{}bodyUsed[0]
        abstract fun <get-bodyUsed>(): kotlin/Boolean // io.ktor.client.fetch/Body.bodyUsed.<get-bodyUsed>|<get-bodyUsed>(){}[0]
        abstract fun <set-bodyUsed>(kotlin/Boolean) // io.ktor.client.fetch/Body.bodyUsed.<set-bodyUsed>|<set-bodyUsed>(kotlin.Boolean){}[0]
    open var body // io.ktor.client.fetch/Body.body|{}body[0]
        open fun <get-body>(): io.ktor.client.fetch/ReadableStream<io.ktor.client.fetch/Uint8Array>? // io.ktor.client.fetch/Body.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(io.ktor.client.fetch/ReadableStream<io.ktor.client.fetch/Uint8Array>?) // io.ktor.client.fetch/Body.body.<set-body>|<set-body>(io.ktor.client.fetch.ReadableStream<io.ktor.client.fetch.Uint8Array>?){}[0]

    abstract fun arrayBuffer(): kotlin.js/Promise<io.ktor.client.fetch/ArrayBuffer> // io.ktor.client.fetch/Body.arrayBuffer|arrayBuffer(){}[0]
    abstract fun blob(): kotlin.js/Promise<io.ktor.client.fetch/Blob> // io.ktor.client.fetch/Body.blob|blob(){}[0]
    abstract fun formData(): kotlin.js/Promise<io.ktor.client.fetch/FormData> // io.ktor.client.fetch/Body.formData|formData(){}[0]
    abstract fun json(): kotlin.js/Promise<kotlin/Any> // io.ktor.client.fetch/Body.json|json(){}[0]
    abstract fun text(): kotlin.js/Promise<kotlin/String> // io.ktor.client.fetch/Body.text|text(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Event { // io.ktor.client.fetch/Event|null[0]
    abstract var AT_TARGET // io.ktor.client.fetch/Event.AT_TARGET|{}AT_TARGET[0]
        abstract fun <get-AT_TARGET>(): kotlin/Number // io.ktor.client.fetch/Event.AT_TARGET.<get-AT_TARGET>|<get-AT_TARGET>(){}[0]
        abstract fun <set-AT_TARGET>(kotlin/Number) // io.ktor.client.fetch/Event.AT_TARGET.<set-AT_TARGET>|<set-AT_TARGET>(kotlin.Number){}[0]
    abstract var BUBBLING_PHASE // io.ktor.client.fetch/Event.BUBBLING_PHASE|{}BUBBLING_PHASE[0]
        abstract fun <get-BUBBLING_PHASE>(): kotlin/Number // io.ktor.client.fetch/Event.BUBBLING_PHASE.<get-BUBBLING_PHASE>|<get-BUBBLING_PHASE>(){}[0]
        abstract fun <set-BUBBLING_PHASE>(kotlin/Number) // io.ktor.client.fetch/Event.BUBBLING_PHASE.<set-BUBBLING_PHASE>|<set-BUBBLING_PHASE>(kotlin.Number){}[0]
    abstract var CAPTURING_PHASE // io.ktor.client.fetch/Event.CAPTURING_PHASE|{}CAPTURING_PHASE[0]
        abstract fun <get-CAPTURING_PHASE>(): kotlin/Number // io.ktor.client.fetch/Event.CAPTURING_PHASE.<get-CAPTURING_PHASE>|<get-CAPTURING_PHASE>(){}[0]
        abstract fun <set-CAPTURING_PHASE>(kotlin/Number) // io.ktor.client.fetch/Event.CAPTURING_PHASE.<set-CAPTURING_PHASE>|<set-CAPTURING_PHASE>(kotlin.Number){}[0]
    abstract var NONE // io.ktor.client.fetch/Event.NONE|{}NONE[0]
        abstract fun <get-NONE>(): kotlin/Number // io.ktor.client.fetch/Event.NONE.<get-NONE>|<get-NONE>(){}[0]
        abstract fun <set-NONE>(kotlin/Number) // io.ktor.client.fetch/Event.NONE.<set-NONE>|<set-NONE>(kotlin.Number){}[0]
    abstract var bubbles // io.ktor.client.fetch/Event.bubbles|{}bubbles[0]
        abstract fun <get-bubbles>(): kotlin/Boolean // io.ktor.client.fetch/Event.bubbles.<get-bubbles>|<get-bubbles>(){}[0]
        abstract fun <set-bubbles>(kotlin/Boolean) // io.ktor.client.fetch/Event.bubbles.<set-bubbles>|<set-bubbles>(kotlin.Boolean){}[0]
    abstract var cancelBubble // io.ktor.client.fetch/Event.cancelBubble|{}cancelBubble[0]
        abstract fun <get-cancelBubble>(): kotlin/Boolean // io.ktor.client.fetch/Event.cancelBubble.<get-cancelBubble>|<get-cancelBubble>(){}[0]
        abstract fun <set-cancelBubble>(kotlin/Boolean) // io.ktor.client.fetch/Event.cancelBubble.<set-cancelBubble>|<set-cancelBubble>(kotlin.Boolean){}[0]
    abstract var cancelable // io.ktor.client.fetch/Event.cancelable|{}cancelable[0]
        abstract fun <get-cancelable>(): kotlin/Boolean // io.ktor.client.fetch/Event.cancelable.<get-cancelable>|<get-cancelable>(){}[0]
        abstract fun <set-cancelable>(kotlin/Boolean) // io.ktor.client.fetch/Event.cancelable.<set-cancelable>|<set-cancelable>(kotlin.Boolean){}[0]
    abstract var composed // io.ktor.client.fetch/Event.composed|{}composed[0]
        abstract fun <get-composed>(): kotlin/Boolean // io.ktor.client.fetch/Event.composed.<get-composed>|<get-composed>(){}[0]
        abstract fun <set-composed>(kotlin/Boolean) // io.ktor.client.fetch/Event.composed.<set-composed>|<set-composed>(kotlin.Boolean){}[0]
    abstract var defaultPrevented // io.ktor.client.fetch/Event.defaultPrevented|{}defaultPrevented[0]
        abstract fun <get-defaultPrevented>(): kotlin/Boolean // io.ktor.client.fetch/Event.defaultPrevented.<get-defaultPrevented>|<get-defaultPrevented>(){}[0]
        abstract fun <set-defaultPrevented>(kotlin/Boolean) // io.ktor.client.fetch/Event.defaultPrevented.<set-defaultPrevented>|<set-defaultPrevented>(kotlin.Boolean){}[0]
    abstract var eventPhase // io.ktor.client.fetch/Event.eventPhase|{}eventPhase[0]
        abstract fun <get-eventPhase>(): kotlin/Number // io.ktor.client.fetch/Event.eventPhase.<get-eventPhase>|<get-eventPhase>(){}[0]
        abstract fun <set-eventPhase>(kotlin/Number) // io.ktor.client.fetch/Event.eventPhase.<set-eventPhase>|<set-eventPhase>(kotlin.Number){}[0]
    abstract var isTrusted // io.ktor.client.fetch/Event.isTrusted|{}isTrusted[0]
        abstract fun <get-isTrusted>(): kotlin/Boolean // io.ktor.client.fetch/Event.isTrusted.<get-isTrusted>|<get-isTrusted>(){}[0]
        abstract fun <set-isTrusted>(kotlin/Boolean) // io.ktor.client.fetch/Event.isTrusted.<set-isTrusted>|<set-isTrusted>(kotlin.Boolean){}[0]
    abstract var returnValue // io.ktor.client.fetch/Event.returnValue|{}returnValue[0]
        abstract fun <get-returnValue>(): kotlin/Boolean // io.ktor.client.fetch/Event.returnValue.<get-returnValue>|<get-returnValue>(){}[0]
        abstract fun <set-returnValue>(kotlin/Boolean) // io.ktor.client.fetch/Event.returnValue.<set-returnValue>|<set-returnValue>(kotlin.Boolean){}[0]
    abstract var timeStamp // io.ktor.client.fetch/Event.timeStamp|{}timeStamp[0]
        abstract fun <get-timeStamp>(): kotlin/Number // io.ktor.client.fetch/Event.timeStamp.<get-timeStamp>|<get-timeStamp>(){}[0]
        abstract fun <set-timeStamp>(kotlin/Number) // io.ktor.client.fetch/Event.timeStamp.<set-timeStamp>|<set-timeStamp>(kotlin.Number){}[0]
    abstract var type // io.ktor.client.fetch/Event.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.fetch/Event.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // io.ktor.client.fetch/Event.type.<set-type>|<set-type>(kotlin.String){}[0]
    open var currentTarget // io.ktor.client.fetch/Event.currentTarget|{}currentTarget[0]
        open fun <get-currentTarget>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.currentTarget.<get-currentTarget>|<get-currentTarget>(){}[0]
        open fun <set-currentTarget>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.currentTarget.<set-currentTarget>|<set-currentTarget>(io.ktor.client.fetch.EventTarget?){}[0]
    open var srcElement // io.ktor.client.fetch/Event.srcElement|{}srcElement[0]
        open fun <get-srcElement>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.srcElement.<get-srcElement>|<get-srcElement>(){}[0]
        open fun <set-srcElement>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.srcElement.<set-srcElement>|<set-srcElement>(io.ktor.client.fetch.EventTarget?){}[0]
    open var target // io.ktor.client.fetch/Event.target|{}target[0]
        open fun <get-target>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.target.<get-target>|<get-target>(){}[0]
        open fun <set-target>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.target.<set-target>|<set-target>(io.ktor.client.fetch.EventTarget?){}[0]

    abstract fun composedPath(): kotlin/Array<io.ktor.client.fetch/EventTarget> // io.ktor.client.fetch/Event.composedPath|composedPath(){}[0]
    abstract fun initEvent(kotlin/String, kotlin/Boolean? = ..., kotlin/Boolean? = ...) // io.ktor.client.fetch/Event.initEvent|initEvent(kotlin.String;kotlin.Boolean?;kotlin.Boolean?){}[0]
    abstract fun preventDefault() // io.ktor.client.fetch/Event.preventDefault|preventDefault(){}[0]
    abstract fun stopImmediatePropagation() // io.ktor.client.fetch/Event.stopImmediatePropagation|stopImmediatePropagation(){}[0]
    abstract fun stopPropagation() // io.ktor.client.fetch/Event.stopPropagation|stopPropagation(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/EventListener // io.ktor.client.fetch/EventListener|null[0]

// Targets: [js]
abstract interface io.ktor.client.fetch/EventListenerObject { // io.ktor.client.fetch/EventListenerObject|null[0]
    abstract fun handleEvent(io.ktor.client.fetch/Event) // io.ktor.client.fetch/EventListenerObject.handleEvent|handleEvent(io.ktor.client.fetch.Event){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/EventListenerOptions { // io.ktor.client.fetch/EventListenerOptions|null[0]
    open var capture // io.ktor.client.fetch/EventListenerOptions.capture|{}capture[0]
        open fun <get-capture>(): kotlin/Boolean? // io.ktor.client.fetch/EventListenerOptions.capture.<get-capture>|<get-capture>(){}[0]
        open fun <set-capture>(kotlin/Boolean?) // io.ktor.client.fetch/EventListenerOptions.capture.<set-capture>|<set-capture>(kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/EventTarget { // io.ktor.client.fetch/EventTarget|null[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]
    abstract fun dispatchEvent(io.ktor.client.fetch/Event): kotlin/Boolean // io.ktor.client.fetch/EventTarget.dispatchEvent|dispatchEvent(io.ktor.client.fetch.Event){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/FormData { // io.ktor.client.fetch/FormData|null[0]
    abstract fun append(kotlin/String, io.ktor.client.fetch/Blob, kotlin/String? = ...) // io.ktor.client.fetch/FormData.append|append(kotlin.String;io.ktor.client.fetch.Blob;kotlin.String?){}[0]
    abstract fun append(kotlin/String, kotlin/String, kotlin/String? = ...) // io.ktor.client.fetch/FormData.append|append(kotlin.String;kotlin.String;kotlin.String?){}[0]
    abstract fun delete(kotlin/String) // io.ktor.client.fetch/FormData.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<dynamic, kotlin/String, io.ktor.client.fetch/FormData, kotlin/Unit>, kotlin/Any? = ...) // io.ktor.client.fetch/FormData.forEach|forEach(kotlin.Function3<<dynamic>,kotlin.String,io.ktor.client.fetch.FormData,kotlin.Unit>;kotlin.Any?){}[0]
    abstract fun get(kotlin/String): dynamic // io.ktor.client.fetch/FormData.get|get(kotlin.String){}[0]
    abstract fun getAll(kotlin/String): kotlin/Array<dynamic> // io.ktor.client.fetch/FormData.getAll|getAll(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // io.ktor.client.fetch/FormData.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, io.ktor.client.fetch/Blob, kotlin/String? = ...) // io.ktor.client.fetch/FormData.set|set(kotlin.String;io.ktor.client.fetch.Blob;kotlin.String?){}[0]
    abstract fun set(kotlin/String, kotlin/String, kotlin/String? = ...) // io.ktor.client.fetch/FormData.set|set(kotlin.String;kotlin.String;kotlin.String?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Headers { // io.ktor.client.fetch/Headers|null[0]
    abstract fun append(kotlin/String, kotlin/String) // io.ktor.client.fetch/Headers.append|append(kotlin.String;kotlin.String){}[0]
    abstract fun delete(kotlin/String) // io.ktor.client.fetch/Headers.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<kotlin/String, kotlin/String, io.ktor.client.fetch/Headers, kotlin/Unit>, kotlin/Any? = ...) // io.ktor.client.fetch/Headers.forEach|forEach(kotlin.Function3<kotlin.String,kotlin.String,io.ktor.client.fetch.Headers,kotlin.Unit>;kotlin.Any?){}[0]
    abstract fun get(kotlin/String): kotlin/String? // io.ktor.client.fetch/Headers.get|get(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // io.ktor.client.fetch/Headers.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, kotlin/String) // io.ktor.client.fetch/Headers.set|set(kotlin.String;kotlin.String){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/PipeOptions { // io.ktor.client.fetch/PipeOptions|null[0]
    open var preventAbort // io.ktor.client.fetch/PipeOptions.preventAbort|{}preventAbort[0]
        open fun <get-preventAbort>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventAbort.<get-preventAbort>|<get-preventAbort>(){}[0]
        open fun <set-preventAbort>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventAbort.<set-preventAbort>|<set-preventAbort>(kotlin.Boolean?){}[0]
    open var preventCancel // io.ktor.client.fetch/PipeOptions.preventCancel|{}preventCancel[0]
        open fun <get-preventCancel>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventCancel.<get-preventCancel>|<get-preventCancel>(){}[0]
        open fun <set-preventCancel>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventCancel.<set-preventCancel>|<set-preventCancel>(kotlin.Boolean?){}[0]
    open var preventClose // io.ktor.client.fetch/PipeOptions.preventClose|{}preventClose[0]
        open fun <get-preventClose>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventClose.<get-preventClose>|<get-preventClose>(){}[0]
        open fun <set-preventClose>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventClose.<set-preventClose>|<set-preventClose>(kotlin.Boolean?){}[0]
    open var signal // io.ktor.client.fetch/PipeOptions.signal|{}signal[0]
        open fun <get-signal>(): io.ktor.client.fetch/AbortSignal? // io.ktor.client.fetch/PipeOptions.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(io.ktor.client.fetch/AbortSignal?) // io.ktor.client.fetch/PipeOptions.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/ReadableStreamBYOBReader { // io.ktor.client.fetch/ReadableStreamBYOBReader|null[0]
    abstract var closed // io.ktor.client.fetch/ReadableStreamBYOBReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStreamBYOBReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin/Unit>) // io.ktor.client.fetch/ReadableStreamBYOBReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.Unit>){}[0]

    abstract fun <#A1: io.ktor.client.fetch/ArrayBufferView> read(#A1): kotlin.js/Promise<io.ktor.client.fetch/ReadableStreamReadResult<#A1>> // io.ktor.client.fetch/ReadableStreamBYOBReader.read|read(0:0){0§<io.ktor.client.fetch.ArrayBufferView>}[0]
    abstract fun cancel(kotlin/Any? = ...): kotlin.js/Promise<kotlin/Unit> // io.ktor.client.fetch/ReadableStreamBYOBReader.cancel|cancel(kotlin.Any?){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/ReadableStreamBYOBReader.releaseLock|releaseLock(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/RequestInit { // io.ktor.client.fetch/RequestInit|null[0]
    open var body // io.ktor.client.fetch/RequestInit.body|{}body[0]
        open fun <get-body>(): dynamic // io.ktor.client.fetch/RequestInit.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(dynamic) // io.ktor.client.fetch/RequestInit.body.<set-body>|<set-body>(<dynamic>){}[0]
    open var cache // io.ktor.client.fetch/RequestInit.cache|{}cache[0]
        open fun <get-cache>(): dynamic // io.ktor.client.fetch/RequestInit.cache.<get-cache>|<get-cache>(){}[0]
        open fun <set-cache>(dynamic) // io.ktor.client.fetch/RequestInit.cache.<set-cache>|<set-cache>(<dynamic>){}[0]
    open var credentials // io.ktor.client.fetch/RequestInit.credentials|{}credentials[0]
        open fun <get-credentials>(): dynamic // io.ktor.client.fetch/RequestInit.credentials.<get-credentials>|<get-credentials>(){}[0]
        open fun <set-credentials>(dynamic) // io.ktor.client.fetch/RequestInit.credentials.<set-credentials>|<set-credentials>(<dynamic>){}[0]
    open var headers // io.ktor.client.fetch/RequestInit.headers|{}headers[0]
        open fun <get-headers>(): dynamic // io.ktor.client.fetch/RequestInit.headers.<get-headers>|<get-headers>(){}[0]
        open fun <set-headers>(dynamic) // io.ktor.client.fetch/RequestInit.headers.<set-headers>|<set-headers>(<dynamic>){}[0]
    open var integrity // io.ktor.client.fetch/RequestInit.integrity|{}integrity[0]
        open fun <get-integrity>(): kotlin/String? // io.ktor.client.fetch/RequestInit.integrity.<get-integrity>|<get-integrity>(){}[0]
        open fun <set-integrity>(kotlin/String?) // io.ktor.client.fetch/RequestInit.integrity.<set-integrity>|<set-integrity>(kotlin.String?){}[0]
    open var keepalive // io.ktor.client.fetch/RequestInit.keepalive|{}keepalive[0]
        open fun <get-keepalive>(): kotlin/Boolean? // io.ktor.client.fetch/RequestInit.keepalive.<get-keepalive>|<get-keepalive>(){}[0]
        open fun <set-keepalive>(kotlin/Boolean?) // io.ktor.client.fetch/RequestInit.keepalive.<set-keepalive>|<set-keepalive>(kotlin.Boolean?){}[0]
    open var method // io.ktor.client.fetch/RequestInit.method|{}method[0]
        open fun <get-method>(): kotlin/String? // io.ktor.client.fetch/RequestInit.method.<get-method>|<get-method>(){}[0]
        open fun <set-method>(kotlin/String?) // io.ktor.client.fetch/RequestInit.method.<set-method>|<set-method>(kotlin.String?){}[0]
    open var mode // io.ktor.client.fetch/RequestInit.mode|{}mode[0]
        open fun <get-mode>(): dynamic // io.ktor.client.fetch/RequestInit.mode.<get-mode>|<get-mode>(){}[0]
        open fun <set-mode>(dynamic) // io.ktor.client.fetch/RequestInit.mode.<set-mode>|<set-mode>(<dynamic>){}[0]
    open var redirect // io.ktor.client.fetch/RequestInit.redirect|{}redirect[0]
        open fun <get-redirect>(): dynamic // io.ktor.client.fetch/RequestInit.redirect.<get-redirect>|<get-redirect>(){}[0]
        open fun <set-redirect>(dynamic) // io.ktor.client.fetch/RequestInit.redirect.<set-redirect>|<set-redirect>(<dynamic>){}[0]
    open var referrer // io.ktor.client.fetch/RequestInit.referrer|{}referrer[0]
        open fun <get-referrer>(): kotlin/String? // io.ktor.client.fetch/RequestInit.referrer.<get-referrer>|<get-referrer>(){}[0]
        open fun <set-referrer>(kotlin/String?) // io.ktor.client.fetch/RequestInit.referrer.<set-referrer>|<set-referrer>(kotlin.String?){}[0]
    open var referrerPolicy // io.ktor.client.fetch/RequestInit.referrerPolicy|{}referrerPolicy[0]
        open fun <get-referrerPolicy>(): dynamic // io.ktor.client.fetch/RequestInit.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]
        open fun <set-referrerPolicy>(dynamic) // io.ktor.client.fetch/RequestInit.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(<dynamic>){}[0]
    open var signal // io.ktor.client.fetch/RequestInit.signal|{}signal[0]
        open fun <get-signal>(): io.ktor.client.fetch/AbortSignal? // io.ktor.client.fetch/RequestInit.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(io.ktor.client.fetch/AbortSignal?) // io.ktor.client.fetch/RequestInit.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal?){}[0]
    open var window // io.ktor.client.fetch/RequestInit.window|{}window[0]
        open fun <get-window>(): kotlin/Any? // io.ktor.client.fetch/RequestInit.window.<get-window>|<get-window>(){}[0]
        open fun <set-window>(kotlin/Any?) // io.ktor.client.fetch/RequestInit.window.<set-window>|<set-window>(kotlin.Any?){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Uint8Array { // io.ktor.client.fetch/Uint8Array|null[0]
    abstract var BYTES_PER_ELEMENT // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin/Number // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin/Number) // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.Number){}[0]
    abstract var buffer // io.ktor.client.fetch/Uint8Array.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin/Any // io.ktor.client.fetch/Uint8Array.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin/Any) // io.ktor.client.fetch/Uint8Array.buffer.<set-buffer>|<set-buffer>(kotlin.Any){}[0]
    abstract var byteLength // io.ktor.client.fetch/Uint8Array.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Number // io.ktor.client.fetch/Uint8Array.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Number) // io.ktor.client.fetch/Uint8Array.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Number){}[0]
    abstract var byteOffset // io.ktor.client.fetch/Uint8Array.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Number // io.ktor.client.fetch/Uint8Array.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Number) // io.ktor.client.fetch/Uint8Array.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Number){}[0]
    abstract var length // io.ktor.client.fetch/Uint8Array.length|{}length[0]
        abstract fun <get-length>(): kotlin/Number // io.ktor.client.fetch/Uint8Array.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Number) // io.ktor.client.fetch/Uint8Array.length.<set-length>|<set-length>(kotlin.Number){}[0]

    abstract fun <#A1: kotlin/Any?> reduce(kotlin/Function4<#A1, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, #A1>, #A1): #A1 // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<0:0,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,0:0>;0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> reduceRight(kotlin/Function4<#A1, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, #A1>, #A1): #A1 // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<0:0,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,0:0>;0:0){0§<kotlin.Any?>}[0]
    abstract fun copyWithin(kotlin/Number, kotlin/Number, kotlin/Number? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.copyWithin|copyWithin(kotlin.Number;kotlin.Number;kotlin.Number?){}[0]
    abstract fun every(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Any>, kotlin/Any? = ...): kotlin/Boolean // io.ktor.client.fetch/Uint8Array.every|every(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Any>;kotlin.Any?){}[0]
    abstract fun fill(kotlin/Number, kotlin/Number? = ..., kotlin/Number? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.fill|fill(kotlin.Number;kotlin.Number?;kotlin.Number?){}[0]
    abstract fun filter(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Any>, kotlin/Any? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.filter|filter(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Any>;kotlin.Any?){}[0]
    abstract fun find(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Boolean>, kotlin/Any? = ...): kotlin/Number? // io.ktor.client.fetch/Uint8Array.find|find(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Boolean>;kotlin.Any?){}[0]
    abstract fun findIndex(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Boolean>, kotlin/Any? = ...): kotlin/Number // io.ktor.client.fetch/Uint8Array.findIndex|findIndex(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Boolean>;kotlin.Any?){}[0]
    abstract fun forEach(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Unit>, kotlin/Any? = ...) // io.ktor.client.fetch/Uint8Array.forEach|forEach(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Unit>;kotlin.Any?){}[0]
    abstract fun indexOf(kotlin/Number, kotlin/Number? = ...): kotlin/Number // io.ktor.client.fetch/Uint8Array.indexOf|indexOf(kotlin.Number;kotlin.Number?){}[0]
    abstract fun join(kotlin/String? = ...): kotlin/String // io.ktor.client.fetch/Uint8Array.join|join(kotlin.String?){}[0]
    abstract fun lastIndexOf(kotlin/Number, kotlin/Number? = ...): kotlin/Number // io.ktor.client.fetch/Uint8Array.lastIndexOf|lastIndexOf(kotlin.Number;kotlin.Number?){}[0]
    abstract fun map(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Number>, kotlin/Any? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.map|map(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Number>;kotlin.Any?){}[0]
    abstract fun reduce(kotlin/Function4<kotlin/Number, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Number>): kotlin/Number // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.Number,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Number>){}[0]
    abstract fun reduce(kotlin/Function4<kotlin/Number, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Number>, kotlin/Number): kotlin/Number // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.Number,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Number>;kotlin.Number){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin/Number, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Number>): kotlin/Number // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.Number,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Number>){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin/Number, kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Number>, kotlin/Number): kotlin/Number // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.Number,kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Number>;kotlin.Number){}[0]
    abstract fun reverse(): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.reverse|reverse(){}[0]
    abstract fun set(io.ktor.client.fetch/ArrayLike<kotlin/Number>, kotlin/Number? = ...) // io.ktor.client.fetch/Uint8Array.set|set(io.ktor.client.fetch.ArrayLike<kotlin.Number>;kotlin.Number?){}[0]
    abstract fun slice(kotlin/Number? = ..., kotlin/Number? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.slice|slice(kotlin.Number?;kotlin.Number?){}[0]
    abstract fun some(kotlin/Function3<kotlin/Number, kotlin/Number, io.ktor.client.fetch/Uint8Array, kotlin/Any>, kotlin/Any? = ...): kotlin/Boolean // io.ktor.client.fetch/Uint8Array.some|some(kotlin.Function3<kotlin.Number,kotlin.Number,io.ktor.client.fetch.Uint8Array,kotlin.Any>;kotlin.Any?){}[0]
    abstract fun sort(kotlin/Function2<kotlin/Number, kotlin/Number, kotlin/Number>? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.sort|sort(kotlin.Function2<kotlin.Number,kotlin.Number,kotlin.Number>?){}[0]
    abstract fun subarray(kotlin/Number? = ..., kotlin/Number? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.subarray|subarray(kotlin.Number?;kotlin.Number?){}[0]
    abstract fun toLocaleString(): kotlin/String // io.ktor.client.fetch/Uint8Array.toLocaleString|toLocaleString(){}[0]
    abstract fun toString(): kotlin/String // io.ktor.client.fetch/Uint8Array.toString|toString(){}[0]
}

// Targets: [js]
abstract interface io.ktor.client.fetch/Uint8ArrayConstructor { // io.ktor.client.fetch/Uint8ArrayConstructor|null[0]
    abstract var BYTES_PER_ELEMENT // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin/Number // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin/Number) // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.Number){}[0]
    abstract var prototype // io.ktor.client.fetch/Uint8ArrayConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(io.ktor.client.fetch/Uint8Array) // io.ktor.client.fetch/Uint8ArrayConstructor.prototype.<set-prototype>|<set-prototype>(io.ktor.client.fetch.Uint8Array){}[0]

    abstract fun <#A1: kotlin/Any?> from(io.ktor.client.fetch/ArrayLike<#A1>, kotlin/Function2<#A1, kotlin/Number, kotlin/Number>, kotlin/Any? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.from|from(io.ktor.client.fetch.ArrayLike<0:0>;kotlin.Function2<0:0,kotlin.Number,kotlin.Number>;kotlin.Any?){0§<kotlin.Any?>}[0]
    abstract fun from(io.ktor.client.fetch/ArrayLike<kotlin/Number>): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.from|from(io.ktor.client.fetch.ArrayLike<kotlin.Number>){}[0]
    abstract fun of(kotlin/Array<out kotlin/Number>...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.of|of(kotlin.Array<out|kotlin.Number>...){}[0]
}

// Targets: [js]
final val io.ktor.client.engine.js/initHook // io.ktor.client.engine.js/initHook|{}initHook[0]
    final fun <get-initHook>(): dynamic // io.ktor.client.engine.js/initHook.<get-initHook>|<get-initHook>(){}[0]

// Targets: [js]
final inline fun (io.ktor.client.fetch/Uint8Array).io.ktor.client.fetch/get(kotlin/Number): kotlin/Number? // io.ktor.client.fetch/get|get@io.ktor.client.fetch.Uint8Array(kotlin.Number){}[0]

// Targets: [js]
final inline fun (io.ktor.client.fetch/Uint8Array).io.ktor.client.fetch/set(kotlin/Number, kotlin/Number) // io.ktor.client.fetch/set|set@io.ktor.client.fetch.Uint8Array(kotlin.Number;kotlin.Number){}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (io.ktor.client.fetch/ArrayLike<#A>).io.ktor.client.fetch/get(kotlin/Number): #A? // io.ktor.client.fetch/get|get@io.ktor.client.fetch.ArrayLike<0:0>(kotlin.Number){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (io.ktor.client.fetch/ArrayLike<#A>).io.ktor.client.fetch/set(kotlin/Number, #A) // io.ktor.client.fetch/set|set@io.ktor.client.fetch.ArrayLike<0:0>(kotlin.Number;0:0){0§<kotlin.Any?>}[0]

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/ArrayLike : kotlin.js/JsAny { // io.ktor.client.fetch/ArrayLike|null[0]
    abstract var length // io.ktor.client.fetch/ArrayLike.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // io.ktor.client.fetch/ArrayLike.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Int) // io.ktor.client.fetch/ArrayLike.length.<set-length>|<set-length>(kotlin.Int){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/ReadableStream : kotlin.js/JsAny { // io.ktor.client.fetch/ReadableStream|null[0]
    abstract var locked // io.ktor.client.fetch/ReadableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // io.ktor.client.fetch/ReadableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // io.ktor.client.fetch/ReadableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStream.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun getReader(): io.ktor.client.fetch/ReadableStreamDefaultReader<#A> // io.ktor.client.fetch/ReadableStream.getReader|getReader(){}[0]
    abstract fun getReader(kotlin.js/JsAny?): io.ktor.client.fetch/ReadableStreamBYOBReader // io.ktor.client.fetch/ReadableStream.getReader|getReader(kotlin.js.JsAny?){}[0]
    abstract fun pipeTo(io.ktor.client.fetch/WritableStream<#A>, io.ktor.client.fetch/PipeOptions? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStream.pipeTo|pipeTo(io.ktor.client.fetch.WritableStream<1:0>;io.ktor.client.fetch.PipeOptions?){}[0]
    abstract fun tee(): kotlin.js/JsAny? // io.ktor.client.fetch/ReadableStream.tee|tee(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/ReadableStreamDefaultReader : kotlin.js/JsAny { // io.ktor.client.fetch/ReadableStreamDefaultReader|null[0]
    abstract var closed // io.ktor.client.fetch/ReadableStreamDefaultReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStreamDefaultReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // io.ktor.client.fetch/ReadableStreamDefaultReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]

    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStreamDefaultReader.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun read(): kotlin.js/Promise<io.ktor.client.fetch/ReadableStreamReadResult<#A>> // io.ktor.client.fetch/ReadableStreamDefaultReader.read|read(){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/ReadableStreamDefaultReader.releaseLock|releaseLock(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/ReadableStreamReadResult : kotlin.js/JsAny { // io.ktor.client.fetch/ReadableStreamReadResult|null[0]
    abstract var done // io.ktor.client.fetch/ReadableStreamReadResult.done|{}done[0]
        abstract fun <get-done>(): kotlin/Boolean // io.ktor.client.fetch/ReadableStreamReadResult.done.<get-done>|<get-done>(){}[0]
        abstract fun <set-done>(kotlin/Boolean) // io.ktor.client.fetch/ReadableStreamReadResult.done.<set-done>|<set-done>(kotlin.Boolean){}[0]
    abstract var value // io.ktor.client.fetch/ReadableStreamReadResult.value|{}value[0]
        abstract fun <get-value>(): #A // io.ktor.client.fetch/ReadableStreamReadResult.value.<get-value>|<get-value>(){}[0]
        abstract fun <set-value>(#A) // io.ktor.client.fetch/ReadableStreamReadResult.value.<set-value>|<set-value>(1:0){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/WritableStream : kotlin.js/JsAny { // io.ktor.client.fetch/WritableStream|null[0]
    abstract var locked // io.ktor.client.fetch/WritableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // io.ktor.client.fetch/WritableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // io.ktor.client.fetch/WritableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun abort(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStream.abort|abort(kotlin.js.JsAny?){}[0]
    abstract fun getWriter(): io.ktor.client.fetch/WritableStreamDefaultWriter<#A> // io.ktor.client.fetch/WritableStream.getWriter|getWriter(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> io.ktor.client.fetch/WritableStreamDefaultWriter : kotlin.js/JsAny { // io.ktor.client.fetch/WritableStreamDefaultWriter|null[0]
    abstract var closed // io.ktor.client.fetch/WritableStreamDefaultWriter.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStreamDefaultWriter.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // io.ktor.client.fetch/WritableStreamDefaultWriter.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]
    abstract var ready // io.ktor.client.fetch/WritableStreamDefaultWriter.ready|{}ready[0]
        abstract fun <get-ready>(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStreamDefaultWriter.ready.<get-ready>|<get-ready>(){}[0]
        abstract fun <set-ready>(kotlin.js/Promise<kotlin.js/JsAny?>) // io.ktor.client.fetch/WritableStreamDefaultWriter.ready.<set-ready>|<set-ready>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]
    open var desiredSize // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize|{}desiredSize[0]
        open fun <get-desiredSize>(): kotlin/Int? // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize.<get-desiredSize>|<get-desiredSize>(){}[0]
        open fun <set-desiredSize>(kotlin/Int?) // io.ktor.client.fetch/WritableStreamDefaultWriter.desiredSize.<set-desiredSize>|<set-desiredSize>(kotlin.Int?){}[0]

    abstract fun abort(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStreamDefaultWriter.abort|abort(kotlin.js.JsAny?){}[0]
    abstract fun close(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStreamDefaultWriter.close|close(){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/WritableStreamDefaultWriter.releaseLock|releaseLock(){}[0]
    abstract fun write(#A): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/WritableStreamDefaultWriter.write|write(1:0){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/AbortController : kotlin.js/JsAny { // io.ktor.client.fetch/AbortController|null[0]
    abstract var signal // io.ktor.client.fetch/AbortController.signal|{}signal[0]
        abstract fun <get-signal>(): io.ktor.client.fetch/AbortSignal // io.ktor.client.fetch/AbortController.signal.<get-signal>|<get-signal>(){}[0]
        abstract fun <set-signal>(io.ktor.client.fetch/AbortSignal) // io.ktor.client.fetch/AbortController.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal){}[0]

    abstract fun abort() // io.ktor.client.fetch/AbortController.abort|abort(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/ArrayBuffer : kotlin.js/JsAny { // io.ktor.client.fetch/ArrayBuffer|null[0]
    abstract var byteLength // io.ktor.client.fetch/ArrayBuffer.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // io.ktor.client.fetch/ArrayBuffer.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // io.ktor.client.fetch/ArrayBuffer.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]

    abstract fun slice(kotlin/Int, kotlin/Int? = ...): io.ktor.client.fetch/ArrayBuffer // io.ktor.client.fetch/ArrayBuffer.slice|slice(kotlin.Int;kotlin.Int?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/ArrayBufferConstructor : kotlin.js/JsAny { // io.ktor.client.fetch/ArrayBufferConstructor|null[0]
    abstract var prototype // io.ktor.client.fetch/ArrayBufferConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): io.ktor.client.fetch/ArrayBuffer // io.ktor.client.fetch/ArrayBufferConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(io.ktor.client.fetch/ArrayBuffer) // io.ktor.client.fetch/ArrayBufferConstructor.prototype.<set-prototype>|<set-prototype>(io.ktor.client.fetch.ArrayBuffer){}[0]

    abstract fun isView(kotlin.js/JsAny): kotlin/Boolean // io.ktor.client.fetch/ArrayBufferConstructor.isView|isView(kotlin.js.JsAny){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/ArrayBufferView : kotlin.js/JsAny { // io.ktor.client.fetch/ArrayBufferView|null[0]
    abstract var buffer // io.ktor.client.fetch/ArrayBufferView.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin.js/JsAny // io.ktor.client.fetch/ArrayBufferView.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin.js/JsAny) // io.ktor.client.fetch/ArrayBufferView.buffer.<set-buffer>|<set-buffer>(kotlin.js.JsAny){}[0]
    abstract var byteLength // io.ktor.client.fetch/ArrayBufferView.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // io.ktor.client.fetch/ArrayBufferView.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // io.ktor.client.fetch/ArrayBufferView.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]
    abstract var byteOffset // io.ktor.client.fetch/ArrayBufferView.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Int // io.ktor.client.fetch/ArrayBufferView.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Int) // io.ktor.client.fetch/ArrayBufferView.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Int){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Blob : kotlin.js/JsAny { // io.ktor.client.fetch/Blob|null[0]
    abstract var size // io.ktor.client.fetch/Blob.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // io.ktor.client.fetch/Blob.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(kotlin/Int) // io.ktor.client.fetch/Blob.size.<set-size>|<set-size>(kotlin.Int){}[0]
    abstract var type // io.ktor.client.fetch/Blob.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.fetch/Blob.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // io.ktor.client.fetch/Blob.type.<set-type>|<set-type>(kotlin.String){}[0]

    abstract fun slice(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/String? = ...): io.ktor.client.fetch/Blob // io.ktor.client.fetch/Blob.slice|slice(kotlin.Int?;kotlin.Int?;kotlin.String?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Body : kotlin.js/JsAny { // io.ktor.client.fetch/Body|null[0]
    abstract var bodyUsed // io.ktor.client.fetch/Body.bodyUsed|{}bodyUsed[0]
        abstract fun <get-bodyUsed>(): kotlin/Boolean // io.ktor.client.fetch/Body.bodyUsed.<get-bodyUsed>|<get-bodyUsed>(){}[0]
        abstract fun <set-bodyUsed>(kotlin/Boolean) // io.ktor.client.fetch/Body.bodyUsed.<set-bodyUsed>|<set-bodyUsed>(kotlin.Boolean){}[0]
    open var body // io.ktor.client.fetch/Body.body|{}body[0]
        open fun <get-body>(): io.ktor.client.fetch/ReadableStream<io.ktor.client.fetch/Uint8Array>? // io.ktor.client.fetch/Body.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(io.ktor.client.fetch/ReadableStream<io.ktor.client.fetch/Uint8Array>?) // io.ktor.client.fetch/Body.body.<set-body>|<set-body>(io.ktor.client.fetch.ReadableStream<io.ktor.client.fetch.Uint8Array>?){}[0]

    abstract fun arrayBuffer(): kotlin.js/Promise<io.ktor.client.fetch/ArrayBuffer> // io.ktor.client.fetch/Body.arrayBuffer|arrayBuffer(){}[0]
    abstract fun blob(): kotlin.js/Promise<io.ktor.client.fetch/Blob> // io.ktor.client.fetch/Body.blob|blob(){}[0]
    abstract fun formData(): kotlin.js/Promise<io.ktor.client.fetch/FormData> // io.ktor.client.fetch/Body.formData|formData(){}[0]
    abstract fun json(): kotlin.js/Promise<kotlin.js/JsAny> // io.ktor.client.fetch/Body.json|json(){}[0]
    abstract fun text(): kotlin.js/Promise<kotlin.js/JsString> // io.ktor.client.fetch/Body.text|text(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Event : kotlin.js/JsAny { // io.ktor.client.fetch/Event|null[0]
    abstract var AT_TARGET // io.ktor.client.fetch/Event.AT_TARGET|{}AT_TARGET[0]
        abstract fun <get-AT_TARGET>(): kotlin/Int // io.ktor.client.fetch/Event.AT_TARGET.<get-AT_TARGET>|<get-AT_TARGET>(){}[0]
        abstract fun <set-AT_TARGET>(kotlin/Int) // io.ktor.client.fetch/Event.AT_TARGET.<set-AT_TARGET>|<set-AT_TARGET>(kotlin.Int){}[0]
    abstract var BUBBLING_PHASE // io.ktor.client.fetch/Event.BUBBLING_PHASE|{}BUBBLING_PHASE[0]
        abstract fun <get-BUBBLING_PHASE>(): kotlin/Int // io.ktor.client.fetch/Event.BUBBLING_PHASE.<get-BUBBLING_PHASE>|<get-BUBBLING_PHASE>(){}[0]
        abstract fun <set-BUBBLING_PHASE>(kotlin/Int) // io.ktor.client.fetch/Event.BUBBLING_PHASE.<set-BUBBLING_PHASE>|<set-BUBBLING_PHASE>(kotlin.Int){}[0]
    abstract var CAPTURING_PHASE // io.ktor.client.fetch/Event.CAPTURING_PHASE|{}CAPTURING_PHASE[0]
        abstract fun <get-CAPTURING_PHASE>(): kotlin/Int // io.ktor.client.fetch/Event.CAPTURING_PHASE.<get-CAPTURING_PHASE>|<get-CAPTURING_PHASE>(){}[0]
        abstract fun <set-CAPTURING_PHASE>(kotlin/Int) // io.ktor.client.fetch/Event.CAPTURING_PHASE.<set-CAPTURING_PHASE>|<set-CAPTURING_PHASE>(kotlin.Int){}[0]
    abstract var NONE // io.ktor.client.fetch/Event.NONE|{}NONE[0]
        abstract fun <get-NONE>(): kotlin/Int // io.ktor.client.fetch/Event.NONE.<get-NONE>|<get-NONE>(){}[0]
        abstract fun <set-NONE>(kotlin/Int) // io.ktor.client.fetch/Event.NONE.<set-NONE>|<set-NONE>(kotlin.Int){}[0]
    abstract var bubbles // io.ktor.client.fetch/Event.bubbles|{}bubbles[0]
        abstract fun <get-bubbles>(): kotlin/Boolean // io.ktor.client.fetch/Event.bubbles.<get-bubbles>|<get-bubbles>(){}[0]
        abstract fun <set-bubbles>(kotlin/Boolean) // io.ktor.client.fetch/Event.bubbles.<set-bubbles>|<set-bubbles>(kotlin.Boolean){}[0]
    abstract var cancelBubble // io.ktor.client.fetch/Event.cancelBubble|{}cancelBubble[0]
        abstract fun <get-cancelBubble>(): kotlin/Boolean // io.ktor.client.fetch/Event.cancelBubble.<get-cancelBubble>|<get-cancelBubble>(){}[0]
        abstract fun <set-cancelBubble>(kotlin/Boolean) // io.ktor.client.fetch/Event.cancelBubble.<set-cancelBubble>|<set-cancelBubble>(kotlin.Boolean){}[0]
    abstract var cancelable // io.ktor.client.fetch/Event.cancelable|{}cancelable[0]
        abstract fun <get-cancelable>(): kotlin/Boolean // io.ktor.client.fetch/Event.cancelable.<get-cancelable>|<get-cancelable>(){}[0]
        abstract fun <set-cancelable>(kotlin/Boolean) // io.ktor.client.fetch/Event.cancelable.<set-cancelable>|<set-cancelable>(kotlin.Boolean){}[0]
    abstract var composed // io.ktor.client.fetch/Event.composed|{}composed[0]
        abstract fun <get-composed>(): kotlin/Boolean // io.ktor.client.fetch/Event.composed.<get-composed>|<get-composed>(){}[0]
        abstract fun <set-composed>(kotlin/Boolean) // io.ktor.client.fetch/Event.composed.<set-composed>|<set-composed>(kotlin.Boolean){}[0]
    abstract var defaultPrevented // io.ktor.client.fetch/Event.defaultPrevented|{}defaultPrevented[0]
        abstract fun <get-defaultPrevented>(): kotlin/Boolean // io.ktor.client.fetch/Event.defaultPrevented.<get-defaultPrevented>|<get-defaultPrevented>(){}[0]
        abstract fun <set-defaultPrevented>(kotlin/Boolean) // io.ktor.client.fetch/Event.defaultPrevented.<set-defaultPrevented>|<set-defaultPrevented>(kotlin.Boolean){}[0]
    abstract var eventPhase // io.ktor.client.fetch/Event.eventPhase|{}eventPhase[0]
        abstract fun <get-eventPhase>(): kotlin/Int // io.ktor.client.fetch/Event.eventPhase.<get-eventPhase>|<get-eventPhase>(){}[0]
        abstract fun <set-eventPhase>(kotlin/Int) // io.ktor.client.fetch/Event.eventPhase.<set-eventPhase>|<set-eventPhase>(kotlin.Int){}[0]
    abstract var isTrusted // io.ktor.client.fetch/Event.isTrusted|{}isTrusted[0]
        abstract fun <get-isTrusted>(): kotlin/Boolean // io.ktor.client.fetch/Event.isTrusted.<get-isTrusted>|<get-isTrusted>(){}[0]
        abstract fun <set-isTrusted>(kotlin/Boolean) // io.ktor.client.fetch/Event.isTrusted.<set-isTrusted>|<set-isTrusted>(kotlin.Boolean){}[0]
    abstract var returnValue // io.ktor.client.fetch/Event.returnValue|{}returnValue[0]
        abstract fun <get-returnValue>(): kotlin/Boolean // io.ktor.client.fetch/Event.returnValue.<get-returnValue>|<get-returnValue>(){}[0]
        abstract fun <set-returnValue>(kotlin/Boolean) // io.ktor.client.fetch/Event.returnValue.<set-returnValue>|<set-returnValue>(kotlin.Boolean){}[0]
    abstract var timeStamp // io.ktor.client.fetch/Event.timeStamp|{}timeStamp[0]
        abstract fun <get-timeStamp>(): kotlin.js/JsNumber // io.ktor.client.fetch/Event.timeStamp.<get-timeStamp>|<get-timeStamp>(){}[0]
        abstract fun <set-timeStamp>(kotlin.js/JsNumber) // io.ktor.client.fetch/Event.timeStamp.<set-timeStamp>|<set-timeStamp>(kotlin.js.JsNumber){}[0]
    abstract var type // io.ktor.client.fetch/Event.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // io.ktor.client.fetch/Event.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // io.ktor.client.fetch/Event.type.<set-type>|<set-type>(kotlin.String){}[0]
    open var currentTarget // io.ktor.client.fetch/Event.currentTarget|{}currentTarget[0]
        open fun <get-currentTarget>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.currentTarget.<get-currentTarget>|<get-currentTarget>(){}[0]
        open fun <set-currentTarget>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.currentTarget.<set-currentTarget>|<set-currentTarget>(io.ktor.client.fetch.EventTarget?){}[0]
    open var srcElement // io.ktor.client.fetch/Event.srcElement|{}srcElement[0]
        open fun <get-srcElement>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.srcElement.<get-srcElement>|<get-srcElement>(){}[0]
        open fun <set-srcElement>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.srcElement.<set-srcElement>|<set-srcElement>(io.ktor.client.fetch.EventTarget?){}[0]
    open var target // io.ktor.client.fetch/Event.target|{}target[0]
        open fun <get-target>(): io.ktor.client.fetch/EventTarget? // io.ktor.client.fetch/Event.target.<get-target>|<get-target>(){}[0]
        open fun <set-target>(io.ktor.client.fetch/EventTarget?) // io.ktor.client.fetch/Event.target.<set-target>|<set-target>(io.ktor.client.fetch.EventTarget?){}[0]

    abstract fun composedPath(): io.ktor.client.fetch/ArrayLike<io.ktor.client.fetch/EventTarget> // io.ktor.client.fetch/Event.composedPath|composedPath(){}[0]
    abstract fun initEvent(kotlin/String, kotlin/Boolean? = ..., kotlin/Boolean? = ...) // io.ktor.client.fetch/Event.initEvent|initEvent(kotlin.String;kotlin.Boolean?;kotlin.Boolean?){}[0]
    abstract fun preventDefault() // io.ktor.client.fetch/Event.preventDefault|preventDefault(){}[0]
    abstract fun stopImmediatePropagation() // io.ktor.client.fetch/Event.stopImmediatePropagation|stopImmediatePropagation(){}[0]
    abstract fun stopPropagation() // io.ktor.client.fetch/Event.stopPropagation|stopPropagation(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/EventListener : kotlin.js/JsAny // io.ktor.client.fetch/EventListener|null[0]

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/EventListenerObject : kotlin.js/JsAny { // io.ktor.client.fetch/EventListenerObject|null[0]
    abstract fun handleEvent(io.ktor.client.fetch/Event) // io.ktor.client.fetch/EventListenerObject.handleEvent|handleEvent(io.ktor.client.fetch.Event){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/EventListenerOptions : kotlin.js/JsAny { // io.ktor.client.fetch/EventListenerOptions|null[0]
    open var capture // io.ktor.client.fetch/EventListenerOptions.capture|{}capture[0]
        open fun <get-capture>(): kotlin/Boolean? // io.ktor.client.fetch/EventListenerOptions.capture.<get-capture>|<get-capture>(){}[0]
        open fun <set-capture>(kotlin/Boolean?) // io.ktor.client.fetch/EventListenerOptions.capture.<set-capture>|<set-capture>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/EventTarget : kotlin.js/JsAny { // io.ktor.client.fetch/EventTarget|null[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/AddEventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.addEventListener|addEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]
    abstract fun dispatchEvent(io.ktor.client.fetch/Event): kotlin/Boolean // io.ktor.client.fetch/EventTarget.dispatchEvent|dispatchEvent(io.ktor.client.fetch.Event){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListener, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListener;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, io.ktor.client.fetch/EventListenerOptions? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;io.ktor.client.fetch.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, io.ktor.client.fetch/EventListenerObject, kotlin/Boolean? = ...) // io.ktor.client.fetch/EventTarget.removeEventListener|removeEventListener(kotlin.String;io.ktor.client.fetch.EventListenerObject;kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/FormData : kotlin.js/JsAny { // io.ktor.client.fetch/FormData|null[0]
    abstract fun append(kotlin/String, io.ktor.client.fetch/Blob, kotlin/String? = ...) // io.ktor.client.fetch/FormData.append|append(kotlin.String;io.ktor.client.fetch.Blob;kotlin.String?){}[0]
    abstract fun append(kotlin/String, kotlin/String, kotlin/String? = ...) // io.ktor.client.fetch/FormData.append|append(kotlin.String;kotlin.String;kotlin.String?){}[0]
    abstract fun delete(kotlin/String) // io.ktor.client.fetch/FormData.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny?, kotlin/String, io.ktor.client.fetch/FormData, kotlin/Unit>, kotlin.js/JsAny? = ...) // io.ktor.client.fetch/FormData.forEach|forEach(kotlin.Function3<kotlin.js.JsAny?,kotlin.String,io.ktor.client.fetch.FormData,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun get(kotlin/String): kotlin.js/JsAny? // io.ktor.client.fetch/FormData.get|get(kotlin.String){}[0]
    abstract fun getAll(kotlin/String): io.ktor.client.fetch/ArrayLike<kotlin.js/JsAny?> // io.ktor.client.fetch/FormData.getAll|getAll(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // io.ktor.client.fetch/FormData.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, io.ktor.client.fetch/Blob, kotlin/String? = ...) // io.ktor.client.fetch/FormData.set|set(kotlin.String;io.ktor.client.fetch.Blob;kotlin.String?){}[0]
    abstract fun set(kotlin/String, kotlin/String, kotlin/String? = ...) // io.ktor.client.fetch/FormData.set|set(kotlin.String;kotlin.String;kotlin.String?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Headers : kotlin.js/JsAny { // io.ktor.client.fetch/Headers|null[0]
    abstract fun append(kotlin/String, kotlin/String) // io.ktor.client.fetch/Headers.append|append(kotlin.String;kotlin.String){}[0]
    abstract fun delete(kotlin/String) // io.ktor.client.fetch/Headers.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<kotlin/String, kotlin/String, io.ktor.client.fetch/Headers, kotlin/Unit>, kotlin.js/JsAny? = ...) // io.ktor.client.fetch/Headers.forEach|forEach(kotlin.Function3<kotlin.String,kotlin.String,io.ktor.client.fetch.Headers,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun get(kotlin/String): kotlin/String? // io.ktor.client.fetch/Headers.get|get(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // io.ktor.client.fetch/Headers.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, kotlin/String) // io.ktor.client.fetch/Headers.set|set(kotlin.String;kotlin.String){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/PipeOptions : kotlin.js/JsAny { // io.ktor.client.fetch/PipeOptions|null[0]
    open var preventAbort // io.ktor.client.fetch/PipeOptions.preventAbort|{}preventAbort[0]
        open fun <get-preventAbort>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventAbort.<get-preventAbort>|<get-preventAbort>(){}[0]
        open fun <set-preventAbort>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventAbort.<set-preventAbort>|<set-preventAbort>(kotlin.Boolean?){}[0]
    open var preventCancel // io.ktor.client.fetch/PipeOptions.preventCancel|{}preventCancel[0]
        open fun <get-preventCancel>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventCancel.<get-preventCancel>|<get-preventCancel>(){}[0]
        open fun <set-preventCancel>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventCancel.<set-preventCancel>|<set-preventCancel>(kotlin.Boolean?){}[0]
    open var preventClose // io.ktor.client.fetch/PipeOptions.preventClose|{}preventClose[0]
        open fun <get-preventClose>(): kotlin/Boolean? // io.ktor.client.fetch/PipeOptions.preventClose.<get-preventClose>|<get-preventClose>(){}[0]
        open fun <set-preventClose>(kotlin/Boolean?) // io.ktor.client.fetch/PipeOptions.preventClose.<set-preventClose>|<set-preventClose>(kotlin.Boolean?){}[0]
    open var signal // io.ktor.client.fetch/PipeOptions.signal|{}signal[0]
        open fun <get-signal>(): io.ktor.client.fetch/AbortSignal? // io.ktor.client.fetch/PipeOptions.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(io.ktor.client.fetch/AbortSignal?) // io.ktor.client.fetch/PipeOptions.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/ReadableStreamBYOBReader : kotlin.js/JsAny { // io.ktor.client.fetch/ReadableStreamBYOBReader|null[0]
    abstract var closed // io.ktor.client.fetch/ReadableStreamBYOBReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStreamBYOBReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // io.ktor.client.fetch/ReadableStreamBYOBReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]

    abstract fun <#A1: io.ktor.client.fetch/ArrayBufferView> read(#A1): kotlin.js/Promise<io.ktor.client.fetch/ReadableStreamReadResult<#A1>> // io.ktor.client.fetch/ReadableStreamBYOBReader.read|read(0:0){0§<io.ktor.client.fetch.ArrayBufferView>}[0]
    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // io.ktor.client.fetch/ReadableStreamBYOBReader.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun releaseLock() // io.ktor.client.fetch/ReadableStreamBYOBReader.releaseLock|releaseLock(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/RequestInit : kotlin.js/JsAny { // io.ktor.client.fetch/RequestInit|null[0]
    open var body // io.ktor.client.fetch/RequestInit.body|{}body[0]
        open fun <get-body>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.body.<set-body>|<set-body>(kotlin.js.JsAny?){}[0]
    open var cache // io.ktor.client.fetch/RequestInit.cache|{}cache[0]
        open fun <get-cache>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.cache.<get-cache>|<get-cache>(){}[0]
        open fun <set-cache>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.cache.<set-cache>|<set-cache>(kotlin.js.JsAny?){}[0]
    open var credentials // io.ktor.client.fetch/RequestInit.credentials|{}credentials[0]
        open fun <get-credentials>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.credentials.<get-credentials>|<get-credentials>(){}[0]
        open fun <set-credentials>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.credentials.<set-credentials>|<set-credentials>(kotlin.js.JsAny?){}[0]
    open var headers // io.ktor.client.fetch/RequestInit.headers|{}headers[0]
        open fun <get-headers>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.headers.<get-headers>|<get-headers>(){}[0]
        open fun <set-headers>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.headers.<set-headers>|<set-headers>(kotlin.js.JsAny?){}[0]
    open var integrity // io.ktor.client.fetch/RequestInit.integrity|{}integrity[0]
        open fun <get-integrity>(): kotlin/String? // io.ktor.client.fetch/RequestInit.integrity.<get-integrity>|<get-integrity>(){}[0]
        open fun <set-integrity>(kotlin/String?) // io.ktor.client.fetch/RequestInit.integrity.<set-integrity>|<set-integrity>(kotlin.String?){}[0]
    open var keepalive // io.ktor.client.fetch/RequestInit.keepalive|{}keepalive[0]
        open fun <get-keepalive>(): kotlin/Boolean? // io.ktor.client.fetch/RequestInit.keepalive.<get-keepalive>|<get-keepalive>(){}[0]
        open fun <set-keepalive>(kotlin/Boolean?) // io.ktor.client.fetch/RequestInit.keepalive.<set-keepalive>|<set-keepalive>(kotlin.Boolean?){}[0]
    open var method // io.ktor.client.fetch/RequestInit.method|{}method[0]
        open fun <get-method>(): kotlin/String? // io.ktor.client.fetch/RequestInit.method.<get-method>|<get-method>(){}[0]
        open fun <set-method>(kotlin/String?) // io.ktor.client.fetch/RequestInit.method.<set-method>|<set-method>(kotlin.String?){}[0]
    open var mode // io.ktor.client.fetch/RequestInit.mode|{}mode[0]
        open fun <get-mode>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.mode.<get-mode>|<get-mode>(){}[0]
        open fun <set-mode>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.mode.<set-mode>|<set-mode>(kotlin.js.JsAny?){}[0]
    open var redirect // io.ktor.client.fetch/RequestInit.redirect|{}redirect[0]
        open fun <get-redirect>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.redirect.<get-redirect>|<get-redirect>(){}[0]
        open fun <set-redirect>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.redirect.<set-redirect>|<set-redirect>(kotlin.js.JsAny?){}[0]
    open var referrer // io.ktor.client.fetch/RequestInit.referrer|{}referrer[0]
        open fun <get-referrer>(): kotlin/String? // io.ktor.client.fetch/RequestInit.referrer.<get-referrer>|<get-referrer>(){}[0]
        open fun <set-referrer>(kotlin/String?) // io.ktor.client.fetch/RequestInit.referrer.<set-referrer>|<set-referrer>(kotlin.String?){}[0]
    open var referrerPolicy // io.ktor.client.fetch/RequestInit.referrerPolicy|{}referrerPolicy[0]
        open fun <get-referrerPolicy>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]
        open fun <set-referrerPolicy>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(kotlin.js.JsAny?){}[0]
    open var signal // io.ktor.client.fetch/RequestInit.signal|{}signal[0]
        open fun <get-signal>(): io.ktor.client.fetch/AbortSignal? // io.ktor.client.fetch/RequestInit.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(io.ktor.client.fetch/AbortSignal?) // io.ktor.client.fetch/RequestInit.signal.<set-signal>|<set-signal>(io.ktor.client.fetch.AbortSignal?){}[0]
    open var window // io.ktor.client.fetch/RequestInit.window|{}window[0]
        open fun <get-window>(): kotlin.js/JsAny? // io.ktor.client.fetch/RequestInit.window.<get-window>|<get-window>(){}[0]
        open fun <set-window>(kotlin.js/JsAny?) // io.ktor.client.fetch/RequestInit.window.<set-window>|<set-window>(kotlin.js.JsAny?){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Uint8Array : kotlin.js/JsAny { // io.ktor.client.fetch/Uint8Array|null[0]
    abstract var BYTES_PER_ELEMENT // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin.js/JsNumber) // io.ktor.client.fetch/Uint8Array.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.js.JsNumber){}[0]
    abstract var buffer // io.ktor.client.fetch/Uint8Array.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin.js/JsAny // io.ktor.client.fetch/Uint8Array.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin.js/JsAny) // io.ktor.client.fetch/Uint8Array.buffer.<set-buffer>|<set-buffer>(kotlin.js.JsAny){}[0]
    abstract var byteLength // io.ktor.client.fetch/Uint8Array.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // io.ktor.client.fetch/Uint8Array.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // io.ktor.client.fetch/Uint8Array.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]
    abstract var byteOffset // io.ktor.client.fetch/Uint8Array.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Int // io.ktor.client.fetch/Uint8Array.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Int) // io.ktor.client.fetch/Uint8Array.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Int){}[0]
    abstract var length // io.ktor.client.fetch/Uint8Array.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // io.ktor.client.fetch/Uint8Array.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Int) // io.ktor.client.fetch/Uint8Array.length.<set-length>|<set-length>(kotlin.Int){}[0]

    abstract fun <#A1: kotlin.js/JsAny> reduce(kotlin/Function4<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, #A1>, #A1): #A1 // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,0:0>;0:0){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> reduceRight(kotlin/Function4<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, #A1>, #A1): #A1 // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,0:0>;0:0){0§<kotlin.js.JsAny>}[0]
    abstract fun copyWithin(kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.copyWithin|copyWithin(kotlin.js.JsNumber;kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun every(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): kotlin/Boolean // io.ktor.client.fetch/Uint8Array.every|every(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun fill(kotlin.js/JsNumber, kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.fill|fill(kotlin.js.JsNumber;kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun filter(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.filter|filter(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun find(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin/Boolean>, kotlin.js/JsAny? = ...): kotlin.js/JsNumber? // io.ktor.client.fetch/Uint8Array.find|find(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.Boolean>;kotlin.js.JsAny?){}[0]
    abstract fun findIndex(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin/Boolean>, kotlin.js/JsAny? = ...): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.findIndex|findIndex(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.Boolean>;kotlin.js.JsAny?){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin/Unit>, kotlin.js/JsAny? = ...) // io.ktor.client.fetch/Uint8Array.forEach|forEach(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun indexOf(kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.indexOf|indexOf(kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun join(kotlin/String? = ...): kotlin/String // io.ktor.client.fetch/Uint8Array.join|join(kotlin.String?){}[0]
    abstract fun lastIndexOf(kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.lastIndexOf|lastIndexOf(kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun map(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsAny? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.map|map(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsAny?){}[0]
    abstract fun reduce(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsNumber>): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsNumber>){}[0]
    abstract fun reduce(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsNumber): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsNumber){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsNumber>): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsNumber>){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsNumber): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsNumber){}[0]
    abstract fun reverse(): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.reverse|reverse(){}[0]
    abstract fun set(io.ktor.client.fetch/ArrayLike<kotlin.js/JsNumber>, kotlin.js/JsNumber? = ...) // io.ktor.client.fetch/Uint8Array.set|set(io.ktor.client.fetch.ArrayLike<kotlin.js.JsNumber>;kotlin.js.JsNumber?){}[0]
    abstract fun slice(kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.slice|slice(kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun some(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, io.ktor.client.fetch/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): kotlin/Boolean // io.ktor.client.fetch/Uint8Array.some|some(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,io.ktor.client.fetch.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun sort(kotlin/Function2<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber>? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.sort|sort(kotlin.Function2<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber>?){}[0]
    abstract fun subarray(kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8Array.subarray|subarray(kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun toLocaleString(): kotlin/String // io.ktor.client.fetch/Uint8Array.toLocaleString|toLocaleString(){}[0]
    abstract fun toString(): kotlin/String // io.ktor.client.fetch/Uint8Array.toString|toString(){}[0]
}

// Targets: [wasmJs]
abstract interface io.ktor.client.fetch/Uint8ArrayConstructor : kotlin.js/JsAny { // io.ktor.client.fetch/Uint8ArrayConstructor|null[0]
    abstract var BYTES_PER_ELEMENT // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin.js/JsNumber // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin.js/JsNumber) // io.ktor.client.fetch/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.js.JsNumber){}[0]
    abstract var prototype // io.ktor.client.fetch/Uint8ArrayConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(io.ktor.client.fetch/Uint8Array) // io.ktor.client.fetch/Uint8ArrayConstructor.prototype.<set-prototype>|<set-prototype>(io.ktor.client.fetch.Uint8Array){}[0]

    abstract fun <#A1: kotlin.js/JsAny> from(io.ktor.client.fetch/ArrayLike<#A1>, kotlin/Function2<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber>, kotlin.js/JsAny? = ...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.from|from(io.ktor.client.fetch.ArrayLike<0:0>;kotlin.Function2<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber>;kotlin.js.JsAny?){0§<kotlin.js.JsAny>}[0]
    abstract fun from(io.ktor.client.fetch/ArrayLike<kotlin.js/JsNumber>): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.from|from(io.ktor.client.fetch.ArrayLike<kotlin.js.JsNumber>){}[0]
    abstract fun of(kotlin/Array<out kotlin.js/JsNumber>...): io.ktor.client.fetch/Uint8Array // io.ktor.client.fetch/Uint8ArrayConstructor.of|of(kotlin.Array<out|kotlin.js.JsNumber>...){}[0]
}

// Targets: [wasmJs]
final fun (io.ktor.client.fetch/Uint8Array).io.ktor.client.fetch/get(kotlin/Int): kotlin/Byte // io.ktor.client.fetch/get|get@io.ktor.client.fetch.Uint8Array(kotlin.Int){}[0]

// Targets: [wasmJs]
final fun (io.ktor.client.fetch/Uint8Array).io.ktor.client.fetch/set(kotlin/Int, kotlin/Byte) // io.ktor.client.fetch/set|set@io.ktor.client.fetch.Uint8Array(kotlin.Int;kotlin.Byte){}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny> io.ktor.client.utils/makeJsCall(kotlin.js/JsAny, kotlin/Array<out kotlin.js/JsAny>...): #A // io.ktor.client.utils/makeJsCall|makeJsCall(kotlin.js.JsAny;kotlin.Array<out|kotlin.js.JsAny>...){0§<kotlin.js.JsAny>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (io.ktor.client.fetch/ArrayLike<#A>).io.ktor.client.fetch/get(kotlin/Int): #A // io.ktor.client.fetch/get|get@io.ktor.client.fetch.ArrayLike<0:0>(kotlin.Int){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (io.ktor.client.fetch/ArrayLike<#A>).io.ktor.client.fetch/set(kotlin/Int, #A) // io.ktor.client.fetch/set|set@io.ktor.client.fetch.ArrayLike<0:0>(kotlin.Int;0:0){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun io.ktor.client.utils/makeJsCall(kotlin.js/JsAny, kotlin/Array<out kotlin.js/JsAny>...) // io.ktor.client.utils/makeJsCall|makeJsCall(kotlin.js.JsAny;kotlin.Array<out|kotlin.js.JsAny>...){}[0]
