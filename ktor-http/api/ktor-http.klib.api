// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-http>
final enum class io.ktor.http.auth/HeaderValueEncoding : kotlin/Enum<io.ktor.http.auth/HeaderValueEncoding> { // io.ktor.http.auth/HeaderValueEncoding|null[0]
    enum entry QUOTED_ALWAYS // io.ktor.http.auth/HeaderValueEncoding.QUOTED_ALWAYS|null[0]
    enum entry QUOTED_WHEN_REQUIRED // io.ktor.http.auth/HeaderValueEncoding.QUOTED_WHEN_REQUIRED|null[0]
    enum entry URI_ENCODE // io.ktor.http.auth/HeaderValueEncoding.URI_ENCODE|null[0]

    final val entries // io.ktor.http.auth/HeaderValueEncoding.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.http.auth/HeaderValueEncoding> // io.ktor.http.auth/HeaderValueEncoding.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.ktor.http.auth/HeaderValueEncoding // io.ktor.http.auth/HeaderValueEncoding.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.http.auth/HeaderValueEncoding> // io.ktor.http.auth/HeaderValueEncoding.values|values#static(){}[0]
}

final enum class io.ktor.http.content/VersionCheckResult : kotlin/Enum<io.ktor.http.content/VersionCheckResult> { // io.ktor.http.content/VersionCheckResult|null[0]
    enum entry NOT_MODIFIED // io.ktor.http.content/VersionCheckResult.NOT_MODIFIED|null[0]
    enum entry OK // io.ktor.http.content/VersionCheckResult.OK|null[0]
    enum entry PRECONDITION_FAILED // io.ktor.http.content/VersionCheckResult.PRECONDITION_FAILED|null[0]

    final val entries // io.ktor.http.content/VersionCheckResult.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.http.content/VersionCheckResult> // io.ktor.http.content/VersionCheckResult.entries.<get-entries>|<get-entries>#static(){}[0]
    final val statusCode // io.ktor.http.content/VersionCheckResult.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): io.ktor.http/HttpStatusCode // io.ktor.http.content/VersionCheckResult.statusCode.<get-statusCode>|<get-statusCode>(){}[0]

    final fun valueOf(kotlin/String): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/VersionCheckResult.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.http.content/VersionCheckResult> // io.ktor.http.content/VersionCheckResult.values|values#static(){}[0]
}

final enum class io.ktor.http/CookieEncoding : kotlin/Enum<io.ktor.http/CookieEncoding> { // io.ktor.http/CookieEncoding|null[0]
    enum entry BASE64_ENCODING // io.ktor.http/CookieEncoding.BASE64_ENCODING|null[0]
    enum entry DQUOTES // io.ktor.http/CookieEncoding.DQUOTES|null[0]
    enum entry RAW // io.ktor.http/CookieEncoding.RAW|null[0]
    enum entry URI_ENCODING // io.ktor.http/CookieEncoding.URI_ENCODING|null[0]

    final val entries // io.ktor.http/CookieEncoding.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.http/CookieEncoding> // io.ktor.http/CookieEncoding.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.ktor.http/CookieEncoding // io.ktor.http/CookieEncoding.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.http/CookieEncoding> // io.ktor.http/CookieEncoding.values|values#static(){}[0]
}

final enum class io.ktor.http/RangeUnits : kotlin/Enum<io.ktor.http/RangeUnits> { // io.ktor.http/RangeUnits|null[0]
    enum entry Bytes // io.ktor.http/RangeUnits.Bytes|null[0]
    enum entry None // io.ktor.http/RangeUnits.None|null[0]

    final val entries // io.ktor.http/RangeUnits.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.http/RangeUnits> // io.ktor.http/RangeUnits.entries.<get-entries>|<get-entries>#static(){}[0]
    final val unitToken // io.ktor.http/RangeUnits.unitToken|{}unitToken[0]
        final fun <get-unitToken>(): kotlin/String // io.ktor.http/RangeUnits.unitToken.<get-unitToken>|<get-unitToken>(){}[0]

    final fun valueOf(kotlin/String): io.ktor.http/RangeUnits // io.ktor.http/RangeUnits.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.http/RangeUnits> // io.ktor.http/RangeUnits.values|values#static(){}[0]
}

abstract interface io.ktor.http.content/MultiPartData { // io.ktor.http.content/MultiPartData|null[0]
    abstract suspend fun readPart(): io.ktor.http.content/PartData? // io.ktor.http.content/MultiPartData.readPart|readPart(){}[0]

    final object Empty : io.ktor.http.content/MultiPartData { // io.ktor.http.content/MultiPartData.Empty|null[0]
        final suspend fun readPart(): io.ktor.http.content/PartData? // io.ktor.http.content/MultiPartData.Empty.readPart|readPart(){}[0]
    }
}

abstract interface io.ktor.http.content/Version { // io.ktor.http.content/Version|null[0]
    abstract fun appendHeadersTo(io.ktor.http/HeadersBuilder) // io.ktor.http.content/Version.appendHeadersTo|appendHeadersTo(io.ktor.http.HeadersBuilder){}[0]
    abstract fun check(io.ktor.http/Headers): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/Version.check|check(io.ktor.http.Headers){}[0]
}

abstract interface io.ktor.http/ContentTypeMatcher { // io.ktor.http/ContentTypeMatcher|null[0]
    abstract fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentTypeMatcher.contains|contains(io.ktor.http.ContentType){}[0]
}

abstract interface io.ktor.http/Headers : io.ktor.util/StringValues { // io.ktor.http/Headers|null[0]
    final object Companion { // io.ktor.http/Headers.Companion|null[0]
        final val Empty // io.ktor.http/Headers.Companion.Empty|{}Empty[0]
            final fun <get-Empty>(): io.ktor.http/Headers // io.ktor.http/Headers.Companion.Empty.<get-Empty>|<get-Empty>(){}[0]

        final inline fun build(kotlin/Function1<io.ktor.http/HeadersBuilder, kotlin/Unit>): io.ktor.http/Headers // io.ktor.http/Headers.Companion.build|build(kotlin.Function1<io.ktor.http.HeadersBuilder,kotlin.Unit>){}[0]
    }
}

abstract interface io.ktor.http/HttpMessage { // io.ktor.http/HttpMessage|null[0]
    abstract val headers // io.ktor.http/HttpMessage.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.http/Headers // io.ktor.http/HttpMessage.headers.<get-headers>|<get-headers>(){}[0]
}

abstract interface io.ktor.http/HttpMessageBuilder { // io.ktor.http/HttpMessageBuilder|null[0]
    abstract val headers // io.ktor.http/HttpMessageBuilder.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.http/HeadersBuilder // io.ktor.http/HttpMessageBuilder.headers.<get-headers>|<get-headers>(){}[0]
}

abstract interface io.ktor.http/Parameters : io.ktor.util/StringValues { // io.ktor.http/Parameters|null[0]
    final object Companion { // io.ktor.http/Parameters.Companion|null[0]
        final val Empty // io.ktor.http/Parameters.Companion.Empty|{}Empty[0]
            final fun <get-Empty>(): io.ktor.http/Parameters // io.ktor.http/Parameters.Companion.Empty.<get-Empty>|<get-Empty>(){}[0]

        final inline fun build(kotlin/Function1<io.ktor.http/ParametersBuilder, kotlin/Unit>): io.ktor.http/Parameters // io.ktor.http/Parameters.Companion.build|build(kotlin.Function1<io.ktor.http.ParametersBuilder,kotlin.Unit>){}[0]
    }
}

abstract interface io.ktor.http/ParametersBuilder : io.ktor.util/StringValuesBuilder { // io.ktor.http/ParametersBuilder|null[0]
    abstract fun build(): io.ktor.http/Parameters // io.ktor.http/ParametersBuilder.build|build(){}[0]
}

abstract interface io.ktor.http/RequestConnectionPoint { // io.ktor.http/RequestConnectionPoint|null[0]
    abstract val host // io.ktor.http/RequestConnectionPoint.host|{}host[0]
        abstract fun <get-host>(): kotlin/String // io.ktor.http/RequestConnectionPoint.host.<get-host>|<get-host>(){}[0]
    abstract val localAddress // io.ktor.http/RequestConnectionPoint.localAddress|{}localAddress[0]
        abstract fun <get-localAddress>(): kotlin/String // io.ktor.http/RequestConnectionPoint.localAddress.<get-localAddress>|<get-localAddress>(){}[0]
    abstract val localHost // io.ktor.http/RequestConnectionPoint.localHost|{}localHost[0]
        abstract fun <get-localHost>(): kotlin/String // io.ktor.http/RequestConnectionPoint.localHost.<get-localHost>|<get-localHost>(){}[0]
    abstract val localPort // io.ktor.http/RequestConnectionPoint.localPort|{}localPort[0]
        abstract fun <get-localPort>(): kotlin/Int // io.ktor.http/RequestConnectionPoint.localPort.<get-localPort>|<get-localPort>(){}[0]
    abstract val method // io.ktor.http/RequestConnectionPoint.method|{}method[0]
        abstract fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.http/RequestConnectionPoint.method.<get-method>|<get-method>(){}[0]
    abstract val port // io.ktor.http/RequestConnectionPoint.port|{}port[0]
        abstract fun <get-port>(): kotlin/Int // io.ktor.http/RequestConnectionPoint.port.<get-port>|<get-port>(){}[0]
    abstract val remoteAddress // io.ktor.http/RequestConnectionPoint.remoteAddress|{}remoteAddress[0]
        abstract fun <get-remoteAddress>(): kotlin/String // io.ktor.http/RequestConnectionPoint.remoteAddress.<get-remoteAddress>|<get-remoteAddress>(){}[0]
    abstract val remoteHost // io.ktor.http/RequestConnectionPoint.remoteHost|{}remoteHost[0]
        abstract fun <get-remoteHost>(): kotlin/String // io.ktor.http/RequestConnectionPoint.remoteHost.<get-remoteHost>|<get-remoteHost>(){}[0]
    abstract val remotePort // io.ktor.http/RequestConnectionPoint.remotePort|{}remotePort[0]
        abstract fun <get-remotePort>(): kotlin/Int // io.ktor.http/RequestConnectionPoint.remotePort.<get-remotePort>|<get-remotePort>(){}[0]
    abstract val scheme // io.ktor.http/RequestConnectionPoint.scheme|{}scheme[0]
        abstract fun <get-scheme>(): kotlin/String // io.ktor.http/RequestConnectionPoint.scheme.<get-scheme>|<get-scheme>(){}[0]
    abstract val serverHost // io.ktor.http/RequestConnectionPoint.serverHost|{}serverHost[0]
        abstract fun <get-serverHost>(): kotlin/String // io.ktor.http/RequestConnectionPoint.serverHost.<get-serverHost>|<get-serverHost>(){}[0]
    abstract val serverPort // io.ktor.http/RequestConnectionPoint.serverPort|{}serverPort[0]
        abstract fun <get-serverPort>(): kotlin/Int // io.ktor.http/RequestConnectionPoint.serverPort.<get-serverPort>|<get-serverPort>(){}[0]
    abstract val uri // io.ktor.http/RequestConnectionPoint.uri|{}uri[0]
        abstract fun <get-uri>(): kotlin/String // io.ktor.http/RequestConnectionPoint.uri.<get-uri>|<get-uri>(){}[0]
    abstract val version // io.ktor.http/RequestConnectionPoint.version|{}version[0]
        abstract fun <get-version>(): kotlin/String // io.ktor.http/RequestConnectionPoint.version.<get-version>|<get-version>(){}[0]
}

abstract class io.ktor.http/CacheControl { // io.ktor.http/CacheControl|null[0]
    constructor <init>(io.ktor.http/CacheControl.Visibility?) // io.ktor.http/CacheControl.<init>|<init>(io.ktor.http.CacheControl.Visibility?){}[0]

    final val visibility // io.ktor.http/CacheControl.visibility|{}visibility[0]
        final fun <get-visibility>(): io.ktor.http/CacheControl.Visibility? // io.ktor.http/CacheControl.visibility.<get-visibility>|<get-visibility>(){}[0]

    final enum class Visibility : kotlin/Enum<io.ktor.http/CacheControl.Visibility> { // io.ktor.http/CacheControl.Visibility|null[0]
        enum entry Private // io.ktor.http/CacheControl.Visibility.Private|null[0]
        enum entry Public // io.ktor.http/CacheControl.Visibility.Public|null[0]

        final val entries // io.ktor.http/CacheControl.Visibility.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.http/CacheControl.Visibility> // io.ktor.http/CacheControl.Visibility.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): io.ktor.http/CacheControl.Visibility // io.ktor.http/CacheControl.Visibility.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<io.ktor.http/CacheControl.Visibility> // io.ktor.http/CacheControl.Visibility.values|values#static(){}[0]
    }

    final class MaxAge : io.ktor.http/CacheControl { // io.ktor.http/CacheControl.MaxAge|null[0]
        constructor <init>(kotlin/Int, kotlin/Int? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., io.ktor.http/CacheControl.Visibility? = ...) // io.ktor.http/CacheControl.MaxAge.<init>|<init>(kotlin.Int;kotlin.Int?;kotlin.Boolean;kotlin.Boolean;io.ktor.http.CacheControl.Visibility?){}[0]

        final val maxAgeSeconds // io.ktor.http/CacheControl.MaxAge.maxAgeSeconds|{}maxAgeSeconds[0]
            final fun <get-maxAgeSeconds>(): kotlin/Int // io.ktor.http/CacheControl.MaxAge.maxAgeSeconds.<get-maxAgeSeconds>|<get-maxAgeSeconds>(){}[0]
        final val mustRevalidate // io.ktor.http/CacheControl.MaxAge.mustRevalidate|{}mustRevalidate[0]
            final fun <get-mustRevalidate>(): kotlin/Boolean // io.ktor.http/CacheControl.MaxAge.mustRevalidate.<get-mustRevalidate>|<get-mustRevalidate>(){}[0]
        final val proxyMaxAgeSeconds // io.ktor.http/CacheControl.MaxAge.proxyMaxAgeSeconds|{}proxyMaxAgeSeconds[0]
            final fun <get-proxyMaxAgeSeconds>(): kotlin/Int? // io.ktor.http/CacheControl.MaxAge.proxyMaxAgeSeconds.<get-proxyMaxAgeSeconds>|<get-proxyMaxAgeSeconds>(){}[0]
        final val proxyRevalidate // io.ktor.http/CacheControl.MaxAge.proxyRevalidate|{}proxyRevalidate[0]
            final fun <get-proxyRevalidate>(): kotlin/Boolean // io.ktor.http/CacheControl.MaxAge.proxyRevalidate.<get-proxyRevalidate>|<get-proxyRevalidate>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/CacheControl.MaxAge.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/CacheControl.MaxAge.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/CacheControl.MaxAge.toString|toString(){}[0]
    }

    final class NoCache : io.ktor.http/CacheControl { // io.ktor.http/CacheControl.NoCache|null[0]
        constructor <init>(io.ktor.http/CacheControl.Visibility?) // io.ktor.http/CacheControl.NoCache.<init>|<init>(io.ktor.http.CacheControl.Visibility?){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/CacheControl.NoCache.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/CacheControl.NoCache.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/CacheControl.NoCache.toString|toString(){}[0]
    }

    final class NoStore : io.ktor.http/CacheControl { // io.ktor.http/CacheControl.NoStore|null[0]
        constructor <init>(io.ktor.http/CacheControl.Visibility?) // io.ktor.http/CacheControl.NoStore.<init>|<init>(io.ktor.http.CacheControl.Visibility?){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/CacheControl.NoStore.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/CacheControl.NoStore.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/CacheControl.NoStore.toString|toString(){}[0]
    }
}

abstract class io.ktor.http/HeaderValueWithParameters { // io.ktor.http/HeaderValueWithParameters|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...) // io.ktor.http/HeaderValueWithParameters.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]

    final val content // io.ktor.http/HeaderValueWithParameters.content|{}content[0]
        final fun <get-content>(): kotlin/String // io.ktor.http/HeaderValueWithParameters.content.<get-content>|<get-content>(){}[0]
    final val parameters // io.ktor.http/HeaderValueWithParameters.parameters|{}parameters[0]
        final fun <get-parameters>(): kotlin.collections/List<io.ktor.http/HeaderValueParam> // io.ktor.http/HeaderValueWithParameters.parameters.<get-parameters>|<get-parameters>(){}[0]

    final fun parameter(kotlin/String): kotlin/String? // io.ktor.http/HeaderValueWithParameters.parameter|parameter(kotlin.String){}[0]
    open fun toString(): kotlin/String // io.ktor.http/HeaderValueWithParameters.toString|toString(){}[0]

    final object Companion { // io.ktor.http/HeaderValueWithParameters.Companion|null[0]
        final inline fun <#A2: kotlin/Any?> parse(kotlin/String, kotlin/Function2<kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam>, #A2>): #A2 // io.ktor.http/HeaderValueWithParameters.Companion.parse|parse(kotlin.String;kotlin.Function2<kotlin.String,kotlin.collections.List<io.ktor.http.HeaderValueParam>,0:0>){0§<kotlin.Any?>}[0]
    }
}

final class io.ktor.http.content/ByteArrayContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // io.ktor.http.content/ByteArrayContent|null[0]
    constructor <init>(kotlin/ByteArray, io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ...) // io.ktor.http.content/ByteArrayContent.<init>|<init>(kotlin.ByteArray;io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?){}[0]

    final val contentLength // io.ktor.http.content/ByteArrayContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // io.ktor.http.content/ByteArrayContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // io.ktor.http.content/ByteArrayContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType? // io.ktor.http.content/ByteArrayContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val status // io.ktor.http.content/ByteArrayContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode? // io.ktor.http.content/ByteArrayContent.status.<get-status>|<get-status>(){}[0]

    final fun bytes(): kotlin/ByteArray // io.ktor.http.content/ByteArrayContent.bytes|bytes(){}[0]
}

final class io.ktor.http.content/CachingOptions { // io.ktor.http.content/CachingOptions|null[0]
    constructor <init>(io.ktor.http/CacheControl? = ..., io.ktor.util.date/GMTDate? = ...) // io.ktor.http.content/CachingOptions.<init>|<init>(io.ktor.http.CacheControl?;io.ktor.util.date.GMTDate?){}[0]

    final val cacheControl // io.ktor.http.content/CachingOptions.cacheControl|{}cacheControl[0]
        final fun <get-cacheControl>(): io.ktor.http/CacheControl? // io.ktor.http.content/CachingOptions.cacheControl.<get-cacheControl>|<get-cacheControl>(){}[0]
    final val expires // io.ktor.http.content/CachingOptions.expires|{}expires[0]
        final fun <get-expires>(): io.ktor.util.date/GMTDate? // io.ktor.http.content/CachingOptions.expires.<get-expires>|<get-expires>(){}[0]

    final fun component1(): io.ktor.http/CacheControl? // io.ktor.http.content/CachingOptions.component1|component1(){}[0]
    final fun component2(): io.ktor.util.date/GMTDate? // io.ktor.http.content/CachingOptions.component2|component2(){}[0]
    final fun copy(io.ktor.http/CacheControl? = ..., io.ktor.util.date/GMTDate? = ...): io.ktor.http.content/CachingOptions // io.ktor.http.content/CachingOptions.copy|copy(io.ktor.http.CacheControl?;io.ktor.util.date.GMTDate?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.content/CachingOptions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http.content/CachingOptions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http.content/CachingOptions.toString|toString(){}[0]
}

final class io.ktor.http.content/ChannelWriterContent : io.ktor.http.content/OutgoingContent.WriteChannelContent { // io.ktor.http.content/ChannelWriterContent|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction1<io.ktor.utils.io/ByteWriteChannel, kotlin/Unit>, io.ktor.http/ContentType?, io.ktor.http/HttpStatusCode? = ..., kotlin/Long? = ...) // io.ktor.http.content/ChannelWriterContent.<init>|<init>(kotlin.coroutines.SuspendFunction1<io.ktor.utils.io.ByteWriteChannel,kotlin.Unit>;io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.Long?){}[0]

    final val contentLength // io.ktor.http.content/ChannelWriterContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long? // io.ktor.http.content/ChannelWriterContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // io.ktor.http.content/ChannelWriterContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType? // io.ktor.http.content/ChannelWriterContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val status // io.ktor.http.content/ChannelWriterContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode? // io.ktor.http.content/ChannelWriterContent.status.<get-status>|<get-status>(){}[0]

    final suspend fun writeTo(io.ktor.utils.io/ByteWriteChannel) // io.ktor.http.content/ChannelWriterContent.writeTo|writeTo(io.ktor.utils.io.ByteWriteChannel){}[0]
}

final class io.ktor.http.content/EntityTagVersion : io.ktor.http.content/Version { // io.ktor.http.content/EntityTagVersion|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // io.ktor.http.content/EntityTagVersion.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

    final val etag // io.ktor.http.content/EntityTagVersion.etag|{}etag[0]
        final fun <get-etag>(): kotlin/String // io.ktor.http.content/EntityTagVersion.etag.<get-etag>|<get-etag>(){}[0]
    final val weak // io.ktor.http.content/EntityTagVersion.weak|{}weak[0]
        final fun <get-weak>(): kotlin/Boolean // io.ktor.http.content/EntityTagVersion.weak.<get-weak>|<get-weak>(){}[0]

    final fun appendHeadersTo(io.ktor.http/HeadersBuilder) // io.ktor.http.content/EntityTagVersion.appendHeadersTo|appendHeadersTo(io.ktor.http.HeadersBuilder){}[0]
    final fun check(io.ktor.http/Headers): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/EntityTagVersion.check|check(io.ktor.http.Headers){}[0]
    final fun component1(): kotlin/String // io.ktor.http.content/EntityTagVersion.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // io.ktor.http.content/EntityTagVersion.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Boolean = ...): io.ktor.http.content/EntityTagVersion // io.ktor.http.content/EntityTagVersion.copy|copy(kotlin.String;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.content/EntityTagVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http.content/EntityTagVersion.hashCode|hashCode(){}[0]
    final fun match(io.ktor.http.content/EntityTagVersion): kotlin/Boolean // io.ktor.http.content/EntityTagVersion.match|match(io.ktor.http.content.EntityTagVersion){}[0]
    final fun match(kotlin.collections/List<io.ktor.http.content/EntityTagVersion>): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/EntityTagVersion.match|match(kotlin.collections.List<io.ktor.http.content.EntityTagVersion>){}[0]
    final fun noneMatch(kotlin.collections/List<io.ktor.http.content/EntityTagVersion>): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/EntityTagVersion.noneMatch|noneMatch(kotlin.collections.List<io.ktor.http.content.EntityTagVersion>){}[0]
    final fun toString(): kotlin/String // io.ktor.http.content/EntityTagVersion.toString|toString(){}[0]

    final object Companion { // io.ktor.http.content/EntityTagVersion.Companion|null[0]
        final val STAR // io.ktor.http.content/EntityTagVersion.Companion.STAR|{}STAR[0]
            final fun <get-STAR>(): io.ktor.http.content/EntityTagVersion // io.ktor.http.content/EntityTagVersion.Companion.STAR.<get-STAR>|<get-STAR>(){}[0]

        final fun parse(kotlin/String): kotlin.collections/List<io.ktor.http.content/EntityTagVersion> // io.ktor.http.content/EntityTagVersion.Companion.parse|parse(kotlin.String){}[0]
        final fun parseSingle(kotlin/String): io.ktor.http.content/EntityTagVersion // io.ktor.http.content/EntityTagVersion.Companion.parseSingle|parseSingle(kotlin.String){}[0]
    }
}

final class io.ktor.http.content/LastModifiedVersion : io.ktor.http.content/Version { // io.ktor.http.content/LastModifiedVersion|null[0]
    constructor <init>(io.ktor.util.date/GMTDate) // io.ktor.http.content/LastModifiedVersion.<init>|<init>(io.ktor.util.date.GMTDate){}[0]

    final val lastModified // io.ktor.http.content/LastModifiedVersion.lastModified|{}lastModified[0]
        final fun <get-lastModified>(): io.ktor.util.date/GMTDate // io.ktor.http.content/LastModifiedVersion.lastModified.<get-lastModified>|<get-lastModified>(){}[0]

    final fun appendHeadersTo(io.ktor.http/HeadersBuilder) // io.ktor.http.content/LastModifiedVersion.appendHeadersTo|appendHeadersTo(io.ktor.http.HeadersBuilder){}[0]
    final fun check(io.ktor.http/Headers): io.ktor.http.content/VersionCheckResult // io.ktor.http.content/LastModifiedVersion.check|check(io.ktor.http.Headers){}[0]
    final fun component1(): io.ktor.util.date/GMTDate // io.ktor.http.content/LastModifiedVersion.component1|component1(){}[0]
    final fun copy(io.ktor.util.date/GMTDate = ...): io.ktor.http.content/LastModifiedVersion // io.ktor.http.content/LastModifiedVersion.copy|copy(io.ktor.util.date.GMTDate){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.content/LastModifiedVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http.content/LastModifiedVersion.hashCode|hashCode(){}[0]
    final fun ifModifiedSince(kotlin.collections/List<io.ktor.util.date/GMTDate>): kotlin/Boolean // io.ktor.http.content/LastModifiedVersion.ifModifiedSince|ifModifiedSince(kotlin.collections.List<io.ktor.util.date.GMTDate>){}[0]
    final fun ifUnmodifiedSince(kotlin.collections/List<io.ktor.util.date/GMTDate>): kotlin/Boolean // io.ktor.http.content/LastModifiedVersion.ifUnmodifiedSince|ifUnmodifiedSince(kotlin.collections.List<io.ktor.util.date.GMTDate>){}[0]
    final fun toString(): kotlin/String // io.ktor.http.content/LastModifiedVersion.toString|toString(){}[0]
}

final class io.ktor.http.content/TextContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // io.ktor.http.content/TextContent|null[0]
    constructor <init>(kotlin/String, io.ktor.http/ContentType, io.ktor.http/HttpStatusCode? = ...) // io.ktor.http.content/TextContent.<init>|<init>(kotlin.String;io.ktor.http.ContentType;io.ktor.http.HttpStatusCode?){}[0]

    final val contentLength // io.ktor.http.content/TextContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // io.ktor.http.content/TextContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // io.ktor.http.content/TextContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // io.ktor.http.content/TextContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val status // io.ktor.http.content/TextContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode? // io.ktor.http.content/TextContent.status.<get-status>|<get-status>(){}[0]
    final val text // io.ktor.http.content/TextContent.text|{}text[0]
        final fun <get-text>(): kotlin/String // io.ktor.http.content/TextContent.text.<get-text>|<get-text>(){}[0]

    final fun bytes(): kotlin/ByteArray // io.ktor.http.content/TextContent.bytes|bytes(){}[0]
    final fun toString(): kotlin/String // io.ktor.http.content/TextContent.toString|toString(){}[0]
}

final class io.ktor.http.header/AcceptEncoding : io.ktor.http/HeaderValueWithParameters { // io.ktor.http.header/AcceptEncoding|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...) // io.ktor.http.header/AcceptEncoding.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]
    constructor <init>(kotlin/String, kotlin/Double) // io.ktor.http.header/AcceptEncoding.<init>|<init>(kotlin.String;kotlin.Double){}[0]

    final val acceptEncoding // io.ktor.http.header/AcceptEncoding.acceptEncoding|{}acceptEncoding[0]
        final fun <get-acceptEncoding>(): kotlin/String // io.ktor.http.header/AcceptEncoding.acceptEncoding.<get-acceptEncoding>|<get-acceptEncoding>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.header/AcceptEncoding.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http.header/AcceptEncoding.hashCode|hashCode(){}[0]
    final fun match(io.ktor.http.header/AcceptEncoding): kotlin/Boolean // io.ktor.http.header/AcceptEncoding.match|match(io.ktor.http.header.AcceptEncoding){}[0]
    final fun withQValue(kotlin/Double): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.withQValue|withQValue(kotlin.Double){}[0]

    final object Companion { // io.ktor.http.header/AcceptEncoding.Companion|null[0]
        final val All // io.ktor.http.header/AcceptEncoding.Companion.All|{}All[0]
            final fun <get-All>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.All.<get-All>|<get-All>(){}[0]
        final val Br // io.ktor.http.header/AcceptEncoding.Companion.Br|{}Br[0]
            final fun <get-Br>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Br.<get-Br>|<get-Br>(){}[0]
        final val Compress // io.ktor.http.header/AcceptEncoding.Companion.Compress|{}Compress[0]
            final fun <get-Compress>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Compress.<get-Compress>|<get-Compress>(){}[0]
        final val Deflate // io.ktor.http.header/AcceptEncoding.Companion.Deflate|{}Deflate[0]
            final fun <get-Deflate>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Deflate.<get-Deflate>|<get-Deflate>(){}[0]
        final val Gzip // io.ktor.http.header/AcceptEncoding.Companion.Gzip|{}Gzip[0]
            final fun <get-Gzip>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Gzip.<get-Gzip>|<get-Gzip>(){}[0]
        final val Identity // io.ktor.http.header/AcceptEncoding.Companion.Identity|{}Identity[0]
            final fun <get-Identity>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Identity.<get-Identity>|<get-Identity>(){}[0]
        final val Zstd // io.ktor.http.header/AcceptEncoding.Companion.Zstd|{}Zstd[0]
            final fun <get-Zstd>(): io.ktor.http.header/AcceptEncoding // io.ktor.http.header/AcceptEncoding.Companion.Zstd.<get-Zstd>|<get-Zstd>(){}[0]

        final fun mergeAcceptEncodings(kotlin/Array<out io.ktor.http.header/AcceptEncoding>...): kotlin/String // io.ktor.http.header/AcceptEncoding.Companion.mergeAcceptEncodings|mergeAcceptEncodings(kotlin.Array<out|io.ktor.http.header.AcceptEncoding>...){}[0]
    }
}

final class io.ktor.http.parsing/ParseException : kotlin/IllegalArgumentException { // io.ktor.http.parsing/ParseException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // io.ktor.http.parsing/ParseException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    final val cause // io.ktor.http.parsing/ParseException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // io.ktor.http.parsing/ParseException.cause.<get-cause>|<get-cause>(){}[0]
    final val message // io.ktor.http.parsing/ParseException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.http.parsing/ParseException.message.<get-message>|<get-message>(){}[0]
}

final class io.ktor.http/BadContentTypeFormatException : kotlin/Exception { // io.ktor.http/BadContentTypeFormatException|null[0]
    constructor <init>(kotlin/String) // io.ktor.http/BadContentTypeFormatException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.http/ContentDisposition : io.ktor.http/HeaderValueWithParameters { // io.ktor.http/ContentDisposition|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...) // io.ktor.http/ContentDisposition.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]

    final val disposition // io.ktor.http/ContentDisposition.disposition|{}disposition[0]
        final fun <get-disposition>(): kotlin/String // io.ktor.http/ContentDisposition.disposition.<get-disposition>|<get-disposition>(){}[0]
    final val name // io.ktor.http/ContentDisposition.name|{}name[0]
        final fun <get-name>(): kotlin/String? // io.ktor.http/ContentDisposition.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/ContentDisposition.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/ContentDisposition.hashCode|hashCode(){}[0]
    final fun withParameter(kotlin/String, kotlin/String, kotlin/Boolean = ...): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.withParameter|withParameter(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
    final fun withParameters(kotlin.collections/List<io.ktor.http/HeaderValueParam>): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.withParameters|withParameters(kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]

    final object Companion { // io.ktor.http/ContentDisposition.Companion|null[0]
        final val Attachment // io.ktor.http/ContentDisposition.Companion.Attachment|{}Attachment[0]
            final fun <get-Attachment>(): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.Companion.Attachment.<get-Attachment>|<get-Attachment>(){}[0]
        final val File // io.ktor.http/ContentDisposition.Companion.File|{}File[0]
            final fun <get-File>(): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.Companion.File.<get-File>|<get-File>(){}[0]
        final val Inline // io.ktor.http/ContentDisposition.Companion.Inline|{}Inline[0]
            final fun <get-Inline>(): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.Companion.Inline.<get-Inline>|<get-Inline>(){}[0]
        final val Mixed // io.ktor.http/ContentDisposition.Companion.Mixed|{}Mixed[0]
            final fun <get-Mixed>(): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.Companion.Mixed.<get-Mixed>|<get-Mixed>(){}[0]

        final fun parse(kotlin/String): io.ktor.http/ContentDisposition // io.ktor.http/ContentDisposition.Companion.parse|parse(kotlin.String){}[0]
    }

    final object Parameters { // io.ktor.http/ContentDisposition.Parameters|null[0]
        final const val CreationDate // io.ktor.http/ContentDisposition.Parameters.CreationDate|{}CreationDate[0]
            final fun <get-CreationDate>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.CreationDate.<get-CreationDate>|<get-CreationDate>(){}[0]
        final const val FileName // io.ktor.http/ContentDisposition.Parameters.FileName|{}FileName[0]
            final fun <get-FileName>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.FileName.<get-FileName>|<get-FileName>(){}[0]
        final const val FileNameAsterisk // io.ktor.http/ContentDisposition.Parameters.FileNameAsterisk|{}FileNameAsterisk[0]
            final fun <get-FileNameAsterisk>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.FileNameAsterisk.<get-FileNameAsterisk>|<get-FileNameAsterisk>(){}[0]
        final const val Handling // io.ktor.http/ContentDisposition.Parameters.Handling|{}Handling[0]
            final fun <get-Handling>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.Handling.<get-Handling>|<get-Handling>(){}[0]
        final const val ModificationDate // io.ktor.http/ContentDisposition.Parameters.ModificationDate|{}ModificationDate[0]
            final fun <get-ModificationDate>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.ModificationDate.<get-ModificationDate>|<get-ModificationDate>(){}[0]
        final const val Name // io.ktor.http/ContentDisposition.Parameters.Name|{}Name[0]
            final fun <get-Name>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.Name.<get-Name>|<get-Name>(){}[0]
        final const val ReadDate // io.ktor.http/ContentDisposition.Parameters.ReadDate|{}ReadDate[0]
            final fun <get-ReadDate>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.ReadDate.<get-ReadDate>|<get-ReadDate>(){}[0]
        final const val Size // io.ktor.http/ContentDisposition.Parameters.Size|{}Size[0]
            final fun <get-Size>(): kotlin/String // io.ktor.http/ContentDisposition.Parameters.Size.<get-Size>|<get-Size>(){}[0]
    }
}

final class io.ktor.http/ContentType : io.ktor.http/HeaderValueWithParameters { // io.ktor.http/ContentType|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...) // io.ktor.http/ContentType.<init>|<init>(kotlin.String;kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]

    final val contentSubtype // io.ktor.http/ContentType.contentSubtype|{}contentSubtype[0]
        final fun <get-contentSubtype>(): kotlin/String // io.ktor.http/ContentType.contentSubtype.<get-contentSubtype>|<get-contentSubtype>(){}[0]
    final val contentType // io.ktor.http/ContentType.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String // io.ktor.http/ContentType.contentType.<get-contentType>|<get-contentType>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/ContentType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/ContentType.hashCode|hashCode(){}[0]
    final fun match(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.match|match(io.ktor.http.ContentType){}[0]
    final fun match(kotlin/String): kotlin/Boolean // io.ktor.http/ContentType.match|match(kotlin.String){}[0]
    final fun withParameter(kotlin/String, kotlin/String): io.ktor.http/ContentType // io.ktor.http/ContentType.withParameter|withParameter(kotlin.String;kotlin.String){}[0]
    final fun withoutParameters(): io.ktor.http/ContentType // io.ktor.http/ContentType.withoutParameters|withoutParameters(){}[0]

    final object Application { // io.ktor.http/ContentType.Application|null[0]
        final const val TYPE // io.ktor.http/ContentType.Application.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Application.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Application.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Any.<get-Any>|<get-Any>(){}[0]
        final val Atom // io.ktor.http/ContentType.Application.Atom|{}Atom[0]
            final fun <get-Atom>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Atom.<get-Atom>|<get-Atom>(){}[0]
        final val Cbor // io.ktor.http/ContentType.Application.Cbor|{}Cbor[0]
            final fun <get-Cbor>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Cbor.<get-Cbor>|<get-Cbor>(){}[0]
        final val Docx // io.ktor.http/ContentType.Application.Docx|{}Docx[0]
            final fun <get-Docx>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Docx.<get-Docx>|<get-Docx>(){}[0]
        final val FormUrlEncoded // io.ktor.http/ContentType.Application.FormUrlEncoded|{}FormUrlEncoded[0]
            final fun <get-FormUrlEncoded>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.FormUrlEncoded.<get-FormUrlEncoded>|<get-FormUrlEncoded>(){}[0]
        final val GZip // io.ktor.http/ContentType.Application.GZip|{}GZip[0]
            final fun <get-GZip>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.GZip.<get-GZip>|<get-GZip>(){}[0]
        final val HalJson // io.ktor.http/ContentType.Application.HalJson|{}HalJson[0]
            final fun <get-HalJson>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.HalJson.<get-HalJson>|<get-HalJson>(){}[0]
        final val JavaScript // io.ktor.http/ContentType.Application.JavaScript|{}JavaScript[0]
            final fun <get-JavaScript>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.JavaScript.<get-JavaScript>|<get-JavaScript>(){}[0]
        final val Json // io.ktor.http/ContentType.Application.Json|{}Json[0]
            final fun <get-Json>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Json.<get-Json>|<get-Json>(){}[0]
        final val OctetStream // io.ktor.http/ContentType.Application.OctetStream|{}OctetStream[0]
            final fun <get-OctetStream>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.OctetStream.<get-OctetStream>|<get-OctetStream>(){}[0]
        final val Pdf // io.ktor.http/ContentType.Application.Pdf|{}Pdf[0]
            final fun <get-Pdf>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Pdf.<get-Pdf>|<get-Pdf>(){}[0]
        final val Pptx // io.ktor.http/ContentType.Application.Pptx|{}Pptx[0]
            final fun <get-Pptx>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Pptx.<get-Pptx>|<get-Pptx>(){}[0]
        final val ProblemJson // io.ktor.http/ContentType.Application.ProblemJson|{}ProblemJson[0]
            final fun <get-ProblemJson>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.ProblemJson.<get-ProblemJson>|<get-ProblemJson>(){}[0]
        final val ProblemXml // io.ktor.http/ContentType.Application.ProblemXml|{}ProblemXml[0]
            final fun <get-ProblemXml>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.ProblemXml.<get-ProblemXml>|<get-ProblemXml>(){}[0]
        final val ProtoBuf // io.ktor.http/ContentType.Application.ProtoBuf|{}ProtoBuf[0]
            final fun <get-ProtoBuf>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.ProtoBuf.<get-ProtoBuf>|<get-ProtoBuf>(){}[0]
        final val Rss // io.ktor.http/ContentType.Application.Rss|{}Rss[0]
            final fun <get-Rss>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Rss.<get-Rss>|<get-Rss>(){}[0]
        final val Soap // io.ktor.http/ContentType.Application.Soap|{}Soap[0]
            final fun <get-Soap>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Soap.<get-Soap>|<get-Soap>(){}[0]
        final val Wasm // io.ktor.http/ContentType.Application.Wasm|{}Wasm[0]
            final fun <get-Wasm>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Wasm.<get-Wasm>|<get-Wasm>(){}[0]
        final val Xlsx // io.ktor.http/ContentType.Application.Xlsx|{}Xlsx[0]
            final fun <get-Xlsx>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Xlsx.<get-Xlsx>|<get-Xlsx>(){}[0]
        final val Xml // io.ktor.http/ContentType.Application.Xml|{}Xml[0]
            final fun <get-Xml>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Xml.<get-Xml>|<get-Xml>(){}[0]
        final val Xml_Dtd // io.ktor.http/ContentType.Application.Xml_Dtd|{}Xml_Dtd[0]
            final fun <get-Xml_Dtd>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Xml_Dtd.<get-Xml_Dtd>|<get-Xml_Dtd>(){}[0]
        final val Yaml // io.ktor.http/ContentType.Application.Yaml|{}Yaml[0]
            final fun <get-Yaml>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Yaml.<get-Yaml>|<get-Yaml>(){}[0]
        final val Zip // io.ktor.http/ContentType.Application.Zip|{}Zip[0]
            final fun <get-Zip>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Application.Zip.<get-Zip>|<get-Zip>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Application.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.Application.contains|contains(kotlin.CharSequence){}[0]
    }

    final object Audio { // io.ktor.http/ContentType.Audio|null[0]
        final const val TYPE // io.ktor.http/ContentType.Audio.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Audio.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Audio.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Audio.Any.<get-Any>|<get-Any>(){}[0]
        final val MP4 // io.ktor.http/ContentType.Audio.MP4|{}MP4[0]
            final fun <get-MP4>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Audio.MP4.<get-MP4>|<get-MP4>(){}[0]
        final val MPEG // io.ktor.http/ContentType.Audio.MPEG|{}MPEG[0]
            final fun <get-MPEG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Audio.MPEG.<get-MPEG>|<get-MPEG>(){}[0]
        final val OGG // io.ktor.http/ContentType.Audio.OGG|{}OGG[0]
            final fun <get-OGG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Audio.OGG.<get-OGG>|<get-OGG>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Audio.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.Audio.contains|contains(kotlin.CharSequence){}[0]
    }

    final object Companion { // io.ktor.http/ContentType.Companion|null[0]
        final val Any // io.ktor.http/ContentType.Companion.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Companion.Any.<get-Any>|<get-Any>(){}[0]

        final fun parse(kotlin/String): io.ktor.http/ContentType // io.ktor.http/ContentType.Companion.parse|parse(kotlin.String){}[0]
    }

    final object Font { // io.ktor.http/ContentType.Font|null[0]
        final const val TYPE // io.ktor.http/ContentType.Font.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Font.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Font.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Any.<get-Any>|<get-Any>(){}[0]
        final val Collection // io.ktor.http/ContentType.Font.Collection|{}Collection[0]
            final fun <get-Collection>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Collection.<get-Collection>|<get-Collection>(){}[0]
        final val Otf // io.ktor.http/ContentType.Font.Otf|{}Otf[0]
            final fun <get-Otf>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Otf.<get-Otf>|<get-Otf>(){}[0]
        final val Sfnt // io.ktor.http/ContentType.Font.Sfnt|{}Sfnt[0]
            final fun <get-Sfnt>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Sfnt.<get-Sfnt>|<get-Sfnt>(){}[0]
        final val Ttf // io.ktor.http/ContentType.Font.Ttf|{}Ttf[0]
            final fun <get-Ttf>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Ttf.<get-Ttf>|<get-Ttf>(){}[0]
        final val Woff // io.ktor.http/ContentType.Font.Woff|{}Woff[0]
            final fun <get-Woff>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Woff.<get-Woff>|<get-Woff>(){}[0]
        final val Woff2 // io.ktor.http/ContentType.Font.Woff2|{}Woff2[0]
            final fun <get-Woff2>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Font.Woff2.<get-Woff2>|<get-Woff2>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Font.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.Font.contains|contains(kotlin.CharSequence){}[0]
    }

    final object Image { // io.ktor.http/ContentType.Image|null[0]
        final const val TYPE // io.ktor.http/ContentType.Image.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Image.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Image.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.Any.<get-Any>|<get-Any>(){}[0]
        final val GIF // io.ktor.http/ContentType.Image.GIF|{}GIF[0]
            final fun <get-GIF>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.GIF.<get-GIF>|<get-GIF>(){}[0]
        final val JPEG // io.ktor.http/ContentType.Image.JPEG|{}JPEG[0]
            final fun <get-JPEG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.JPEG.<get-JPEG>|<get-JPEG>(){}[0]
        final val PNG // io.ktor.http/ContentType.Image.PNG|{}PNG[0]
            final fun <get-PNG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.PNG.<get-PNG>|<get-PNG>(){}[0]
        final val SVG // io.ktor.http/ContentType.Image.SVG|{}SVG[0]
            final fun <get-SVG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.SVG.<get-SVG>|<get-SVG>(){}[0]
        final val XIcon // io.ktor.http/ContentType.Image.XIcon|{}XIcon[0]
            final fun <get-XIcon>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Image.XIcon.<get-XIcon>|<get-XIcon>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Image.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/String): kotlin/Boolean // io.ktor.http/ContentType.Image.contains|contains(kotlin.String){}[0]
    }

    final object Message { // io.ktor.http/ContentType.Message|null[0]
        final const val TYPE // io.ktor.http/ContentType.Message.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Message.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Message.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Message.Any.<get-Any>|<get-Any>(){}[0]
        final val Http // io.ktor.http/ContentType.Message.Http|{}Http[0]
            final fun <get-Http>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Message.Http.<get-Http>|<get-Http>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Message.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/String): kotlin/Boolean // io.ktor.http/ContentType.Message.contains|contains(kotlin.String){}[0]
    }

    final object MultiPart { // io.ktor.http/ContentType.MultiPart|null[0]
        final const val TYPE // io.ktor.http/ContentType.MultiPart.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.MultiPart.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Alternative // io.ktor.http/ContentType.MultiPart.Alternative|{}Alternative[0]
            final fun <get-Alternative>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Alternative.<get-Alternative>|<get-Alternative>(){}[0]
        final val Any // io.ktor.http/ContentType.MultiPart.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Any.<get-Any>|<get-Any>(){}[0]
        final val ByteRanges // io.ktor.http/ContentType.MultiPart.ByteRanges|{}ByteRanges[0]
            final fun <get-ByteRanges>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.ByteRanges.<get-ByteRanges>|<get-ByteRanges>(){}[0]
        final val Encrypted // io.ktor.http/ContentType.MultiPart.Encrypted|{}Encrypted[0]
            final fun <get-Encrypted>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Encrypted.<get-Encrypted>|<get-Encrypted>(){}[0]
        final val FormData // io.ktor.http/ContentType.MultiPart.FormData|{}FormData[0]
            final fun <get-FormData>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.FormData.<get-FormData>|<get-FormData>(){}[0]
        final val Mixed // io.ktor.http/ContentType.MultiPart.Mixed|{}Mixed[0]
            final fun <get-Mixed>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Mixed.<get-Mixed>|<get-Mixed>(){}[0]
        final val Related // io.ktor.http/ContentType.MultiPart.Related|{}Related[0]
            final fun <get-Related>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Related.<get-Related>|<get-Related>(){}[0]
        final val Signed // io.ktor.http/ContentType.MultiPart.Signed|{}Signed[0]
            final fun <get-Signed>(): io.ktor.http/ContentType // io.ktor.http/ContentType.MultiPart.Signed.<get-Signed>|<get-Signed>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.MultiPart.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.MultiPart.contains|contains(kotlin.CharSequence){}[0]
    }

    final object Text { // io.ktor.http/ContentType.Text|null[0]
        final const val TYPE // io.ktor.http/ContentType.Text.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Text.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Text.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.Any.<get-Any>|<get-Any>(){}[0]
        final val CSS // io.ktor.http/ContentType.Text.CSS|{}CSS[0]
            final fun <get-CSS>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.CSS.<get-CSS>|<get-CSS>(){}[0]
        final val CSV // io.ktor.http/ContentType.Text.CSV|{}CSV[0]
            final fun <get-CSV>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.CSV.<get-CSV>|<get-CSV>(){}[0]
        final val EventStream // io.ktor.http/ContentType.Text.EventStream|{}EventStream[0]
            final fun <get-EventStream>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.EventStream.<get-EventStream>|<get-EventStream>(){}[0]
        final val Html // io.ktor.http/ContentType.Text.Html|{}Html[0]
            final fun <get-Html>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.Html.<get-Html>|<get-Html>(){}[0]
        final val JavaScript // io.ktor.http/ContentType.Text.JavaScript|{}JavaScript[0]
            final fun <get-JavaScript>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.JavaScript.<get-JavaScript>|<get-JavaScript>(){}[0]
        final val Plain // io.ktor.http/ContentType.Text.Plain|{}Plain[0]
            final fun <get-Plain>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.Plain.<get-Plain>|<get-Plain>(){}[0]
        final val VCard // io.ktor.http/ContentType.Text.VCard|{}VCard[0]
            final fun <get-VCard>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.VCard.<get-VCard>|<get-VCard>(){}[0]
        final val Xml // io.ktor.http/ContentType.Text.Xml|{}Xml[0]
            final fun <get-Xml>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Text.Xml.<get-Xml>|<get-Xml>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Text.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.Text.contains|contains(kotlin.CharSequence){}[0]
    }

    final object Video { // io.ktor.http/ContentType.Video|null[0]
        final const val TYPE // io.ktor.http/ContentType.Video.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.ktor.http/ContentType.Video.TYPE.<get-TYPE>|<get-TYPE>(){}[0]

        final val Any // io.ktor.http/ContentType.Video.Any|{}Any[0]
            final fun <get-Any>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Video.Any.<get-Any>|<get-Any>(){}[0]
        final val MP4 // io.ktor.http/ContentType.Video.MP4|{}MP4[0]
            final fun <get-MP4>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Video.MP4.<get-MP4>|<get-MP4>(){}[0]
        final val MPEG // io.ktor.http/ContentType.Video.MPEG|{}MPEG[0]
            final fun <get-MPEG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Video.MPEG.<get-MPEG>|<get-MPEG>(){}[0]
        final val OGG // io.ktor.http/ContentType.Video.OGG|{}OGG[0]
            final fun <get-OGG>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Video.OGG.<get-OGG>|<get-OGG>(){}[0]
        final val QuickTime // io.ktor.http/ContentType.Video.QuickTime|{}QuickTime[0]
            final fun <get-QuickTime>(): io.ktor.http/ContentType // io.ktor.http/ContentType.Video.QuickTime.<get-QuickTime>|<get-QuickTime>(){}[0]

        final fun contains(io.ktor.http/ContentType): kotlin/Boolean // io.ktor.http/ContentType.Video.contains|contains(io.ktor.http.ContentType){}[0]
        final fun contains(kotlin/CharSequence): kotlin/Boolean // io.ktor.http/ContentType.Video.contains|contains(kotlin.CharSequence){}[0]
    }
}

final class io.ktor.http/Cookie : io.ktor.utils.io/JvmSerializable { // io.ktor.http/Cookie|null[0]
    constructor <init>(kotlin/String, kotlin/String, io.ktor.http/CookieEncoding = ..., kotlin/Int? = ..., io.ktor.util.date/GMTDate? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/String?> = ...) // io.ktor.http/Cookie.<init>|<init>(kotlin.String;kotlin.String;io.ktor.http.CookieEncoding;kotlin.Int?;io.ktor.util.date.GMTDate?;kotlin.String?;kotlin.String?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.String?>){}[0]

    final val domain // io.ktor.http/Cookie.domain|{}domain[0]
        final fun <get-domain>(): kotlin/String? // io.ktor.http/Cookie.domain.<get-domain>|<get-domain>(){}[0]
    final val encoding // io.ktor.http/Cookie.encoding|{}encoding[0]
        final fun <get-encoding>(): io.ktor.http/CookieEncoding // io.ktor.http/Cookie.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val expires // io.ktor.http/Cookie.expires|{}expires[0]
        final fun <get-expires>(): io.ktor.util.date/GMTDate? // io.ktor.http/Cookie.expires.<get-expires>|<get-expires>(){}[0]
    final val extensions // io.ktor.http/Cookie.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/String?> // io.ktor.http/Cookie.extensions.<get-extensions>|<get-extensions>(){}[0]
    final val httpOnly // io.ktor.http/Cookie.httpOnly|{}httpOnly[0]
        final fun <get-httpOnly>(): kotlin/Boolean // io.ktor.http/Cookie.httpOnly.<get-httpOnly>|<get-httpOnly>(){}[0]
    final val maxAge // io.ktor.http/Cookie.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin/Int? // io.ktor.http/Cookie.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val name // io.ktor.http/Cookie.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.http/Cookie.name.<get-name>|<get-name>(){}[0]
    final val path // io.ktor.http/Cookie.path|{}path[0]
        final fun <get-path>(): kotlin/String? // io.ktor.http/Cookie.path.<get-path>|<get-path>(){}[0]
    final val secure // io.ktor.http/Cookie.secure|{}secure[0]
        final fun <get-secure>(): kotlin/Boolean // io.ktor.http/Cookie.secure.<get-secure>|<get-secure>(){}[0]
    final val value // io.ktor.http/Cookie.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.http/Cookie.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/Cookie.component1|component1(){}[0]
    final fun component10(): kotlin.collections/Map<kotlin/String, kotlin/String?> // io.ktor.http/Cookie.component10|component10(){}[0]
    final fun component2(): kotlin/String // io.ktor.http/Cookie.component2|component2(){}[0]
    final fun component3(): io.ktor.http/CookieEncoding // io.ktor.http/Cookie.component3|component3(){}[0]
    final fun component4(): kotlin/Int? // io.ktor.http/Cookie.component4|component4(){}[0]
    final fun component5(): io.ktor.util.date/GMTDate? // io.ktor.http/Cookie.component5|component5(){}[0]
    final fun component6(): kotlin/String? // io.ktor.http/Cookie.component6|component6(){}[0]
    final fun component7(): kotlin/String? // io.ktor.http/Cookie.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // io.ktor.http/Cookie.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // io.ktor.http/Cookie.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., io.ktor.http/CookieEncoding = ..., kotlin/Int? = ..., io.ktor.util.date/GMTDate? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/String?> = ...): io.ktor.http/Cookie // io.ktor.http/Cookie.copy|copy(kotlin.String;kotlin.String;io.ktor.http.CookieEncoding;kotlin.Int?;io.ktor.util.date.GMTDate?;kotlin.String?;kotlin.String?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/Cookie.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/Cookie.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/Cookie.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.ktor.http/Cookie> { // io.ktor.http/Cookie.$serializer|null[0]
        final val descriptor // io.ktor.http/Cookie.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.http/Cookie.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.ktor.http/Cookie.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.http/Cookie // io.ktor.http/Cookie.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.http/Cookie) // io.ktor.http/Cookie.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.http.Cookie){}[0]
    }

    final object Companion { // io.ktor.http/Cookie.Companion|null[0]
        final val $childSerializers // io.ktor.http/Cookie.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.http/Cookie> // io.ktor.http/Cookie.Companion.serializer|serializer(){}[0]
    }
}

final class io.ktor.http/HeaderValue { // io.ktor.http/HeaderValue|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...) // io.ktor.http/HeaderValue.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]

    final val params // io.ktor.http/HeaderValue.params|{}params[0]
        final fun <get-params>(): kotlin.collections/List<io.ktor.http/HeaderValueParam> // io.ktor.http/HeaderValue.params.<get-params>|<get-params>(){}[0]
    final val quality // io.ktor.http/HeaderValue.quality|{}quality[0]
        final fun <get-quality>(): kotlin/Double // io.ktor.http/HeaderValue.quality.<get-quality>|<get-quality>(){}[0]
    final val value // io.ktor.http/HeaderValue.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.http/HeaderValue.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/HeaderValue.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<io.ktor.http/HeaderValueParam> // io.ktor.http/HeaderValue.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin.collections/List<io.ktor.http/HeaderValueParam> = ...): io.ktor.http/HeaderValue // io.ktor.http/HeaderValue.copy|copy(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/HeaderValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/HeaderValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/HeaderValue.toString|toString(){}[0]
}

final class io.ktor.http/HeaderValueParam { // io.ktor.http/HeaderValueParam|null[0]
    constructor <init>(kotlin/String, kotlin/String) // io.ktor.http/HeaderValueParam.<init>|<init>(kotlin.String;kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean) // io.ktor.http/HeaderValueParam.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[0]

    final val escapeValue // io.ktor.http/HeaderValueParam.escapeValue|{}escapeValue[0]
        final fun <get-escapeValue>(): kotlin/Boolean // io.ktor.http/HeaderValueParam.escapeValue.<get-escapeValue>|<get-escapeValue>(){}[0]
    final val name // io.ktor.http/HeaderValueParam.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.http/HeaderValueParam.name.<get-name>|<get-name>(){}[0]
    final val value // io.ktor.http/HeaderValueParam.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.http/HeaderValueParam.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/HeaderValueParam.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.ktor.http/HeaderValueParam.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // io.ktor.http/HeaderValueParam.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ...): io.ktor.http/HeaderValueParam // io.ktor.http/HeaderValueParam.copy|copy(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/HeaderValueParam.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/HeaderValueParam.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/HeaderValueParam.toString|toString(){}[0]
}

final class io.ktor.http/HeadersBuilder : io.ktor.util/StringValuesBuilderImpl { // io.ktor.http/HeadersBuilder|null[0]
    constructor <init>(kotlin/Int = ...) // io.ktor.http/HeadersBuilder.<init>|<init>(kotlin.Int){}[0]

    final fun build(): io.ktor.http/Headers // io.ktor.http/HeadersBuilder.build|build(){}[0]
}

final class io.ktor.http/HeadersImpl : io.ktor.http/Headers, io.ktor.util/StringValuesImpl { // io.ktor.http/HeadersImpl|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>> = ...) // io.ktor.http/HeadersImpl.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>){}[0]

    final fun toString(): kotlin/String // io.ktor.http/HeadersImpl.toString|toString(){}[0]
}

final class io.ktor.http/HeadersSingleImpl : io.ktor.http/Headers, io.ktor.util/StringValuesSingleImpl { // io.ktor.http/HeadersSingleImpl|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // io.ktor.http/HeadersSingleImpl.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]

    final fun toString(): kotlin/String // io.ktor.http/HeadersSingleImpl.toString|toString(){}[0]
}

final class io.ktor.http/HttpMethod { // io.ktor.http/HttpMethod|null[0]
    constructor <init>(kotlin/String) // io.ktor.http/HttpMethod.<init>|<init>(kotlin.String){}[0]

    final val value // io.ktor.http/HttpMethod.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.http/HttpMethod.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/HttpMethod.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/HttpMethod.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/HttpMethod.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/HttpMethod.toString|toString(){}[0]

    final object Companion { // io.ktor.http/HttpMethod.Companion|null[0]
        final val DefaultMethods // io.ktor.http/HttpMethod.Companion.DefaultMethods|{}DefaultMethods[0]
            final fun <get-DefaultMethods>(): kotlin.collections/List<io.ktor.http/HttpMethod> // io.ktor.http/HttpMethod.Companion.DefaultMethods.<get-DefaultMethods>|<get-DefaultMethods>(){}[0]
        final val Delete // io.ktor.http/HttpMethod.Companion.Delete|{}Delete[0]
            final fun <get-Delete>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Delete.<get-Delete>|<get-Delete>(){}[0]
        final val Get // io.ktor.http/HttpMethod.Companion.Get|{}Get[0]
            final fun <get-Get>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Get.<get-Get>|<get-Get>(){}[0]
        final val Head // io.ktor.http/HttpMethod.Companion.Head|{}Head[0]
            final fun <get-Head>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Head.<get-Head>|<get-Head>(){}[0]
        final val Options // io.ktor.http/HttpMethod.Companion.Options|{}Options[0]
            final fun <get-Options>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Options.<get-Options>|<get-Options>(){}[0]
        final val Patch // io.ktor.http/HttpMethod.Companion.Patch|{}Patch[0]
            final fun <get-Patch>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Patch.<get-Patch>|<get-Patch>(){}[0]
        final val Post // io.ktor.http/HttpMethod.Companion.Post|{}Post[0]
            final fun <get-Post>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Post.<get-Post>|<get-Post>(){}[0]
        final val Put // io.ktor.http/HttpMethod.Companion.Put|{}Put[0]
            final fun <get-Put>(): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.Put.<get-Put>|<get-Put>(){}[0]

        final fun parse(kotlin/String): io.ktor.http/HttpMethod // io.ktor.http/HttpMethod.Companion.parse|parse(kotlin.String){}[0]
    }
}

final class io.ktor.http/HttpProtocolVersion { // io.ktor.http/HttpProtocolVersion|null[0]
    constructor <init>(kotlin/String, kotlin/Int, kotlin/Int) // io.ktor.http/HttpProtocolVersion.<init>|<init>(kotlin.String;kotlin.Int;kotlin.Int){}[0]

    final val major // io.ktor.http/HttpProtocolVersion.major|{}major[0]
        final fun <get-major>(): kotlin/Int // io.ktor.http/HttpProtocolVersion.major.<get-major>|<get-major>(){}[0]
    final val minor // io.ktor.http/HttpProtocolVersion.minor|{}minor[0]
        final fun <get-minor>(): kotlin/Int // io.ktor.http/HttpProtocolVersion.minor.<get-minor>|<get-minor>(){}[0]
    final val name // io.ktor.http/HttpProtocolVersion.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.http/HttpProtocolVersion.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/HttpProtocolVersion.component1|component1(){}[0]
    final fun component2(): kotlin/Int // io.ktor.http/HttpProtocolVersion.component2|component2(){}[0]
    final fun component3(): kotlin/Int // io.ktor.http/HttpProtocolVersion.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ...): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.copy|copy(kotlin.String;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/HttpProtocolVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/HttpProtocolVersion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/HttpProtocolVersion.toString|toString(){}[0]

    final object Companion { // io.ktor.http/HttpProtocolVersion.Companion|null[0]
        final val HTTP_1_0 // io.ktor.http/HttpProtocolVersion.Companion.HTTP_1_0|{}HTTP_1_0[0]
            final fun <get-HTTP_1_0>(): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.HTTP_1_0.<get-HTTP_1_0>|<get-HTTP_1_0>(){}[0]
        final val HTTP_1_1 // io.ktor.http/HttpProtocolVersion.Companion.HTTP_1_1|{}HTTP_1_1[0]
            final fun <get-HTTP_1_1>(): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.HTTP_1_1.<get-HTTP_1_1>|<get-HTTP_1_1>(){}[0]
        final val HTTP_2_0 // io.ktor.http/HttpProtocolVersion.Companion.HTTP_2_0|{}HTTP_2_0[0]
            final fun <get-HTTP_2_0>(): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.HTTP_2_0.<get-HTTP_2_0>|<get-HTTP_2_0>(){}[0]
        final val QUIC // io.ktor.http/HttpProtocolVersion.Companion.QUIC|{}QUIC[0]
            final fun <get-QUIC>(): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.QUIC.<get-QUIC>|<get-QUIC>(){}[0]
        final val SPDY_3 // io.ktor.http/HttpProtocolVersion.Companion.SPDY_3|{}SPDY_3[0]
            final fun <get-SPDY_3>(): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.SPDY_3.<get-SPDY_3>|<get-SPDY_3>(){}[0]

        final fun fromValue(kotlin/String, kotlin/Int, kotlin/Int): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.fromValue|fromValue(kotlin.String;kotlin.Int;kotlin.Int){}[0]
        final fun parse(kotlin/CharSequence): io.ktor.http/HttpProtocolVersion // io.ktor.http/HttpProtocolVersion.Companion.parse|parse(kotlin.CharSequence){}[0]
    }
}

final class io.ktor.http/HttpStatusCode : kotlin/Comparable<io.ktor.http/HttpStatusCode> { // io.ktor.http/HttpStatusCode|null[0]
    constructor <init>(kotlin/Int, kotlin/String) // io.ktor.http/HttpStatusCode.<init>|<init>(kotlin.Int;kotlin.String){}[0]

    final val description // io.ktor.http/HttpStatusCode.description|{}description[0]
        final fun <get-description>(): kotlin/String // io.ktor.http/HttpStatusCode.description.<get-description>|<get-description>(){}[0]
    final val value // io.ktor.http/HttpStatusCode.value|{}value[0]
        final fun <get-value>(): kotlin/Int // io.ktor.http/HttpStatusCode.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(io.ktor.http/HttpStatusCode): kotlin/Int // io.ktor.http/HttpStatusCode.compareTo|compareTo(io.ktor.http.HttpStatusCode){}[0]
    final fun component1(): kotlin/Int // io.ktor.http/HttpStatusCode.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.ktor.http/HttpStatusCode.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/String = ...): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.copy|copy(kotlin.Int;kotlin.String){}[0]
    final fun description(kotlin/String): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.description|description(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/HttpStatusCode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/HttpStatusCode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/HttpStatusCode.toString|toString(){}[0]

    final object Companion { // io.ktor.http/HttpStatusCode.Companion|null[0]
        final val Accepted // io.ktor.http/HttpStatusCode.Companion.Accepted|{}Accepted[0]
            final fun <get-Accepted>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Accepted.<get-Accepted>|<get-Accepted>(){}[0]
        final val BadGateway // io.ktor.http/HttpStatusCode.Companion.BadGateway|{}BadGateway[0]
            final fun <get-BadGateway>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.BadGateway.<get-BadGateway>|<get-BadGateway>(){}[0]
        final val BadRequest // io.ktor.http/HttpStatusCode.Companion.BadRequest|{}BadRequest[0]
            final fun <get-BadRequest>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.BadRequest.<get-BadRequest>|<get-BadRequest>(){}[0]
        final val Conflict // io.ktor.http/HttpStatusCode.Companion.Conflict|{}Conflict[0]
            final fun <get-Conflict>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Conflict.<get-Conflict>|<get-Conflict>(){}[0]
        final val Continue // io.ktor.http/HttpStatusCode.Companion.Continue|{}Continue[0]
            final fun <get-Continue>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Continue.<get-Continue>|<get-Continue>(){}[0]
        final val Created // io.ktor.http/HttpStatusCode.Companion.Created|{}Created[0]
            final fun <get-Created>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Created.<get-Created>|<get-Created>(){}[0]
        final val ExpectationFailed // io.ktor.http/HttpStatusCode.Companion.ExpectationFailed|{}ExpectationFailed[0]
            final fun <get-ExpectationFailed>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.ExpectationFailed.<get-ExpectationFailed>|<get-ExpectationFailed>(){}[0]
        final val FailedDependency // io.ktor.http/HttpStatusCode.Companion.FailedDependency|{}FailedDependency[0]
            final fun <get-FailedDependency>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.FailedDependency.<get-FailedDependency>|<get-FailedDependency>(){}[0]
        final val Forbidden // io.ktor.http/HttpStatusCode.Companion.Forbidden|{}Forbidden[0]
            final fun <get-Forbidden>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Forbidden.<get-Forbidden>|<get-Forbidden>(){}[0]
        final val Found // io.ktor.http/HttpStatusCode.Companion.Found|{}Found[0]
            final fun <get-Found>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Found.<get-Found>|<get-Found>(){}[0]
        final val GatewayTimeout // io.ktor.http/HttpStatusCode.Companion.GatewayTimeout|{}GatewayTimeout[0]
            final fun <get-GatewayTimeout>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.GatewayTimeout.<get-GatewayTimeout>|<get-GatewayTimeout>(){}[0]
        final val Gone // io.ktor.http/HttpStatusCode.Companion.Gone|{}Gone[0]
            final fun <get-Gone>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Gone.<get-Gone>|<get-Gone>(){}[0]
        final val InsufficientStorage // io.ktor.http/HttpStatusCode.Companion.InsufficientStorage|{}InsufficientStorage[0]
            final fun <get-InsufficientStorage>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.InsufficientStorage.<get-InsufficientStorage>|<get-InsufficientStorage>(){}[0]
        final val InternalServerError // io.ktor.http/HttpStatusCode.Companion.InternalServerError|{}InternalServerError[0]
            final fun <get-InternalServerError>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.InternalServerError.<get-InternalServerError>|<get-InternalServerError>(){}[0]
        final val LengthRequired // io.ktor.http/HttpStatusCode.Companion.LengthRequired|{}LengthRequired[0]
            final fun <get-LengthRequired>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.LengthRequired.<get-LengthRequired>|<get-LengthRequired>(){}[0]
        final val Locked // io.ktor.http/HttpStatusCode.Companion.Locked|{}Locked[0]
            final fun <get-Locked>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Locked.<get-Locked>|<get-Locked>(){}[0]
        final val MethodNotAllowed // io.ktor.http/HttpStatusCode.Companion.MethodNotAllowed|{}MethodNotAllowed[0]
            final fun <get-MethodNotAllowed>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.MethodNotAllowed.<get-MethodNotAllowed>|<get-MethodNotAllowed>(){}[0]
        final val MovedPermanently // io.ktor.http/HttpStatusCode.Companion.MovedPermanently|{}MovedPermanently[0]
            final fun <get-MovedPermanently>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.MovedPermanently.<get-MovedPermanently>|<get-MovedPermanently>(){}[0]
        final val MultiStatus // io.ktor.http/HttpStatusCode.Companion.MultiStatus|{}MultiStatus[0]
            final fun <get-MultiStatus>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.MultiStatus.<get-MultiStatus>|<get-MultiStatus>(){}[0]
        final val MultipleChoices // io.ktor.http/HttpStatusCode.Companion.MultipleChoices|{}MultipleChoices[0]
            final fun <get-MultipleChoices>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.MultipleChoices.<get-MultipleChoices>|<get-MultipleChoices>(){}[0]
        final val NoContent // io.ktor.http/HttpStatusCode.Companion.NoContent|{}NoContent[0]
            final fun <get-NoContent>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NoContent.<get-NoContent>|<get-NoContent>(){}[0]
        final val NonAuthoritativeInformation // io.ktor.http/HttpStatusCode.Companion.NonAuthoritativeInformation|{}NonAuthoritativeInformation[0]
            final fun <get-NonAuthoritativeInformation>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NonAuthoritativeInformation.<get-NonAuthoritativeInformation>|<get-NonAuthoritativeInformation>(){}[0]
        final val NotAcceptable // io.ktor.http/HttpStatusCode.Companion.NotAcceptable|{}NotAcceptable[0]
            final fun <get-NotAcceptable>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NotAcceptable.<get-NotAcceptable>|<get-NotAcceptable>(){}[0]
        final val NotFound // io.ktor.http/HttpStatusCode.Companion.NotFound|{}NotFound[0]
            final fun <get-NotFound>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NotFound.<get-NotFound>|<get-NotFound>(){}[0]
        final val NotImplemented // io.ktor.http/HttpStatusCode.Companion.NotImplemented|{}NotImplemented[0]
            final fun <get-NotImplemented>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NotImplemented.<get-NotImplemented>|<get-NotImplemented>(){}[0]
        final val NotModified // io.ktor.http/HttpStatusCode.Companion.NotModified|{}NotModified[0]
            final fun <get-NotModified>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.NotModified.<get-NotModified>|<get-NotModified>(){}[0]
        final val OK // io.ktor.http/HttpStatusCode.Companion.OK|{}OK[0]
            final fun <get-OK>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.OK.<get-OK>|<get-OK>(){}[0]
        final val PartialContent // io.ktor.http/HttpStatusCode.Companion.PartialContent|{}PartialContent[0]
            final fun <get-PartialContent>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.PartialContent.<get-PartialContent>|<get-PartialContent>(){}[0]
        final val PayloadTooLarge // io.ktor.http/HttpStatusCode.Companion.PayloadTooLarge|{}PayloadTooLarge[0]
            final fun <get-PayloadTooLarge>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.PayloadTooLarge.<get-PayloadTooLarge>|<get-PayloadTooLarge>(){}[0]
        final val PaymentRequired // io.ktor.http/HttpStatusCode.Companion.PaymentRequired|{}PaymentRequired[0]
            final fun <get-PaymentRequired>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.PaymentRequired.<get-PaymentRequired>|<get-PaymentRequired>(){}[0]
        final val PermanentRedirect // io.ktor.http/HttpStatusCode.Companion.PermanentRedirect|{}PermanentRedirect[0]
            final fun <get-PermanentRedirect>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.PermanentRedirect.<get-PermanentRedirect>|<get-PermanentRedirect>(){}[0]
        final val PreconditionFailed // io.ktor.http/HttpStatusCode.Companion.PreconditionFailed|{}PreconditionFailed[0]
            final fun <get-PreconditionFailed>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.PreconditionFailed.<get-PreconditionFailed>|<get-PreconditionFailed>(){}[0]
        final val Processing // io.ktor.http/HttpStatusCode.Companion.Processing|{}Processing[0]
            final fun <get-Processing>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Processing.<get-Processing>|<get-Processing>(){}[0]
        final val ProxyAuthenticationRequired // io.ktor.http/HttpStatusCode.Companion.ProxyAuthenticationRequired|{}ProxyAuthenticationRequired[0]
            final fun <get-ProxyAuthenticationRequired>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.ProxyAuthenticationRequired.<get-ProxyAuthenticationRequired>|<get-ProxyAuthenticationRequired>(){}[0]
        final val RequestHeaderFieldTooLarge // io.ktor.http/HttpStatusCode.Companion.RequestHeaderFieldTooLarge|{}RequestHeaderFieldTooLarge[0]
            final fun <get-RequestHeaderFieldTooLarge>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.RequestHeaderFieldTooLarge.<get-RequestHeaderFieldTooLarge>|<get-RequestHeaderFieldTooLarge>(){}[0]
        final val RequestTimeout // io.ktor.http/HttpStatusCode.Companion.RequestTimeout|{}RequestTimeout[0]
            final fun <get-RequestTimeout>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.RequestTimeout.<get-RequestTimeout>|<get-RequestTimeout>(){}[0]
        final val RequestURITooLong // io.ktor.http/HttpStatusCode.Companion.RequestURITooLong|{}RequestURITooLong[0]
            final fun <get-RequestURITooLong>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.RequestURITooLong.<get-RequestURITooLong>|<get-RequestURITooLong>(){}[0]
        final val RequestedRangeNotSatisfiable // io.ktor.http/HttpStatusCode.Companion.RequestedRangeNotSatisfiable|{}RequestedRangeNotSatisfiable[0]
            final fun <get-RequestedRangeNotSatisfiable>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.RequestedRangeNotSatisfiable.<get-RequestedRangeNotSatisfiable>|<get-RequestedRangeNotSatisfiable>(){}[0]
        final val ResetContent // io.ktor.http/HttpStatusCode.Companion.ResetContent|{}ResetContent[0]
            final fun <get-ResetContent>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.ResetContent.<get-ResetContent>|<get-ResetContent>(){}[0]
        final val SeeOther // io.ktor.http/HttpStatusCode.Companion.SeeOther|{}SeeOther[0]
            final fun <get-SeeOther>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.SeeOther.<get-SeeOther>|<get-SeeOther>(){}[0]
        final val ServiceUnavailable // io.ktor.http/HttpStatusCode.Companion.ServiceUnavailable|{}ServiceUnavailable[0]
            final fun <get-ServiceUnavailable>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.ServiceUnavailable.<get-ServiceUnavailable>|<get-ServiceUnavailable>(){}[0]
        final val SwitchProxy // io.ktor.http/HttpStatusCode.Companion.SwitchProxy|{}SwitchProxy[0]
            final fun <get-SwitchProxy>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.SwitchProxy.<get-SwitchProxy>|<get-SwitchProxy>(){}[0]
        final val SwitchingProtocols // io.ktor.http/HttpStatusCode.Companion.SwitchingProtocols|{}SwitchingProtocols[0]
            final fun <get-SwitchingProtocols>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.SwitchingProtocols.<get-SwitchingProtocols>|<get-SwitchingProtocols>(){}[0]
        final val TemporaryRedirect // io.ktor.http/HttpStatusCode.Companion.TemporaryRedirect|{}TemporaryRedirect[0]
            final fun <get-TemporaryRedirect>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.TemporaryRedirect.<get-TemporaryRedirect>|<get-TemporaryRedirect>(){}[0]
        final val TooEarly // io.ktor.http/HttpStatusCode.Companion.TooEarly|{}TooEarly[0]
            final fun <get-TooEarly>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.TooEarly.<get-TooEarly>|<get-TooEarly>(){}[0]
        final val TooManyRequests // io.ktor.http/HttpStatusCode.Companion.TooManyRequests|{}TooManyRequests[0]
            final fun <get-TooManyRequests>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.TooManyRequests.<get-TooManyRequests>|<get-TooManyRequests>(){}[0]
        final val Unauthorized // io.ktor.http/HttpStatusCode.Companion.Unauthorized|{}Unauthorized[0]
            final fun <get-Unauthorized>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.Unauthorized.<get-Unauthorized>|<get-Unauthorized>(){}[0]
        final val UnprocessableEntity // io.ktor.http/HttpStatusCode.Companion.UnprocessableEntity|{}UnprocessableEntity[0]
            final fun <get-UnprocessableEntity>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.UnprocessableEntity.<get-UnprocessableEntity>|<get-UnprocessableEntity>(){}[0]
        final val UnsupportedMediaType // io.ktor.http/HttpStatusCode.Companion.UnsupportedMediaType|{}UnsupportedMediaType[0]
            final fun <get-UnsupportedMediaType>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.UnsupportedMediaType.<get-UnsupportedMediaType>|<get-UnsupportedMediaType>(){}[0]
        final val UpgradeRequired // io.ktor.http/HttpStatusCode.Companion.UpgradeRequired|{}UpgradeRequired[0]
            final fun <get-UpgradeRequired>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.UpgradeRequired.<get-UpgradeRequired>|<get-UpgradeRequired>(){}[0]
        final val UseProxy // io.ktor.http/HttpStatusCode.Companion.UseProxy|{}UseProxy[0]
            final fun <get-UseProxy>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.UseProxy.<get-UseProxy>|<get-UseProxy>(){}[0]
        final val VariantAlsoNegotiates // io.ktor.http/HttpStatusCode.Companion.VariantAlsoNegotiates|{}VariantAlsoNegotiates[0]
            final fun <get-VariantAlsoNegotiates>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.VariantAlsoNegotiates.<get-VariantAlsoNegotiates>|<get-VariantAlsoNegotiates>(){}[0]
        final val VersionNotSupported // io.ktor.http/HttpStatusCode.Companion.VersionNotSupported|{}VersionNotSupported[0]
            final fun <get-VersionNotSupported>(): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.VersionNotSupported.<get-VersionNotSupported>|<get-VersionNotSupported>(){}[0]
        final val allStatusCodes // io.ktor.http/HttpStatusCode.Companion.allStatusCodes|{}allStatusCodes[0]
            final fun <get-allStatusCodes>(): kotlin.collections/List<io.ktor.http/HttpStatusCode> // io.ktor.http/HttpStatusCode.Companion.allStatusCodes.<get-allStatusCodes>|<get-allStatusCodes>(){}[0]

        final fun fromValue(kotlin/Int): io.ktor.http/HttpStatusCode // io.ktor.http/HttpStatusCode.Companion.fromValue|fromValue(kotlin.Int){}[0]
    }
}

final class io.ktor.http/IllegalHeaderNameException : kotlin/IllegalArgumentException { // io.ktor.http/IllegalHeaderNameException|null[0]
    constructor <init>(kotlin/String, kotlin/Int) // io.ktor.http/IllegalHeaderNameException.<init>|<init>(kotlin.String;kotlin.Int){}[0]

    final val headerName // io.ktor.http/IllegalHeaderNameException.headerName|{}headerName[0]
        final fun <get-headerName>(): kotlin/String // io.ktor.http/IllegalHeaderNameException.headerName.<get-headerName>|<get-headerName>(){}[0]
    final val position // io.ktor.http/IllegalHeaderNameException.position|{}position[0]
        final fun <get-position>(): kotlin/Int // io.ktor.http/IllegalHeaderNameException.position.<get-position>|<get-position>(){}[0]
}

final class io.ktor.http/IllegalHeaderValueException : kotlin/IllegalArgumentException { // io.ktor.http/IllegalHeaderValueException|null[0]
    constructor <init>(kotlin/String, kotlin/Int) // io.ktor.http/IllegalHeaderValueException.<init>|<init>(kotlin.String;kotlin.Int){}[0]

    final val headerValue // io.ktor.http/IllegalHeaderValueException.headerValue|{}headerValue[0]
        final fun <get-headerValue>(): kotlin/String // io.ktor.http/IllegalHeaderValueException.headerValue.<get-headerValue>|<get-headerValue>(){}[0]
    final val position // io.ktor.http/IllegalHeaderValueException.position|{}position[0]
        final fun <get-position>(): kotlin/Int // io.ktor.http/IllegalHeaderValueException.position.<get-position>|<get-position>(){}[0]
}

final class io.ktor.http/LinkHeader : io.ktor.http/HeaderValueWithParameters { // io.ktor.http/LinkHeader|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam>) // io.ktor.http/LinkHeader.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>){}[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>, io.ktor.http/ContentType) // io.ktor.http/LinkHeader.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>;io.ktor.http.ContentType){}[0]
    constructor <init>(kotlin/String, kotlin/Array<out kotlin/String>...) // io.ktor.http/LinkHeader.<init>|<init>(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    constructor <init>(kotlin/String, kotlin/String) // io.ktor.http/LinkHeader.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val uri // io.ktor.http/LinkHeader.uri|{}uri[0]
        final fun <get-uri>(): kotlin/String // io.ktor.http/LinkHeader.uri.<get-uri>|<get-uri>(){}[0]

    final object Parameters { // io.ktor.http/LinkHeader.Parameters|null[0]
        final const val Anchor // io.ktor.http/LinkHeader.Parameters.Anchor|{}Anchor[0]
            final fun <get-Anchor>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Anchor.<get-Anchor>|<get-Anchor>(){}[0]
        final const val HrefLang // io.ktor.http/LinkHeader.Parameters.HrefLang|{}HrefLang[0]
            final fun <get-HrefLang>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.HrefLang.<get-HrefLang>|<get-HrefLang>(){}[0]
        final const val Media // io.ktor.http/LinkHeader.Parameters.Media|{}Media[0]
            final fun <get-Media>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Media.<get-Media>|<get-Media>(){}[0]
        final const val Rel // io.ktor.http/LinkHeader.Parameters.Rel|{}Rel[0]
            final fun <get-Rel>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Rel.<get-Rel>|<get-Rel>(){}[0]
        final const val Rev // io.ktor.http/LinkHeader.Parameters.Rev|{}Rev[0]
            final fun <get-Rev>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Rev.<get-Rev>|<get-Rev>(){}[0]
        final const val Title // io.ktor.http/LinkHeader.Parameters.Title|{}Title[0]
            final fun <get-Title>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Title.<get-Title>|<get-Title>(){}[0]
        final const val Type // io.ktor.http/LinkHeader.Parameters.Type|{}Type[0]
            final fun <get-Type>(): kotlin/String // io.ktor.http/LinkHeader.Parameters.Type.<get-Type>|<get-Type>(){}[0]
    }

    final object Rel { // io.ktor.http/LinkHeader.Rel|null[0]
        final const val DnsPrefetch // io.ktor.http/LinkHeader.Rel.DnsPrefetch|{}DnsPrefetch[0]
            final fun <get-DnsPrefetch>(): kotlin/String // io.ktor.http/LinkHeader.Rel.DnsPrefetch.<get-DnsPrefetch>|<get-DnsPrefetch>(){}[0]
        final const val Next // io.ktor.http/LinkHeader.Rel.Next|{}Next[0]
            final fun <get-Next>(): kotlin/String // io.ktor.http/LinkHeader.Rel.Next.<get-Next>|<get-Next>(){}[0]
        final const val PreConnect // io.ktor.http/LinkHeader.Rel.PreConnect|{}PreConnect[0]
            final fun <get-PreConnect>(): kotlin/String // io.ktor.http/LinkHeader.Rel.PreConnect.<get-PreConnect>|<get-PreConnect>(){}[0]
        final const val PreLoad // io.ktor.http/LinkHeader.Rel.PreLoad|{}PreLoad[0]
            final fun <get-PreLoad>(): kotlin/String // io.ktor.http/LinkHeader.Rel.PreLoad.<get-PreLoad>|<get-PreLoad>(){}[0]
        final const val PreRender // io.ktor.http/LinkHeader.Rel.PreRender|{}PreRender[0]
            final fun <get-PreRender>(): kotlin/String // io.ktor.http/LinkHeader.Rel.PreRender.<get-PreRender>|<get-PreRender>(){}[0]
        final const val Prefetch // io.ktor.http/LinkHeader.Rel.Prefetch|{}Prefetch[0]
            final fun <get-Prefetch>(): kotlin/String // io.ktor.http/LinkHeader.Rel.Prefetch.<get-Prefetch>|<get-Prefetch>(){}[0]
        final const val Stylesheet // io.ktor.http/LinkHeader.Rel.Stylesheet|{}Stylesheet[0]
            final fun <get-Stylesheet>(): kotlin/String // io.ktor.http/LinkHeader.Rel.Stylesheet.<get-Stylesheet>|<get-Stylesheet>(){}[0]
    }
}

final class io.ktor.http/ParametersBuilderImpl : io.ktor.http/ParametersBuilder, io.ktor.util/StringValuesBuilderImpl { // io.ktor.http/ParametersBuilderImpl|null[0]
    constructor <init>(kotlin/Int = ...) // io.ktor.http/ParametersBuilderImpl.<init>|<init>(kotlin.Int){}[0]

    final fun build(): io.ktor.http/Parameters // io.ktor.http/ParametersBuilderImpl.build|build(){}[0]
}

final class io.ktor.http/ParametersImpl : io.ktor.http/Parameters, io.ktor.util/StringValuesImpl { // io.ktor.http/ParametersImpl|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>> = ...) // io.ktor.http/ParametersImpl.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>){}[0]

    final fun toString(): kotlin/String // io.ktor.http/ParametersImpl.toString|toString(){}[0]
}

final class io.ktor.http/ParametersSingleImpl : io.ktor.http/Parameters, io.ktor.util/StringValuesSingleImpl { // io.ktor.http/ParametersSingleImpl|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // io.ktor.http/ParametersSingleImpl.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]

    final fun toString(): kotlin/String // io.ktor.http/ParametersSingleImpl.toString|toString(){}[0]
}

final class io.ktor.http/RangesSpecifier { // io.ktor.http/RangesSpecifier|null[0]
    constructor <init>(io.ktor.http/RangeUnits, kotlin.collections/List<io.ktor.http/ContentRange>) // io.ktor.http/RangesSpecifier.<init>|<init>(io.ktor.http.RangeUnits;kotlin.collections.List<io.ktor.http.ContentRange>){}[0]
    constructor <init>(kotlin/String = ..., kotlin.collections/List<io.ktor.http/ContentRange>) // io.ktor.http/RangesSpecifier.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.ContentRange>){}[0]

    final val ranges // io.ktor.http/RangesSpecifier.ranges|{}ranges[0]
        final fun <get-ranges>(): kotlin.collections/List<io.ktor.http/ContentRange> // io.ktor.http/RangesSpecifier.ranges.<get-ranges>|<get-ranges>(){}[0]
    final val unit // io.ktor.http/RangesSpecifier.unit|{}unit[0]
        final fun <get-unit>(): kotlin/String // io.ktor.http/RangesSpecifier.unit.<get-unit>|<get-unit>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/RangesSpecifier.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<io.ktor.http/ContentRange> // io.ktor.http/RangesSpecifier.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin.collections/List<io.ktor.http/ContentRange> = ...): io.ktor.http/RangesSpecifier // io.ktor.http/RangesSpecifier.copy|copy(kotlin.String;kotlin.collections.List<io.ktor.http.ContentRange>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/RangesSpecifier.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/RangesSpecifier.hashCode|hashCode(){}[0]
    final fun isValid(kotlin/Function1<kotlin/String, kotlin/Boolean> = ...): kotlin/Boolean // io.ktor.http/RangesSpecifier.isValid|isValid(kotlin.Function1<kotlin.String,kotlin.Boolean>){}[0]
    final fun merge(kotlin/Long): kotlin.collections/List<kotlin.ranges/LongRange> // io.ktor.http/RangesSpecifier.merge|merge(kotlin.Long){}[0]
    final fun merge(kotlin/Long, kotlin/Int = ...): kotlin.collections/List<kotlin.ranges/LongRange> // io.ktor.http/RangesSpecifier.merge|merge(kotlin.Long;kotlin.Int){}[0]
    final fun mergeToSingle(kotlin/Long): kotlin.ranges/LongRange? // io.ktor.http/RangesSpecifier.mergeToSingle|mergeToSingle(kotlin.Long){}[0]
    final fun toString(): kotlin/String // io.ktor.http/RangesSpecifier.toString|toString(){}[0]
}

final class io.ktor.http/URLBuilder { // io.ktor.http/URLBuilder|null[0]
    constructor <init>(io.ktor.http/URLProtocol? = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<kotlin/String> = ..., io.ktor.http/Parameters = ..., kotlin/String = ..., kotlin/Boolean = ...) // io.ktor.http/URLBuilder.<init>|<init>(io.ktor.http.URLProtocol?;kotlin.String;kotlin.Int;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;io.ktor.http.Parameters;kotlin.String;kotlin.Boolean){}[0]

    final var encodedFragment // io.ktor.http/URLBuilder.encodedFragment|{}encodedFragment[0]
        final fun <get-encodedFragment>(): kotlin/String // io.ktor.http/URLBuilder.encodedFragment.<get-encodedFragment>|<get-encodedFragment>(){}[0]
        final fun <set-encodedFragment>(kotlin/String) // io.ktor.http/URLBuilder.encodedFragment.<set-encodedFragment>|<set-encodedFragment>(kotlin.String){}[0]
    final var encodedParameters // io.ktor.http/URLBuilder.encodedParameters|{}encodedParameters[0]
        final fun <get-encodedParameters>(): io.ktor.http/ParametersBuilder // io.ktor.http/URLBuilder.encodedParameters.<get-encodedParameters>|<get-encodedParameters>(){}[0]
        final fun <set-encodedParameters>(io.ktor.http/ParametersBuilder) // io.ktor.http/URLBuilder.encodedParameters.<set-encodedParameters>|<set-encodedParameters>(io.ktor.http.ParametersBuilder){}[0]
    final var encodedPassword // io.ktor.http/URLBuilder.encodedPassword|{}encodedPassword[0]
        final fun <get-encodedPassword>(): kotlin/String? // io.ktor.http/URLBuilder.encodedPassword.<get-encodedPassword>|<get-encodedPassword>(){}[0]
        final fun <set-encodedPassword>(kotlin/String?) // io.ktor.http/URLBuilder.encodedPassword.<set-encodedPassword>|<set-encodedPassword>(kotlin.String?){}[0]
    final var encodedPathSegments // io.ktor.http/URLBuilder.encodedPathSegments|{}encodedPathSegments[0]
        final fun <get-encodedPathSegments>(): kotlin.collections/List<kotlin/String> // io.ktor.http/URLBuilder.encodedPathSegments.<get-encodedPathSegments>|<get-encodedPathSegments>(){}[0]
        final fun <set-encodedPathSegments>(kotlin.collections/List<kotlin/String>) // io.ktor.http/URLBuilder.encodedPathSegments.<set-encodedPathSegments>|<set-encodedPathSegments>(kotlin.collections.List<kotlin.String>){}[0]
    final var encodedUser // io.ktor.http/URLBuilder.encodedUser|{}encodedUser[0]
        final fun <get-encodedUser>(): kotlin/String? // io.ktor.http/URLBuilder.encodedUser.<get-encodedUser>|<get-encodedUser>(){}[0]
        final fun <set-encodedUser>(kotlin/String?) // io.ktor.http/URLBuilder.encodedUser.<set-encodedUser>|<set-encodedUser>(kotlin.String?){}[0]
    final var fragment // io.ktor.http/URLBuilder.fragment|{}fragment[0]
        final fun <get-fragment>(): kotlin/String // io.ktor.http/URLBuilder.fragment.<get-fragment>|<get-fragment>(){}[0]
        final fun <set-fragment>(kotlin/String) // io.ktor.http/URLBuilder.fragment.<set-fragment>|<set-fragment>(kotlin.String){}[0]
    final var host // io.ktor.http/URLBuilder.host|{}host[0]
        final fun <get-host>(): kotlin/String // io.ktor.http/URLBuilder.host.<get-host>|<get-host>(){}[0]
        final fun <set-host>(kotlin/String) // io.ktor.http/URLBuilder.host.<set-host>|<set-host>(kotlin.String){}[0]
    final var parameters // io.ktor.http/URLBuilder.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.http/ParametersBuilder // io.ktor.http/URLBuilder.parameters.<get-parameters>|<get-parameters>(){}[0]
    final var password // io.ktor.http/URLBuilder.password|{}password[0]
        final fun <get-password>(): kotlin/String? // io.ktor.http/URLBuilder.password.<get-password>|<get-password>(){}[0]
        final fun <set-password>(kotlin/String?) // io.ktor.http/URLBuilder.password.<set-password>|<set-password>(kotlin.String?){}[0]
    final var pathSegments // io.ktor.http/URLBuilder.pathSegments|{}pathSegments[0]
        final fun <get-pathSegments>(): kotlin.collections/List<kotlin/String> // io.ktor.http/URLBuilder.pathSegments.<get-pathSegments>|<get-pathSegments>(){}[0]
        final fun <set-pathSegments>(kotlin.collections/List<kotlin/String>) // io.ktor.http/URLBuilder.pathSegments.<set-pathSegments>|<set-pathSegments>(kotlin.collections.List<kotlin.String>){}[0]
    final var port // io.ktor.http/URLBuilder.port|{}port[0]
        final fun <get-port>(): kotlin/Int // io.ktor.http/URLBuilder.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin/Int) // io.ktor.http/URLBuilder.port.<set-port>|<set-port>(kotlin.Int){}[0]
    final var protocol // io.ktor.http/URLBuilder.protocol|{}protocol[0]
        final fun <get-protocol>(): io.ktor.http/URLProtocol // io.ktor.http/URLBuilder.protocol.<get-protocol>|<get-protocol>(){}[0]
        final fun <set-protocol>(io.ktor.http/URLProtocol) // io.ktor.http/URLBuilder.protocol.<set-protocol>|<set-protocol>(io.ktor.http.URLProtocol){}[0]
    final var protocolOrNull // io.ktor.http/URLBuilder.protocolOrNull|{}protocolOrNull[0]
        final fun <get-protocolOrNull>(): io.ktor.http/URLProtocol? // io.ktor.http/URLBuilder.protocolOrNull.<get-protocolOrNull>|<get-protocolOrNull>(){}[0]
        final fun <set-protocolOrNull>(io.ktor.http/URLProtocol?) // io.ktor.http/URLBuilder.protocolOrNull.<set-protocolOrNull>|<set-protocolOrNull>(io.ktor.http.URLProtocol?){}[0]
    final var trailingQuery // io.ktor.http/URLBuilder.trailingQuery|{}trailingQuery[0]
        final fun <get-trailingQuery>(): kotlin/Boolean // io.ktor.http/URLBuilder.trailingQuery.<get-trailingQuery>|<get-trailingQuery>(){}[0]
        final fun <set-trailingQuery>(kotlin/Boolean) // io.ktor.http/URLBuilder.trailingQuery.<set-trailingQuery>|<set-trailingQuery>(kotlin.Boolean){}[0]
    final var user // io.ktor.http/URLBuilder.user|{}user[0]
        final fun <get-user>(): kotlin/String? // io.ktor.http/URLBuilder.user.<get-user>|<get-user>(){}[0]
        final fun <set-user>(kotlin/String?) // io.ktor.http/URLBuilder.user.<set-user>|<set-user>(kotlin.String?){}[0]

    final fun build(): io.ktor.http/Url // io.ktor.http/URLBuilder.build|build(){}[0]
    final fun buildString(): kotlin/String // io.ktor.http/URLBuilder.buildString|buildString(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/URLBuilder.toString|toString(){}[0]

    final object Companion // io.ktor.http/URLBuilder.Companion|null[0]
}

final class io.ktor.http/URLDecodeException : kotlin/Exception { // io.ktor.http/URLDecodeException|null[0]
    constructor <init>(kotlin/String) // io.ktor.http/URLDecodeException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.http/URLParserException : kotlin/IllegalStateException { // io.ktor.http/URLParserException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // io.ktor.http/URLParserException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
}

final class io.ktor.http/URLProtocol : io.ktor.utils.io/JvmSerializable { // io.ktor.http/URLProtocol|null[0]
    constructor <init>(kotlin/String, kotlin/Int) // io.ktor.http/URLProtocol.<init>|<init>(kotlin.String;kotlin.Int){}[0]

    final val defaultPort // io.ktor.http/URLProtocol.defaultPort|{}defaultPort[0]
        final fun <get-defaultPort>(): kotlin/Int // io.ktor.http/URLProtocol.defaultPort.<get-defaultPort>|<get-defaultPort>(){}[0]
    final val name // io.ktor.http/URLProtocol.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.http/URLProtocol.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // io.ktor.http/URLProtocol.component1|component1(){}[0]
    final fun component2(): kotlin/Int // io.ktor.http/URLProtocol.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Int = ...): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.copy|copy(kotlin.String;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/URLProtocol.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/URLProtocol.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/URLProtocol.toString|toString(){}[0]

    final object Companion { // io.ktor.http/URLProtocol.Companion|null[0]
        final val HTTP // io.ktor.http/URLProtocol.Companion.HTTP|{}HTTP[0]
            final fun <get-HTTP>(): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.HTTP.<get-HTTP>|<get-HTTP>(){}[0]
        final val HTTPS // io.ktor.http/URLProtocol.Companion.HTTPS|{}HTTPS[0]
            final fun <get-HTTPS>(): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.HTTPS.<get-HTTPS>|<get-HTTPS>(){}[0]
        final val SOCKS // io.ktor.http/URLProtocol.Companion.SOCKS|{}SOCKS[0]
            final fun <get-SOCKS>(): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.SOCKS.<get-SOCKS>|<get-SOCKS>(){}[0]
        final val WS // io.ktor.http/URLProtocol.Companion.WS|{}WS[0]
            final fun <get-WS>(): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.WS.<get-WS>|<get-WS>(){}[0]
        final val WSS // io.ktor.http/URLProtocol.Companion.WSS|{}WSS[0]
            final fun <get-WSS>(): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.WSS.<get-WSS>|<get-WSS>(){}[0]
        final val byName // io.ktor.http/URLProtocol.Companion.byName|{}byName[0]
            final fun <get-byName>(): kotlin.collections/Map<kotlin/String, io.ktor.http/URLProtocol> // io.ktor.http/URLProtocol.Companion.byName.<get-byName>|<get-byName>(){}[0]

        final fun createOrDefault(kotlin/String): io.ktor.http/URLProtocol // io.ktor.http/URLProtocol.Companion.createOrDefault|createOrDefault(kotlin.String){}[0]
    }
}

final class io.ktor.http/UnsafeHeaderException : kotlin/IllegalArgumentException { // io.ktor.http/UnsafeHeaderException|null[0]
    constructor <init>(kotlin/String) // io.ktor.http/UnsafeHeaderException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.http/Url : io.ktor.utils.io/JvmSerializable { // io.ktor.http/Url|null[0]
    final val encodedFragment // io.ktor.http/Url.encodedFragment|{}encodedFragment[0]
        final fun <get-encodedFragment>(): kotlin/String // io.ktor.http/Url.encodedFragment.<get-encodedFragment>|<get-encodedFragment>(){}[0]
    final val encodedPassword // io.ktor.http/Url.encodedPassword|{}encodedPassword[0]
        final fun <get-encodedPassword>(): kotlin/String? // io.ktor.http/Url.encodedPassword.<get-encodedPassword>|<get-encodedPassword>(){}[0]
    final val encodedPath // io.ktor.http/Url.encodedPath|{}encodedPath[0]
        final fun <get-encodedPath>(): kotlin/String // io.ktor.http/Url.encodedPath.<get-encodedPath>|<get-encodedPath>(){}[0]
    final val encodedPathAndQuery // io.ktor.http/Url.encodedPathAndQuery|{}encodedPathAndQuery[0]
        final fun <get-encodedPathAndQuery>(): kotlin/String // io.ktor.http/Url.encodedPathAndQuery.<get-encodedPathAndQuery>|<get-encodedPathAndQuery>(){}[0]
    final val encodedQuery // io.ktor.http/Url.encodedQuery|{}encodedQuery[0]
        final fun <get-encodedQuery>(): kotlin/String // io.ktor.http/Url.encodedQuery.<get-encodedQuery>|<get-encodedQuery>(){}[0]
    final val encodedUser // io.ktor.http/Url.encodedUser|{}encodedUser[0]
        final fun <get-encodedUser>(): kotlin/String? // io.ktor.http/Url.encodedUser.<get-encodedUser>|<get-encodedUser>(){}[0]
    final val fragment // io.ktor.http/Url.fragment|{}fragment[0]
        final fun <get-fragment>(): kotlin/String // io.ktor.http/Url.fragment.<get-fragment>|<get-fragment>(){}[0]
    final val host // io.ktor.http/Url.host|{}host[0]
        final fun <get-host>(): kotlin/String // io.ktor.http/Url.host.<get-host>|<get-host>(){}[0]
    final val parameters // io.ktor.http/Url.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.http/Url.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val password // io.ktor.http/Url.password|{}password[0]
        final fun <get-password>(): kotlin/String? // io.ktor.http/Url.password.<get-password>|<get-password>(){}[0]
    final val pathSegments // io.ktor.http/Url.pathSegments|{}pathSegments[0]
        final fun <get-pathSegments>(): kotlin.collections/List<kotlin/String> // io.ktor.http/Url.pathSegments.<get-pathSegments>|<get-pathSegments>(){}[0]
    final val port // io.ktor.http/Url.port|{}port[0]
        final fun <get-port>(): kotlin/Int // io.ktor.http/Url.port.<get-port>|<get-port>(){}[0]
    final val protocol // io.ktor.http/Url.protocol|{}protocol[0]
        final fun <get-protocol>(): io.ktor.http/URLProtocol // io.ktor.http/Url.protocol.<get-protocol>|<get-protocol>(){}[0]
    final val protocolOrNull // io.ktor.http/Url.protocolOrNull|{}protocolOrNull[0]
        final fun <get-protocolOrNull>(): io.ktor.http/URLProtocol? // io.ktor.http/Url.protocolOrNull.<get-protocolOrNull>|<get-protocolOrNull>(){}[0]
    final val rawSegments // io.ktor.http/Url.rawSegments|{}rawSegments[0]
        final fun <get-rawSegments>(): kotlin.collections/List<kotlin/String> // io.ktor.http/Url.rawSegments.<get-rawSegments>|<get-rawSegments>(){}[0]
    final val segments // io.ktor.http/Url.segments|{}segments[0]
        final fun <get-segments>(): kotlin.collections/List<kotlin/String> // io.ktor.http/Url.segments.<get-segments>|<get-segments>(){}[0]
    final val specifiedPort // io.ktor.http/Url.specifiedPort|{}specifiedPort[0]
        final fun <get-specifiedPort>(): kotlin/Int // io.ktor.http/Url.specifiedPort.<get-specifiedPort>|<get-specifiedPort>(){}[0]
    final val trailingQuery // io.ktor.http/Url.trailingQuery|{}trailingQuery[0]
        final fun <get-trailingQuery>(): kotlin/Boolean // io.ktor.http/Url.trailingQuery.<get-trailingQuery>|<get-trailingQuery>(){}[0]
    final val user // io.ktor.http/Url.user|{}user[0]
        final fun <get-user>(): kotlin/String? // io.ktor.http/Url.user.<get-user>|<get-user>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/Url.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.http/Url.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.http/Url.toString|toString(){}[0]

    final object Companion { // io.ktor.http/Url.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<io.ktor.http/Url> // io.ktor.http/Url.Companion.serializer|serializer(){}[0]
    }
}

sealed class io.ktor.http.auth/HttpAuthHeader { // io.ktor.http.auth/HttpAuthHeader|null[0]
    final val authScheme // io.ktor.http.auth/HttpAuthHeader.authScheme|{}authScheme[0]
        final fun <get-authScheme>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.authScheme.<get-authScheme>|<get-authScheme>(){}[0]

    abstract fun render(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.render|render(){}[0]
    abstract fun render(io.ktor.http.auth/HeaderValueEncoding): kotlin/String // io.ktor.http.auth/HttpAuthHeader.render|render(io.ktor.http.auth.HeaderValueEncoding){}[0]
    open fun toString(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.toString|toString(){}[0]

    final class Parameterized : io.ktor.http.auth/HttpAuthHeader { // io.ktor.http.auth/HttpAuthHeader.Parameterized|null[0]
        constructor <init>(kotlin/String, kotlin.collections/List<io.ktor.http/HeaderValueParam>, io.ktor.http.auth/HeaderValueEncoding = ...) // io.ktor.http.auth/HttpAuthHeader.Parameterized.<init>|<init>(kotlin.String;kotlin.collections.List<io.ktor.http.HeaderValueParam>;io.ktor.http.auth.HeaderValueEncoding){}[0]
        constructor <init>(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/String>, io.ktor.http.auth/HeaderValueEncoding = ...) // io.ktor.http.auth/HttpAuthHeader.Parameterized.<init>|<init>(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.String>;io.ktor.http.auth.HeaderValueEncoding){}[0]

        final val encoding // io.ktor.http.auth/HttpAuthHeader.Parameterized.encoding|{}encoding[0]
            final fun <get-encoding>(): io.ktor.http.auth/HeaderValueEncoding // io.ktor.http.auth/HttpAuthHeader.Parameterized.encoding.<get-encoding>|<get-encoding>(){}[0]
        final val parameters // io.ktor.http.auth/HttpAuthHeader.Parameterized.parameters|{}parameters[0]
            final fun <get-parameters>(): kotlin.collections/List<io.ktor.http/HeaderValueParam> // io.ktor.http.auth/HttpAuthHeader.Parameterized.parameters.<get-parameters>|<get-parameters>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.auth/HttpAuthHeader.Parameterized.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http.auth/HttpAuthHeader.Parameterized.hashCode|hashCode(){}[0]
        final fun parameter(kotlin/String): kotlin/String? // io.ktor.http.auth/HttpAuthHeader.Parameterized.parameter|parameter(kotlin.String){}[0]
        final fun render(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameterized.render|render(){}[0]
        final fun render(io.ktor.http.auth/HeaderValueEncoding): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameterized.render|render(io.ktor.http.auth.HeaderValueEncoding){}[0]
        final fun withParameter(kotlin/String, kotlin/String): io.ktor.http.auth/HttpAuthHeader.Parameterized // io.ktor.http.auth/HttpAuthHeader.Parameterized.withParameter|withParameter(kotlin.String;kotlin.String){}[0]
        final fun withReplacedParameter(kotlin/String, kotlin/String): io.ktor.http.auth/HttpAuthHeader.Parameterized // io.ktor.http.auth/HttpAuthHeader.Parameterized.withReplacedParameter|withReplacedParameter(kotlin.String;kotlin.String){}[0]
    }

    final class Single : io.ktor.http.auth/HttpAuthHeader { // io.ktor.http.auth/HttpAuthHeader.Single|null[0]
        constructor <init>(kotlin/String, kotlin/String) // io.ktor.http.auth/HttpAuthHeader.Single.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val blob // io.ktor.http.auth/HttpAuthHeader.Single.blob|{}blob[0]
            final fun <get-blob>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Single.blob.<get-blob>|<get-blob>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http.auth/HttpAuthHeader.Single.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http.auth/HttpAuthHeader.Single.hashCode|hashCode(){}[0]
        final fun render(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Single.render|render(){}[0]
        final fun render(io.ktor.http.auth/HeaderValueEncoding): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Single.render|render(io.ktor.http.auth.HeaderValueEncoding){}[0]
    }

    final object Companion { // io.ktor.http.auth/HttpAuthHeader.Companion|null[0]
        final fun basicAuthChallenge(kotlin/String, io.ktor.utils.io.charsets/Charset?): io.ktor.http.auth/HttpAuthHeader.Parameterized // io.ktor.http.auth/HttpAuthHeader.Companion.basicAuthChallenge|basicAuthChallenge(kotlin.String;io.ktor.utils.io.charsets.Charset?){}[0]
        final fun bearerAuthChallenge(kotlin/String, kotlin/String? = ...): io.ktor.http.auth/HttpAuthHeader // io.ktor.http.auth/HttpAuthHeader.Companion.bearerAuthChallenge|bearerAuthChallenge(kotlin.String;kotlin.String?){}[0]
        final fun digestAuthChallenge(kotlin/String, kotlin/String = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String? = ..., kotlin/Boolean? = ..., kotlin/String = ...): io.ktor.http.auth/HttpAuthHeader.Parameterized // io.ktor.http.auth/HttpAuthHeader.Companion.digestAuthChallenge|digestAuthChallenge(kotlin.String;kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.Boolean?;kotlin.String){}[0]
    }

    final object Parameters { // io.ktor.http.auth/HttpAuthHeader.Parameters|null[0]
        final const val Charset // io.ktor.http.auth/HttpAuthHeader.Parameters.Charset|{}Charset[0]
            final fun <get-Charset>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.Charset.<get-Charset>|<get-Charset>(){}[0]
        final const val OAuthCallback // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthCallback|{}OAuthCallback[0]
            final fun <get-OAuthCallback>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthCallback.<get-OAuthCallback>|<get-OAuthCallback>(){}[0]
        final const val OAuthCallbackConfirmed // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthCallbackConfirmed|{}OAuthCallbackConfirmed[0]
            final fun <get-OAuthCallbackConfirmed>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthCallbackConfirmed.<get-OAuthCallbackConfirmed>|<get-OAuthCallbackConfirmed>(){}[0]
        final const val OAuthConsumerKey // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthConsumerKey|{}OAuthConsumerKey[0]
            final fun <get-OAuthConsumerKey>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthConsumerKey.<get-OAuthConsumerKey>|<get-OAuthConsumerKey>(){}[0]
        final const val OAuthNonce // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthNonce|{}OAuthNonce[0]
            final fun <get-OAuthNonce>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthNonce.<get-OAuthNonce>|<get-OAuthNonce>(){}[0]
        final const val OAuthSignature // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthSignature|{}OAuthSignature[0]
            final fun <get-OAuthSignature>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthSignature.<get-OAuthSignature>|<get-OAuthSignature>(){}[0]
        final const val OAuthSignatureMethod // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthSignatureMethod|{}OAuthSignatureMethod[0]
            final fun <get-OAuthSignatureMethod>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthSignatureMethod.<get-OAuthSignatureMethod>|<get-OAuthSignatureMethod>(){}[0]
        final const val OAuthTimestamp // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthTimestamp|{}OAuthTimestamp[0]
            final fun <get-OAuthTimestamp>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthTimestamp.<get-OAuthTimestamp>|<get-OAuthTimestamp>(){}[0]
        final const val OAuthToken // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthToken|{}OAuthToken[0]
            final fun <get-OAuthToken>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthToken.<get-OAuthToken>|<get-OAuthToken>(){}[0]
        final const val OAuthTokenSecret // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthTokenSecret|{}OAuthTokenSecret[0]
            final fun <get-OAuthTokenSecret>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthTokenSecret.<get-OAuthTokenSecret>|<get-OAuthTokenSecret>(){}[0]
        final const val OAuthVerifier // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthVerifier|{}OAuthVerifier[0]
            final fun <get-OAuthVerifier>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthVerifier.<get-OAuthVerifier>|<get-OAuthVerifier>(){}[0]
        final const val OAuthVersion // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthVersion|{}OAuthVersion[0]
            final fun <get-OAuthVersion>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.OAuthVersion.<get-OAuthVersion>|<get-OAuthVersion>(){}[0]
        final const val Realm // io.ktor.http.auth/HttpAuthHeader.Parameters.Realm|{}Realm[0]
            final fun <get-Realm>(): kotlin/String // io.ktor.http.auth/HttpAuthHeader.Parameters.Realm.<get-Realm>|<get-Realm>(){}[0]
    }
}

sealed class io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent|null[0]
    open val contentLength // io.ktor.http.content/OutgoingContent.contentLength|{}contentLength[0]
        open fun <get-contentLength>(): kotlin/Long? // io.ktor.http.content/OutgoingContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    open val contentType // io.ktor.http.content/OutgoingContent.contentType|{}contentType[0]
        open fun <get-contentType>(): io.ktor.http/ContentType? // io.ktor.http.content/OutgoingContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    open val headers // io.ktor.http.content/OutgoingContent.headers|{}headers[0]
        open fun <get-headers>(): io.ktor.http/Headers // io.ktor.http.content/OutgoingContent.headers.<get-headers>|<get-headers>(){}[0]
    open val status // io.ktor.http.content/OutgoingContent.status|{}status[0]
        open fun <get-status>(): io.ktor.http/HttpStatusCode? // io.ktor.http.content/OutgoingContent.status.<get-status>|<get-status>(){}[0]

    open fun <#A1: kotlin/Any> getProperty(io.ktor.util/AttributeKey<#A1>): #A1? // io.ktor.http.content/OutgoingContent.getProperty|getProperty(io.ktor.util.AttributeKey<0:0>){0§<kotlin.Any>}[0]
    open fun <#A1: kotlin/Any> setProperty(io.ktor.util/AttributeKey<#A1>, #A1?) // io.ktor.http.content/OutgoingContent.setProperty|setProperty(io.ktor.util.AttributeKey<0:0>;0:0?){0§<kotlin.Any>}[0]
    open fun trailers(): io.ktor.http/Headers? // io.ktor.http.content/OutgoingContent.trailers|trailers(){}[0]

    abstract class ByteArrayContent : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.ByteArrayContent|null[0]
        constructor <init>() // io.ktor.http.content/OutgoingContent.ByteArrayContent.<init>|<init>(){}[0]

        abstract fun bytes(): kotlin/ByteArray // io.ktor.http.content/OutgoingContent.ByteArrayContent.bytes|bytes(){}[0]
    }

    abstract class ContentWrapper : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.ContentWrapper|null[0]
        constructor <init>(io.ktor.http.content/OutgoingContent) // io.ktor.http.content/OutgoingContent.ContentWrapper.<init>|<init>(io.ktor.http.content.OutgoingContent){}[0]

        open val contentLength // io.ktor.http.content/OutgoingContent.ContentWrapper.contentLength|{}contentLength[0]
            open fun <get-contentLength>(): kotlin/Long? // io.ktor.http.content/OutgoingContent.ContentWrapper.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
        open val contentType // io.ktor.http.content/OutgoingContent.ContentWrapper.contentType|{}contentType[0]
            open fun <get-contentType>(): io.ktor.http/ContentType? // io.ktor.http.content/OutgoingContent.ContentWrapper.contentType.<get-contentType>|<get-contentType>(){}[0]
        open val headers // io.ktor.http.content/OutgoingContent.ContentWrapper.headers|{}headers[0]
            open fun <get-headers>(): io.ktor.http/Headers // io.ktor.http.content/OutgoingContent.ContentWrapper.headers.<get-headers>|<get-headers>(){}[0]
        open val status // io.ktor.http.content/OutgoingContent.ContentWrapper.status|{}status[0]
            open fun <get-status>(): io.ktor.http/HttpStatusCode? // io.ktor.http.content/OutgoingContent.ContentWrapper.status.<get-status>|<get-status>(){}[0]

        abstract fun copy(io.ktor.http.content/OutgoingContent): io.ktor.http.content/OutgoingContent.ContentWrapper // io.ktor.http.content/OutgoingContent.ContentWrapper.copy|copy(io.ktor.http.content.OutgoingContent){}[0]
        final fun delegate(): io.ktor.http.content/OutgoingContent // io.ktor.http.content/OutgoingContent.ContentWrapper.delegate|delegate(){}[0]
        open fun <#A2: kotlin/Any> getProperty(io.ktor.util/AttributeKey<#A2>): #A2? // io.ktor.http.content/OutgoingContent.ContentWrapper.getProperty|getProperty(io.ktor.util.AttributeKey<0:0>){0§<kotlin.Any>}[0]
        open fun <#A2: kotlin/Any> setProperty(io.ktor.util/AttributeKey<#A2>, #A2?) // io.ktor.http.content/OutgoingContent.ContentWrapper.setProperty|setProperty(io.ktor.util.AttributeKey<0:0>;0:0?){0§<kotlin.Any>}[0]
    }

    abstract class NoContent : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.NoContent|null[0]
        constructor <init>() // io.ktor.http.content/OutgoingContent.NoContent.<init>|<init>(){}[0]
    }

    abstract class ProtocolUpgrade : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.ProtocolUpgrade|null[0]
        constructor <init>() // io.ktor.http.content/OutgoingContent.ProtocolUpgrade.<init>|<init>(){}[0]

        final val status // io.ktor.http.content/OutgoingContent.ProtocolUpgrade.status|{}status[0]
            final fun <get-status>(): io.ktor.http/HttpStatusCode // io.ktor.http.content/OutgoingContent.ProtocolUpgrade.status.<get-status>|<get-status>(){}[0]

        abstract suspend fun upgrade(io.ktor.utils.io/ByteReadChannel, io.ktor.utils.io/ByteWriteChannel, kotlin.coroutines/CoroutineContext, kotlin.coroutines/CoroutineContext): kotlinx.coroutines/Job // io.ktor.http.content/OutgoingContent.ProtocolUpgrade.upgrade|upgrade(io.ktor.utils.io.ByteReadChannel;io.ktor.utils.io.ByteWriteChannel;kotlin.coroutines.CoroutineContext;kotlin.coroutines.CoroutineContext){}[0]
    }

    abstract class ReadChannelContent : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.ReadChannelContent|null[0]
        constructor <init>() // io.ktor.http.content/OutgoingContent.ReadChannelContent.<init>|<init>(){}[0]

        abstract fun readFrom(): io.ktor.utils.io/ByteReadChannel // io.ktor.http.content/OutgoingContent.ReadChannelContent.readFrom|readFrom(){}[0]
        open fun readFrom(kotlin.ranges/LongRange): io.ktor.utils.io/ByteReadChannel // io.ktor.http.content/OutgoingContent.ReadChannelContent.readFrom|readFrom(kotlin.ranges.LongRange){}[0]
    }

    abstract class WriteChannelContent : io.ktor.http.content/OutgoingContent { // io.ktor.http.content/OutgoingContent.WriteChannelContent|null[0]
        constructor <init>() // io.ktor.http.content/OutgoingContent.WriteChannelContent.<init>|<init>(){}[0]

        abstract suspend fun writeTo(io.ktor.utils.io/ByteWriteChannel) // io.ktor.http.content/OutgoingContent.WriteChannelContent.writeTo|writeTo(io.ktor.utils.io.ByteWriteChannel){}[0]
    }
}

sealed class io.ktor.http.content/PartData { // io.ktor.http.content/PartData|null[0]
    final val contentDisposition // io.ktor.http.content/PartData.contentDisposition|{}contentDisposition[0]
        final fun <get-contentDisposition>(): io.ktor.http/ContentDisposition? // io.ktor.http.content/PartData.contentDisposition.<get-contentDisposition>|<get-contentDisposition>(){}[0]
    final val contentType // io.ktor.http.content/PartData.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType? // io.ktor.http.content/PartData.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val dispose // io.ktor.http.content/PartData.dispose|{}dispose[0]
        final fun <get-dispose>(): kotlin/Function0<kotlin/Unit> // io.ktor.http.content/PartData.dispose.<get-dispose>|<get-dispose>(){}[0]
    final val headers // io.ktor.http.content/PartData.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.http.content/PartData.headers.<get-headers>|<get-headers>(){}[0]
    final val name // io.ktor.http.content/PartData.name|{}name[0]
        final fun <get-name>(): kotlin/String? // io.ktor.http.content/PartData.name.<get-name>|<get-name>(){}[0]

    final class BinaryChannelItem : io.ktor.http.content/PartData { // io.ktor.http.content/PartData.BinaryChannelItem|null[0]
        constructor <init>(kotlin/Function0<io.ktor.utils.io/ByteReadChannel>, io.ktor.http/Headers) // io.ktor.http.content/PartData.BinaryChannelItem.<init>|<init>(kotlin.Function0<io.ktor.utils.io.ByteReadChannel>;io.ktor.http.Headers){}[0]

        final val provider // io.ktor.http.content/PartData.BinaryChannelItem.provider|{}provider[0]
            final fun <get-provider>(): kotlin/Function0<io.ktor.utils.io/ByteReadChannel> // io.ktor.http.content/PartData.BinaryChannelItem.provider.<get-provider>|<get-provider>(){}[0]
    }

    final class BinaryItem : io.ktor.http.content/PartData { // io.ktor.http.content/PartData.BinaryItem|null[0]
        constructor <init>(kotlin/Function0<kotlinx.io/Source>, kotlin/Function0<kotlin/Unit>, io.ktor.http/Headers) // io.ktor.http.content/PartData.BinaryItem.<init>|<init>(kotlin.Function0<kotlinx.io.Source>;kotlin.Function0<kotlin.Unit>;io.ktor.http.Headers){}[0]

        final val provider // io.ktor.http.content/PartData.BinaryItem.provider|{}provider[0]
            final fun <get-provider>(): kotlin/Function0<kotlinx.io/Source> // io.ktor.http.content/PartData.BinaryItem.provider.<get-provider>|<get-provider>(){}[0]
    }

    final class FileItem : io.ktor.http.content/PartData { // io.ktor.http.content/PartData.FileItem|null[0]
        constructor <init>(kotlin/Function0<io.ktor.utils.io/ByteReadChannel>, kotlin/Function0<kotlin/Unit>, io.ktor.http/Headers) // io.ktor.http.content/PartData.FileItem.<init>|<init>(kotlin.Function0<io.ktor.utils.io.ByteReadChannel>;kotlin.Function0<kotlin.Unit>;io.ktor.http.Headers){}[0]

        final val originalFileName // io.ktor.http.content/PartData.FileItem.originalFileName|{}originalFileName[0]
            final fun <get-originalFileName>(): kotlin/String? // io.ktor.http.content/PartData.FileItem.originalFileName.<get-originalFileName>|<get-originalFileName>(){}[0]
        final val provider // io.ktor.http.content/PartData.FileItem.provider|{}provider[0]
            final fun <get-provider>(): kotlin/Function0<io.ktor.utils.io/ByteReadChannel> // io.ktor.http.content/PartData.FileItem.provider.<get-provider>|<get-provider>(){}[0]
    }

    final class FormItem : io.ktor.http.content/PartData { // io.ktor.http.content/PartData.FormItem|null[0]
        constructor <init>(kotlin/String, kotlin/Function0<kotlin/Unit>, io.ktor.http/Headers) // io.ktor.http.content/PartData.FormItem.<init>|<init>(kotlin.String;kotlin.Function0<kotlin.Unit>;io.ktor.http.Headers){}[0]

        final val value // io.ktor.http.content/PartData.FormItem.value|{}value[0]
            final fun <get-value>(): kotlin/String // io.ktor.http.content/PartData.FormItem.value.<get-value>|<get-value>(){}[0]
    }
}

sealed class io.ktor.http/ContentRange { // io.ktor.http/ContentRange|null[0]
    final class Bounded : io.ktor.http/ContentRange { // io.ktor.http/ContentRange.Bounded|null[0]
        constructor <init>(kotlin/Long, kotlin/Long) // io.ktor.http/ContentRange.Bounded.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

        final val from // io.ktor.http/ContentRange.Bounded.from|{}from[0]
            final fun <get-from>(): kotlin/Long // io.ktor.http/ContentRange.Bounded.from.<get-from>|<get-from>(){}[0]
        final val to // io.ktor.http/ContentRange.Bounded.to|{}to[0]
            final fun <get-to>(): kotlin/Long // io.ktor.http/ContentRange.Bounded.to.<get-to>|<get-to>(){}[0]

        final fun component1(): kotlin/Long // io.ktor.http/ContentRange.Bounded.component1|component1(){}[0]
        final fun component2(): kotlin/Long // io.ktor.http/ContentRange.Bounded.component2|component2(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/Long = ...): io.ktor.http/ContentRange.Bounded // io.ktor.http/ContentRange.Bounded.copy|copy(kotlin.Long;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/ContentRange.Bounded.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/ContentRange.Bounded.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/ContentRange.Bounded.toString|toString(){}[0]
    }

    final class Suffix : io.ktor.http/ContentRange { // io.ktor.http/ContentRange.Suffix|null[0]
        constructor <init>(kotlin/Long) // io.ktor.http/ContentRange.Suffix.<init>|<init>(kotlin.Long){}[0]

        final val lastCount // io.ktor.http/ContentRange.Suffix.lastCount|{}lastCount[0]
            final fun <get-lastCount>(): kotlin/Long // io.ktor.http/ContentRange.Suffix.lastCount.<get-lastCount>|<get-lastCount>(){}[0]

        final fun component1(): kotlin/Long // io.ktor.http/ContentRange.Suffix.component1|component1(){}[0]
        final fun copy(kotlin/Long = ...): io.ktor.http/ContentRange.Suffix // io.ktor.http/ContentRange.Suffix.copy|copy(kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/ContentRange.Suffix.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/ContentRange.Suffix.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/ContentRange.Suffix.toString|toString(){}[0]
    }

    final class TailFrom : io.ktor.http/ContentRange { // io.ktor.http/ContentRange.TailFrom|null[0]
        constructor <init>(kotlin/Long) // io.ktor.http/ContentRange.TailFrom.<init>|<init>(kotlin.Long){}[0]

        final val from // io.ktor.http/ContentRange.TailFrom.from|{}from[0]
            final fun <get-from>(): kotlin/Long // io.ktor.http/ContentRange.TailFrom.from.<get-from>|<get-from>(){}[0]

        final fun component1(): kotlin/Long // io.ktor.http/ContentRange.TailFrom.component1|component1(){}[0]
        final fun copy(kotlin/Long = ...): io.ktor.http/ContentRange.TailFrom // io.ktor.http/ContentRange.TailFrom.copy|copy(kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.http/ContentRange.TailFrom.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.http/ContentRange.TailFrom.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.http/ContentRange.TailFrom.toString|toString(){}[0]
    }
}

final object io.ktor.http.auth/AuthScheme { // io.ktor.http.auth/AuthScheme|null[0]
    final const val Basic // io.ktor.http.auth/AuthScheme.Basic|{}Basic[0]
        final fun <get-Basic>(): kotlin/String // io.ktor.http.auth/AuthScheme.Basic.<get-Basic>|<get-Basic>(){}[0]
    final const val Bearer // io.ktor.http.auth/AuthScheme.Bearer|{}Bearer[0]
        final fun <get-Bearer>(): kotlin/String // io.ktor.http.auth/AuthScheme.Bearer.<get-Bearer>|<get-Bearer>(){}[0]
    final const val Digest // io.ktor.http.auth/AuthScheme.Digest|{}Digest[0]
        final fun <get-Digest>(): kotlin/String // io.ktor.http.auth/AuthScheme.Digest.<get-Digest>|<get-Digest>(){}[0]
    final const val Negotiate // io.ktor.http.auth/AuthScheme.Negotiate|{}Negotiate[0]
        final fun <get-Negotiate>(): kotlin/String // io.ktor.http.auth/AuthScheme.Negotiate.<get-Negotiate>|<get-Negotiate>(){}[0]
    final const val OAuth // io.ktor.http.auth/AuthScheme.OAuth|{}OAuth[0]
        final fun <get-OAuth>(): kotlin/String // io.ktor.http.auth/AuthScheme.OAuth.<get-OAuth>|<get-OAuth>(){}[0]
}

final object io.ktor.http.content/NullBody // io.ktor.http.content/NullBody|null[0]

final object io.ktor.http/HttpHeaders { // io.ktor.http/HttpHeaders|null[0]
    final val ALPN // io.ktor.http/HttpHeaders.ALPN|{}ALPN[0]
        final fun <get-ALPN>(): kotlin/String // io.ktor.http/HttpHeaders.ALPN.<get-ALPN>|<get-ALPN>(){}[0]
    final val Accept // io.ktor.http/HttpHeaders.Accept|{}Accept[0]
        final fun <get-Accept>(): kotlin/String // io.ktor.http/HttpHeaders.Accept.<get-Accept>|<get-Accept>(){}[0]
    final val AcceptCharset // io.ktor.http/HttpHeaders.AcceptCharset|{}AcceptCharset[0]
        final fun <get-AcceptCharset>(): kotlin/String // io.ktor.http/HttpHeaders.AcceptCharset.<get-AcceptCharset>|<get-AcceptCharset>(){}[0]
    final val AcceptEncoding // io.ktor.http/HttpHeaders.AcceptEncoding|{}AcceptEncoding[0]
        final fun <get-AcceptEncoding>(): kotlin/String // io.ktor.http/HttpHeaders.AcceptEncoding.<get-AcceptEncoding>|<get-AcceptEncoding>(){}[0]
    final val AcceptLanguage // io.ktor.http/HttpHeaders.AcceptLanguage|{}AcceptLanguage[0]
        final fun <get-AcceptLanguage>(): kotlin/String // io.ktor.http/HttpHeaders.AcceptLanguage.<get-AcceptLanguage>|<get-AcceptLanguage>(){}[0]
    final val AcceptRanges // io.ktor.http/HttpHeaders.AcceptRanges|{}AcceptRanges[0]
        final fun <get-AcceptRanges>(): kotlin/String // io.ktor.http/HttpHeaders.AcceptRanges.<get-AcceptRanges>|<get-AcceptRanges>(){}[0]
    final val AccessControlAllowCredentials // io.ktor.http/HttpHeaders.AccessControlAllowCredentials|{}AccessControlAllowCredentials[0]
        final fun <get-AccessControlAllowCredentials>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlAllowCredentials.<get-AccessControlAllowCredentials>|<get-AccessControlAllowCredentials>(){}[0]
    final val AccessControlAllowHeaders // io.ktor.http/HttpHeaders.AccessControlAllowHeaders|{}AccessControlAllowHeaders[0]
        final fun <get-AccessControlAllowHeaders>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlAllowHeaders.<get-AccessControlAllowHeaders>|<get-AccessControlAllowHeaders>(){}[0]
    final val AccessControlAllowMethods // io.ktor.http/HttpHeaders.AccessControlAllowMethods|{}AccessControlAllowMethods[0]
        final fun <get-AccessControlAllowMethods>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlAllowMethods.<get-AccessControlAllowMethods>|<get-AccessControlAllowMethods>(){}[0]
    final val AccessControlAllowOrigin // io.ktor.http/HttpHeaders.AccessControlAllowOrigin|{}AccessControlAllowOrigin[0]
        final fun <get-AccessControlAllowOrigin>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlAllowOrigin.<get-AccessControlAllowOrigin>|<get-AccessControlAllowOrigin>(){}[0]
    final val AccessControlExposeHeaders // io.ktor.http/HttpHeaders.AccessControlExposeHeaders|{}AccessControlExposeHeaders[0]
        final fun <get-AccessControlExposeHeaders>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlExposeHeaders.<get-AccessControlExposeHeaders>|<get-AccessControlExposeHeaders>(){}[0]
    final val AccessControlMaxAge // io.ktor.http/HttpHeaders.AccessControlMaxAge|{}AccessControlMaxAge[0]
        final fun <get-AccessControlMaxAge>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlMaxAge.<get-AccessControlMaxAge>|<get-AccessControlMaxAge>(){}[0]
    final val AccessControlRequestHeaders // io.ktor.http/HttpHeaders.AccessControlRequestHeaders|{}AccessControlRequestHeaders[0]
        final fun <get-AccessControlRequestHeaders>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlRequestHeaders.<get-AccessControlRequestHeaders>|<get-AccessControlRequestHeaders>(){}[0]
    final val AccessControlRequestMethod // io.ktor.http/HttpHeaders.AccessControlRequestMethod|{}AccessControlRequestMethod[0]
        final fun <get-AccessControlRequestMethod>(): kotlin/String // io.ktor.http/HttpHeaders.AccessControlRequestMethod.<get-AccessControlRequestMethod>|<get-AccessControlRequestMethod>(){}[0]
    final val Age // io.ktor.http/HttpHeaders.Age|{}Age[0]
        final fun <get-Age>(): kotlin/String // io.ktor.http/HttpHeaders.Age.<get-Age>|<get-Age>(){}[0]
    final val Allow // io.ktor.http/HttpHeaders.Allow|{}Allow[0]
        final fun <get-Allow>(): kotlin/String // io.ktor.http/HttpHeaders.Allow.<get-Allow>|<get-Allow>(){}[0]
    final val AuthenticationInfo // io.ktor.http/HttpHeaders.AuthenticationInfo|{}AuthenticationInfo[0]
        final fun <get-AuthenticationInfo>(): kotlin/String // io.ktor.http/HttpHeaders.AuthenticationInfo.<get-AuthenticationInfo>|<get-AuthenticationInfo>(){}[0]
    final val Authorization // io.ktor.http/HttpHeaders.Authorization|{}Authorization[0]
        final fun <get-Authorization>(): kotlin/String // io.ktor.http/HttpHeaders.Authorization.<get-Authorization>|<get-Authorization>(){}[0]
    final val CacheControl // io.ktor.http/HttpHeaders.CacheControl|{}CacheControl[0]
        final fun <get-CacheControl>(): kotlin/String // io.ktor.http/HttpHeaders.CacheControl.<get-CacheControl>|<get-CacheControl>(){}[0]
    final val Connection // io.ktor.http/HttpHeaders.Connection|{}Connection[0]
        final fun <get-Connection>(): kotlin/String // io.ktor.http/HttpHeaders.Connection.<get-Connection>|<get-Connection>(){}[0]
    final val ContentDisposition // io.ktor.http/HttpHeaders.ContentDisposition|{}ContentDisposition[0]
        final fun <get-ContentDisposition>(): kotlin/String // io.ktor.http/HttpHeaders.ContentDisposition.<get-ContentDisposition>|<get-ContentDisposition>(){}[0]
    final val ContentEncoding // io.ktor.http/HttpHeaders.ContentEncoding|{}ContentEncoding[0]
        final fun <get-ContentEncoding>(): kotlin/String // io.ktor.http/HttpHeaders.ContentEncoding.<get-ContentEncoding>|<get-ContentEncoding>(){}[0]
    final val ContentLanguage // io.ktor.http/HttpHeaders.ContentLanguage|{}ContentLanguage[0]
        final fun <get-ContentLanguage>(): kotlin/String // io.ktor.http/HttpHeaders.ContentLanguage.<get-ContentLanguage>|<get-ContentLanguage>(){}[0]
    final val ContentLength // io.ktor.http/HttpHeaders.ContentLength|{}ContentLength[0]
        final fun <get-ContentLength>(): kotlin/String // io.ktor.http/HttpHeaders.ContentLength.<get-ContentLength>|<get-ContentLength>(){}[0]
    final val ContentLocation // io.ktor.http/HttpHeaders.ContentLocation|{}ContentLocation[0]
        final fun <get-ContentLocation>(): kotlin/String // io.ktor.http/HttpHeaders.ContentLocation.<get-ContentLocation>|<get-ContentLocation>(){}[0]
    final val ContentRange // io.ktor.http/HttpHeaders.ContentRange|{}ContentRange[0]
        final fun <get-ContentRange>(): kotlin/String // io.ktor.http/HttpHeaders.ContentRange.<get-ContentRange>|<get-ContentRange>(){}[0]
    final val ContentType // io.ktor.http/HttpHeaders.ContentType|{}ContentType[0]
        final fun <get-ContentType>(): kotlin/String // io.ktor.http/HttpHeaders.ContentType.<get-ContentType>|<get-ContentType>(){}[0]
    final val Cookie // io.ktor.http/HttpHeaders.Cookie|{}Cookie[0]
        final fun <get-Cookie>(): kotlin/String // io.ktor.http/HttpHeaders.Cookie.<get-Cookie>|<get-Cookie>(){}[0]
    final val DASL // io.ktor.http/HttpHeaders.DASL|{}DASL[0]
        final fun <get-DASL>(): kotlin/String // io.ktor.http/HttpHeaders.DASL.<get-DASL>|<get-DASL>(){}[0]
    final val DAV // io.ktor.http/HttpHeaders.DAV|{}DAV[0]
        final fun <get-DAV>(): kotlin/String // io.ktor.http/HttpHeaders.DAV.<get-DAV>|<get-DAV>(){}[0]
    final val Date // io.ktor.http/HttpHeaders.Date|{}Date[0]
        final fun <get-Date>(): kotlin/String // io.ktor.http/HttpHeaders.Date.<get-Date>|<get-Date>(){}[0]
    final val Depth // io.ktor.http/HttpHeaders.Depth|{}Depth[0]
        final fun <get-Depth>(): kotlin/String // io.ktor.http/HttpHeaders.Depth.<get-Depth>|<get-Depth>(){}[0]
    final val Destination // io.ktor.http/HttpHeaders.Destination|{}Destination[0]
        final fun <get-Destination>(): kotlin/String // io.ktor.http/HttpHeaders.Destination.<get-Destination>|<get-Destination>(){}[0]
    final val ETag // io.ktor.http/HttpHeaders.ETag|{}ETag[0]
        final fun <get-ETag>(): kotlin/String // io.ktor.http/HttpHeaders.ETag.<get-ETag>|<get-ETag>(){}[0]
    final val Expect // io.ktor.http/HttpHeaders.Expect|{}Expect[0]
        final fun <get-Expect>(): kotlin/String // io.ktor.http/HttpHeaders.Expect.<get-Expect>|<get-Expect>(){}[0]
    final val Expires // io.ktor.http/HttpHeaders.Expires|{}Expires[0]
        final fun <get-Expires>(): kotlin/String // io.ktor.http/HttpHeaders.Expires.<get-Expires>|<get-Expires>(){}[0]
    final val Forwarded // io.ktor.http/HttpHeaders.Forwarded|{}Forwarded[0]
        final fun <get-Forwarded>(): kotlin/String // io.ktor.http/HttpHeaders.Forwarded.<get-Forwarded>|<get-Forwarded>(){}[0]
    final val From // io.ktor.http/HttpHeaders.From|{}From[0]
        final fun <get-From>(): kotlin/String // io.ktor.http/HttpHeaders.From.<get-From>|<get-From>(){}[0]
    final val HTTP2Settings // io.ktor.http/HttpHeaders.HTTP2Settings|{}HTTP2Settings[0]
        final fun <get-HTTP2Settings>(): kotlin/String // io.ktor.http/HttpHeaders.HTTP2Settings.<get-HTTP2Settings>|<get-HTTP2Settings>(){}[0]
    final val Host // io.ktor.http/HttpHeaders.Host|{}Host[0]
        final fun <get-Host>(): kotlin/String // io.ktor.http/HttpHeaders.Host.<get-Host>|<get-Host>(){}[0]
    final val If // io.ktor.http/HttpHeaders.If|{}If[0]
        final fun <get-If>(): kotlin/String // io.ktor.http/HttpHeaders.If.<get-If>|<get-If>(){}[0]
    final val IfMatch // io.ktor.http/HttpHeaders.IfMatch|{}IfMatch[0]
        final fun <get-IfMatch>(): kotlin/String // io.ktor.http/HttpHeaders.IfMatch.<get-IfMatch>|<get-IfMatch>(){}[0]
    final val IfModifiedSince // io.ktor.http/HttpHeaders.IfModifiedSince|{}IfModifiedSince[0]
        final fun <get-IfModifiedSince>(): kotlin/String // io.ktor.http/HttpHeaders.IfModifiedSince.<get-IfModifiedSince>|<get-IfModifiedSince>(){}[0]
    final val IfNoneMatch // io.ktor.http/HttpHeaders.IfNoneMatch|{}IfNoneMatch[0]
        final fun <get-IfNoneMatch>(): kotlin/String // io.ktor.http/HttpHeaders.IfNoneMatch.<get-IfNoneMatch>|<get-IfNoneMatch>(){}[0]
    final val IfRange // io.ktor.http/HttpHeaders.IfRange|{}IfRange[0]
        final fun <get-IfRange>(): kotlin/String // io.ktor.http/HttpHeaders.IfRange.<get-IfRange>|<get-IfRange>(){}[0]
    final val IfScheduleTagMatch // io.ktor.http/HttpHeaders.IfScheduleTagMatch|{}IfScheduleTagMatch[0]
        final fun <get-IfScheduleTagMatch>(): kotlin/String // io.ktor.http/HttpHeaders.IfScheduleTagMatch.<get-IfScheduleTagMatch>|<get-IfScheduleTagMatch>(){}[0]
    final val IfUnmodifiedSince // io.ktor.http/HttpHeaders.IfUnmodifiedSince|{}IfUnmodifiedSince[0]
        final fun <get-IfUnmodifiedSince>(): kotlin/String // io.ktor.http/HttpHeaders.IfUnmodifiedSince.<get-IfUnmodifiedSince>|<get-IfUnmodifiedSince>(){}[0]
    final val LastModified // io.ktor.http/HttpHeaders.LastModified|{}LastModified[0]
        final fun <get-LastModified>(): kotlin/String // io.ktor.http/HttpHeaders.LastModified.<get-LastModified>|<get-LastModified>(){}[0]
    final val Link // io.ktor.http/HttpHeaders.Link|{}Link[0]
        final fun <get-Link>(): kotlin/String // io.ktor.http/HttpHeaders.Link.<get-Link>|<get-Link>(){}[0]
    final val Location // io.ktor.http/HttpHeaders.Location|{}Location[0]
        final fun <get-Location>(): kotlin/String // io.ktor.http/HttpHeaders.Location.<get-Location>|<get-Location>(){}[0]
    final val LockToken // io.ktor.http/HttpHeaders.LockToken|{}LockToken[0]
        final fun <get-LockToken>(): kotlin/String // io.ktor.http/HttpHeaders.LockToken.<get-LockToken>|<get-LockToken>(){}[0]
    final val MIMEVersion // io.ktor.http/HttpHeaders.MIMEVersion|{}MIMEVersion[0]
        final fun <get-MIMEVersion>(): kotlin/String // io.ktor.http/HttpHeaders.MIMEVersion.<get-MIMEVersion>|<get-MIMEVersion>(){}[0]
    final val MaxForwards // io.ktor.http/HttpHeaders.MaxForwards|{}MaxForwards[0]
        final fun <get-MaxForwards>(): kotlin/String // io.ktor.http/HttpHeaders.MaxForwards.<get-MaxForwards>|<get-MaxForwards>(){}[0]
    final val OrderingType // io.ktor.http/HttpHeaders.OrderingType|{}OrderingType[0]
        final fun <get-OrderingType>(): kotlin/String // io.ktor.http/HttpHeaders.OrderingType.<get-OrderingType>|<get-OrderingType>(){}[0]
    final val Origin // io.ktor.http/HttpHeaders.Origin|{}Origin[0]
        final fun <get-Origin>(): kotlin/String // io.ktor.http/HttpHeaders.Origin.<get-Origin>|<get-Origin>(){}[0]
    final val Overwrite // io.ktor.http/HttpHeaders.Overwrite|{}Overwrite[0]
        final fun <get-Overwrite>(): kotlin/String // io.ktor.http/HttpHeaders.Overwrite.<get-Overwrite>|<get-Overwrite>(){}[0]
    final val Position // io.ktor.http/HttpHeaders.Position|{}Position[0]
        final fun <get-Position>(): kotlin/String // io.ktor.http/HttpHeaders.Position.<get-Position>|<get-Position>(){}[0]
    final val Pragma // io.ktor.http/HttpHeaders.Pragma|{}Pragma[0]
        final fun <get-Pragma>(): kotlin/String // io.ktor.http/HttpHeaders.Pragma.<get-Pragma>|<get-Pragma>(){}[0]
    final val Prefer // io.ktor.http/HttpHeaders.Prefer|{}Prefer[0]
        final fun <get-Prefer>(): kotlin/String // io.ktor.http/HttpHeaders.Prefer.<get-Prefer>|<get-Prefer>(){}[0]
    final val PreferenceApplied // io.ktor.http/HttpHeaders.PreferenceApplied|{}PreferenceApplied[0]
        final fun <get-PreferenceApplied>(): kotlin/String // io.ktor.http/HttpHeaders.PreferenceApplied.<get-PreferenceApplied>|<get-PreferenceApplied>(){}[0]
    final val ProxyAuthenticate // io.ktor.http/HttpHeaders.ProxyAuthenticate|{}ProxyAuthenticate[0]
        final fun <get-ProxyAuthenticate>(): kotlin/String // io.ktor.http/HttpHeaders.ProxyAuthenticate.<get-ProxyAuthenticate>|<get-ProxyAuthenticate>(){}[0]
    final val ProxyAuthenticationInfo // io.ktor.http/HttpHeaders.ProxyAuthenticationInfo|{}ProxyAuthenticationInfo[0]
        final fun <get-ProxyAuthenticationInfo>(): kotlin/String // io.ktor.http/HttpHeaders.ProxyAuthenticationInfo.<get-ProxyAuthenticationInfo>|<get-ProxyAuthenticationInfo>(){}[0]
    final val ProxyAuthorization // io.ktor.http/HttpHeaders.ProxyAuthorization|{}ProxyAuthorization[0]
        final fun <get-ProxyAuthorization>(): kotlin/String // io.ktor.http/HttpHeaders.ProxyAuthorization.<get-ProxyAuthorization>|<get-ProxyAuthorization>(){}[0]
    final val PublicKeyPins // io.ktor.http/HttpHeaders.PublicKeyPins|{}PublicKeyPins[0]
        final fun <get-PublicKeyPins>(): kotlin/String // io.ktor.http/HttpHeaders.PublicKeyPins.<get-PublicKeyPins>|<get-PublicKeyPins>(){}[0]
    final val PublicKeyPinsReportOnly // io.ktor.http/HttpHeaders.PublicKeyPinsReportOnly|{}PublicKeyPinsReportOnly[0]
        final fun <get-PublicKeyPinsReportOnly>(): kotlin/String // io.ktor.http/HttpHeaders.PublicKeyPinsReportOnly.<get-PublicKeyPinsReportOnly>|<get-PublicKeyPinsReportOnly>(){}[0]
    final val Range // io.ktor.http/HttpHeaders.Range|{}Range[0]
        final fun <get-Range>(): kotlin/String // io.ktor.http/HttpHeaders.Range.<get-Range>|<get-Range>(){}[0]
    final val Referrer // io.ktor.http/HttpHeaders.Referrer|{}Referrer[0]
        final fun <get-Referrer>(): kotlin/String // io.ktor.http/HttpHeaders.Referrer.<get-Referrer>|<get-Referrer>(){}[0]
    final val RetryAfter // io.ktor.http/HttpHeaders.RetryAfter|{}RetryAfter[0]
        final fun <get-RetryAfter>(): kotlin/String // io.ktor.http/HttpHeaders.RetryAfter.<get-RetryAfter>|<get-RetryAfter>(){}[0]
    final val SLUG // io.ktor.http/HttpHeaders.SLUG|{}SLUG[0]
        final fun <get-SLUG>(): kotlin/String // io.ktor.http/HttpHeaders.SLUG.<get-SLUG>|<get-SLUG>(){}[0]
    final val ScheduleReply // io.ktor.http/HttpHeaders.ScheduleReply|{}ScheduleReply[0]
        final fun <get-ScheduleReply>(): kotlin/String // io.ktor.http/HttpHeaders.ScheduleReply.<get-ScheduleReply>|<get-ScheduleReply>(){}[0]
    final val ScheduleTag // io.ktor.http/HttpHeaders.ScheduleTag|{}ScheduleTag[0]
        final fun <get-ScheduleTag>(): kotlin/String // io.ktor.http/HttpHeaders.ScheduleTag.<get-ScheduleTag>|<get-ScheduleTag>(){}[0]
    final val SecWebSocketAccept // io.ktor.http/HttpHeaders.SecWebSocketAccept|{}SecWebSocketAccept[0]
        final fun <get-SecWebSocketAccept>(): kotlin/String // io.ktor.http/HttpHeaders.SecWebSocketAccept.<get-SecWebSocketAccept>|<get-SecWebSocketAccept>(){}[0]
    final val SecWebSocketExtensions // io.ktor.http/HttpHeaders.SecWebSocketExtensions|{}SecWebSocketExtensions[0]
        final fun <get-SecWebSocketExtensions>(): kotlin/String // io.ktor.http/HttpHeaders.SecWebSocketExtensions.<get-SecWebSocketExtensions>|<get-SecWebSocketExtensions>(){}[0]
    final val SecWebSocketKey // io.ktor.http/HttpHeaders.SecWebSocketKey|{}SecWebSocketKey[0]
        final fun <get-SecWebSocketKey>(): kotlin/String // io.ktor.http/HttpHeaders.SecWebSocketKey.<get-SecWebSocketKey>|<get-SecWebSocketKey>(){}[0]
    final val SecWebSocketProtocol // io.ktor.http/HttpHeaders.SecWebSocketProtocol|{}SecWebSocketProtocol[0]
        final fun <get-SecWebSocketProtocol>(): kotlin/String // io.ktor.http/HttpHeaders.SecWebSocketProtocol.<get-SecWebSocketProtocol>|<get-SecWebSocketProtocol>(){}[0]
    final val SecWebSocketVersion // io.ktor.http/HttpHeaders.SecWebSocketVersion|{}SecWebSocketVersion[0]
        final fun <get-SecWebSocketVersion>(): kotlin/String // io.ktor.http/HttpHeaders.SecWebSocketVersion.<get-SecWebSocketVersion>|<get-SecWebSocketVersion>(){}[0]
    final val Server // io.ktor.http/HttpHeaders.Server|{}Server[0]
        final fun <get-Server>(): kotlin/String // io.ktor.http/HttpHeaders.Server.<get-Server>|<get-Server>(){}[0]
    final val SetCookie // io.ktor.http/HttpHeaders.SetCookie|{}SetCookie[0]
        final fun <get-SetCookie>(): kotlin/String // io.ktor.http/HttpHeaders.SetCookie.<get-SetCookie>|<get-SetCookie>(){}[0]
    final val StrictTransportSecurity // io.ktor.http/HttpHeaders.StrictTransportSecurity|{}StrictTransportSecurity[0]
        final fun <get-StrictTransportSecurity>(): kotlin/String // io.ktor.http/HttpHeaders.StrictTransportSecurity.<get-StrictTransportSecurity>|<get-StrictTransportSecurity>(){}[0]
    final val TE // io.ktor.http/HttpHeaders.TE|{}TE[0]
        final fun <get-TE>(): kotlin/String // io.ktor.http/HttpHeaders.TE.<get-TE>|<get-TE>(){}[0]
    final val Timeout // io.ktor.http/HttpHeaders.Timeout|{}Timeout[0]
        final fun <get-Timeout>(): kotlin/String // io.ktor.http/HttpHeaders.Timeout.<get-Timeout>|<get-Timeout>(){}[0]
    final val Trailer // io.ktor.http/HttpHeaders.Trailer|{}Trailer[0]
        final fun <get-Trailer>(): kotlin/String // io.ktor.http/HttpHeaders.Trailer.<get-Trailer>|<get-Trailer>(){}[0]
    final val TransferEncoding // io.ktor.http/HttpHeaders.TransferEncoding|{}TransferEncoding[0]
        final fun <get-TransferEncoding>(): kotlin/String // io.ktor.http/HttpHeaders.TransferEncoding.<get-TransferEncoding>|<get-TransferEncoding>(){}[0]
    final val UnsafeHeaders // io.ktor.http/HttpHeaders.UnsafeHeaders|{}UnsafeHeaders[0]
        final fun <get-UnsafeHeaders>(): kotlin/Array<kotlin/String> // io.ktor.http/HttpHeaders.UnsafeHeaders.<get-UnsafeHeaders>|<get-UnsafeHeaders>(){}[0]
    final val UnsafeHeadersList // io.ktor.http/HttpHeaders.UnsafeHeadersList|{}UnsafeHeadersList[0]
        final fun <get-UnsafeHeadersList>(): kotlin.collections/List<kotlin/String> // io.ktor.http/HttpHeaders.UnsafeHeadersList.<get-UnsafeHeadersList>|<get-UnsafeHeadersList>(){}[0]
    final val Upgrade // io.ktor.http/HttpHeaders.Upgrade|{}Upgrade[0]
        final fun <get-Upgrade>(): kotlin/String // io.ktor.http/HttpHeaders.Upgrade.<get-Upgrade>|<get-Upgrade>(){}[0]
    final val UserAgent // io.ktor.http/HttpHeaders.UserAgent|{}UserAgent[0]
        final fun <get-UserAgent>(): kotlin/String // io.ktor.http/HttpHeaders.UserAgent.<get-UserAgent>|<get-UserAgent>(){}[0]
    final val Vary // io.ktor.http/HttpHeaders.Vary|{}Vary[0]
        final fun <get-Vary>(): kotlin/String // io.ktor.http/HttpHeaders.Vary.<get-Vary>|<get-Vary>(){}[0]
    final val Via // io.ktor.http/HttpHeaders.Via|{}Via[0]
        final fun <get-Via>(): kotlin/String // io.ktor.http/HttpHeaders.Via.<get-Via>|<get-Via>(){}[0]
    final val WWWAuthenticate // io.ktor.http/HttpHeaders.WWWAuthenticate|{}WWWAuthenticate[0]
        final fun <get-WWWAuthenticate>(): kotlin/String // io.ktor.http/HttpHeaders.WWWAuthenticate.<get-WWWAuthenticate>|<get-WWWAuthenticate>(){}[0]
    final val Warning // io.ktor.http/HttpHeaders.Warning|{}Warning[0]
        final fun <get-Warning>(): kotlin/String // io.ktor.http/HttpHeaders.Warning.<get-Warning>|<get-Warning>(){}[0]
    final val XCorrelationId // io.ktor.http/HttpHeaders.XCorrelationId|{}XCorrelationId[0]
        final fun <get-XCorrelationId>(): kotlin/String // io.ktor.http/HttpHeaders.XCorrelationId.<get-XCorrelationId>|<get-XCorrelationId>(){}[0]
    final val XForwardedFor // io.ktor.http/HttpHeaders.XForwardedFor|{}XForwardedFor[0]
        final fun <get-XForwardedFor>(): kotlin/String // io.ktor.http/HttpHeaders.XForwardedFor.<get-XForwardedFor>|<get-XForwardedFor>(){}[0]
    final val XForwardedHost // io.ktor.http/HttpHeaders.XForwardedHost|{}XForwardedHost[0]
        final fun <get-XForwardedHost>(): kotlin/String // io.ktor.http/HttpHeaders.XForwardedHost.<get-XForwardedHost>|<get-XForwardedHost>(){}[0]
    final val XForwardedPort // io.ktor.http/HttpHeaders.XForwardedPort|{}XForwardedPort[0]
        final fun <get-XForwardedPort>(): kotlin/String // io.ktor.http/HttpHeaders.XForwardedPort.<get-XForwardedPort>|<get-XForwardedPort>(){}[0]
    final val XForwardedProto // io.ktor.http/HttpHeaders.XForwardedProto|{}XForwardedProto[0]
        final fun <get-XForwardedProto>(): kotlin/String // io.ktor.http/HttpHeaders.XForwardedProto.<get-XForwardedProto>|<get-XForwardedProto>(){}[0]
    final val XForwardedServer // io.ktor.http/HttpHeaders.XForwardedServer|{}XForwardedServer[0]
        final fun <get-XForwardedServer>(): kotlin/String // io.ktor.http/HttpHeaders.XForwardedServer.<get-XForwardedServer>|<get-XForwardedServer>(){}[0]
    final val XHttpMethodOverride // io.ktor.http/HttpHeaders.XHttpMethodOverride|{}XHttpMethodOverride[0]
        final fun <get-XHttpMethodOverride>(): kotlin/String // io.ktor.http/HttpHeaders.XHttpMethodOverride.<get-XHttpMethodOverride>|<get-XHttpMethodOverride>(){}[0]
    final val XRequestId // io.ktor.http/HttpHeaders.XRequestId|{}XRequestId[0]
        final fun <get-XRequestId>(): kotlin/String // io.ktor.http/HttpHeaders.XRequestId.<get-XRequestId>|<get-XRequestId>(){}[0]
    final val XTotalCount // io.ktor.http/HttpHeaders.XTotalCount|{}XTotalCount[0]
        final fun <get-XTotalCount>(): kotlin/String // io.ktor.http/HttpHeaders.XTotalCount.<get-XTotalCount>|<get-XTotalCount>(){}[0]

    final fun checkHeaderName(kotlin/String) // io.ktor.http/HttpHeaders.checkHeaderName|checkHeaderName(kotlin.String){}[0]
    final fun checkHeaderValue(kotlin/String) // io.ktor.http/HttpHeaders.checkHeaderValue|checkHeaderValue(kotlin.String){}[0]
    final fun isUnsafe(kotlin/String): kotlin/Boolean // io.ktor.http/HttpHeaders.isUnsafe|isUnsafe(kotlin.String){}[0]
}

final object io.ktor.http/UrlSerializer : kotlinx.serialization/KSerializer<io.ktor.http/Url> { // io.ktor.http/UrlSerializer|null[0]
    final val descriptor // io.ktor.http/UrlSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.ktor.http/UrlSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): io.ktor.http/Url // io.ktor.http/UrlSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, io.ktor.http/Url) // io.ktor.http/UrlSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.ktor.http.Url){}[0]
}

final const val io.ktor.http/DEFAULT_PORT // io.ktor.http/DEFAULT_PORT|{}DEFAULT_PORT[0]
    final fun <get-DEFAULT_PORT>(): kotlin/Int // io.ktor.http/DEFAULT_PORT.<get-DEFAULT_PORT>|<get-DEFAULT_PORT>(){}[0]

final val io.ktor.http.content/CachingProperty // io.ktor.http.content/CachingProperty|{}CachingProperty[0]
    final fun <get-CachingProperty>(): io.ktor.util/AttributeKey<io.ktor.http.content/CachingOptions> // io.ktor.http.content/CachingProperty.<get-CachingProperty>|<get-CachingProperty>(){}[0]
final val io.ktor.http.content/VersionListProperty // io.ktor.http.content/VersionListProperty|{}VersionListProperty[0]
    final fun <get-VersionListProperty>(): io.ktor.util/AttributeKey<kotlin.collections/List<io.ktor.http.content/Version>> // io.ktor.http.content/VersionListProperty.<get-VersionListProperty>|<get-VersionListProperty>(){}[0]
final val io.ktor.http/authority // io.ktor.http/authority|@io.ktor.http.URLBuilder{}authority[0]
    final fun (io.ktor.http/URLBuilder).<get-authority>(): kotlin/String // io.ktor.http/authority.<get-authority>|<get-authority>@io.ktor.http.URLBuilder(){}[0]
final val io.ktor.http/authority // io.ktor.http/authority|@io.ktor.http.Url{}authority[0]
    final fun (io.ktor.http/Url).<get-authority>(): kotlin/String // io.ktor.http/authority.<get-authority>|<get-authority>@io.ktor.http.Url(){}[0]
final val io.ktor.http/fullPath // io.ktor.http/fullPath|@io.ktor.http.Url{}fullPath[0]
    final fun (io.ktor.http/Url).<get-fullPath>(): kotlin/String // io.ktor.http/fullPath.<get-fullPath>|<get-fullPath>@io.ktor.http.Url(){}[0]
final val io.ktor.http/hostWithPort // io.ktor.http/hostWithPort|@io.ktor.http.Url{}hostWithPort[0]
    final fun (io.ktor.http/Url).<get-hostWithPort>(): kotlin/String // io.ktor.http/hostWithPort.<get-hostWithPort>|<get-hostWithPort>@io.ktor.http.Url(){}[0]
final val io.ktor.http/hostWithPortIfSpecified // io.ktor.http/hostWithPortIfSpecified|@io.ktor.http.Url{}hostWithPortIfSpecified[0]
    final fun (io.ktor.http/Url).<get-hostWithPortIfSpecified>(): kotlin/String // io.ktor.http/hostWithPortIfSpecified.<get-hostWithPortIfSpecified>|<get-hostWithPortIfSpecified>@io.ktor.http.Url(){}[0]
final val io.ktor.http/isAbsolutePath // io.ktor.http/isAbsolutePath|@io.ktor.http.URLBuilder{}isAbsolutePath[0]
    final fun (io.ktor.http/URLBuilder).<get-isAbsolutePath>(): kotlin/Boolean // io.ktor.http/isAbsolutePath.<get-isAbsolutePath>|<get-isAbsolutePath>@io.ktor.http.URLBuilder(){}[0]
final val io.ktor.http/isAbsolutePath // io.ktor.http/isAbsolutePath|@io.ktor.http.Url{}isAbsolutePath[0]
    final fun (io.ktor.http/Url).<get-isAbsolutePath>(): kotlin/Boolean // io.ktor.http/isAbsolutePath.<get-isAbsolutePath>|<get-isAbsolutePath>@io.ktor.http.Url(){}[0]
final val io.ktor.http/isRelativePath // io.ktor.http/isRelativePath|@io.ktor.http.URLBuilder{}isRelativePath[0]
    final fun (io.ktor.http/URLBuilder).<get-isRelativePath>(): kotlin/Boolean // io.ktor.http/isRelativePath.<get-isRelativePath>|<get-isRelativePath>@io.ktor.http.URLBuilder(){}[0]
final val io.ktor.http/isRelativePath // io.ktor.http/isRelativePath|@io.ktor.http.Url{}isRelativePath[0]
    final fun (io.ktor.http/Url).<get-isRelativePath>(): kotlin/Boolean // io.ktor.http/isRelativePath.<get-isRelativePath>|<get-isRelativePath>@io.ktor.http.Url(){}[0]
final val io.ktor.http/origin // io.ktor.http/origin|@io.ktor.http.URLBuilder.Companion{}origin[0]
    final fun (io.ktor.http/URLBuilder.Companion).<get-origin>(): kotlin/String // io.ktor.http/origin.<get-origin>|<get-origin>@io.ktor.http.URLBuilder.Companion(){}[0]
final val io.ktor.http/protocolWithAuthority // io.ktor.http/protocolWithAuthority|@io.ktor.http.Url{}protocolWithAuthority[0]
    final fun (io.ktor.http/Url).<get-protocolWithAuthority>(): kotlin/String // io.ktor.http/protocolWithAuthority.<get-protocolWithAuthority>|<get-protocolWithAuthority>@io.ktor.http.Url(){}[0]

final var io.ktor.http.content/caching // io.ktor.http.content/caching|@io.ktor.http.content.OutgoingContent{}caching[0]
    final fun (io.ktor.http.content/OutgoingContent).<get-caching>(): io.ktor.http.content/CachingOptions? // io.ktor.http.content/caching.<get-caching>|<get-caching>@io.ktor.http.content.OutgoingContent(){}[0]
    final fun (io.ktor.http.content/OutgoingContent).<set-caching>(io.ktor.http.content/CachingOptions?) // io.ktor.http.content/caching.<set-caching>|<set-caching>@io.ktor.http.content.OutgoingContent(io.ktor.http.content.CachingOptions?){}[0]
final var io.ktor.http.content/versions // io.ktor.http.content/versions|@io.ktor.http.content.OutgoingContent{}versions[0]
    final fun (io.ktor.http.content/OutgoingContent).<get-versions>(): kotlin.collections/List<io.ktor.http.content/Version> // io.ktor.http.content/versions.<get-versions>|<get-versions>@io.ktor.http.content.OutgoingContent(){}[0]
    final fun (io.ktor.http.content/OutgoingContent).<set-versions>(kotlin.collections/List<io.ktor.http.content/Version>) // io.ktor.http.content/versions.<set-versions>|<set-versions>@io.ktor.http.content.OutgoingContent(kotlin.collections.List<io.ktor.http.content.Version>){}[0]
final var io.ktor.http/encodedPath // io.ktor.http/encodedPath|@io.ktor.http.URLBuilder{}encodedPath[0]
    final fun (io.ktor.http/URLBuilder).<get-encodedPath>(): kotlin/String // io.ktor.http/encodedPath.<get-encodedPath>|<get-encodedPath>@io.ktor.http.URLBuilder(){}[0]
    final fun (io.ktor.http/URLBuilder).<set-encodedPath>(kotlin/String) // io.ktor.http/encodedPath.<set-encodedPath>|<set-encodedPath>@io.ktor.http.URLBuilder(kotlin.String){}[0]

final fun (io.ktor.http.content/MultiPartData).io.ktor.http.content/asFlow(): kotlinx.coroutines.flow/Flow<io.ktor.http.content/PartData> // io.ktor.http.content/asFlow|asFlow@io.ktor.http.content.MultiPartData(){}[0]
final fun (io.ktor.http.content/OutgoingContent).io.ktor.http.content/compressed(io.ktor.util/ContentEncoder, kotlin.coroutines/CoroutineContext = ...): io.ktor.http.content/OutgoingContent? // io.ktor.http.content/compressed|compressed@io.ktor.http.content.OutgoingContent(io.ktor.util.ContentEncoder;kotlin.coroutines.CoroutineContext){}[0]
final fun (io.ktor.http.content/OutgoingContent).io.ktor.http.content/isEmpty(): kotlin/Boolean // io.ktor.http.content/isEmpty|isEmpty@io.ktor.http.content.OutgoingContent(){}[0]
final fun (io.ktor.http/ContentType).io.ktor.http/fileExtensions(): kotlin.collections/List<kotlin/String> // io.ktor.http/fileExtensions|fileExtensions@io.ktor.http.ContentType(){}[0]
final fun (io.ktor.http/ContentType).io.ktor.http/withCharset(io.ktor.utils.io.charsets/Charset): io.ktor.http/ContentType // io.ktor.http/withCharset|withCharset@io.ktor.http.ContentType(io.ktor.utils.io.charsets.Charset){}[0]
final fun (io.ktor.http/ContentType).io.ktor.http/withCharsetIfNeeded(io.ktor.utils.io.charsets/Charset): io.ktor.http/ContentType // io.ktor.http/withCharsetIfNeeded|withCharsetIfNeeded@io.ktor.http.ContentType(io.ktor.utils.io.charsets.Charset){}[0]
final fun (io.ktor.http/ContentType.Companion).io.ktor.http/defaultForFileExtension(kotlin/String): io.ktor.http/ContentType // io.ktor.http/defaultForFileExtension|defaultForFileExtension@io.ktor.http.ContentType.Companion(kotlin.String){}[0]
final fun (io.ktor.http/ContentType.Companion).io.ktor.http/defaultForFilePath(kotlin/String): io.ktor.http/ContentType // io.ktor.http/defaultForFilePath|defaultForFilePath@io.ktor.http.ContentType.Companion(kotlin.String){}[0]
final fun (io.ktor.http/ContentType.Companion).io.ktor.http/fromFileExtension(kotlin/String): kotlin.collections/List<io.ktor.http/ContentType> // io.ktor.http/fromFileExtension|fromFileExtension@io.ktor.http.ContentType.Companion(kotlin.String){}[0]
final fun (io.ktor.http/ContentType.Companion).io.ktor.http/fromFilePath(kotlin/String): kotlin.collections/List<io.ktor.http/ContentType> // io.ktor.http/fromFilePath|fromFilePath@io.ktor.http.ContentType.Companion(kotlin.String){}[0]
final fun (io.ktor.http/HeaderValueWithParameters).io.ktor.http/charset(): io.ktor.utils.io.charsets/Charset? // io.ktor.http/charset|charset@io.ktor.http.HeaderValueWithParameters(){}[0]
final fun (io.ktor.http/HeadersBuilder).io.ktor.http/etag(kotlin/String) // io.ktor.http/etag|etag@io.ktor.http.HeadersBuilder(kotlin.String){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/cacheControl(): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.http/cacheControl|cacheControl@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/charset(): io.ktor.utils.io.charsets/Charset? // io.ktor.http/charset|charset@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/contentLength(): kotlin/Long? // io.ktor.http/contentLength|contentLength@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/contentType(): io.ktor.http/ContentType? // io.ktor.http/contentType|contentType@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/etag(): kotlin/String? // io.ktor.http/etag|etag@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/setCookie(): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.http/setCookie|setCookie@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessage).io.ktor.http/vary(): kotlin.collections/List<kotlin/String>? // io.ktor.http/vary|vary@io.ktor.http.HttpMessage(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/charset(): io.ktor.utils.io.charsets/Charset? // io.ktor.http/charset|charset@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/contentLength(): kotlin/Long? // io.ktor.http/contentLength|contentLength@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/contentType(): io.ktor.http/ContentType? // io.ktor.http/contentType|contentType@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/contentType(io.ktor.http/ContentType) // io.ktor.http/contentType|contentType@io.ktor.http.HttpMessageBuilder(io.ktor.http.ContentType){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/cookies(): kotlin.collections/List<io.ktor.http/Cookie> // io.ktor.http/cookies|cookies@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/etag(): kotlin/String? // io.ktor.http/etag|etag@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/ifNoneMatch(kotlin/String) // io.ktor.http/ifNoneMatch|ifNoneMatch@io.ktor.http.HttpMessageBuilder(kotlin.String){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/maxAge(kotlin/Int) // io.ktor.http/maxAge|maxAge@io.ktor.http.HttpMessageBuilder(kotlin.Int){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/userAgent(kotlin/String) // io.ktor.http/userAgent|userAgent@io.ktor.http.HttpMessageBuilder(kotlin.String){}[0]
final fun (io.ktor.http/HttpMessageBuilder).io.ktor.http/vary(): kotlin.collections/List<kotlin/String>? // io.ktor.http/vary|vary@io.ktor.http.HttpMessageBuilder(){}[0]
final fun (io.ktor.http/HttpStatusCode).io.ktor.http/isSuccess(): kotlin/Boolean // io.ktor.http/isSuccess|isSuccess@io.ktor.http.HttpStatusCode(){}[0]
final fun (io.ktor.http/Parameters).io.ktor.http/formUrlEncode(): kotlin/String // io.ktor.http/formUrlEncode|formUrlEncode@io.ktor.http.Parameters(){}[0]
final fun (io.ktor.http/Parameters).io.ktor.http/formUrlEncodeTo(kotlin.text/Appendable) // io.ktor.http/formUrlEncodeTo|formUrlEncodeTo@io.ktor.http.Parameters(kotlin.text.Appendable){}[0]
final fun (io.ktor.http/Parameters).io.ktor.http/plus(io.ktor.http/Parameters): io.ktor.http/Parameters // io.ktor.http/plus|plus@io.ktor.http.Parameters(io.ktor.http.Parameters){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/appendEncodedPathSegments(kotlin.collections/List<kotlin/String>): io.ktor.http/URLBuilder // io.ktor.http/appendEncodedPathSegments|appendEncodedPathSegments@io.ktor.http.URLBuilder(kotlin.collections.List<kotlin.String>){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/appendEncodedPathSegments(kotlin/Array<out kotlin/String>...): io.ktor.http/URLBuilder // io.ktor.http/appendEncodedPathSegments|appendEncodedPathSegments@io.ktor.http.URLBuilder(kotlin.Array<out|kotlin.String>...){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/appendPathSegments(kotlin.collections/List<kotlin/String>, kotlin/Boolean = ...): io.ktor.http/URLBuilder // io.ktor.http/appendPathSegments|appendPathSegments@io.ktor.http.URLBuilder(kotlin.collections.List<kotlin.String>;kotlin.Boolean){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/appendPathSegments(kotlin/Array<out kotlin/String>..., kotlin/Boolean = ...): io.ktor.http/URLBuilder // io.ktor.http/appendPathSegments|appendPathSegments@io.ktor.http.URLBuilder(kotlin.Array<out|kotlin.String>...;kotlin.Boolean){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/clone(): io.ktor.http/URLBuilder // io.ktor.http/clone|clone@io.ktor.http.URLBuilder(){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/path(kotlin/Array<out kotlin/String>...) // io.ktor.http/path|path@io.ktor.http.URLBuilder(kotlin.Array<out|kotlin.String>...){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/pathComponents(kotlin.collections/List<kotlin/String>): io.ktor.http/URLBuilder // io.ktor.http/pathComponents|pathComponents@io.ktor.http.URLBuilder(kotlin.collections.List<kotlin.String>){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/pathComponents(kotlin/Array<out kotlin/String>...): io.ktor.http/URLBuilder // io.ktor.http/pathComponents|pathComponents@io.ktor.http.URLBuilder(kotlin.Array<out|kotlin.String>...){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/set(kotlin/String? = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/String? = ..., kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit> = ...) // io.ktor.http/set|set@io.ktor.http.URLBuilder(kotlin.String?;kotlin.String?;kotlin.Int?;kotlin.String?;kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/takeFrom(io.ktor.http/URLBuilder): io.ktor.http/URLBuilder // io.ktor.http/takeFrom|takeFrom@io.ktor.http.URLBuilder(io.ktor.http.URLBuilder){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/takeFrom(io.ktor.http/Url): io.ktor.http/URLBuilder // io.ktor.http/takeFrom|takeFrom@io.ktor.http.URLBuilder(io.ktor.http.Url){}[0]
final fun (io.ktor.http/URLBuilder).io.ktor.http/takeFrom(kotlin/String): io.ktor.http/URLBuilder // io.ktor.http/takeFrom|takeFrom@io.ktor.http.URLBuilder(kotlin.String){}[0]
final fun (io.ktor.http/URLProtocol).io.ktor.http/isSecure(): kotlin/Boolean // io.ktor.http/isSecure|isSecure@io.ktor.http.URLProtocol(){}[0]
final fun (io.ktor.http/URLProtocol).io.ktor.http/isWebsocket(): kotlin/Boolean // io.ktor.http/isWebsocket|isWebsocket@io.ktor.http.URLProtocol(){}[0]
final fun (io.ktor.util.date/GMTDate).io.ktor.http/toHttpDate(): kotlin/String // io.ktor.http/toHttpDate|toHttpDate@io.ktor.util.date.GMTDate(){}[0]
final fun (io.ktor.util/StringValuesBuilder).io.ktor.http/append(kotlin/String, io.ktor.http/HeaderValueWithParameters) // io.ktor.http/append|append@io.ktor.util.StringValuesBuilder(kotlin.String;io.ktor.http.HeaderValueWithParameters){}[0]
final fun (kotlin.collections/Iterable<kotlin/Pair<kotlin/String, kotlin/String>>).io.ktor.http/toHeaderParamsList(): kotlin.collections/List<io.ktor.http/HeaderValueParam> // io.ktor.http/toHeaderParamsList|toHeaderParamsList@kotlin.collections.Iterable<kotlin.Pair<kotlin.String,kotlin.String>>(){}[0]
final fun (kotlin.collections/List<kotlin/Pair<kotlin/String, kotlin/String?>>).io.ktor.http/formUrlEncode(): kotlin/String // io.ktor.http/formUrlEncode|formUrlEncode@kotlin.collections.List<kotlin.Pair<kotlin.String,kotlin.String?>>(){}[0]
final fun (kotlin.collections/List<kotlin/Pair<kotlin/String, kotlin/String?>>).io.ktor.http/formUrlEncodeTo(kotlin.text/Appendable) // io.ktor.http/formUrlEncodeTo|formUrlEncodeTo@kotlin.collections.List<kotlin.Pair<kotlin.String,kotlin.String?>>(kotlin.text.Appendable){}[0]
final fun (kotlin.text/Appendable).io.ktor.http/appendUrlFullPath(kotlin/String, io.ktor.http/ParametersBuilder, kotlin/Boolean) // io.ktor.http/appendUrlFullPath|appendUrlFullPath@kotlin.text.Appendable(kotlin.String;io.ktor.http.ParametersBuilder;kotlin.Boolean){}[0]
final fun (kotlin/String).io.ktor.http/decodeURLPart(kotlin/Int = ..., kotlin/Int = ..., io.ktor.utils.io.charsets/Charset = ...): kotlin/String // io.ktor.http/decodeURLPart|decodeURLPart@kotlin.String(kotlin.Int;kotlin.Int;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlin/String).io.ktor.http/decodeURLQueryComponent(kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ..., io.ktor.utils.io.charsets/Charset = ...): kotlin/String // io.ktor.http/decodeURLQueryComponent|decodeURLQueryComponent@kotlin.String(kotlin.Int;kotlin.Int;kotlin.Boolean;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlin/String).io.ktor.http/encodeOAuth(): kotlin/String // io.ktor.http/encodeOAuth|encodeOAuth@kotlin.String(){}[0]
final fun (kotlin/String).io.ktor.http/encodeURLParameter(kotlin/Boolean = ...): kotlin/String // io.ktor.http/encodeURLParameter|encodeURLParameter@kotlin.String(kotlin.Boolean){}[0]
final fun (kotlin/String).io.ktor.http/encodeURLPath(kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/String // io.ktor.http/encodeURLPath|encodeURLPath@kotlin.String(kotlin.Boolean;kotlin.Boolean){}[0]
final fun (kotlin/String).io.ktor.http/encodeURLPathPart(): kotlin/String // io.ktor.http/encodeURLPathPart|encodeURLPathPart@kotlin.String(){}[0]
final fun (kotlin/String).io.ktor.http/encodeURLQueryComponent(kotlin/Boolean = ..., kotlin/Boolean = ..., io.ktor.utils.io.charsets/Charset = ...): kotlin/String // io.ktor.http/encodeURLQueryComponent|encodeURLQueryComponent@kotlin.String(kotlin.Boolean;kotlin.Boolean;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlin/String).io.ktor.http/escapeIfNeeded(): kotlin/String // io.ktor.http/escapeIfNeeded|escapeIfNeeded@kotlin.String(){}[0]
final fun (kotlin/String).io.ktor.http/fromCookieToGmtDate(): io.ktor.util.date/GMTDate // io.ktor.http/fromCookieToGmtDate|fromCookieToGmtDate@kotlin.String(){}[0]
final fun (kotlin/String).io.ktor.http/fromHttpToGmtDate(): io.ktor.util.date/GMTDate // io.ktor.http/fromHttpToGmtDate|fromHttpToGmtDate@kotlin.String(){}[0]
final fun (kotlin/String).io.ktor.http/parseUrlEncodedParameters(io.ktor.utils.io.charsets/Charset = ..., kotlin/Int = ...): io.ktor.http/Parameters // io.ktor.http/parseUrlEncodedParameters|parseUrlEncodedParameters@kotlin.String(io.ktor.utils.io.charsets.Charset;kotlin.Int){}[0]
final fun (kotlin/String).io.ktor.http/quote(): kotlin/String // io.ktor.http/quote|quote@kotlin.String(){}[0]
final fun io.ktor.http.auth/parseAuthorizationHeader(kotlin/String): io.ktor.http.auth/HttpAuthHeader? // io.ktor.http.auth/parseAuthorizationHeader|parseAuthorizationHeader(kotlin.String){}[0]
final fun io.ktor.http.auth/parseAuthorizationHeaders(kotlin/String): kotlin.collections/List<io.ktor.http.auth/HttpAuthHeader> // io.ktor.http.auth/parseAuthorizationHeaders|parseAuthorizationHeaders(kotlin.String){}[0]
final fun io.ktor.http.content/EntityTagVersion(kotlin/String): io.ktor.http.content/EntityTagVersion // io.ktor.http.content/EntityTagVersion|EntityTagVersion(kotlin.String){}[0]
final fun io.ktor.http.websocket/websocketServerAccept(kotlin/String): kotlin/String // io.ktor.http.websocket/websocketServerAccept|websocketServerAccept(kotlin.String){}[0]
final fun io.ktor.http/ParametersBuilder(kotlin/Int = ...): io.ktor.http/ParametersBuilder // io.ktor.http/ParametersBuilder|ParametersBuilder(kotlin.Int){}[0]
final fun io.ktor.http/URLBuilder(io.ktor.http/URLBuilder): io.ktor.http/URLBuilder // io.ktor.http/URLBuilder|URLBuilder(io.ktor.http.URLBuilder){}[0]
final fun io.ktor.http/URLBuilder(io.ktor.http/Url): io.ktor.http/URLBuilder // io.ktor.http/URLBuilder|URLBuilder(io.ktor.http.Url){}[0]
final fun io.ktor.http/URLBuilder(kotlin/String): io.ktor.http/URLBuilder // io.ktor.http/URLBuilder|URLBuilder(kotlin.String){}[0]
final fun io.ktor.http/Url(io.ktor.http/URLBuilder): io.ktor.http/Url // io.ktor.http/Url|Url(io.ktor.http.URLBuilder){}[0]
final fun io.ktor.http/Url(kotlin/String): io.ktor.http/Url // io.ktor.http/Url|Url(kotlin.String){}[0]
final fun io.ktor.http/buildUrl(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>): io.ktor.http/Url // io.ktor.http/buildUrl|buildUrl(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final fun io.ktor.http/contentRangeHeaderValue(kotlin.ranges/LongRange?, kotlin/Long? = ..., io.ktor.http/RangeUnits = ...): kotlin/String // io.ktor.http/contentRangeHeaderValue|contentRangeHeaderValue(kotlin.ranges.LongRange?;kotlin.Long?;io.ktor.http.RangeUnits){}[0]
final fun io.ktor.http/contentRangeHeaderValue(kotlin.ranges/LongRange?, kotlin/Long? = ..., kotlin/String = ...): kotlin/String // io.ktor.http/contentRangeHeaderValue|contentRangeHeaderValue(kotlin.ranges.LongRange?;kotlin.Long?;kotlin.String){}[0]
final fun io.ktor.http/decodeCookieValue(kotlin/String, io.ktor.http/CookieEncoding): kotlin/String // io.ktor.http/decodeCookieValue|decodeCookieValue(kotlin.String;io.ktor.http.CookieEncoding){}[0]
final fun io.ktor.http/encodeCookieValue(kotlin/String, io.ktor.http/CookieEncoding): kotlin/String // io.ktor.http/encodeCookieValue|encodeCookieValue(kotlin.String;io.ktor.http.CookieEncoding){}[0]
final fun io.ktor.http/headers(kotlin/Function1<io.ktor.http/HeadersBuilder, kotlin/Unit>): io.ktor.http/Headers // io.ktor.http/headers|headers(kotlin.Function1<io.ktor.http.HeadersBuilder,kotlin.Unit>){}[0]
final fun io.ktor.http/headersOf(): io.ktor.http/Headers // io.ktor.http/headersOf|headersOf(){}[0]
final fun io.ktor.http/headersOf(kotlin/Array<out kotlin/Pair<kotlin/String, kotlin.collections/List<kotlin/String>>>...): io.ktor.http/Headers // io.ktor.http/headersOf|headersOf(kotlin.Array<out|kotlin.Pair<kotlin.String,kotlin.collections.List<kotlin.String>>>...){}[0]
final fun io.ktor.http/headersOf(kotlin/String, kotlin.collections/List<kotlin/String>): io.ktor.http/Headers // io.ktor.http/headersOf|headersOf(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
final fun io.ktor.http/headersOf(kotlin/String, kotlin/String): io.ktor.http/Headers // io.ktor.http/headersOf|headersOf(kotlin.String;kotlin.String){}[0]
final fun io.ktor.http/hostIsIp(kotlin/String): kotlin/Boolean // io.ktor.http/hostIsIp|hostIsIp(kotlin.String){}[0]
final fun io.ktor.http/parameters(kotlin/Function1<io.ktor.http/ParametersBuilder, kotlin/Unit>): io.ktor.http/Parameters // io.ktor.http/parameters|parameters(kotlin.Function1<io.ktor.http.ParametersBuilder,kotlin.Unit>){}[0]
final fun io.ktor.http/parametersOf(): io.ktor.http/Parameters // io.ktor.http/parametersOf|parametersOf(){}[0]
final fun io.ktor.http/parametersOf(kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>>): io.ktor.http/Parameters // io.ktor.http/parametersOf|parametersOf(kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>){}[0]
final fun io.ktor.http/parametersOf(kotlin/Array<out kotlin/Pair<kotlin/String, kotlin.collections/List<kotlin/String>>>...): io.ktor.http/Parameters // io.ktor.http/parametersOf|parametersOf(kotlin.Array<out|kotlin.Pair<kotlin.String,kotlin.collections.List<kotlin.String>>>...){}[0]
final fun io.ktor.http/parametersOf(kotlin/String, kotlin.collections/List<kotlin/String>): io.ktor.http/Parameters // io.ktor.http/parametersOf|parametersOf(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
final fun io.ktor.http/parametersOf(kotlin/String, kotlin/String): io.ktor.http/Parameters // io.ktor.http/parametersOf|parametersOf(kotlin.String;kotlin.String){}[0]
final fun io.ktor.http/parseAndSortContentTypeHeader(kotlin/String?): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.http/parseAndSortContentTypeHeader|parseAndSortContentTypeHeader(kotlin.String?){}[0]
final fun io.ktor.http/parseAndSortHeader(kotlin/String?): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.http/parseAndSortHeader|parseAndSortHeader(kotlin.String?){}[0]
final fun io.ktor.http/parseClientCookiesHeader(kotlin/String, kotlin/Boolean = ...): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.http/parseClientCookiesHeader|parseClientCookiesHeader(kotlin.String;kotlin.Boolean){}[0]
final fun io.ktor.http/parseHeaderValue(kotlin/String?): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.http/parseHeaderValue|parseHeaderValue(kotlin.String?){}[0]
final fun io.ktor.http/parseHeaderValue(kotlin/String?, kotlin/Boolean): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.http/parseHeaderValue|parseHeaderValue(kotlin.String?;kotlin.Boolean){}[0]
final fun io.ktor.http/parseQueryString(kotlin/String, kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ...): io.ktor.http/Parameters // io.ktor.http/parseQueryString|parseQueryString(kotlin.String;kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun io.ktor.http/parseRangesSpecifier(kotlin/String): io.ktor.http/RangesSpecifier? // io.ktor.http/parseRangesSpecifier|parseRangesSpecifier(kotlin.String){}[0]
final fun io.ktor.http/parseServerSetCookieHeader(kotlin/String): io.ktor.http/Cookie // io.ktor.http/parseServerSetCookieHeader|parseServerSetCookieHeader(kotlin.String){}[0]
final fun io.ktor.http/parseUrl(kotlin/String): io.ktor.http/Url? // io.ktor.http/parseUrl|parseUrl(kotlin.String){}[0]
final fun io.ktor.http/renderCookieHeader(io.ktor.http/Cookie): kotlin/String // io.ktor.http/renderCookieHeader|renderCookieHeader(io.ktor.http.Cookie){}[0]
final fun io.ktor.http/renderSetCookieHeader(io.ktor.http/Cookie): kotlin/String // io.ktor.http/renderSetCookieHeader|renderSetCookieHeader(io.ktor.http.Cookie){}[0]
final fun io.ktor.http/renderSetCookieHeader(kotlin/String, kotlin/String, io.ktor.http/CookieEncoding = ..., kotlin/Int? = ..., io.ktor.util.date/GMTDate? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/String?> = ..., kotlin/Boolean = ...): kotlin/String // io.ktor.http/renderSetCookieHeader|renderSetCookieHeader(kotlin.String;kotlin.String;io.ktor.http.CookieEncoding;kotlin.Int?;io.ktor.util.date.GMTDate?;kotlin.String?;kotlin.String?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.String?>;kotlin.Boolean){}[0]
final suspend fun (io.ktor.http.content/MultiPartData).io.ktor.http.content/forEachPart(kotlin.coroutines/SuspendFunction1<io.ktor.http.content/PartData, kotlin/Unit>) // io.ktor.http.content/forEachPart|forEachPart@io.ktor.http.content.MultiPartData(kotlin.coroutines.SuspendFunction1<io.ktor.http.content.PartData,kotlin.Unit>){}[0]
final suspend fun (io.ktor.http.content/MultiPartData).io.ktor.http.content/readAllParts(): kotlin.collections/List<io.ktor.http.content/PartData> // io.ktor.http.content/readAllParts|readAllParts@io.ktor.http.content.MultiPartData(){}[0]
