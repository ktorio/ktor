// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-server-htmx>
final class io.ktor.server.htmx/HXResponseHeaders : io.ktor.util.collections/StringMap { // io.ktor.server.htmx/HXResponseHeaders|null[0]
    constructor <init>(io.ktor.server.response/ResponseHeaders) // io.ktor.server.htmx/HXResponseHeaders.<init>|<init>(io.ktor.server.response.ResponseHeaders){}[0]

    final val replaceUrl // io.ktor.server.htmx/HXResponseHeaders.replaceUrl|{}replaceUrl[0]
        final fun <get-replaceUrl>(): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.replaceUrl.<get-replaceUrl>|<get-replaceUrl>(){}[0]

    final var location // io.ktor.server.htmx/HXResponseHeaders.location|{}location[0]
        final fun <get-location>(): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.location.<get-location>|<get-location>(){}[0]
        final fun <set-location>(kotlin/String?) // io.ktor.server.htmx/HXResponseHeaders.location.<set-location>|<set-location>(kotlin.String?){}[0]
    final var pushUrl // io.ktor.server.htmx/HXResponseHeaders.pushUrl|{}pushUrl[0]
        final fun <get-pushUrl>(): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.pushUrl.<get-pushUrl>|<get-pushUrl>(){}[0]
        final fun <set-pushUrl>(kotlin/String?) // io.ktor.server.htmx/HXResponseHeaders.pushUrl.<set-pushUrl>|<set-pushUrl>(kotlin.String?){}[0]
    final var redirect // io.ktor.server.htmx/HXResponseHeaders.redirect|{}redirect[0]
        final fun <get-redirect>(): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.redirect.<get-redirect>|<get-redirect>(){}[0]
        final fun <set-redirect>(kotlin/String?) // io.ktor.server.htmx/HXResponseHeaders.redirect.<set-redirect>|<set-redirect>(kotlin.String?){}[0]
    final var refresh // io.ktor.server.htmx/HXResponseHeaders.refresh|{}refresh[0]
        final fun <get-refresh>(): kotlin/Boolean? // io.ktor.server.htmx/HXResponseHeaders.refresh.<get-refresh>|<get-refresh>(){}[0]
        final fun <set-refresh>(kotlin/Boolean?) // io.ktor.server.htmx/HXResponseHeaders.refresh.<set-refresh>|<set-refresh>(kotlin.Boolean?){}[0]

    final fun get(kotlin/String): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.get|get(kotlin.String){}[0]
    final fun remove(kotlin/String): kotlin/String? // io.ktor.server.htmx/HXResponseHeaders.remove|remove(kotlin.String){}[0]
    final fun set(kotlin/String, kotlin/String) // io.ktor.server.htmx/HXResponseHeaders.set|set(kotlin.String;kotlin.String){}[0]
}

final value class io.ktor.server.htmx/HXRequestHeaders { // io.ktor.server.htmx/HXRequestHeaders|null[0]
    constructor <init>(io.ktor.http/Headers) // io.ktor.server.htmx/HXRequestHeaders.<init>|<init>(io.ktor.http.Headers){}[0]

    final val currentUrl // io.ktor.server.htmx/HXRequestHeaders.currentUrl|{}currentUrl[0]
        final fun <get-currentUrl>(): io.ktor.http/Url? // io.ktor.server.htmx/HXRequestHeaders.currentUrl.<get-currentUrl>|<get-currentUrl>(){}[0]
    final val isBoosted // io.ktor.server.htmx/HXRequestHeaders.isBoosted|{}isBoosted[0]
        final fun <get-isBoosted>(): kotlin/Boolean // io.ktor.server.htmx/HXRequestHeaders.isBoosted.<get-isBoosted>|<get-isBoosted>(){}[0]
    final val isHistoryRestore // io.ktor.server.htmx/HXRequestHeaders.isHistoryRestore|{}isHistoryRestore[0]
        final fun <get-isHistoryRestore>(): kotlin/Boolean // io.ktor.server.htmx/HXRequestHeaders.isHistoryRestore.<get-isHistoryRestore>|<get-isHistoryRestore>(){}[0]
    final val prompt // io.ktor.server.htmx/HXRequestHeaders.prompt|{}prompt[0]
        final fun <get-prompt>(): kotlin/String? // io.ktor.server.htmx/HXRequestHeaders.prompt.<get-prompt>|<get-prompt>(){}[0]
    final val targetId // io.ktor.server.htmx/HXRequestHeaders.targetId|{}targetId[0]
        final fun <get-targetId>(): kotlin/String? // io.ktor.server.htmx/HXRequestHeaders.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val triggerId // io.ktor.server.htmx/HXRequestHeaders.triggerId|{}triggerId[0]
        final fun <get-triggerId>(): kotlin/String? // io.ktor.server.htmx/HXRequestHeaders.triggerId.<get-triggerId>|<get-triggerId>(){}[0]
    final val triggerName // io.ktor.server.htmx/HXRequestHeaders.triggerName|{}triggerName[0]
        final fun <get-triggerName>(): kotlin/String? // io.ktor.server.htmx/HXRequestHeaders.triggerName.<get-triggerName>|<get-triggerName>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.htmx/HXRequestHeaders.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.htmx/HXRequestHeaders.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.htmx/HXRequestHeaders.toString|toString(){}[0]
}

final value class io.ktor.server.htmx/HxRoute : io.ktor.server.routing/Route { // io.ktor.server.htmx/HxRoute|null[0]
    final val attributes // io.ktor.server.htmx/HxRoute.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.htmx/HxRoute.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val environment // io.ktor.server.htmx/HxRoute.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.htmx/HxRoute.environment.<get-environment>|<get-environment>(){}[0]
    final val parent // io.ktor.server.htmx/HxRoute.parent|{}parent[0]
        final fun <get-parent>(): io.ktor.server.routing/Route? // io.ktor.server.htmx/HxRoute.parent.<get-parent>|<get-parent>(){}[0]

    final fun <#A1: kotlin/Any, #B1: kotlin/Any> install(io.ktor.server.application/Plugin<io.ktor.server.application/ApplicationCallPipeline, #A1, #B1>, kotlin/Function1<#A1, kotlin/Unit>): #B1 // io.ktor.server.htmx/HxRoute.install|install(io.ktor.server.application.Plugin<io.ktor.server.application.ApplicationCallPipeline,0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> plugin(io.ktor.server.application/Plugin<*, *, #A1>): #A1 // io.ktor.server.htmx/HxRoute.plugin|plugin(io.ktor.server.application.Plugin<*,*,0:0>){0ยง<kotlin.Any>}[0]
    final fun createChild(io.ktor.server.routing/RouteSelector): io.ktor.server.routing/Route // io.ktor.server.htmx/HxRoute.createChild|createChild(io.ktor.server.routing.RouteSelector){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.htmx/HxRoute.equals|equals(kotlin.Any?){}[0]
    final fun handle(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>) // io.ktor.server.htmx/HxRoute.handle|handle(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.htmx/HxRoute.hashCode|hashCode(){}[0]
    final fun target(kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.htmx/HxRoute.target|target(kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
    final fun toString(): kotlin/String // io.ktor.server.htmx/HxRoute.toString|toString(){}[0]
    final fun trigger(kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.htmx/HxRoute.trigger|trigger(kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
}

final val io.ktor.server.htmx/hx // io.ktor.server.htmx/hx|@io.ktor.server.routing.Route{}hx[0]
    final fun (io.ktor.server.routing/Route).<get-hx>(): io.ktor.server.htmx/HxRoute // io.ktor.server.htmx/hx.<get-hx>|<get-hx>@io.ktor.server.routing.Route(){}[0]
final val io.ktor.server.htmx/hx // io.ktor.server.htmx/hx|@io.ktor.server.routing.RoutingRequest{}hx[0]
    final fun (io.ktor.server.routing/RoutingRequest).<get-hx>(): io.ktor.server.htmx/HXRequestHeaders // io.ktor.server.htmx/hx.<get-hx>|<get-hx>@io.ktor.server.routing.RoutingRequest(){}[0]
final val io.ktor.server.htmx/hx // io.ktor.server.htmx/hx|@io.ktor.server.routing.RoutingResponse{}hx[0]
    final fun (io.ktor.server.routing/RoutingResponse).<get-hx>(): io.ktor.server.htmx/HXResponseHeaders // io.ktor.server.htmx/hx.<get-hx>|<get-hx>@io.ktor.server.routing.RoutingResponse(){}[0]
final val io.ktor.server.htmx/isHtmx // io.ktor.server.htmx/isHtmx|@io.ktor.server.routing.RoutingRequest{}isHtmx[0]
    final fun (io.ktor.server.routing/RoutingRequest).<get-isHtmx>(): kotlin/Boolean // io.ktor.server.htmx/isHtmx.<get-isHtmx>|<get-isHtmx>@io.ktor.server.routing.RoutingRequest(){}[0]

final fun (io.ktor.server.routing/Route).io.ktor.server.htmx/hx(kotlin/Function1<io.ktor.server.htmx/HxRoute, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.htmx/hx|hx@io.ktor.server.routing.Route(kotlin.Function1<io.ktor.server.htmx.HxRoute,kotlin.Unit>){}[0]
