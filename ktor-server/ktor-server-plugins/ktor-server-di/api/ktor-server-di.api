public final class io/ktor/server/plugins/di/AmbiguousDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous;)V
	public final fun getFunction ()Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous;
}

public final class io/ktor/server/plugins/di/CircularDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Ljava/util/Collection;)V
}

public final class io/ktor/server/plugins/di/ConfigurationDependencyMap : io/ktor/server/plugins/di/DependencyMap {
	public fun <init> (Lio/ktor/server/config/ApplicationConfig;)V
	public fun contains (Lio/ktor/server/plugins/di/DependencyKey;)Z
	public fun getInitializer (Lio/ktor/server/plugins/di/DependencyKey;)Lio/ktor/server/plugins/di/DependencyInitializer;
}

public final class io/ktor/server/plugins/di/DependencyAbstractTypeConstructionException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Ljava/lang/String;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyConflictPolicy {
	public abstract fun resolve (Lio/ktor/server/plugins/di/DependencyInitializer;Lio/ktor/server/plugins/di/DependencyInitializer;)Lio/ktor/server/plugins/di/DependencyConflictResult;
}

public final class io/ktor/server/plugins/di/DependencyConflictPolicyKt {
	public static final fun getDefaultConflictPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public static final fun getIgnoreConflicts ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
}

public abstract interface class io/ktor/server/plugins/di/DependencyConflictResult {
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Ambiguous : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$Ambiguous;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Conflict : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$Conflict;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$KeepNew : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$KeepNew;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$KeepPrevious : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$KeepPrevious;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Replace : io/ktor/server/plugins/di/DependencyConflictResult {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyInitializer;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyInitializer;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyInitializer;)Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;Lio/ktor/server/plugins/di/DependencyInitializer;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFunction ()Lio/ktor/server/plugins/di/DependencyInitializer;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/ktor/server/plugins/di/DependencyInitializer {
	public abstract fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public abstract fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public abstract fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Ambiguous : io/ktor/server/plugins/di/DependencyInitializer {
	public static final field Companion Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous$Companion;
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;)V
	public final fun clarify (Lkotlin/jvm/functions/Function1;)Lio/ktor/server/plugins/di/DependencyInitializer;
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun component2 ()Ljava/util/Set;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;)Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous;Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyInitializer$Ambiguous;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFunctions ()Ljava/util/Set;
	public final fun getImplementations ()Ljava/util/List;
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun hashCode ()I
	public final fun keyString ()Ljava/lang/String;
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Ambiguous$Companion {
	public final fun of (Lio/ktor/server/plugins/di/DependencyKey;[Lio/ktor/server/plugins/di/DependencyInitializer;)Lio/ktor/server/plugins/di/DependencyInitializer;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$DefaultImpls {
	public static fun getOriginKey (Lio/ktor/server/plugins/di/DependencyInitializer;)Lio/ktor/server/plugins/di/DependencyKey;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Explicit : io/ktor/server/plugins/di/DependencyInitializer {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function2;)V
	public final fun derived (I)Lio/ktor/server/plugins/di/DependencyInitializer$Implicit;
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Implicit : io/ktor/server/plugins/di/DependencyInitializer {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyInitializer$Explicit;I)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDistance ()I
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun getOrigin ()Lio/ktor/server/plugins/di/DependencyInitializer$Explicit;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun hashCode ()I
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Missing : io/ktor/server/plugins/di/DependencyInitializer {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Lio/ktor/server/plugins/di/DependencyResolver;)V
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun provide (Lio/ktor/server/plugins/di/DependencyInitializer;)V
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
	public final fun throwMissing ()V
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Null : io/ktor/server/plugins/di/DependencyInitializer {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyKey;)Lio/ktor/server/plugins/di/DependencyInitializer$Null;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyInitializer$Null;Lio/ktor/server/plugins/di/DependencyKey;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyInitializer$Null;
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun hashCode ()I
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyInitializer$Value : io/ktor/server/plugins/di/DependencyInitializer {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Ljava/lang/Object;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun component2 ()Ljava/lang/Object;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyKey;Ljava/lang/Object;)Lio/ktor/server/plugins/di/DependencyInitializer$Value;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyInitializer$Value;Lio/ktor/server/plugins/di/DependencyKey;Ljava/lang/Object;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyInitializer$Value;
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun getOriginKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun resolve (Lio/ktor/server/plugins/di/DependencyResolver;)Lkotlinx/coroutines/Deferred;
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyInjectionConfig {
	public fun <init> ()V
	public final fun getConflictPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public final fun getKeyMapping ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public final fun getOnConflict ()Lkotlin/jvm/functions/Function1;
	public final fun getOnShutdown ()Lkotlin/jvm/functions/Function2;
	public final fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public final fun include (Lio/ktor/server/plugins/di/DependencyMap;)V
	public final fun setConflictPolicy (Lio/ktor/server/plugins/di/DependencyConflictPolicy;)V
	public final fun setKeyMapping (Lio/ktor/server/plugins/di/DependencyKeyCovariance;)V
	public final fun setOnConflict (Lkotlin/jvm/functions/Function1;)V
	public final fun setOnShutdown (Lkotlin/jvm/functions/Function2;)V
	public final fun setReflection (Lio/ktor/server/plugins/di/DependencyReflection;)V
}

public final class io/ktor/server/plugins/di/DependencyInjectionConfig_jvmKt {
	public static final fun getDefaultReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
}

public class io/ktor/server/plugins/di/DependencyInjectionException : java/lang/RuntimeException {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/server/plugins/di/DependencyInjectionKt {
	public static final fun getDI ()Lio/ktor/server/application/ApplicationPlugin;
	public static final fun getDependencyRegistryKey ()Lio/ktor/util/AttributeKey;
	public static final fun isNullable (Lio/ktor/server/plugins/di/DependencyKey;)Z
}

public final class io/ktor/server/plugins/di/DependencyKey {
	public fun <init> (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;Ljava/lang/Object;)V
	public synthetic fun <init> (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/ktor/util/reflect/TypeInfo;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/Object;
	public final fun copy (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;Ljava/lang/Object;)Lio/ktor/server/plugins/di/DependencyKey;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyKey;Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;Ljava/lang/Object;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getQualifier ()Ljava/lang/Object;
	public final fun getType ()Lio/ktor/util/reflect/TypeInfo;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/ktor/server/plugins/di/DependencyKeyCovariance {
	public abstract fun map (Lio/ktor/server/plugins/di/DependencyKey;I)Lkotlin/sequences/Sequence;
}

public final class io/ktor/server/plugins/di/DependencyKeyCovarianceKt {
	public static final fun getDefaultKeyCovariance ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun getNullables ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun getOutTypeArgumentsSupertypes ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun getSupertypes ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun getUnnamed ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun plus (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyKeyCovariance;)Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun times (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyKeyCovariance;)Lio/ktor/server/plugins/di/DependencyKeyCovariance;
}

public abstract interface class io/ktor/server/plugins/di/DependencyMap {
	public static final field Companion Lio/ktor/server/plugins/di/DependencyMap$Companion;
	public abstract fun contains (Lio/ktor/server/plugins/di/DependencyKey;)Z
	public abstract fun getInitializer (Lio/ktor/server/plugins/di/DependencyKey;)Lio/ktor/server/plugins/di/DependencyInitializer;
}

public final class io/ktor/server/plugins/di/DependencyMap$Companion {
	public final fun fromLookup (Lkotlin/jvm/functions/Function1;)Lio/ktor/server/plugins/di/DependencyMap;
	public final fun fromMap (Ljava/util/Map;)Lio/ktor/server/plugins/di/DependencyMap;
	public final fun getEMPTY ()Lio/ktor/server/plugins/di/DependencyMap;
}

public abstract interface class io/ktor/server/plugins/di/DependencyMapExtension {
	public abstract fun get (Lio/ktor/server/application/Application;)Lio/ktor/server/plugins/di/DependencyMap;
}

public abstract interface class io/ktor/server/plugins/di/DependencyProvider {
	public abstract fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function2;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyReflection {
	public abstract fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public class io/ktor/server/plugins/di/DependencyReflectionJvm : io/ktor/server/plugins/di/DependencyReflection {
	public fun <init> ()V
	public fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun findConstructors (Lkotlin/reflect/KClass;)Ljava/util/Collection;
	public final fun mapParameters (Ljava/util/List;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun toDependencyKey (Lkotlin/reflect/KParameter;)Lio/ktor/server/plugins/di/DependencyKey;
}

public final class io/ktor/server/plugins/di/DependencyRegistry : io/ktor/server/plugins/di/DependencyProvider, io/ktor/server/plugins/di/DependencyResolver {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyResolver;Lio/ktor/server/plugins/di/DependencyProvider;)V
	public final fun cleanup (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
	public fun contains (Lio/ktor/server/plugins/di/DependencyKey;)Z
	public fun get (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getDeferred (Lio/ktor/server/plugins/di/DependencyKey;)Lkotlinx/coroutines/Deferred;
	public fun getInitializer (Lio/ktor/server/plugins/di/DependencyKey;)Lio/ktor/server/plugins/di/DependencyInitializer;
	public fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getProvider ()Lio/ktor/server/plugins/di/DependencyProvider;
	public fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public final fun getResolver ()Lio/ktor/server/plugins/di/DependencyResolver;
	public fun named (Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public final fun require (Lio/ktor/server/plugins/di/DependencyKey;)V
	public fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function2;)V
}

public final class io/ktor/server/plugins/di/DependencyRegistry$KeyContext {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyRegistry;Lio/ktor/server/plugins/di/DependencyKey;)V
	public final fun cleanup (Lkotlin/jvm/functions/Function1;)V
	public final fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun provide (Lkotlin/jvm/functions/Function2;)V
}

public final class io/ktor/server/plugins/di/DependencyRegistryKt {
	public static final fun dependencies (Lio/ktor/server/application/Application;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getDependencies (Lio/ktor/server/application/Application;)Lio/ktor/server/plugins/di/DependencyRegistry;
	public static final fun setDependencies (Lio/ktor/server/application/Application;Lio/ktor/server/plugins/di/DependencyRegistry;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyResolution {
	public abstract fun resolve (Lkotlinx/coroutines/CoroutineScope;Lio/ktor/server/plugins/di/DependencyProvider;Lio/ktor/server/plugins/di/DependencyMap;Lio/ktor/server/plugins/di/DependencyReflection;)Lio/ktor/server/plugins/di/DependencyResolver;
}

public final class io/ktor/server/plugins/di/DependencyResolutionKt {
	public static final fun plus (Lio/ktor/server/plugins/di/DependencyMap;Lio/ktor/server/plugins/di/DependencyMap;)Lio/ktor/server/plugins/di/DependencyMap;
}

public final class io/ktor/server/plugins/di/DependencyResolution_jvmKt {
	public static final fun getBlocking (Lio/ktor/server/plugins/di/DependencyResolver;Lio/ktor/server/plugins/di/DependencyKey;)Ljava/lang/Object;
}

public abstract interface class io/ktor/server/plugins/di/DependencyResolver : io/ktor/server/plugins/di/MutableDependencyMap, kotlinx/coroutines/CoroutineScope {
	public abstract fun get (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getDeferred (Lio/ktor/server/plugins/di/DependencyKey;)Lkotlinx/coroutines/Deferred;
	public abstract fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public abstract fun named (Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
}

public final class io/ktor/server/plugins/di/DependencyResolver$DefaultImpls {
	public static fun get (Lio/ktor/server/plugins/di/DependencyResolver;Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getDeferred (Lio/ktor/server/plugins/di/DependencyResolver;Lio/ktor/server/plugins/di/DependencyKey;)Lkotlinx/coroutines/Deferred;
	public static fun named (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
}

public final class io/ktor/server/plugins/di/DependencyResolverContext {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyResolver;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyResolverContext;Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getResolver ()Lio/ktor/server/plugins/di/DependencyResolver;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DuplicateDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public final class io/ktor/server/plugins/di/InvalidDependencyReferenceException : io/ktor/server/plugins/di/DependencyInjectionException {
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/server/plugins/di/MapDependencyResolver : io/ktor/server/plugins/di/DependencyResolver, kotlinx/coroutines/CoroutineScope {
	public fun <init> (Ljava/util/Map;Lio/ktor/server/plugins/di/DependencyMap;Lio/ktor/server/plugins/di/DependencyReflection;ZLkotlinx/coroutines/CoroutineScope;)V
	public synthetic fun <init> (Ljava/util/Map;Lio/ktor/server/plugins/di/DependencyMap;Lio/ktor/server/plugins/di/DependencyReflection;ZLkotlinx/coroutines/CoroutineScope;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun contains (Lio/ktor/server/plugins/di/DependencyKey;)Z
	public fun get (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getDeferred (Lio/ktor/server/plugins/di/DependencyKey;)Lkotlinx/coroutines/Deferred;
	public fun getInitializer (Lio/ktor/server/plugins/di/DependencyKey;)Lio/ktor/server/plugins/di/DependencyInitializer;
	public fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public fun named (Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public final fun stopWaiting ()V
}

public final class io/ktor/server/plugins/di/MissingDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public abstract interface class io/ktor/server/plugins/di/MutableDependencyMap : io/ktor/server/plugins/di/DependencyMap {
	public abstract fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/ktor/server/plugins/di/NoReflection : io/ktor/server/plugins/di/DependencyReflection {
	public static final field INSTANCE Lio/ktor/server/plugins/di/NoReflection;
	public fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/ktor/server/plugins/di/OutOfOrderDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public final class io/ktor/server/plugins/di/PropertyQualifier {
	public static final field INSTANCE Lio/ktor/server/plugins/di/PropertyQualifier;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface annotation class io/ktor/server/plugins/di/annotations/Named : java/lang/annotation/Annotation {
	public abstract fun value ()Ljava/lang/String;
}

public abstract interface annotation class io/ktor/server/plugins/di/annotations/Property : java/lang/annotation/Annotation {
	public abstract fun value ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/utils/Types_jvmKt {
	public static final fun hasTypeParameters (Lio/ktor/util/reflect/TypeInfo;Lkotlin/jvm/functions/Function1;)Z
	public static synthetic fun hasTypeParameters$default (Lio/ktor/util/reflect/TypeInfo;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Z
	public static final fun hierarchy (Lio/ktor/util/reflect/TypeInfo;)Lkotlin/sequences/Sequence;
	public static final fun toNullable (Lio/ktor/util/reflect/TypeInfo;)Lio/ktor/util/reflect/TypeInfo;
	public static final fun typeParametersHierarchy (Lio/ktor/util/reflect/TypeInfo;)Lkotlin/sequences/Sequence;
}

