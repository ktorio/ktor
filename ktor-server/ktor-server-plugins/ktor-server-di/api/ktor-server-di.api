public final class io/ktor/server/plugins/di/AmbiguousCreateFunction : io/ktor/server/plugins/di/DependencyCreateFunction {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;)V
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;[Lio/ktor/server/plugins/di/DependencyCreateFunction;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun component2 ()Ljava/util/Set;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;)Lio/ktor/server/plugins/di/AmbiguousCreateFunction;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/AmbiguousCreateFunction;Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Set;ILjava/lang/Object;)Lio/ktor/server/plugins/di/AmbiguousCreateFunction;
	public fun create (Lio/ktor/server/plugins/di/DependencyResolver;)Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFunctions ()Ljava/util/Set;
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/AmbiguousDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Ljava/util/Collection;)V
}

public final class io/ktor/server/plugins/di/CircularDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Ljava/util/Collection;)V
}

public final class io/ktor/server/plugins/di/DependencyAbstractTypeConstructionException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Ljava/lang/String;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyConflictPolicy {
	public abstract fun resolve (Lio/ktor/server/plugins/di/DependencyCreateFunction;Lio/ktor/server/plugins/di/DependencyCreateFunction;)Lio/ktor/server/plugins/di/DependencyConflictResult;
}

public final class io/ktor/server/plugins/di/DependencyConflictPolicyKt {
	public static final fun getDefaultConflictPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public static final fun getLastEntryWinsPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
}

public abstract interface class io/ktor/server/plugins/di/DependencyConflictResult {
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Ambiguous : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$Ambiguous;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Conflict : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$Conflict;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$KeepNew : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$KeepNew;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$KeepPrevious : io/ktor/server/plugins/di/DependencyConflictResult {
	public static final field INSTANCE Lio/ktor/server/plugins/di/DependencyConflictResult$KeepPrevious;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyConflictResult$Replace : io/ktor/server/plugins/di/DependencyConflictResult {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyCreateFunction;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyCreateFunction;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyCreateFunction;)Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;Lio/ktor/server/plugins/di/DependencyCreateFunction;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyConflictResult$Replace;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFunction ()Lio/ktor/server/plugins/di/DependencyCreateFunction;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/ktor/server/plugins/di/DependencyCreateFunction {
	public abstract fun create (Lio/ktor/server/plugins/di/DependencyResolver;)Ljava/lang/Object;
	public abstract fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
}

public final class io/ktor/server/plugins/di/DependencyInjectionConfig {
	public fun <init> ()V
	public final fun getProvider ()Lio/ktor/server/plugins/di/DependencyProvider;
	public final fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public final fun getResolution ()Lio/ktor/server/plugins/di/DependencyResolution;
	public final fun provider (Lkotlin/jvm/functions/Function1;)V
	public final fun setProvider (Lio/ktor/server/plugins/di/DependencyProvider;)V
	public final fun setReflection (Lio/ktor/server/plugins/di/DependencyReflection;)V
	public final fun setResolution (Lio/ktor/server/plugins/di/DependencyResolution;)V
}

public final class io/ktor/server/plugins/di/DependencyInjectionConfig$ProviderScope {
	public fun <init> ()V
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public final fun component2 ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public final fun component3 ()Lkotlin/jvm/functions/Function1;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;)Lio/ktor/server/plugins/di/DependencyInjectionConfig$ProviderScope;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyInjectionConfig$ProviderScope;Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyInjectionConfig$ProviderScope;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getConflictPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public final fun getKeyMapping ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public final fun getOnConflict ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public final fun setConflictPolicy (Lio/ktor/server/plugins/di/DependencyConflictPolicy;)V
	public final fun setKeyMapping (Lio/ktor/server/plugins/di/DependencyKeyCovariance;)V
	public final fun setOnConflict (Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DependencyInjectionConfig_jvmKt {
	public static final fun getDefaultReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
}

public class io/ktor/server/plugins/di/DependencyInjectionException : java/lang/IllegalArgumentException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class io/ktor/server/plugins/di/DependencyInjectionKt {
	public static final fun getDI ()Lio/ktor/server/application/ApplicationPlugin;
	public static final fun getDependencyRegistryKey ()Lio/ktor/util/AttributeKey;
}

public final class io/ktor/server/plugins/di/DependencyKey {
	public fun <init> (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;)V
	public synthetic fun <init> (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/ktor/util/reflect/TypeInfo;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyKey;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyKey;Lio/ktor/util/reflect/TypeInfo;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getType ()Lio/ktor/util/reflect/TypeInfo;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/ktor/server/plugins/di/DependencyKeyCovariance {
	public abstract fun map (Lio/ktor/server/plugins/di/DependencyKey;)Ljava/util/List;
}

public final class io/ktor/server/plugins/di/DependencyKeyCovarianceKt {
	public static final fun getSupertypes ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun getUnnamed ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun plus (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyKeyCovariance;)Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public static final fun times (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyKeyCovariance;)Lio/ktor/server/plugins/di/DependencyKeyCovariance;
}

public abstract interface class io/ktor/server/plugins/di/DependencyMap {
	public abstract fun get (Lio/ktor/server/plugins/di/DependencyKey;)Ljava/lang/Object;
	public abstract fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
}

public abstract interface class io/ktor/server/plugins/di/DependencyProvider {
	public abstract fun getDeclarations ()Ljava/util/Map;
	public abstract fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/server/plugins/di/DependencyProviderContext : io/ktor/server/plugins/di/DependencyProvider {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyProvider;)V
	public fun getDeclarations ()Ljava/util/Map;
	public fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/server/plugins/di/DependencyProviderKt {
	public static final fun ifImplicit (Lio/ktor/server/plugins/di/DependencyCreateFunction;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun invoke (Lio/ktor/server/plugins/di/DependencyProvider;Lkotlin/jvm/functions/Function1;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyReflection {
	public abstract fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public class io/ktor/server/plugins/di/DependencyReflectionJvm : io/ktor/server/plugins/di/DependencyReflection {
	public fun <init> ()V
	public fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public fun findConstructors (Lkotlin/reflect/KClass;)Ljava/util/Collection;
	public fun mapParameters (Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;
	public fun toDependencyKey (Lkotlin/reflect/KParameter;)Lio/ktor/server/plugins/di/DependencyKey;
}

public abstract interface class io/ktor/server/plugins/di/DependencyRegistry : io/ktor/server/plugins/di/DependencyProvider, io/ktor/server/plugins/di/DependencyResolver {
	public abstract fun require (Lio/ktor/server/plugins/di/DependencyKey;)V
	public abstract fun validate ()V
}

public final class io/ktor/server/plugins/di/DependencyRegistryImpl : io/ktor/server/plugins/di/DependencyProvider, io/ktor/server/plugins/di/DependencyRegistry {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyProvider;Lio/ktor/server/plugins/di/DependencyResolution;Lio/ktor/server/plugins/di/DependencyReflection;)V
	public fun get (Lio/ktor/server/plugins/di/DependencyKey;)Ljava/lang/Object;
	public fun getDeclarations ()Ljava/util/Map;
	public fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	public fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public fun require (Lio/ktor/server/plugins/di/DependencyKey;)V
	public fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
	public fun validate ()V
}

public final class io/ktor/server/plugins/di/DependencyRegistryKt {
	public static final fun getDefaultDependencyResolution ()Lio/ktor/server/plugins/di/DependencyResolution;
	public static final fun getDependencies (Lio/ktor/server/application/Application;)Lio/ktor/server/plugins/di/DependencyRegistry;
	public static final fun setDependencies (Lio/ktor/server/application/Application;Lio/ktor/server/plugins/di/DependencyRegistry;)V
}

public abstract interface class io/ktor/server/plugins/di/DependencyResolution {
	public abstract fun resolve (Lio/ktor/server/plugins/di/DependencyProvider;Lio/ktor/server/plugins/di/DependencyReflection;)Lio/ktor/server/plugins/di/DependencyResolver;
}

public final class io/ktor/server/plugins/di/DependencyResolutionKt {
	public static final fun named (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
}

public abstract interface class io/ktor/server/plugins/di/DependencyResolver : io/ktor/server/plugins/di/DependencyMap {
	public abstract fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
}

public final class io/ktor/server/plugins/di/DependencyResolverContext {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)V
	public final fun component1 ()Lio/ktor/server/plugins/di/DependencyResolver;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public static synthetic fun copy$default (Lio/ktor/server/plugins/di/DependencyResolverContext;Lio/ktor/server/plugins/di/DependencyResolver;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/server/plugins/di/DependencyResolverContext;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getResolver ()Lio/ktor/server/plugins/di/DependencyResolver;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/ktor/server/plugins/di/DuplicateDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public final class io/ktor/server/plugins/di/ExplicitCreateFunction : io/ktor/server/plugins/di/DependencyCreateFunction {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
	public fun create (Lio/ktor/server/plugins/di/DependencyResolver;)Ljava/lang/Object;
	public final fun derived ()Lio/ktor/server/plugins/di/ImplicitCreateFunction;
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
}

public final class io/ktor/server/plugins/di/ImplicitCreateFunction : io/ktor/server/plugins/di/DependencyCreateFunction {
	public fun <init> (Lio/ktor/server/plugins/di/ExplicitCreateFunction;)V
	public fun create (Lio/ktor/server/plugins/di/DependencyResolver;)Ljava/lang/Object;
	public fun getKey ()Lio/ktor/server/plugins/di/DependencyKey;
	public final fun getOrigin ()Lio/ktor/server/plugins/di/ExplicitCreateFunction;
}

public final class io/ktor/server/plugins/di/InvalidDependencyReferenceException : io/ktor/server/plugins/di/DependencyInjectionException {
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public class io/ktor/server/plugins/di/MapDependencyProvider : io/ktor/server/plugins/di/DependencyProvider {
	public fun <init> ()V
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;Lorg/slf4j/Logger;)V
	public synthetic fun <init> (Lio/ktor/server/plugins/di/DependencyKeyCovariance;Lio/ktor/server/plugins/di/DependencyConflictPolicy;Lkotlin/jvm/functions/Function1;Lorg/slf4j/Logger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getConflictPolicy ()Lio/ktor/server/plugins/di/DependencyConflictPolicy;
	public fun getDeclarations ()Ljava/util/Map;
	public final fun getKeyMapping ()Lio/ktor/server/plugins/di/DependencyKeyCovariance;
	public final fun getOnConflict ()Lkotlin/jvm/functions/Function1;
	public fun set (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/server/plugins/di/MapDependencyResolver : io/ktor/server/plugins/di/DependencyResolver {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyReflection;Ljava/util/Map;)V
	public fun get (Lio/ktor/server/plugins/di/DependencyKey;)Ljava/lang/Object;
	public fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	public fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
}

public final class io/ktor/server/plugins/di/MissingDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public final class io/ktor/server/plugins/di/NoReflection : io/ktor/server/plugins/di/DependencyReflection {
	public static final field INSTANCE Lio/ktor/server/plugins/di/NoReflection;
	public fun create (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public final class io/ktor/server/plugins/di/OutOfOrderDependencyException : io/ktor/server/plugins/di/DependencyInjectionException {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyKey;)V
}

public final class io/ktor/server/plugins/di/PluginModuleInjector : io/ktor/server/application/ApplicationModuleInjector {
	public fun <init> ()V
	public fun resolveParameter (Lio/ktor/server/application/Application;Lkotlin/reflect/KParameter;)Ljava/lang/Object;
}

public final class io/ktor/server/plugins/di/ProcessingDependencyResolver : io/ktor/server/plugins/di/DependencyResolver {
	public fun <init> (Lio/ktor/server/plugins/di/DependencyReflection;Lio/ktor/server/plugins/di/DependencyProvider;)V
	public fun get (Lio/ktor/server/plugins/di/DependencyKey;)Ljava/lang/Object;
	public fun getOrPut (Lio/ktor/server/plugins/di/DependencyKey;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	public fun getReflection ()Lio/ktor/server/plugins/di/DependencyReflection;
	public final fun resolveAll ()Ljava/util/Map;
}

public final class io/ktor/server/plugins/di/utils/Types_jvmKt {
	public static final fun hierarchy (Lio/ktor/util/reflect/TypeInfo;)Ljava/util/List;
}

