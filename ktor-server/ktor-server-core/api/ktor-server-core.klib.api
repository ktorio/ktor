// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.ktor:ktor-server-core>
open annotation class io.ktor.server.response/UseHttp2Push : kotlin/Annotation { // io.ktor.server.response/UseHttp2Push|null[0]
    constructor <init>() // io.ktor.server.response/UseHttp2Push.<init>|<init>(){}[0]
}

final enum class io.ktor.server.routing/RoutingPathSegmentKind : kotlin/Enum<io.ktor.server.routing/RoutingPathSegmentKind> { // io.ktor.server.routing/RoutingPathSegmentKind|null[0]
    enum entry Constant // io.ktor.server.routing/RoutingPathSegmentKind.Constant|null[0]
    enum entry Parameter // io.ktor.server.routing/RoutingPathSegmentKind.Parameter|null[0]

    final val entries // io.ktor.server.routing/RoutingPathSegmentKind.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.ktor.server.routing/RoutingPathSegmentKind> // io.ktor.server.routing/RoutingPathSegmentKind.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): io.ktor.server.routing/RoutingPathSegmentKind // io.ktor.server.routing/RoutingPathSegmentKind.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.ktor.server.routing/RoutingPathSegmentKind> // io.ktor.server.routing/RoutingPathSegmentKind.values|values#static(){}[0]
}

abstract interface <#A: in io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: out kotlin/Any, #C: kotlin/Any> io.ktor.server.application/BaseApplicationPlugin : io.ktor.server.application/Plugin<#A, #B, #C> // io.ktor.server.application/BaseApplicationPlugin|null[0]

abstract interface <#A: in io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: out kotlin/Any, #C: kotlin/Any> io.ktor.server.application/Plugin { // io.ktor.server.application/Plugin|null[0]
    abstract val key // io.ktor.server.application/Plugin.key|{}key[0]
        abstract fun <get-key>(): io.ktor.util/AttributeKey<#C> // io.ktor.server.application/Plugin.key.<get-key>|<get-key>(){}[0]

    abstract fun install(#A, kotlin/Function1<#B, kotlin/Unit>): #C // io.ktor.server.application/Plugin.install|install(1:0;kotlin.Function1<1:1,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any, #B: kotlin/Any> io.ktor.server.application/BaseRouteScopedPlugin : io.ktor.server.application/Plugin<io.ktor.server.application/ApplicationCallPipeline, #A, #B> // io.ktor.server.application/BaseRouteScopedPlugin|null[0]

abstract interface <#A: kotlin/Any> io.ktor.server.application/RouteScopedPlugin : io.ktor.server.application/BaseRouteScopedPlugin<#A, io.ktor.server.application/PluginInstance> // io.ktor.server.application/RouteScopedPlugin|null[0]

abstract interface <#A: kotlin/Any?> io.ktor.server.application/Hook { // io.ktor.server.application/Hook|null[0]
    abstract fun install(io.ktor.server.application/ApplicationCallPipeline, #A) // io.ktor.server.application/Hook.install|install(io.ktor.server.application.ApplicationCallPipeline;1:0){}[0]
}

abstract interface <#A: out io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.ktor.server.engine/ApplicationEngineFactory { // io.ktor.server.engine/ApplicationEngineFactory|null[0]
    abstract fun configuration(kotlin/Function1<#B, kotlin/Unit>): #B // io.ktor.server.engine/ApplicationEngineFactory.configuration|configuration(kotlin.Function1<1:1,kotlin.Unit>){}[0]
    abstract fun create(io.ktor.server.application/ApplicationEnvironment, io.ktor.events/Events, kotlin/Boolean, #B, kotlin/Function0<io.ktor.server.application/Application>): #A // io.ktor.server.engine/ApplicationEngineFactory.create|create(io.ktor.server.application.ApplicationEnvironment;io.ktor.events.Events;kotlin.Boolean;1:1;kotlin.Function0<io.ktor.server.application.Application>){}[0]
}

abstract interface <#A: out kotlin/Any> io.ktor.server.application/ApplicationPlugin : io.ktor.server.application/BaseApplicationPlugin<io.ktor.server.application/Application, #A, io.ktor.server.application/PluginInstance> // io.ktor.server.application/ApplicationPlugin|null[0]

abstract interface io.ktor.server.application/ApplicationCall : kotlinx.coroutines/CoroutineScope { // io.ktor.server.application/ApplicationCall|null[0]
    abstract val application // io.ktor.server.application/ApplicationCall.application|{}application[0]
        abstract fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.application/ApplicationCall.application.<get-application>|<get-application>(){}[0]
    abstract val attributes // io.ktor.server.application/ApplicationCall.attributes|{}attributes[0]
        abstract fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.application/ApplicationCall.attributes.<get-attributes>|<get-attributes>(){}[0]
    abstract val parameters // io.ktor.server.application/ApplicationCall.parameters|{}parameters[0]
        abstract fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.application/ApplicationCall.parameters.<get-parameters>|<get-parameters>(){}[0]
    abstract val request // io.ktor.server.application/ApplicationCall.request|{}request[0]
        abstract fun <get-request>(): io.ktor.server.request/ApplicationRequest // io.ktor.server.application/ApplicationCall.request.<get-request>|<get-request>(){}[0]
    abstract val response // io.ktor.server.application/ApplicationCall.response|{}response[0]
        abstract fun <get-response>(): io.ktor.server.response/ApplicationResponse // io.ktor.server.application/ApplicationCall.response.<get-response>|<get-response>(){}[0]

    abstract suspend fun <#A1: kotlin/Any?> receiveNullable(io.ktor.util.reflect/TypeInfo): #A1? // io.ktor.server.application/ApplicationCall.receiveNullable|receiveNullable(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any?>}[0]
    abstract suspend fun respond(kotlin/Any?, io.ktor.util.reflect/TypeInfo?) // io.ktor.server.application/ApplicationCall.respond|respond(kotlin.Any?;io.ktor.util.reflect.TypeInfo?){}[0]
}

abstract interface io.ktor.server.application/ApplicationEnvironment { // io.ktor.server.application/ApplicationEnvironment|null[0]
    abstract val config // io.ktor.server.application/ApplicationEnvironment.config|{}config[0]
        abstract fun <get-config>(): io.ktor.server.config/ApplicationConfig // io.ktor.server.application/ApplicationEnvironment.config.<get-config>|<get-config>(){}[0]
    abstract val log // io.ktor.server.application/ApplicationEnvironment.log|{}log[0]
        abstract fun <get-log>(): io.ktor.util.logging/Logger // io.ktor.server.application/ApplicationEnvironment.log.<get-log>|<get-log>(){}[0]
    abstract val monitor // io.ktor.server.application/ApplicationEnvironment.monitor|{}monitor[0]
        abstract fun <get-monitor>(): io.ktor.events/Events // io.ktor.server.application/ApplicationEnvironment.monitor.<get-monitor>|<get-monitor>(){}[0]
}

abstract interface io.ktor.server.application/PipelineCall : io.ktor.server.application/ApplicationCall { // io.ktor.server.application/PipelineCall|null[0]
    abstract val request // io.ktor.server.application/PipelineCall.request|{}request[0]
        abstract fun <get-request>(): io.ktor.server.request/PipelineRequest // io.ktor.server.application/PipelineCall.request.<get-request>|<get-request>(){}[0]
    abstract val response // io.ktor.server.application/PipelineCall.response|{}response[0]
        abstract fun <get-response>(): io.ktor.server.response/PipelineResponse // io.ktor.server.application/PipelineCall.response.<get-response>|<get-response>(){}[0]

    open suspend fun <#A1: kotlin/Any?> receiveNullable(io.ktor.util.reflect/TypeInfo): #A1? // io.ktor.server.application/PipelineCall.receiveNullable|receiveNullable(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any?>}[0]
    open suspend fun respond(kotlin/Any?, io.ktor.util.reflect/TypeInfo?) // io.ktor.server.application/PipelineCall.respond|respond(kotlin.Any?;io.ktor.util.reflect.TypeInfo?){}[0]
}

abstract interface io.ktor.server.config/ApplicationConfig { // io.ktor.server.config/ApplicationConfig|null[0]
    abstract fun config(kotlin/String): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/ApplicationConfig.config|config(kotlin.String){}[0]
    abstract fun configList(kotlin/String): kotlin.collections/List<io.ktor.server.config/ApplicationConfig> // io.ktor.server.config/ApplicationConfig.configList|configList(kotlin.String){}[0]
    abstract fun keys(): kotlin.collections/Set<kotlin/String> // io.ktor.server.config/ApplicationConfig.keys|keys(){}[0]
    abstract fun property(kotlin/String): io.ktor.server.config/ApplicationConfigValue // io.ktor.server.config/ApplicationConfig.property|property(kotlin.String){}[0]
    abstract fun propertyOrNull(kotlin/String): io.ktor.server.config/ApplicationConfigValue? // io.ktor.server.config/ApplicationConfig.propertyOrNull|propertyOrNull(kotlin.String){}[0]
    abstract fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.server.config/ApplicationConfig.toMap|toMap(){}[0]
}

abstract interface io.ktor.server.config/ApplicationConfigValue { // io.ktor.server.config/ApplicationConfigValue|null[0]
    abstract fun getList(): kotlin.collections/List<kotlin/String> // io.ktor.server.config/ApplicationConfigValue.getList|getList(){}[0]
    abstract fun getString(): kotlin/String // io.ktor.server.config/ApplicationConfigValue.getString|getString(){}[0]
}

abstract interface io.ktor.server.config/ConfigLoader { // io.ktor.server.config/ConfigLoader|null[0]
    abstract fun load(kotlin/String?): io.ktor.server.config/ApplicationConfig? // io.ktor.server.config/ConfigLoader.load|load(kotlin.String?){}[0]

    final object Companion { // io.ktor.server.config/ConfigLoader.Companion|null[0]
        final fun load(kotlin/String? = ...): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/ConfigLoader.Companion.load|load(kotlin.String?){}[0]
    }
}

abstract interface io.ktor.server.engine/ApplicationEngine { // io.ktor.server.engine/ApplicationEngine|null[0]
    abstract val environment // io.ktor.server.engine/ApplicationEngine.environment|{}environment[0]
        abstract fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/ApplicationEngine.environment.<get-environment>|<get-environment>(){}[0]

    abstract fun start(kotlin/Boolean = ...): io.ktor.server.engine/ApplicationEngine // io.ktor.server.engine/ApplicationEngine.start|start(kotlin.Boolean){}[0]
    abstract fun stop(kotlin/Long = ..., kotlin/Long = ...) // io.ktor.server.engine/ApplicationEngine.stop|stop(kotlin.Long;kotlin.Long){}[0]
    abstract suspend fun resolvedConnectors(): kotlin.collections/List<io.ktor.server.engine/EngineConnectorConfig> // io.ktor.server.engine/ApplicationEngine.resolvedConnectors|resolvedConnectors(){}[0]
    open suspend fun startSuspend(kotlin/Boolean = ...): io.ktor.server.engine/ApplicationEngine // io.ktor.server.engine/ApplicationEngine.startSuspend|startSuspend(kotlin.Boolean){}[0]
    open suspend fun stopSuspend(kotlin/Long = ..., kotlin/Long = ...) // io.ktor.server.engine/ApplicationEngine.stopSuspend|stopSuspend(kotlin.Long;kotlin.Long){}[0]

    open class Configuration { // io.ktor.server.engine/ApplicationEngine.Configuration|null[0]
        constructor <init>() // io.ktor.server.engine/ApplicationEngine.Configuration.<init>|<init>(){}[0]

        final val parallelism // io.ktor.server.engine/ApplicationEngine.Configuration.parallelism|{}parallelism[0]
            final fun <get-parallelism>(): kotlin/Int // io.ktor.server.engine/ApplicationEngine.Configuration.parallelism.<get-parallelism>|<get-parallelism>(){}[0]

        final var callGroupSize // io.ktor.server.engine/ApplicationEngine.Configuration.callGroupSize|{}callGroupSize[0]
            final fun <get-callGroupSize>(): kotlin/Int // io.ktor.server.engine/ApplicationEngine.Configuration.callGroupSize.<get-callGroupSize>|<get-callGroupSize>(){}[0]
            final fun <set-callGroupSize>(kotlin/Int) // io.ktor.server.engine/ApplicationEngine.Configuration.callGroupSize.<set-callGroupSize>|<set-callGroupSize>(kotlin.Int){}[0]
        final var connectionGroupSize // io.ktor.server.engine/ApplicationEngine.Configuration.connectionGroupSize|{}connectionGroupSize[0]
            final fun <get-connectionGroupSize>(): kotlin/Int // io.ktor.server.engine/ApplicationEngine.Configuration.connectionGroupSize.<get-connectionGroupSize>|<get-connectionGroupSize>(){}[0]
            final fun <set-connectionGroupSize>(kotlin/Int) // io.ktor.server.engine/ApplicationEngine.Configuration.connectionGroupSize.<set-connectionGroupSize>|<set-connectionGroupSize>(kotlin.Int){}[0]
        final var connectors // io.ktor.server.engine/ApplicationEngine.Configuration.connectors|{}connectors[0]
            final fun <get-connectors>(): kotlin.collections/MutableList<io.ktor.server.engine/EngineConnectorConfig> // io.ktor.server.engine/ApplicationEngine.Configuration.connectors.<get-connectors>|<get-connectors>(){}[0]
            final fun <set-connectors>(kotlin.collections/MutableList<io.ktor.server.engine/EngineConnectorConfig>) // io.ktor.server.engine/ApplicationEngine.Configuration.connectors.<set-connectors>|<set-connectors>(kotlin.collections.MutableList<io.ktor.server.engine.EngineConnectorConfig>){}[0]
        final var shutdownGracePeriod // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownGracePeriod|{}shutdownGracePeriod[0]
            final fun <get-shutdownGracePeriod>(): kotlin/Long // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownGracePeriod.<get-shutdownGracePeriod>|<get-shutdownGracePeriod>(){}[0]
            final fun <set-shutdownGracePeriod>(kotlin/Long) // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownGracePeriod.<set-shutdownGracePeriod>|<set-shutdownGracePeriod>(kotlin.Long){}[0]
        final var shutdownTimeout // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownTimeout|{}shutdownTimeout[0]
            final fun <get-shutdownTimeout>(): kotlin/Long // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownTimeout.<get-shutdownTimeout>|<get-shutdownTimeout>(){}[0]
            final fun <set-shutdownTimeout>(kotlin/Long) // io.ktor.server.engine/ApplicationEngine.Configuration.shutdownTimeout.<set-shutdownTimeout>|<set-shutdownTimeout>(kotlin.Long){}[0]
        final var workerGroupSize // io.ktor.server.engine/ApplicationEngine.Configuration.workerGroupSize|{}workerGroupSize[0]
            final fun <get-workerGroupSize>(): kotlin/Int // io.ktor.server.engine/ApplicationEngine.Configuration.workerGroupSize.<get-workerGroupSize>|<get-workerGroupSize>(){}[0]
            final fun <set-workerGroupSize>(kotlin/Int) // io.ktor.server.engine/ApplicationEngine.Configuration.workerGroupSize.<set-workerGroupSize>|<set-workerGroupSize>(kotlin.Int){}[0]

        final fun takeFrom(io.ktor.server.engine/ApplicationEngine.Configuration) // io.ktor.server.engine/ApplicationEngine.Configuration.takeFrom|takeFrom(io.ktor.server.engine.ApplicationEngine.Configuration){}[0]
    }
}

abstract interface io.ktor.server.engine/EngineConnectorConfig { // io.ktor.server.engine/EngineConnectorConfig|null[0]
    abstract val host // io.ktor.server.engine/EngineConnectorConfig.host|{}host[0]
        abstract fun <get-host>(): kotlin/String // io.ktor.server.engine/EngineConnectorConfig.host.<get-host>|<get-host>(){}[0]
    abstract val port // io.ktor.server.engine/EngineConnectorConfig.port|{}port[0]
        abstract fun <get-port>(): kotlin/Int // io.ktor.server.engine/EngineConnectorConfig.port.<get-port>|<get-port>(){}[0]
    abstract val type // io.ktor.server.engine/EngineConnectorConfig.type|{}type[0]
        abstract fun <get-type>(): io.ktor.server.engine/ConnectorType // io.ktor.server.engine/EngineConnectorConfig.type.<get-type>|<get-type>(){}[0]
}

abstract interface io.ktor.server.logging/MDCProvider { // io.ktor.server.logging/MDCProvider|null[0]
    abstract suspend fun withMDCBlock(io.ktor.server.application/ApplicationCall, kotlin.coroutines/SuspendFunction0<kotlin/Unit>) // io.ktor.server.logging/MDCProvider.withMDCBlock|withMDCBlock(io.ktor.server.application.ApplicationCall;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
}

abstract interface io.ktor.server.request/ApplicationRequest { // io.ktor.server.request/ApplicationRequest|null[0]
    abstract val call // io.ktor.server.request/ApplicationRequest.call|{}call[0]
        abstract fun <get-call>(): io.ktor.server.application/ApplicationCall // io.ktor.server.request/ApplicationRequest.call.<get-call>|<get-call>(){}[0]
    abstract val cookies // io.ktor.server.request/ApplicationRequest.cookies|{}cookies[0]
        abstract fun <get-cookies>(): io.ktor.server.request/RequestCookies // io.ktor.server.request/ApplicationRequest.cookies.<get-cookies>|<get-cookies>(){}[0]
    abstract val headers // io.ktor.server.request/ApplicationRequest.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.http/Headers // io.ktor.server.request/ApplicationRequest.headers.<get-headers>|<get-headers>(){}[0]
    abstract val local // io.ktor.server.request/ApplicationRequest.local|{}local[0]
        abstract fun <get-local>(): io.ktor.http/RequestConnectionPoint // io.ktor.server.request/ApplicationRequest.local.<get-local>|<get-local>(){}[0]
    abstract val queryParameters // io.ktor.server.request/ApplicationRequest.queryParameters|{}queryParameters[0]
        abstract fun <get-queryParameters>(): io.ktor.http/Parameters // io.ktor.server.request/ApplicationRequest.queryParameters.<get-queryParameters>|<get-queryParameters>(){}[0]
    abstract val rawQueryParameters // io.ktor.server.request/ApplicationRequest.rawQueryParameters|{}rawQueryParameters[0]
        abstract fun <get-rawQueryParameters>(): io.ktor.http/Parameters // io.ktor.server.request/ApplicationRequest.rawQueryParameters.<get-rawQueryParameters>|<get-rawQueryParameters>(){}[0]

    abstract fun receiveChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.request/ApplicationRequest.receiveChannel|receiveChannel(){}[0]
}

abstract interface io.ktor.server.request/PipelineRequest : io.ktor.server.request/ApplicationRequest { // io.ktor.server.request/PipelineRequest|null[0]
    abstract val call // io.ktor.server.request/PipelineRequest.call|{}call[0]
        abstract fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.request/PipelineRequest.call.<get-call>|<get-call>(){}[0]
    abstract val pipeline // io.ktor.server.request/PipelineRequest.pipeline|{}pipeline[0]
        abstract fun <get-pipeline>(): io.ktor.server.request/ApplicationReceivePipeline // io.ktor.server.request/PipelineRequest.pipeline.<get-pipeline>|<get-pipeline>(){}[0]

    abstract fun setHeader(kotlin/String, kotlin.collections/List<kotlin/String>?) // io.ktor.server.request/PipelineRequest.setHeader|setHeader(kotlin.String;kotlin.collections.List<kotlin.String>?){}[0]
    abstract fun setReceiveChannel(io.ktor.utils.io/ByteReadChannel) // io.ktor.server.request/PipelineRequest.setReceiveChannel|setReceiveChannel(io.ktor.utils.io.ByteReadChannel){}[0]
}

abstract interface io.ktor.server.response/ApplicationResponse { // io.ktor.server.response/ApplicationResponse|null[0]
    abstract val call // io.ktor.server.response/ApplicationResponse.call|{}call[0]
        abstract fun <get-call>(): io.ktor.server.application/ApplicationCall // io.ktor.server.response/ApplicationResponse.call.<get-call>|<get-call>(){}[0]
    abstract val cookies // io.ktor.server.response/ApplicationResponse.cookies|{}cookies[0]
        abstract fun <get-cookies>(): io.ktor.server.response/ResponseCookies // io.ktor.server.response/ApplicationResponse.cookies.<get-cookies>|<get-cookies>(){}[0]
    abstract val headers // io.ktor.server.response/ApplicationResponse.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.server.response/ResponseHeaders // io.ktor.server.response/ApplicationResponse.headers.<get-headers>|<get-headers>(){}[0]
    abstract val isCommitted // io.ktor.server.response/ApplicationResponse.isCommitted|{}isCommitted[0]
        abstract fun <get-isCommitted>(): kotlin/Boolean // io.ktor.server.response/ApplicationResponse.isCommitted.<get-isCommitted>|<get-isCommitted>(){}[0]
    abstract val isSent // io.ktor.server.response/ApplicationResponse.isSent|{}isSent[0]
        abstract fun <get-isSent>(): kotlin/Boolean // io.ktor.server.response/ApplicationResponse.isSent.<get-isSent>|<get-isSent>(){}[0]

    abstract fun push(io.ktor.server.response/ResponsePushBuilder) // io.ktor.server.response/ApplicationResponse.push|push(io.ktor.server.response.ResponsePushBuilder){}[0]
    abstract fun status(): io.ktor.http/HttpStatusCode? // io.ktor.server.response/ApplicationResponse.status|status(){}[0]
    abstract fun status(io.ktor.http/HttpStatusCode) // io.ktor.server.response/ApplicationResponse.status|status(io.ktor.http.HttpStatusCode){}[0]
}

abstract interface io.ktor.server.response/PipelineResponse : io.ktor.server.response/ApplicationResponse { // io.ktor.server.response/PipelineResponse|null[0]
    abstract val call // io.ktor.server.response/PipelineResponse.call|{}call[0]
        abstract fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.response/PipelineResponse.call.<get-call>|<get-call>(){}[0]
    abstract val pipeline // io.ktor.server.response/PipelineResponse.pipeline|{}pipeline[0]
        abstract fun <get-pipeline>(): io.ktor.server.response/ApplicationSendPipeline // io.ktor.server.response/PipelineResponse.pipeline.<get-pipeline>|<get-pipeline>(){}[0]
}

abstract interface io.ktor.server.response/ResponsePushBuilder { // io.ktor.server.response/ResponsePushBuilder|null[0]
    abstract val headers // io.ktor.server.response/ResponsePushBuilder.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.http/HeadersBuilder // io.ktor.server.response/ResponsePushBuilder.headers.<get-headers>|<get-headers>(){}[0]
    abstract val url // io.ktor.server.response/ResponsePushBuilder.url|{}url[0]
        abstract fun <get-url>(): io.ktor.http/URLBuilder // io.ktor.server.response/ResponsePushBuilder.url.<get-url>|<get-url>(){}[0]
    abstract val versions // io.ktor.server.response/ResponsePushBuilder.versions|{}versions[0]
        abstract fun <get-versions>(): kotlin.collections/MutableList<io.ktor.http.content/Version> // io.ktor.server.response/ResponsePushBuilder.versions.<get-versions>|<get-versions>(){}[0]

    abstract var method // io.ktor.server.response/ResponsePushBuilder.method|{}method[0]
        abstract fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.server.response/ResponsePushBuilder.method.<get-method>|<get-method>(){}[0]
        abstract fun <set-method>(io.ktor.http/HttpMethod) // io.ktor.server.response/ResponsePushBuilder.method.<set-method>|<set-method>(io.ktor.http.HttpMethod){}[0]
}

abstract interface io.ktor.server.routing/Route { // io.ktor.server.routing/Route|null[0]
    abstract val attributes // io.ktor.server.routing/Route.attributes|{}attributes[0]
        abstract fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.routing/Route.attributes.<get-attributes>|<get-attributes>(){}[0]
    abstract val environment // io.ktor.server.routing/Route.environment|{}environment[0]
        abstract fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.routing/Route.environment.<get-environment>|<get-environment>(){}[0]
    abstract val parent // io.ktor.server.routing/Route.parent|{}parent[0]
        abstract fun <get-parent>(): io.ktor.server.routing/Route? // io.ktor.server.routing/Route.parent.<get-parent>|<get-parent>(){}[0]

    abstract fun <#A1: kotlin/Any, #B1: kotlin/Any> install(io.ktor.server.application/Plugin<io.ktor.server.application/ApplicationCallPipeline, #A1, #B1>, kotlin/Function1<#A1, kotlin/Unit> = ...): #B1 // io.ktor.server.routing/Route.install|install(io.ktor.server.application.Plugin<io.ktor.server.application.ApplicationCallPipeline,0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> plugin(io.ktor.server.application/Plugin<*, *, #A1>): #A1 // io.ktor.server.routing/Route.plugin|plugin(io.ktor.server.application.Plugin<*,*,0:0>){0ยง<kotlin.Any>}[0]
    abstract fun createChild(io.ktor.server.routing/RouteSelector): io.ktor.server.routing/Route // io.ktor.server.routing/Route.createChild|createChild(io.ktor.server.routing.RouteSelector){}[0]
    abstract fun handle(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>) // io.ktor.server.routing/Route.handle|handle(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
}

abstract interface io.ktor.server.routing/Routing : io.ktor.server.routing/Route { // io.ktor.server.routing/Routing|null[0]
    abstract fun trace(kotlin/Function1<io.ktor.server.routing/RoutingResolveTrace, kotlin/Unit>) // io.ktor.server.routing/Routing.trace|trace(kotlin.Function1<io.ktor.server.routing.RoutingResolveTrace,kotlin.Unit>){}[0]
}

abstract class <#A: kotlin/Any> io.ktor.server.application/PluginBuilder { // io.ktor.server.application/PluginBuilder|null[0]
    abstract val application // io.ktor.server.application/PluginBuilder.application|{}application[0]
        abstract fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.application/PluginBuilder.application.<get-application>|<get-application>(){}[0]
    abstract val pluginConfig // io.ktor.server.application/PluginBuilder.pluginConfig|{}pluginConfig[0]
        abstract fun <get-pluginConfig>(): #A // io.ktor.server.application/PluginBuilder.pluginConfig.<get-pluginConfig>|<get-pluginConfig>(){}[0]
    final val applicationConfig // io.ktor.server.application/PluginBuilder.applicationConfig|{}applicationConfig[0]
        final fun <get-applicationConfig>(): io.ktor.server.config/ApplicationConfig // io.ktor.server.application/PluginBuilder.applicationConfig.<get-applicationConfig>|<get-applicationConfig>(){}[0]
    final val environment // io.ktor.server.application/PluginBuilder.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.application/PluginBuilder.environment.<get-environment>|<get-environment>(){}[0]

    final fun <#A1: kotlin/Any?> on(io.ktor.server.application/Hook<#A1>, #A1) // io.ktor.server.application/PluginBuilder.on|on(io.ktor.server.application.Hook<0:0>;0:0){0ยง<kotlin.Any?>}[0]
    final fun onCall(kotlin.coroutines/SuspendFunction2<io.ktor.server.application/OnCallContext<#A>, io.ktor.server.application/PipelineCall, kotlin/Unit>) // io.ktor.server.application/PluginBuilder.onCall|onCall(kotlin.coroutines.SuspendFunction2<io.ktor.server.application.OnCallContext<1:0>,io.ktor.server.application.PipelineCall,kotlin.Unit>){}[0]
    final fun onCallReceive(kotlin.coroutines/SuspendFunction2<io.ktor.server.application/OnCallReceiveContext<#A>, io.ktor.server.application/PipelineCall, kotlin/Unit>) // io.ktor.server.application/PluginBuilder.onCallReceive|onCallReceive(kotlin.coroutines.SuspendFunction2<io.ktor.server.application.OnCallReceiveContext<1:0>,io.ktor.server.application.PipelineCall,kotlin.Unit>){}[0]
    final fun onCallReceive(kotlin.coroutines/SuspendFunction3<io.ktor.server.application/OnCallReceiveContext<#A>, io.ktor.server.application/PipelineCall, kotlin/Any, kotlin/Unit>) // io.ktor.server.application/PluginBuilder.onCallReceive|onCallReceive(kotlin.coroutines.SuspendFunction3<io.ktor.server.application.OnCallReceiveContext<1:0>,io.ktor.server.application.PipelineCall,kotlin.Any,kotlin.Unit>){}[0]
    final fun onCallRespond(kotlin.coroutines/SuspendFunction2<io.ktor.server.application/OnCallRespondContext<#A>, io.ktor.server.application/PipelineCall, kotlin/Unit>) // io.ktor.server.application/PluginBuilder.onCallRespond|onCallRespond(kotlin.coroutines.SuspendFunction2<io.ktor.server.application.OnCallRespondContext<1:0>,io.ktor.server.application.PipelineCall,kotlin.Unit>){}[0]
    final fun onCallRespond(kotlin.coroutines/SuspendFunction3<io.ktor.server.application/OnCallRespondContext<#A>, io.ktor.server.application/PipelineCall, kotlin/Any, kotlin/Unit>) // io.ktor.server.application/PluginBuilder.onCallRespond|onCallRespond(kotlin.coroutines.SuspendFunction3<io.ktor.server.application.OnCallRespondContext<1:0>,io.ktor.server.application.PipelineCall,kotlin.Any,kotlin.Unit>){}[0]
}

abstract class <#A: kotlin/Any> io.ktor.server.application/RouteScopedPluginBuilder : io.ktor.server.application/PluginBuilder<#A> { // io.ktor.server.application/RouteScopedPluginBuilder|null[0]
    constructor <init>(io.ktor.util/AttributeKey<io.ktor.server.application/PluginInstance>) // io.ktor.server.application/RouteScopedPluginBuilder.<init>|<init>(io.ktor.util.AttributeKey<io.ktor.server.application.PluginInstance>){}[0]

    abstract val route // io.ktor.server.application/RouteScopedPluginBuilder.route|{}route[0]
        abstract fun <get-route>(): io.ktor.server.routing/RoutingNode? // io.ktor.server.application/RouteScopedPluginBuilder.route.<get-route>|<get-route>(){}[0]
}

abstract class io.ktor.server.engine/BaseApplicationCall : io.ktor.server.application/PipelineCall { // io.ktor.server.engine/BaseApplicationCall|null[0]
    constructor <init>(io.ktor.server.application/Application) // io.ktor.server.engine/BaseApplicationCall.<init>|<init>(io.ktor.server.application.Application){}[0]

    abstract val request // io.ktor.server.engine/BaseApplicationCall.request|{}request[0]
        abstract fun <get-request>(): io.ktor.server.engine/BaseApplicationRequest // io.ktor.server.engine/BaseApplicationCall.request.<get-request>|<get-request>(){}[0]
    abstract val response // io.ktor.server.engine/BaseApplicationCall.response|{}response[0]
        abstract fun <get-response>(): io.ktor.server.engine/BaseApplicationResponse // io.ktor.server.engine/BaseApplicationCall.response.<get-response>|<get-response>(){}[0]
    final val application // io.ktor.server.engine/BaseApplicationCall.application|{}application[0]
        final fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.engine/BaseApplicationCall.application.<get-application>|<get-application>(){}[0]
    final val attributes // io.ktor.server.engine/BaseApplicationCall.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.engine/BaseApplicationCall.attributes.<get-attributes>|<get-attributes>(){}[0]
    open val parameters // io.ktor.server.engine/BaseApplicationCall.parameters|{}parameters[0]
        open fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.engine/BaseApplicationCall.parameters.<get-parameters>|<get-parameters>(){}[0]

    final fun putResponseAttribute(io.ktor.server.engine/BaseApplicationResponse = ...) // io.ktor.server.engine/BaseApplicationCall.putResponseAttribute|putResponseAttribute(io.ktor.server.engine.BaseApplicationResponse){}[0]
}

abstract class io.ktor.server.engine/BaseApplicationEngine : io.ktor.server.engine/ApplicationEngine { // io.ktor.server.engine/BaseApplicationEngine|null[0]
    constructor <init>(io.ktor.server.application/ApplicationEnvironment, io.ktor.events/Events, kotlin/Boolean, io.ktor.server.engine/EnginePipeline = ...) // io.ktor.server.engine/BaseApplicationEngine.<init>|<init>(io.ktor.server.application.ApplicationEnvironment;io.ktor.events.Events;kotlin.Boolean;io.ktor.server.engine.EnginePipeline){}[0]

    final val environment // io.ktor.server.engine/BaseApplicationEngine.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/BaseApplicationEngine.environment.<get-environment>|<get-environment>(){}[0]
    final val monitor // io.ktor.server.engine/BaseApplicationEngine.monitor|{}monitor[0]
        final fun <get-monitor>(): io.ktor.events/Events // io.ktor.server.engine/BaseApplicationEngine.monitor.<get-monitor>|<get-monitor>(){}[0]
    final val pipeline // io.ktor.server.engine/BaseApplicationEngine.pipeline|{}pipeline[0]
        final fun <get-pipeline>(): io.ktor.server.engine/EnginePipeline // io.ktor.server.engine/BaseApplicationEngine.pipeline.<get-pipeline>|<get-pipeline>(){}[0]
    final val resolvedConnectorsDeferred // io.ktor.server.engine/BaseApplicationEngine.resolvedConnectorsDeferred|{}resolvedConnectorsDeferred[0]
        final fun <get-resolvedConnectorsDeferred>(): kotlinx.coroutines/CompletableDeferred<kotlin.collections/List<io.ktor.server.engine/EngineConnectorConfig>> // io.ktor.server.engine/BaseApplicationEngine.resolvedConnectorsDeferred.<get-resolvedConnectorsDeferred>|<get-resolvedConnectorsDeferred>(){}[0]

    open suspend fun resolvedConnectors(): kotlin.collections/List<io.ktor.server.engine/EngineConnectorConfig> // io.ktor.server.engine/BaseApplicationEngine.resolvedConnectors|resolvedConnectors(){}[0]

    open class Configuration : io.ktor.server.engine/ApplicationEngine.Configuration { // io.ktor.server.engine/BaseApplicationEngine.Configuration|null[0]
        constructor <init>() // io.ktor.server.engine/BaseApplicationEngine.Configuration.<init>|<init>(){}[0]
    }
}

abstract class io.ktor.server.engine/BaseApplicationRequest : io.ktor.server.request/PipelineRequest { // io.ktor.server.engine/BaseApplicationRequest|null[0]
    constructor <init>(io.ktor.server.application/PipelineCall) // io.ktor.server.engine/BaseApplicationRequest.<init>|<init>(io.ktor.server.application.PipelineCall){}[0]

    abstract val engineHeaders // io.ktor.server.engine/BaseApplicationRequest.engineHeaders|{}engineHeaders[0]
        abstract fun <get-engineHeaders>(): io.ktor.http/Headers // io.ktor.server.engine/BaseApplicationRequest.engineHeaders.<get-engineHeaders>|<get-engineHeaders>(){}[0]
    abstract val engineReceiveChannel // io.ktor.server.engine/BaseApplicationRequest.engineReceiveChannel|{}engineReceiveChannel[0]
        abstract fun <get-engineReceiveChannel>(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.engine/BaseApplicationRequest.engineReceiveChannel.<get-engineReceiveChannel>|<get-engineReceiveChannel>(){}[0]
    final val call // io.ktor.server.engine/BaseApplicationRequest.call|{}call[0]
        final fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.engine/BaseApplicationRequest.call.<get-call>|<get-call>(){}[0]
    final val headers // io.ktor.server.engine/BaseApplicationRequest.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.server.engine/BaseApplicationRequest.headers.<get-headers>|<get-headers>(){}[0]
    open val pipeline // io.ktor.server.engine/BaseApplicationRequest.pipeline|{}pipeline[0]
        open fun <get-pipeline>(): io.ktor.server.request/ApplicationReceivePipeline // io.ktor.server.engine/BaseApplicationRequest.pipeline.<get-pipeline>|<get-pipeline>(){}[0]

    final fun receiveChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.engine/BaseApplicationRequest.receiveChannel|receiveChannel(){}[0]
    final fun setHeader(kotlin/String, kotlin.collections/List<kotlin/String>?) // io.ktor.server.engine/BaseApplicationRequest.setHeader|setHeader(kotlin.String;kotlin.collections.List<kotlin.String>?){}[0]
    final fun setReceiveChannel(io.ktor.utils.io/ByteReadChannel) // io.ktor.server.engine/BaseApplicationRequest.setReceiveChannel|setReceiveChannel(io.ktor.utils.io.ByteReadChannel){}[0]
}

abstract class io.ktor.server.engine/BaseApplicationResponse : io.ktor.server.response/PipelineResponse { // io.ktor.server.engine/BaseApplicationResponse|null[0]
    constructor <init>(io.ktor.server.application/PipelineCall) // io.ktor.server.engine/BaseApplicationResponse.<init>|<init>(io.ktor.server.application.PipelineCall){}[0]

    final val call // io.ktor.server.engine/BaseApplicationResponse.call|{}call[0]
        final fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.engine/BaseApplicationResponse.call.<get-call>|<get-call>(){}[0]
    final val pipeline // io.ktor.server.engine/BaseApplicationResponse.pipeline|{}pipeline[0]
        final fun <get-pipeline>(): io.ktor.server.response/ApplicationSendPipeline // io.ktor.server.engine/BaseApplicationResponse.pipeline.<get-pipeline>|<get-pipeline>(){}[0]
    open val cookies // io.ktor.server.engine/BaseApplicationResponse.cookies|{}cookies[0]
        open fun <get-cookies>(): io.ktor.server.response/ResponseCookies // io.ktor.server.engine/BaseApplicationResponse.cookies.<get-cookies>|<get-cookies>(){}[0]
    open val isCommitted // io.ktor.server.engine/BaseApplicationResponse.isCommitted|{}isCommitted[0]
        open fun <get-isCommitted>(): kotlin/Boolean // io.ktor.server.engine/BaseApplicationResponse.isCommitted.<get-isCommitted>|<get-isCommitted>(){}[0]

    final var isSent // io.ktor.server.engine/BaseApplicationResponse.isSent|{}isSent[0]
        final fun <get-isSent>(): kotlin/Boolean // io.ktor.server.engine/BaseApplicationResponse.isSent.<get-isSent>|<get-isSent>(){}[0]

    abstract fun setStatus(io.ktor.http/HttpStatusCode) // io.ktor.server.engine/BaseApplicationResponse.setStatus|setStatus(io.ktor.http.HttpStatusCode){}[0]
    abstract suspend fun respondUpgrade(io.ktor.http.content/OutgoingContent.ProtocolUpgrade) // io.ktor.server.engine/BaseApplicationResponse.respondUpgrade|respondUpgrade(io.ktor.http.content.OutgoingContent.ProtocolUpgrade){}[0]
    abstract suspend fun responseChannel(): io.ktor.utils.io/ByteWriteChannel // io.ktor.server.engine/BaseApplicationResponse.responseChannel|responseChannel(){}[0]
    final fun commitHeaders(io.ktor.http.content/OutgoingContent) // io.ktor.server.engine/BaseApplicationResponse.commitHeaders|commitHeaders(io.ktor.http.content.OutgoingContent){}[0]
    open fun push(io.ktor.server.response/ResponsePushBuilder) // io.ktor.server.engine/BaseApplicationResponse.push|push(io.ktor.server.response.ResponsePushBuilder){}[0]
    open fun status(): io.ktor.http/HttpStatusCode? // io.ktor.server.engine/BaseApplicationResponse.status|status(){}[0]
    open fun status(io.ktor.http/HttpStatusCode) // io.ktor.server.engine/BaseApplicationResponse.status|status(io.ktor.http.HttpStatusCode){}[0]
    open suspend fun respondFromBytes(kotlin/ByteArray) // io.ktor.server.engine/BaseApplicationResponse.respondFromBytes|respondFromBytes(kotlin.ByteArray){}[0]
    open suspend fun respondFromChannel(io.ktor.utils.io/ByteReadChannel) // io.ktor.server.engine/BaseApplicationResponse.respondFromChannel|respondFromChannel(io.ktor.utils.io.ByteReadChannel){}[0]
    open suspend fun respondNoContent(io.ktor.http.content/OutgoingContent.NoContent) // io.ktor.server.engine/BaseApplicationResponse.respondNoContent|respondNoContent(io.ktor.http.content.OutgoingContent.NoContent){}[0]
    open suspend fun respondOutgoingContent(io.ktor.http.content/OutgoingContent) // io.ktor.server.engine/BaseApplicationResponse.respondOutgoingContent|respondOutgoingContent(io.ktor.http.content.OutgoingContent){}[0]
    open suspend fun respondWriteChannelContent(io.ktor.http.content/OutgoingContent.WriteChannelContent) // io.ktor.server.engine/BaseApplicationResponse.respondWriteChannelContent|respondWriteChannelContent(io.ktor.http.content.OutgoingContent.WriteChannelContent){}[0]

    final class BodyLengthIsTooLong : kotlin/IllegalStateException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooLong> { // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooLong|null[0]
        constructor <init>(kotlin/Long) // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooLong.<init>|<init>(kotlin.Long){}[0]

        final fun createCopy(): io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooLong // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooLong.createCopy|createCopy(){}[0]
    }

    final class BodyLengthIsTooSmall : kotlin/IllegalStateException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooSmall> { // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooSmall|null[0]
        constructor <init>(kotlin/Long, kotlin/Long) // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooSmall.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

        final fun createCopy(): io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooSmall // io.ktor.server.engine/BaseApplicationResponse.BodyLengthIsTooSmall.createCopy|createCopy(){}[0]
    }

    final class InvalidHeaderForContent : kotlin/IllegalStateException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.engine/BaseApplicationResponse.InvalidHeaderForContent> { // io.ktor.server.engine/BaseApplicationResponse.InvalidHeaderForContent|null[0]
        constructor <init>(kotlin/String, kotlin/String) // io.ktor.server.engine/BaseApplicationResponse.InvalidHeaderForContent.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final fun createCopy(): io.ktor.server.engine/BaseApplicationResponse.InvalidHeaderForContent // io.ktor.server.engine/BaseApplicationResponse.InvalidHeaderForContent.createCopy|createCopy(){}[0]
    }

    final class ResponseAlreadySentException : kotlin/IllegalStateException { // io.ktor.server.engine/BaseApplicationResponse.ResponseAlreadySentException|null[0]
        constructor <init>() // io.ktor.server.engine/BaseApplicationResponse.ResponseAlreadySentException.<init>|<init>(){}[0]
    }

    final object Companion { // io.ktor.server.engine/BaseApplicationResponse.Companion|null[0]
        final val EngineResponseAttributeKey // io.ktor.server.engine/BaseApplicationResponse.Companion.EngineResponseAttributeKey|{}EngineResponseAttributeKey[0]
            final fun <get-EngineResponseAttributeKey>(): io.ktor.util/AttributeKey<io.ktor.server.engine/BaseApplicationResponse> // io.ktor.server.engine/BaseApplicationResponse.Companion.EngineResponseAttributeKey.<get-EngineResponseAttributeKey>|<get-EngineResponseAttributeKey>(){}[0]

        final fun setupSendPipeline(io.ktor.server.response/ApplicationSendPipeline) // io.ktor.server.engine/BaseApplicationResponse.Companion.setupSendPipeline|setupSendPipeline(io.ktor.server.response.ApplicationSendPipeline){}[0]
    }
}

abstract class io.ktor.server.plugins/ContentTransformationException : kotlinx.io/IOException { // io.ktor.server.plugins/ContentTransformationException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.plugins/ContentTransformationException.<init>|<init>(kotlin.String){}[0]
}

abstract class io.ktor.server.response/ResponseHeaders { // io.ktor.server.response/ResponseHeaders|null[0]
    constructor <init>() // io.ktor.server.response/ResponseHeaders.<init>|<init>(){}[0]

    open val managedByEngineHeaders // io.ktor.server.response/ResponseHeaders.managedByEngineHeaders|{}managedByEngineHeaders[0]
        open fun <get-managedByEngineHeaders>(): kotlin.collections/Set<kotlin/String> // io.ktor.server.response/ResponseHeaders.managedByEngineHeaders.<get-managedByEngineHeaders>|<get-managedByEngineHeaders>(){}[0]

    abstract fun engineAppendHeader(kotlin/String, kotlin/String) // io.ktor.server.response/ResponseHeaders.engineAppendHeader|engineAppendHeader(kotlin.String;kotlin.String){}[0]
    abstract fun getEngineHeaderNames(): kotlin.collections/List<kotlin/String> // io.ktor.server.response/ResponseHeaders.getEngineHeaderNames|getEngineHeaderNames(){}[0]
    abstract fun getEngineHeaderValues(kotlin/String): kotlin.collections/List<kotlin/String> // io.ktor.server.response/ResponseHeaders.getEngineHeaderValues|getEngineHeaderValues(kotlin.String){}[0]
    final fun allValues(): io.ktor.http/Headers // io.ktor.server.response/ResponseHeaders.allValues|allValues(){}[0]
    final fun append(kotlin/String, kotlin/String, kotlin/Boolean = ...) // io.ktor.server.response/ResponseHeaders.append|append(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
    final fun contains(kotlin/String): kotlin/Boolean // io.ktor.server.response/ResponseHeaders.contains|contains(kotlin.String){}[0]
    final fun values(kotlin/String): kotlin.collections/List<kotlin/String> // io.ktor.server.response/ResponseHeaders.values|values(kotlin.String){}[0]
    open fun get(kotlin/String): kotlin/String? // io.ktor.server.response/ResponseHeaders.get|get(kotlin.String){}[0]
}

abstract class io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/RouteSelector|null[0]
    constructor <init>() // io.ktor.server.routing/RouteSelector.<init>|<init>(){}[0]

    abstract suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.ktor.server.engine/EmbeddedServer { // io.ktor.server.engine/EmbeddedServer|null[0]
    constructor <init>(io.ktor.server.application/ServerConfig, io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Function1<#B, kotlin/Unit> = ...) // io.ktor.server.engine/EmbeddedServer.<init>|<init>(io.ktor.server.application.ServerConfig;io.ktor.server.engine.ApplicationEngineFactory<1:0,1:1>;kotlin.Function1<1:1,kotlin.Unit>){}[0]

    final val application // io.ktor.server.engine/EmbeddedServer.application|{}application[0]
        final fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.engine/EmbeddedServer.application.<get-application>|<get-application>(){}[0]
    final val engine // io.ktor.server.engine/EmbeddedServer.engine|{}engine[0]
        final fun <get-engine>(): #A // io.ktor.server.engine/EmbeddedServer.engine.<get-engine>|<get-engine>(){}[0]
    final val engineConfig // io.ktor.server.engine/EmbeddedServer.engineConfig|{}engineConfig[0]
        final fun <get-engineConfig>(): #B // io.ktor.server.engine/EmbeddedServer.engineConfig.<get-engineConfig>|<get-engineConfig>(){}[0]
    final val environment // io.ktor.server.engine/EmbeddedServer.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/EmbeddedServer.environment.<get-environment>|<get-environment>(){}[0]
    final val monitor // io.ktor.server.engine/EmbeddedServer.monitor|{}monitor[0]
        final fun <get-monitor>(): io.ktor.events/Events // io.ktor.server.engine/EmbeddedServer.monitor.<get-monitor>|<get-monitor>(){}[0]

    final fun start(kotlin/Boolean = ...): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/EmbeddedServer.start|start(kotlin.Boolean){}[0]
    final fun stop(kotlin/Long = ..., kotlin/Long = ...) // io.ktor.server.engine/EmbeddedServer.stop|stop(kotlin.Long;kotlin.Long){}[0]
    final suspend fun startSuspend(kotlin/Boolean = ...): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/EmbeddedServer.startSuspend|startSuspend(kotlin.Boolean){}[0]
    final suspend fun stopSuspend(kotlin/Long = ..., kotlin/Long = ...) // io.ktor.server.engine/EmbeddedServer.stopSuspend|stopSuspend(kotlin.Long;kotlin.Long){}[0]
}

final class <#A: kotlin/Any, #B: io.ktor.events/EventDefinition<#A>> io.ktor.server.application.hooks/MonitoringEvent : io.ktor.server.application/Hook<kotlin/Function1<#A, kotlin/Unit>> { // io.ktor.server.application.hooks/MonitoringEvent|null[0]
    constructor <init>(#B) // io.ktor.server.application.hooks/MonitoringEvent.<init>|<init>(1:1){}[0]

    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin/Function1<#A, kotlin/Unit>) // io.ktor.server.application.hooks/MonitoringEvent.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any> io.ktor.server.application.hooks/BeforeResponseTransform : io.ktor.server.application/Hook<kotlin.coroutines/SuspendFunction2<io.ktor.server.application/ApplicationCall, #A, kotlin/Any>> { // io.ktor.server.application.hooks/BeforeResponseTransform|null[0]
    constructor <init>(kotlin.reflect/KClass<#A>) // io.ktor.server.application.hooks/BeforeResponseTransform.<init>|<init>(kotlin.reflect.KClass<1:0>){}[0]

    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin.coroutines/SuspendFunction2<io.ktor.server.application/ApplicationCall, #A, kotlin/Any>) // io.ktor.server.application.hooks/BeforeResponseTransform.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.coroutines.SuspendFunction2<io.ktor.server.application.ApplicationCall,1:0,kotlin.Any>){}[0]
}

final class <#A: kotlin/Any> io.ktor.server.application/OnCallContext : io.ktor.server.application/CallContext<#A> // io.ktor.server.application/OnCallContext|null[0]

final class <#A: kotlin/Any> io.ktor.server.application/OnCallReceiveContext : io.ktor.server.application/CallContext<#A> { // io.ktor.server.application/OnCallReceiveContext|null[0]
    final suspend fun transformBody(kotlin.coroutines/SuspendFunction2<io.ktor.server.application/TransformBodyContext, io.ktor.utils.io/ByteReadChannel, kotlin/Any>) // io.ktor.server.application/OnCallReceiveContext.transformBody|transformBody(kotlin.coroutines.SuspendFunction2<io.ktor.server.application.TransformBodyContext,io.ktor.utils.io.ByteReadChannel,kotlin.Any>){}[0]
}

final class <#A: kotlin/Any> io.ktor.server.application/OnCallRespondContext : io.ktor.server.application/CallContext<#A> { // io.ktor.server.application/OnCallRespondContext|null[0]
    final suspend fun transformBody(kotlin.coroutines/SuspendFunction2<io.ktor.server.application/TransformBodyContext, kotlin/Any, kotlin/Any>) // io.ktor.server.application/OnCallRespondContext.transformBody|transformBody(kotlin.coroutines.SuspendFunction2<io.ktor.server.application.TransformBodyContext,kotlin.Any,kotlin.Any>){}[0]
}

final class io.ktor.server.application/Application : io.ktor.server.application/ApplicationCallPipeline, kotlinx.coroutines/CoroutineScope { // io.ktor.server.application/Application|null[0]
    final val coroutineContext // io.ktor.server.application/Application.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.application/Application.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val engine // io.ktor.server.application/Application.engine|{}engine[0]
        final fun <get-engine>(): io.ktor.server.engine/ApplicationEngine // io.ktor.server.application/Application.engine.<get-engine>|<get-engine>(){}[0]
    final val monitor // io.ktor.server.application/Application.monitor|{}monitor[0]
        final fun <get-monitor>(): io.ktor.events/Events // io.ktor.server.application/Application.monitor.<get-monitor>|<get-monitor>(){}[0]
    final val parentCoroutineContext // io.ktor.server.application/Application.parentCoroutineContext|{}parentCoroutineContext[0]
        final fun <get-parentCoroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.application/Application.parentCoroutineContext.<get-parentCoroutineContext>|<get-parentCoroutineContext>(){}[0]

    final var rootPath // io.ktor.server.application/Application.rootPath|{}rootPath[0]
        final fun <get-rootPath>(): kotlin/String // io.ktor.server.application/Application.rootPath.<get-rootPath>|<get-rootPath>(){}[0]
        final fun <set-rootPath>(kotlin/String) // io.ktor.server.application/Application.rootPath.<set-rootPath>|<set-rootPath>(kotlin.String){}[0]

    final fun dispose() // io.ktor.server.application/Application.dispose|dispose(){}[0]
}

final class io.ktor.server.application/DuplicatePluginException : io.ktor.server.application/DuplicateApplicationPluginException { // io.ktor.server.application/DuplicatePluginException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.application/DuplicatePluginException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.server.application/InvalidBodyException : kotlin/Exception { // io.ktor.server.application/InvalidBodyException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.application/InvalidBodyException.<init>|<init>(kotlin.String){}[0]
}

final class io.ktor.server.application/MissingApplicationPluginException : kotlin/IllegalStateException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.application/MissingApplicationPluginException> { // io.ktor.server.application/MissingApplicationPluginException|null[0]
    constructor <init>(io.ktor.util/AttributeKey<*>) // io.ktor.server.application/MissingApplicationPluginException.<init>|<init>(io.ktor.util.AttributeKey<*>){}[0]

    final val key // io.ktor.server.application/MissingApplicationPluginException.key|{}key[0]
        final fun <get-key>(): io.ktor.util/AttributeKey<*> // io.ktor.server.application/MissingApplicationPluginException.key.<get-key>|<get-key>(){}[0]
    final val message // io.ktor.server.application/MissingApplicationPluginException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.ktor.server.application/MissingApplicationPluginException.message.<get-message>|<get-message>(){}[0]

    final fun createCopy(): io.ktor.server.application/MissingApplicationPluginException // io.ktor.server.application/MissingApplicationPluginException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.application/PluginInstance // io.ktor.server.application/PluginInstance|null[0]

final class io.ktor.server.application/ServerConfig { // io.ktor.server.application/ServerConfig|null[0]
    final val developmentMode // io.ktor.server.application/ServerConfig.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.application/ServerConfig.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]
    final val environment // io.ktor.server.application/ServerConfig.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.application/ServerConfig.environment.<get-environment>|<get-environment>(){}[0]
    final val parentCoroutineContext // io.ktor.server.application/ServerConfig.parentCoroutineContext|{}parentCoroutineContext[0]
        final fun <get-parentCoroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.application/ServerConfig.parentCoroutineContext.<get-parentCoroutineContext>|<get-parentCoroutineContext>(){}[0]
    final val rootPath // io.ktor.server.application/ServerConfig.rootPath|{}rootPath[0]
        final fun <get-rootPath>(): kotlin/String // io.ktor.server.application/ServerConfig.rootPath.<get-rootPath>|<get-rootPath>(){}[0]
}

final class io.ktor.server.application/ServerConfigBuilder { // io.ktor.server.application/ServerConfigBuilder|null[0]
    constructor <init>(io.ktor.server.application/ApplicationEnvironment) // io.ktor.server.application/ServerConfigBuilder.<init>|<init>(io.ktor.server.application.ApplicationEnvironment){}[0]

    final val environment // io.ktor.server.application/ServerConfigBuilder.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.application/ServerConfigBuilder.environment.<get-environment>|<get-environment>(){}[0]

    final var developmentMode // io.ktor.server.application/ServerConfigBuilder.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.application/ServerConfigBuilder.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]
        final fun <set-developmentMode>(kotlin/Boolean) // io.ktor.server.application/ServerConfigBuilder.developmentMode.<set-developmentMode>|<set-developmentMode>(kotlin.Boolean){}[0]
    final var parentCoroutineContext // io.ktor.server.application/ServerConfigBuilder.parentCoroutineContext|{}parentCoroutineContext[0]
        final fun <get-parentCoroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.application/ServerConfigBuilder.parentCoroutineContext.<get-parentCoroutineContext>|<get-parentCoroutineContext>(){}[0]
        final fun <set-parentCoroutineContext>(kotlin.coroutines/CoroutineContext) // io.ktor.server.application/ServerConfigBuilder.parentCoroutineContext.<set-parentCoroutineContext>|<set-parentCoroutineContext>(kotlin.coroutines.CoroutineContext){}[0]
    final var rootPath // io.ktor.server.application/ServerConfigBuilder.rootPath|{}rootPath[0]
        final fun <get-rootPath>(): kotlin/String // io.ktor.server.application/ServerConfigBuilder.rootPath.<get-rootPath>|<get-rootPath>(){}[0]
        final fun <set-rootPath>(kotlin/String) // io.ktor.server.application/ServerConfigBuilder.rootPath.<set-rootPath>|<set-rootPath>(kotlin.String){}[0]
    final var watchPaths // io.ktor.server.application/ServerConfigBuilder.watchPaths|{}watchPaths[0]
        final fun <get-watchPaths>(): kotlin.collections/List<kotlin/String> // io.ktor.server.application/ServerConfigBuilder.watchPaths.<get-watchPaths>|<get-watchPaths>(){}[0]
        final fun <set-watchPaths>(kotlin.collections/List<kotlin/String>) // io.ktor.server.application/ServerConfigBuilder.watchPaths.<set-watchPaths>|<set-watchPaths>(kotlin.collections.List<kotlin.String>){}[0]

    final fun module(kotlin/Function1<io.ktor.server.application/Application, kotlin/Unit>) // io.ktor.server.application/ServerConfigBuilder.module|module(kotlin.Function1<io.ktor.server.application.Application,kotlin.Unit>){}[0]
}

final class io.ktor.server.application/TransformBodyContext { // io.ktor.server.application/TransformBodyContext|null[0]
    constructor <init>(io.ktor.util.reflect/TypeInfo?) // io.ktor.server.application/TransformBodyContext.<init>|<init>(io.ktor.util.reflect.TypeInfo?){}[0]

    final val requestedType // io.ktor.server.application/TransformBodyContext.requestedType|{}requestedType[0]
        final fun <get-requestedType>(): io.ktor.util.reflect/TypeInfo? // io.ktor.server.application/TransformBodyContext.requestedType.<get-requestedType>|<get-requestedType>(){}[0]
}

final class io.ktor.server.config/ApplicationConfigurationException : kotlin/Exception { // io.ktor.server.config/ApplicationConfigurationException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.config/ApplicationConfigurationException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable?) // io.ktor.server.config/ApplicationConfigurationException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

final class io.ktor.server.engine/ApplicationEnvironmentBuilder { // io.ktor.server.engine/ApplicationEnvironmentBuilder|null[0]
    constructor <init>() // io.ktor.server.engine/ApplicationEnvironmentBuilder.<init>|<init>(){}[0]

    final var config // io.ktor.server.engine/ApplicationEnvironmentBuilder.config|{}config[0]
        final fun <get-config>(): io.ktor.server.config/ApplicationConfig // io.ktor.server.engine/ApplicationEnvironmentBuilder.config.<get-config>|<get-config>(){}[0]
        final fun <set-config>(io.ktor.server.config/ApplicationConfig) // io.ktor.server.engine/ApplicationEnvironmentBuilder.config.<set-config>|<set-config>(io.ktor.server.config.ApplicationConfig){}[0]
    final var log // io.ktor.server.engine/ApplicationEnvironmentBuilder.log|{}log[0]
        final fun <get-log>(): io.ktor.util.logging/Logger // io.ktor.server.engine/ApplicationEnvironmentBuilder.log.<get-log>|<get-log>(){}[0]
        final fun <set-log>(io.ktor.util.logging/Logger) // io.ktor.server.engine/ApplicationEnvironmentBuilder.log.<set-log>|<set-log>(io.ktor.util.logging.Logger){}[0]

    final fun build(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/ApplicationEnvironmentBuilder.build|build(){}[0]
}

final class io.ktor.server.engine/ApplicationEnvironmentImplNix : io.ktor.server.application/ApplicationEnvironment { // io.ktor.server.engine/ApplicationEnvironmentImplNix|null[0]
    constructor <init>(io.ktor.util.logging/Logger, io.ktor.server.config/ApplicationConfig, io.ktor.events/Events = ...) // io.ktor.server.engine/ApplicationEnvironmentImplNix.<init>|<init>(io.ktor.util.logging.Logger;io.ktor.server.config.ApplicationConfig;io.ktor.events.Events){}[0]

    final val config // io.ktor.server.engine/ApplicationEnvironmentImplNix.config|{}config[0]
        final fun <get-config>(): io.ktor.server.config/ApplicationConfig // io.ktor.server.engine/ApplicationEnvironmentImplNix.config.<get-config>|<get-config>(){}[0]
    final val log // io.ktor.server.engine/ApplicationEnvironmentImplNix.log|{}log[0]
        final fun <get-log>(): io.ktor.util.logging/Logger // io.ktor.server.engine/ApplicationEnvironmentImplNix.log.<get-log>|<get-log>(){}[0]
    final val monitor // io.ktor.server.engine/ApplicationEnvironmentImplNix.monitor|{}monitor[0]
        final fun <get-monitor>(): io.ktor.events/Events // io.ktor.server.engine/ApplicationEnvironmentImplNix.monitor.<get-monitor>|<get-monitor>(){}[0]
}

final class io.ktor.server.engine/CommandLineConfig { // io.ktor.server.engine/CommandLineConfig|null[0]
    constructor <init>(io.ktor.server.application/ServerConfig, io.ktor.server.engine/BaseApplicationEngine.Configuration) // io.ktor.server.engine/CommandLineConfig.<init>|<init>(io.ktor.server.application.ServerConfig;io.ktor.server.engine.BaseApplicationEngine.Configuration){}[0]

    final val engineConfig // io.ktor.server.engine/CommandLineConfig.engineConfig|{}engineConfig[0]
        final fun <get-engineConfig>(): io.ktor.server.engine/BaseApplicationEngine.Configuration // io.ktor.server.engine/CommandLineConfig.engineConfig.<get-engineConfig>|<get-engineConfig>(){}[0]
    final val environment // io.ktor.server.engine/CommandLineConfig.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/CommandLineConfig.environment.<get-environment>|<get-environment>(){}[0]
    final val rootConfig // io.ktor.server.engine/CommandLineConfig.rootConfig|{}rootConfig[0]
        final fun <get-rootConfig>(): io.ktor.server.application/ServerConfig // io.ktor.server.engine/CommandLineConfig.rootConfig.<get-rootConfig>|<get-rootConfig>(){}[0]
}

final class io.ktor.server.engine/ConnectorType { // io.ktor.server.engine/ConnectorType|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.engine/ConnectorType.<init>|<init>(kotlin.String){}[0]

    final val name // io.ktor.server.engine/ConnectorType.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.engine/ConnectorType.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.engine/ConnectorType.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): io.ktor.server.engine/ConnectorType // io.ktor.server.engine/ConnectorType.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.engine/ConnectorType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.engine/ConnectorType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.engine/ConnectorType.toString|toString(){}[0]

    final object Companion { // io.ktor.server.engine/ConnectorType.Companion|null[0]
        final val HTTP // io.ktor.server.engine/ConnectorType.Companion.HTTP|{}HTTP[0]
            final fun <get-HTTP>(): io.ktor.server.engine/ConnectorType // io.ktor.server.engine/ConnectorType.Companion.HTTP.<get-HTTP>|<get-HTTP>(){}[0]
        final val HTTPS // io.ktor.server.engine/ConnectorType.Companion.HTTPS|{}HTTPS[0]
            final fun <get-HTTPS>(): io.ktor.server.engine/ConnectorType // io.ktor.server.engine/ConnectorType.Companion.HTTPS.<get-HTTPS>|<get-HTTPS>(){}[0]
    }
}

final class io.ktor.server.engine/DefaultUncaughtExceptionHandler : kotlinx.coroutines/CoroutineExceptionHandler { // io.ktor.server.engine/DefaultUncaughtExceptionHandler|null[0]
    constructor <init>(io.ktor.util.logging/Logger) // io.ktor.server.engine/DefaultUncaughtExceptionHandler.<init>|<init>(io.ktor.util.logging.Logger){}[0]
    constructor <init>(kotlin/Function0<io.ktor.util.logging/Logger>) // io.ktor.server.engine/DefaultUncaughtExceptionHandler.<init>|<init>(kotlin.Function0<io.ktor.util.logging.Logger>){}[0]

    final val key // io.ktor.server.engine/DefaultUncaughtExceptionHandler.key|{}key[0]
        final fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // io.ktor.server.engine/DefaultUncaughtExceptionHandler.key.<get-key>|<get-key>(){}[0]

    final fun handleException(kotlin.coroutines/CoroutineContext, kotlin/Throwable) // io.ktor.server.engine/DefaultUncaughtExceptionHandler.handleException|handleException(kotlin.coroutines.CoroutineContext;kotlin.Throwable){}[0]
}

final class io.ktor.server.engine/EnginePipeline : io.ktor.util.pipeline/Pipeline<kotlin/Unit, io.ktor.server.application/PipelineCall> { // io.ktor.server.engine/EnginePipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.server.engine/EnginePipeline.<init>|<init>(kotlin.Boolean){}[0]

    final val developmentMode // io.ktor.server.engine/EnginePipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.engine/EnginePipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]
    final val receivePipeline // io.ktor.server.engine/EnginePipeline.receivePipeline|{}receivePipeline[0]
        final fun <get-receivePipeline>(): io.ktor.server.request/ApplicationReceivePipeline // io.ktor.server.engine/EnginePipeline.receivePipeline.<get-receivePipeline>|<get-receivePipeline>(){}[0]
    final val sendPipeline // io.ktor.server.engine/EnginePipeline.sendPipeline|{}sendPipeline[0]
        final fun <get-sendPipeline>(): io.ktor.server.response/ApplicationSendPipeline // io.ktor.server.engine/EnginePipeline.sendPipeline.<get-sendPipeline>|<get-sendPipeline>(){}[0]

    final object Companion { // io.ktor.server.engine/EnginePipeline.Companion|null[0]
        final val Before // io.ktor.server.engine/EnginePipeline.Companion.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.engine/EnginePipeline.Companion.Before.<get-Before>|<get-Before>(){}[0]
        final val Call // io.ktor.server.engine/EnginePipeline.Companion.Call|{}Call[0]
            final fun <get-Call>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.engine/EnginePipeline.Companion.Call.<get-Call>|<get-Call>(){}[0]
    }
}

final class io.ktor.server.http.content/HttpStatusCodeContent : io.ktor.http.content/OutgoingContent.NoContent { // io.ktor.server.http.content/HttpStatusCodeContent|null[0]
    constructor <init>(io.ktor.http/HttpStatusCode) // io.ktor.server.http.content/HttpStatusCodeContent.<init>|<init>(io.ktor.http.HttpStatusCode){}[0]

    final val status // io.ktor.server.http.content/HttpStatusCodeContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode // io.ktor.server.http.content/HttpStatusCodeContent.status.<get-status>|<get-status>(){}[0]

    final fun toString(): kotlin/String // io.ktor.server.http.content/HttpStatusCodeContent.toString|toString(){}[0]
}

final class io.ktor.server.plugins/CannotTransformContentToTypeException : io.ktor.server.plugins/ContentTransformationException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.plugins/CannotTransformContentToTypeException> { // io.ktor.server.plugins/CannotTransformContentToTypeException|null[0]
    constructor <init>(kotlin.reflect/KType) // io.ktor.server.plugins/CannotTransformContentToTypeException.<init>|<init>(kotlin.reflect.KType){}[0]

    final fun createCopy(): io.ktor.server.plugins/CannotTransformContentToTypeException // io.ktor.server.plugins/CannotTransformContentToTypeException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.plugins/MissingRequestParameterException : io.ktor.server.plugins/BadRequestException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.plugins/MissingRequestParameterException> { // io.ktor.server.plugins/MissingRequestParameterException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.plugins/MissingRequestParameterException.<init>|<init>(kotlin.String){}[0]

    final val parameterName // io.ktor.server.plugins/MissingRequestParameterException.parameterName|{}parameterName[0]
        final fun <get-parameterName>(): kotlin/String // io.ktor.server.plugins/MissingRequestParameterException.parameterName.<get-parameterName>|<get-parameterName>(){}[0]

    final fun createCopy(): io.ktor.server.plugins/MissingRequestParameterException // io.ktor.server.plugins/MissingRequestParameterException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.plugins/MutableOriginConnectionPoint : io.ktor.http/RequestConnectionPoint { // io.ktor.server.plugins/MutableOriginConnectionPoint|null[0]
    final var host // io.ktor.server.plugins/MutableOriginConnectionPoint.host|{}host[0]
        final fun <get-host>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.host.<get-host>|<get-host>(){}[0]
        final fun <set-host>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.host.<set-host>|<set-host>(kotlin.String){}[0]
    final var localAddress // io.ktor.server.plugins/MutableOriginConnectionPoint.localAddress|{}localAddress[0]
        final fun <get-localAddress>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.localAddress.<get-localAddress>|<get-localAddress>(){}[0]
        final fun <set-localAddress>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.localAddress.<set-localAddress>|<set-localAddress>(kotlin.String){}[0]
    final var localHost // io.ktor.server.plugins/MutableOriginConnectionPoint.localHost|{}localHost[0]
        final fun <get-localHost>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.localHost.<get-localHost>|<get-localHost>(){}[0]
        final fun <set-localHost>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.localHost.<set-localHost>|<set-localHost>(kotlin.String){}[0]
    final var localPort // io.ktor.server.plugins/MutableOriginConnectionPoint.localPort|{}localPort[0]
        final fun <get-localPort>(): kotlin/Int // io.ktor.server.plugins/MutableOriginConnectionPoint.localPort.<get-localPort>|<get-localPort>(){}[0]
        final fun <set-localPort>(kotlin/Int) // io.ktor.server.plugins/MutableOriginConnectionPoint.localPort.<set-localPort>|<set-localPort>(kotlin.Int){}[0]
    final var method // io.ktor.server.plugins/MutableOriginConnectionPoint.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.server.plugins/MutableOriginConnectionPoint.method.<get-method>|<get-method>(){}[0]
        final fun <set-method>(io.ktor.http/HttpMethod) // io.ktor.server.plugins/MutableOriginConnectionPoint.method.<set-method>|<set-method>(io.ktor.http.HttpMethod){}[0]
    final var port // io.ktor.server.plugins/MutableOriginConnectionPoint.port|{}port[0]
        final fun <get-port>(): kotlin/Int // io.ktor.server.plugins/MutableOriginConnectionPoint.port.<get-port>|<get-port>(){}[0]
        final fun <set-port>(kotlin/Int) // io.ktor.server.plugins/MutableOriginConnectionPoint.port.<set-port>|<set-port>(kotlin.Int){}[0]
    final var remoteAddress // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteAddress|{}remoteAddress[0]
        final fun <get-remoteAddress>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteAddress.<get-remoteAddress>|<get-remoteAddress>(){}[0]
        final fun <set-remoteAddress>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteAddress.<set-remoteAddress>|<set-remoteAddress>(kotlin.String){}[0]
    final var remoteHost // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteHost|{}remoteHost[0]
        final fun <get-remoteHost>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteHost.<get-remoteHost>|<get-remoteHost>(){}[0]
        final fun <set-remoteHost>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.remoteHost.<set-remoteHost>|<set-remoteHost>(kotlin.String){}[0]
    final var remotePort // io.ktor.server.plugins/MutableOriginConnectionPoint.remotePort|{}remotePort[0]
        final fun <get-remotePort>(): kotlin/Int // io.ktor.server.plugins/MutableOriginConnectionPoint.remotePort.<get-remotePort>|<get-remotePort>(){}[0]
        final fun <set-remotePort>(kotlin/Int) // io.ktor.server.plugins/MutableOriginConnectionPoint.remotePort.<set-remotePort>|<set-remotePort>(kotlin.Int){}[0]
    final var scheme // io.ktor.server.plugins/MutableOriginConnectionPoint.scheme|{}scheme[0]
        final fun <get-scheme>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.scheme.<get-scheme>|<get-scheme>(){}[0]
        final fun <set-scheme>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.scheme.<set-scheme>|<set-scheme>(kotlin.String){}[0]
    final var serverHost // io.ktor.server.plugins/MutableOriginConnectionPoint.serverHost|{}serverHost[0]
        final fun <get-serverHost>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.serverHost.<get-serverHost>|<get-serverHost>(){}[0]
        final fun <set-serverHost>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.serverHost.<set-serverHost>|<set-serverHost>(kotlin.String){}[0]
    final var serverPort // io.ktor.server.plugins/MutableOriginConnectionPoint.serverPort|{}serverPort[0]
        final fun <get-serverPort>(): kotlin/Int // io.ktor.server.plugins/MutableOriginConnectionPoint.serverPort.<get-serverPort>|<get-serverPort>(){}[0]
        final fun <set-serverPort>(kotlin/Int) // io.ktor.server.plugins/MutableOriginConnectionPoint.serverPort.<set-serverPort>|<set-serverPort>(kotlin.Int){}[0]
    final var uri // io.ktor.server.plugins/MutableOriginConnectionPoint.uri|{}uri[0]
        final fun <get-uri>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.uri.<get-uri>|<get-uri>(){}[0]
        final fun <set-uri>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.uri.<set-uri>|<set-uri>(kotlin.String){}[0]
    final var version // io.ktor.server.plugins/MutableOriginConnectionPoint.version|{}version[0]
        final fun <get-version>(): kotlin/String // io.ktor.server.plugins/MutableOriginConnectionPoint.version.<get-version>|<get-version>(){}[0]
        final fun <set-version>(kotlin/String) // io.ktor.server.plugins/MutableOriginConnectionPoint.version.<set-version>|<set-version>(kotlin.String){}[0]
}

final class io.ktor.server.plugins/NotFoundException : kotlin/Exception { // io.ktor.server.plugins/NotFoundException|null[0]
    constructor <init>(kotlin/String? = ...) // io.ktor.server.plugins/NotFoundException.<init>|<init>(kotlin.String?){}[0]
}

final class io.ktor.server.plugins/ParameterConversionException : io.ktor.server.plugins/BadRequestException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.plugins/ParameterConversionException> { // io.ktor.server.plugins/ParameterConversionException|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Throwable? = ...) // io.ktor.server.plugins/ParameterConversionException.<init>|<init>(kotlin.String;kotlin.String;kotlin.Throwable?){}[0]

    final val parameterName // io.ktor.server.plugins/ParameterConversionException.parameterName|{}parameterName[0]
        final fun <get-parameterName>(): kotlin/String // io.ktor.server.plugins/ParameterConversionException.parameterName.<get-parameterName>|<get-parameterName>(){}[0]
    final val type // io.ktor.server.plugins/ParameterConversionException.type|{}type[0]
        final fun <get-type>(): kotlin/String // io.ktor.server.plugins/ParameterConversionException.type.<get-type>|<get-type>(){}[0]

    final fun createCopy(): io.ktor.server.plugins/ParameterConversionException // io.ktor.server.plugins/ParameterConversionException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.plugins/PayloadTooLargeException : io.ktor.server.plugins/ContentTransformationException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.plugins/PayloadTooLargeException> { // io.ktor.server.plugins/PayloadTooLargeException|null[0]
    constructor <init>(kotlin/Long) // io.ktor.server.plugins/PayloadTooLargeException.<init>|<init>(kotlin.Long){}[0]

    final fun createCopy(): io.ktor.server.plugins/PayloadTooLargeException // io.ktor.server.plugins/PayloadTooLargeException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.plugins/UnsupportedMediaTypeException : io.ktor.server.plugins/ContentTransformationException, kotlinx.coroutines/CopyableThrowable<io.ktor.server.plugins/UnsupportedMediaTypeException> { // io.ktor.server.plugins/UnsupportedMediaTypeException|null[0]
    constructor <init>(io.ktor.http/ContentType?) // io.ktor.server.plugins/UnsupportedMediaTypeException.<init>|<init>(io.ktor.http.ContentType?){}[0]

    final fun createCopy(): io.ktor.server.plugins/UnsupportedMediaTypeException // io.ktor.server.plugins/UnsupportedMediaTypeException.createCopy|createCopy(){}[0]
}

final class io.ktor.server.request/RequestAlreadyConsumedException : kotlin/IllegalStateException { // io.ktor.server.request/RequestAlreadyConsumedException|null[0]
    constructor <init>() // io.ktor.server.request/RequestAlreadyConsumedException.<init>|<init>(){}[0]
}

final class io.ktor.server.response/DefaultResponsePushBuilder : io.ktor.server.response/ResponsePushBuilder { // io.ktor.server.response/DefaultResponsePushBuilder|null[0]
    constructor <init>(io.ktor.http/HttpMethod = ..., io.ktor.http/URLBuilder = ..., io.ktor.http/HeadersBuilder = ..., kotlin.collections/List<io.ktor.http.content/Version> = ...) // io.ktor.server.response/DefaultResponsePushBuilder.<init>|<init>(io.ktor.http.HttpMethod;io.ktor.http.URLBuilder;io.ktor.http.HeadersBuilder;kotlin.collections.List<io.ktor.http.content.Version>){}[0]
    constructor <init>(io.ktor.http/URLBuilder, io.ktor.http/Headers) // io.ktor.server.response/DefaultResponsePushBuilder.<init>|<init>(io.ktor.http.URLBuilder;io.ktor.http.Headers){}[0]
    constructor <init>(io.ktor.server.application/ApplicationCall) // io.ktor.server.response/DefaultResponsePushBuilder.<init>|<init>(io.ktor.server.application.ApplicationCall){}[0]

    final val headers // io.ktor.server.response/DefaultResponsePushBuilder.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/HeadersBuilder // io.ktor.server.response/DefaultResponsePushBuilder.headers.<get-headers>|<get-headers>(){}[0]
    final val url // io.ktor.server.response/DefaultResponsePushBuilder.url|{}url[0]
        final fun <get-url>(): io.ktor.http/URLBuilder // io.ktor.server.response/DefaultResponsePushBuilder.url.<get-url>|<get-url>(){}[0]

    final var method // io.ktor.server.response/DefaultResponsePushBuilder.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.server.response/DefaultResponsePushBuilder.method.<get-method>|<get-method>(){}[0]
        final fun <set-method>(io.ktor.http/HttpMethod) // io.ktor.server.response/DefaultResponsePushBuilder.method.<set-method>|<set-method>(io.ktor.http.HttpMethod){}[0]
    final var versions // io.ktor.server.response/DefaultResponsePushBuilder.versions|{}versions[0]
        final fun <get-versions>(): kotlin.collections/ArrayList<io.ktor.http.content/Version> // io.ktor.server.response/DefaultResponsePushBuilder.versions.<get-versions>|<get-versions>(){}[0]
        final fun <set-versions>(kotlin.collections/ArrayList<io.ktor.http.content/Version>) // io.ktor.server.response/DefaultResponsePushBuilder.versions.<set-versions>|<set-versions>(kotlin.collections.ArrayList<io.ktor.http.content.Version>){}[0]
}

final class io.ktor.server.response/ResponseCookies { // io.ktor.server.response/ResponseCookies|null[0]
    constructor <init>(io.ktor.server.response/PipelineResponse) // io.ktor.server.response/ResponseCookies.<init>|<init>(io.ktor.server.response.PipelineResponse){}[0]

    final fun append(io.ktor.http/Cookie) // io.ktor.server.response/ResponseCookies.append|append(io.ktor.http.Cookie){}[0]
    final fun append(kotlin/String, kotlin/String, io.ktor.http/CookieEncoding = ..., kotlin/Long? = ..., io.ktor.util.date/GMTDate? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/String?> = ...) // io.ktor.server.response/ResponseCookies.append|append(kotlin.String;kotlin.String;io.ktor.http.CookieEncoding;kotlin.Long?;io.ktor.util.date.GMTDate?;kotlin.String?;kotlin.String?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.String?>){}[0]
    final fun appendExpired(kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // io.ktor.server.response/ResponseCookies.appendExpired|appendExpired(kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun get(kotlin/String): io.ktor.http/Cookie? // io.ktor.server.response/ResponseCookies.get|get(kotlin.String){}[0]
}

final class io.ktor.server.routing/AndRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/AndRouteSelector|null[0]
    constructor <init>(io.ktor.server.routing/RouteSelector, io.ktor.server.routing/RouteSelector) // io.ktor.server.routing/AndRouteSelector.<init>|<init>(io.ktor.server.routing.RouteSelector;io.ktor.server.routing.RouteSelector){}[0]

    final val first // io.ktor.server.routing/AndRouteSelector.first|{}first[0]
        final fun <get-first>(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/AndRouteSelector.first.<get-first>|<get-first>(){}[0]
    final val second // io.ktor.server.routing/AndRouteSelector.second|{}second[0]
        final fun <get-second>(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/AndRouteSelector.second.<get-second>|<get-second>(){}[0]

    final fun component1(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/AndRouteSelector.component1|component1(){}[0]
    final fun component2(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/AndRouteSelector.component2|component2(){}[0]
    final fun copy(io.ktor.server.routing/RouteSelector = ..., io.ktor.server.routing/RouteSelector = ...): io.ktor.server.routing/AndRouteSelector // io.ktor.server.routing/AndRouteSelector.copy|copy(io.ktor.server.routing.RouteSelector;io.ktor.server.routing.RouteSelector){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/AndRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/AndRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/AndRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/AndRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/ConstantParameterRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/ConstantParameterRouteSelector|null[0]
    constructor <init>(kotlin/String, kotlin/String) // io.ktor.server.routing/ConstantParameterRouteSelector.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val name // io.ktor.server.routing/ConstantParameterRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/ConstantParameterRouteSelector.name.<get-name>|<get-name>(){}[0]
    final val value // io.ktor.server.routing/ConstantParameterRouteSelector.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.server.routing/ConstantParameterRouteSelector.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/ConstantParameterRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.ktor.server.routing/ConstantParameterRouteSelector.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): io.ktor.server.routing/ConstantParameterRouteSelector // io.ktor.server.routing/ConstantParameterRouteSelector.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/ConstantParameterRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/ConstantParameterRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/ConstantParameterRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/ConstantParameterRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/HostRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/HostRouteSelector|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin.text/Regex>, kotlin.collections/List<kotlin/Int>) // io.ktor.server.routing/HostRouteSelector.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.text.Regex>;kotlin.collections.List<kotlin.Int>){}[0]

    final val hostList // io.ktor.server.routing/HostRouteSelector.hostList|{}hostList[0]
        final fun <get-hostList>(): kotlin.collections/List<kotlin/String> // io.ktor.server.routing/HostRouteSelector.hostList.<get-hostList>|<get-hostList>(){}[0]
    final val hostPatterns // io.ktor.server.routing/HostRouteSelector.hostPatterns|{}hostPatterns[0]
        final fun <get-hostPatterns>(): kotlin.collections/List<kotlin.text/Regex> // io.ktor.server.routing/HostRouteSelector.hostPatterns.<get-hostPatterns>|<get-hostPatterns>(){}[0]
    final val portsList // io.ktor.server.routing/HostRouteSelector.portsList|{}portsList[0]
        final fun <get-portsList>(): kotlin.collections/List<kotlin/Int> // io.ktor.server.routing/HostRouteSelector.portsList.<get-portsList>|<get-portsList>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // io.ktor.server.routing/HostRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<kotlin.text/Regex> // io.ktor.server.routing/HostRouteSelector.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<kotlin/Int> // io.ktor.server.routing/HostRouteSelector.component3|component3(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ..., kotlin.collections/List<kotlin.text/Regex> = ..., kotlin.collections/List<kotlin/Int> = ...): io.ktor.server.routing/HostRouteSelector // io.ktor.server.routing/HostRouteSelector.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.text.Regex>;kotlin.collections.List<kotlin.Int>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/HostRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/HostRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/HostRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/HostRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]

    final object Companion { // io.ktor.server.routing/HostRouteSelector.Companion|null[0]
        final const val HostNameParameter // io.ktor.server.routing/HostRouteSelector.Companion.HostNameParameter|{}HostNameParameter[0]
            final fun <get-HostNameParameter>(): kotlin/String // io.ktor.server.routing/HostRouteSelector.Companion.HostNameParameter.<get-HostNameParameter>|<get-HostNameParameter>(){}[0]
        final const val PortParameter // io.ktor.server.routing/HostRouteSelector.Companion.PortParameter|{}PortParameter[0]
            final fun <get-PortParameter>(): kotlin/String // io.ktor.server.routing/HostRouteSelector.Companion.PortParameter.<get-PortParameter>|<get-PortParameter>(){}[0]
    }
}

final class io.ktor.server.routing/HttpAcceptRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/HttpAcceptRouteSelector|null[0]
    constructor <init>(io.ktor.http/ContentType) // io.ktor.server.routing/HttpAcceptRouteSelector.<init>|<init>(io.ktor.http.ContentType){}[0]

    final val contentType // io.ktor.server.routing/HttpAcceptRouteSelector.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // io.ktor.server.routing/HttpAcceptRouteSelector.contentType.<get-contentType>|<get-contentType>(){}[0]

    final fun component1(): io.ktor.http/ContentType // io.ktor.server.routing/HttpAcceptRouteSelector.component1|component1(){}[0]
    final fun copy(io.ktor.http/ContentType = ...): io.ktor.server.routing/HttpAcceptRouteSelector // io.ktor.server.routing/HttpAcceptRouteSelector.copy|copy(io.ktor.http.ContentType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/HttpAcceptRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/HttpAcceptRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/HttpAcceptRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/HttpAcceptRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/HttpHeaderRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/HttpHeaderRouteSelector|null[0]
    constructor <init>(kotlin/String, kotlin/String) // io.ktor.server.routing/HttpHeaderRouteSelector.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val name // io.ktor.server.routing/HttpHeaderRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/HttpHeaderRouteSelector.name.<get-name>|<get-name>(){}[0]
    final val value // io.ktor.server.routing/HttpHeaderRouteSelector.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.server.routing/HttpHeaderRouteSelector.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/HttpHeaderRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.ktor.server.routing/HttpHeaderRouteSelector.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): io.ktor.server.routing/HttpHeaderRouteSelector // io.ktor.server.routing/HttpHeaderRouteSelector.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/HttpHeaderRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/HttpHeaderRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/HttpHeaderRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/HttpHeaderRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/HttpMethodRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/HttpMethodRouteSelector|null[0]
    constructor <init>(io.ktor.http/HttpMethod) // io.ktor.server.routing/HttpMethodRouteSelector.<init>|<init>(io.ktor.http.HttpMethod){}[0]

    final val method // io.ktor.server.routing/HttpMethodRouteSelector.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // io.ktor.server.routing/HttpMethodRouteSelector.method.<get-method>|<get-method>(){}[0]

    final fun component1(): io.ktor.http/HttpMethod // io.ktor.server.routing/HttpMethodRouteSelector.component1|component1(){}[0]
    final fun copy(io.ktor.http/HttpMethod = ...): io.ktor.server.routing/HttpMethodRouteSelector // io.ktor.server.routing/HttpMethodRouteSelector.copy|copy(io.ktor.http.HttpMethod){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/HttpMethodRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/HttpMethodRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/HttpMethodRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/HttpMethodRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/HttpMultiAcceptRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/HttpMultiAcceptRouteSelector|null[0]
    constructor <init>(kotlin.collections/List<io.ktor.http/ContentType>) // io.ktor.server.routing/HttpMultiAcceptRouteSelector.<init>|<init>(kotlin.collections.List<io.ktor.http.ContentType>){}[0]

    final val contentTypes // io.ktor.server.routing/HttpMultiAcceptRouteSelector.contentTypes|{}contentTypes[0]
        final fun <get-contentTypes>(): kotlin.collections/List<io.ktor.http/ContentType> // io.ktor.server.routing/HttpMultiAcceptRouteSelector.contentTypes.<get-contentTypes>|<get-contentTypes>(){}[0]

    final fun component1(): kotlin.collections/List<io.ktor.http/ContentType> // io.ktor.server.routing/HttpMultiAcceptRouteSelector.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<io.ktor.http/ContentType> = ...): io.ktor.server.routing/HttpMultiAcceptRouteSelector // io.ktor.server.routing/HttpMultiAcceptRouteSelector.copy|copy(kotlin.collections.List<io.ktor.http.ContentType>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/HttpMultiAcceptRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/HttpMultiAcceptRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/HttpMultiAcceptRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/HttpMultiAcceptRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/LocalPortRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/LocalPortRouteSelector|null[0]
    constructor <init>(kotlin/Int) // io.ktor.server.routing/LocalPortRouteSelector.<init>|<init>(kotlin.Int){}[0]

    final val port // io.ktor.server.routing/LocalPortRouteSelector.port|{}port[0]
        final fun <get-port>(): kotlin/Int // io.ktor.server.routing/LocalPortRouteSelector.port.<get-port>|<get-port>(){}[0]

    final fun component1(): kotlin/Int // io.ktor.server.routing/LocalPortRouteSelector.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): io.ktor.server.routing/LocalPortRouteSelector // io.ktor.server.routing/LocalPortRouteSelector.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/LocalPortRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/LocalPortRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/LocalPortRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/LocalPortRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]

    final object Companion { // io.ktor.server.routing/LocalPortRouteSelector.Companion|null[0]
        final const val LocalPortParameter // io.ktor.server.routing/LocalPortRouteSelector.Companion.LocalPortParameter|{}LocalPortParameter[0]
            final fun <get-LocalPortParameter>(): kotlin/String // io.ktor.server.routing/LocalPortRouteSelector.Companion.LocalPortParameter.<get-LocalPortParameter>|<get-LocalPortParameter>(){}[0]
    }
}

final class io.ktor.server.routing/OptionalParameterRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/OptionalParameterRouteSelector|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.routing/OptionalParameterRouteSelector.<init>|<init>(kotlin.String){}[0]

    final val name // io.ktor.server.routing/OptionalParameterRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/OptionalParameterRouteSelector.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/OptionalParameterRouteSelector.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): io.ktor.server.routing/OptionalParameterRouteSelector // io.ktor.server.routing/OptionalParameterRouteSelector.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/OptionalParameterRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/OptionalParameterRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/OptionalParameterRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/OptionalParameterRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/OrRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/OrRouteSelector|null[0]
    constructor <init>(io.ktor.server.routing/RouteSelector, io.ktor.server.routing/RouteSelector) // io.ktor.server.routing/OrRouteSelector.<init>|<init>(io.ktor.server.routing.RouteSelector;io.ktor.server.routing.RouteSelector){}[0]

    final val first // io.ktor.server.routing/OrRouteSelector.first|{}first[0]
        final fun <get-first>(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/OrRouteSelector.first.<get-first>|<get-first>(){}[0]
    final val second // io.ktor.server.routing/OrRouteSelector.second|{}second[0]
        final fun <get-second>(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/OrRouteSelector.second.<get-second>|<get-second>(){}[0]

    final fun component1(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/OrRouteSelector.component1|component1(){}[0]
    final fun component2(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/OrRouteSelector.component2|component2(){}[0]
    final fun copy(io.ktor.server.routing/RouteSelector = ..., io.ktor.server.routing/RouteSelector = ...): io.ktor.server.routing/OrRouteSelector // io.ktor.server.routing/OrRouteSelector.copy|copy(io.ktor.server.routing.RouteSelector;io.ktor.server.routing.RouteSelector){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/OrRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/OrRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/OrRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/OrRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/ParameterRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/ParameterRouteSelector|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.routing/ParameterRouteSelector.<init>|<init>(kotlin.String){}[0]

    final val name // io.ktor.server.routing/ParameterRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/ParameterRouteSelector.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/ParameterRouteSelector.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): io.ktor.server.routing/ParameterRouteSelector // io.ktor.server.routing/ParameterRouteSelector.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/ParameterRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/ParameterRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/ParameterRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/ParameterRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/PathSegmentConstantRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentConstantRouteSelector|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.routing/PathSegmentConstantRouteSelector.<init>|<init>(kotlin.String){}[0]

    final val value // io.ktor.server.routing/PathSegmentConstantRouteSelector.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.server.routing/PathSegmentConstantRouteSelector.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/PathSegmentConstantRouteSelector.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): io.ktor.server.routing/PathSegmentConstantRouteSelector // io.ktor.server.routing/PathSegmentConstantRouteSelector.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/PathSegmentConstantRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/PathSegmentConstantRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentConstantRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentConstantRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final val name // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.name.<get-name>|<get-name>(){}[0]
    final val prefix // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String? // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.prefix.<get-prefix>|<get-prefix>(){}[0]
    final val suffix // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.suffix|{}suffix[0]
        final fun <get-suffix>(): kotlin/String? // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.suffix.<get-suffix>|<get-suffix>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin/String? // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.component2|component2(){}[0]
    final fun component3(): kotlin/String? // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.copy|copy(kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentOptionalParameterRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/PathSegmentParameterRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentParameterRouteSelector|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // io.ktor.server.routing/PathSegmentParameterRouteSelector.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final val name // io.ktor.server.routing/PathSegmentParameterRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/PathSegmentParameterRouteSelector.name.<get-name>|<get-name>(){}[0]
    final val prefix // io.ktor.server.routing/PathSegmentParameterRouteSelector.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String? // io.ktor.server.routing/PathSegmentParameterRouteSelector.prefix.<get-prefix>|<get-prefix>(){}[0]
    final val suffix // io.ktor.server.routing/PathSegmentParameterRouteSelector.suffix|{}suffix[0]
        final fun <get-suffix>(): kotlin/String? // io.ktor.server.routing/PathSegmentParameterRouteSelector.suffix.<get-suffix>|<get-suffix>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/PathSegmentParameterRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin/String? // io.ktor.server.routing/PathSegmentParameterRouteSelector.component2|component2(){}[0]
    final fun component3(): kotlin/String? // io.ktor.server.routing/PathSegmentParameterRouteSelector.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): io.ktor.server.routing/PathSegmentParameterRouteSelector // io.ktor.server.routing/PathSegmentParameterRouteSelector.copy|copy(kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/PathSegmentParameterRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/PathSegmentParameterRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentParameterRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentParameterRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/PathSegmentRegexRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentRegexRouteSelector|null[0]
    constructor <init>(kotlin.text/Regex) // io.ktor.server.routing/PathSegmentRegexRouteSelector.<init>|<init>(kotlin.text.Regex){}[0]

    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentRegexRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentRegexRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]

    final object Companion // io.ktor.server.routing/PathSegmentRegexRouteSelector.Companion|null[0]
}

final class io.ktor.server.routing/PathSegmentTailcardRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentTailcardRouteSelector|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ...) // io.ktor.server.routing/PathSegmentTailcardRouteSelector.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val name // io.ktor.server.routing/PathSegmentTailcardRouteSelector.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.ktor.server.routing/PathSegmentTailcardRouteSelector.name.<get-name>|<get-name>(){}[0]
    final val prefix // io.ktor.server.routing/PathSegmentTailcardRouteSelector.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String // io.ktor.server.routing/PathSegmentTailcardRouteSelector.prefix.<get-prefix>|<get-prefix>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/PathSegmentTailcardRouteSelector.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.ktor.server.routing/PathSegmentTailcardRouteSelector.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): io.ktor.server.routing/PathSegmentTailcardRouteSelector // io.ktor.server.routing/PathSegmentTailcardRouteSelector.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/PathSegmentTailcardRouteSelector.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/PathSegmentTailcardRouteSelector.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentTailcardRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentTailcardRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/RootRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/RootRouteSelector|null[0]
    constructor <init>(kotlin/String = ...) // io.ktor.server.routing/RootRouteSelector.<init>|<init>(kotlin.String){}[0]

    final fun toString(): kotlin/String // io.ktor.server.routing/RootRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RootRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final class io.ktor.server.routing/RoutingCall : io.ktor.server.application/ApplicationCall { // io.ktor.server.routing/RoutingCall|null[0]
    final val application // io.ktor.server.routing/RoutingCall.application|{}application[0]
        final fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.routing/RoutingCall.application.<get-application>|<get-application>(){}[0]
    final val attributes // io.ktor.server.routing/RoutingCall.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.routing/RoutingCall.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val coroutineContext // io.ktor.server.routing/RoutingCall.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.routing/RoutingCall.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val parameters // io.ktor.server.routing/RoutingCall.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingCall.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val pathParameters // io.ktor.server.routing/RoutingCall.pathParameters|{}pathParameters[0]
        final fun <get-pathParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingCall.pathParameters.<get-pathParameters>|<get-pathParameters>(){}[0]
    final val pipelineCall // io.ktor.server.routing/RoutingCall.pipelineCall|{}pipelineCall[0]
        final fun <get-pipelineCall>(): io.ktor.server.routing/RoutingPipelineCall // io.ktor.server.routing/RoutingCall.pipelineCall.<get-pipelineCall>|<get-pipelineCall>(){}[0]
    final val queryParameters // io.ktor.server.routing/RoutingCall.queryParameters|{}queryParameters[0]
        final fun <get-queryParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingCall.queryParameters.<get-queryParameters>|<get-queryParameters>(){}[0]
    final val request // io.ktor.server.routing/RoutingCall.request|{}request[0]
        final fun <get-request>(): io.ktor.server.routing/RoutingRequest // io.ktor.server.routing/RoutingCall.request.<get-request>|<get-request>(){}[0]
    final val response // io.ktor.server.routing/RoutingCall.response|{}response[0]
        final fun <get-response>(): io.ktor.server.routing/RoutingResponse // io.ktor.server.routing/RoutingCall.response.<get-response>|<get-response>(){}[0]
    final val route // io.ktor.server.routing/RoutingCall.route|{}route[0]
        final fun <get-route>(): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingCall.route.<get-route>|<get-route>(){}[0]

    final suspend fun <#A1: kotlin/Any?> receiveNullable(io.ktor.util.reflect/TypeInfo): #A1? // io.ktor.server.routing/RoutingCall.receiveNullable|receiveNullable(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any?>}[0]
    final suspend fun respond(kotlin/Any?, io.ktor.util.reflect/TypeInfo?) // io.ktor.server.routing/RoutingCall.respond|respond(kotlin.Any?;io.ktor.util.reflect.TypeInfo?){}[0]
}

final class io.ktor.server.routing/RoutingContext { // io.ktor.server.routing/RoutingContext|null[0]
    constructor <init>(io.ktor.server.routing/RoutingCall) // io.ktor.server.routing/RoutingContext.<init>|<init>(io.ktor.server.routing.RoutingCall){}[0]

    final val call // io.ktor.server.routing/RoutingContext.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // io.ktor.server.routing/RoutingContext.call.<get-call>|<get-call>(){}[0]
}

final class io.ktor.server.routing/RoutingPath { // io.ktor.server.routing/RoutingPath|null[0]
    final val parts // io.ktor.server.routing/RoutingPath.parts|{}parts[0]
        final fun <get-parts>(): kotlin.collections/List<io.ktor.server.routing/RoutingPathSegment> // io.ktor.server.routing/RoutingPath.parts.<get-parts>|<get-parts>(){}[0]

    final fun toString(): kotlin/String // io.ktor.server.routing/RoutingPath.toString|toString(){}[0]

    final object Companion { // io.ktor.server.routing/RoutingPath.Companion|null[0]
        final val root // io.ktor.server.routing/RoutingPath.Companion.root|{}root[0]
            final fun <get-root>(): io.ktor.server.routing/RoutingPath // io.ktor.server.routing/RoutingPath.Companion.root.<get-root>|<get-root>(){}[0]

        final fun parse(kotlin/String): io.ktor.server.routing/RoutingPath // io.ktor.server.routing/RoutingPath.Companion.parse|parse(kotlin.String){}[0]
    }
}

final class io.ktor.server.routing/RoutingPathSegment { // io.ktor.server.routing/RoutingPathSegment|null[0]
    constructor <init>(kotlin/String, io.ktor.server.routing/RoutingPathSegmentKind) // io.ktor.server.routing/RoutingPathSegment.<init>|<init>(kotlin.String;io.ktor.server.routing.RoutingPathSegmentKind){}[0]

    final val kind // io.ktor.server.routing/RoutingPathSegment.kind|{}kind[0]
        final fun <get-kind>(): io.ktor.server.routing/RoutingPathSegmentKind // io.ktor.server.routing/RoutingPathSegment.kind.<get-kind>|<get-kind>(){}[0]
    final val value // io.ktor.server.routing/RoutingPathSegment.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.ktor.server.routing/RoutingPathSegment.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // io.ktor.server.routing/RoutingPathSegment.component1|component1(){}[0]
    final fun component2(): io.ktor.server.routing/RoutingPathSegmentKind // io.ktor.server.routing/RoutingPathSegment.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., io.ktor.server.routing/RoutingPathSegmentKind = ...): io.ktor.server.routing/RoutingPathSegment // io.ktor.server.routing/RoutingPathSegment.copy|copy(kotlin.String;io.ktor.server.routing.RoutingPathSegmentKind){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/RoutingPathSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.ktor.server.routing/RoutingPathSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/RoutingPathSegment.toString|toString(){}[0]
}

final class io.ktor.server.routing/RoutingPipelineCall : io.ktor.server.application/PipelineCall, kotlinx.coroutines/CoroutineScope { // io.ktor.server.routing/RoutingPipelineCall|null[0]
    constructor <init>(io.ktor.server.application/PipelineCall, io.ktor.server.routing/RoutingNode, kotlin.coroutines/CoroutineContext, io.ktor.server.request/ApplicationReceivePipeline, io.ktor.server.response/ApplicationSendPipeline, io.ktor.http/Parameters) // io.ktor.server.routing/RoutingPipelineCall.<init>|<init>(io.ktor.server.application.PipelineCall;io.ktor.server.routing.RoutingNode;kotlin.coroutines.CoroutineContext;io.ktor.server.request.ApplicationReceivePipeline;io.ktor.server.response.ApplicationSendPipeline;io.ktor.http.Parameters){}[0]

    final val application // io.ktor.server.routing/RoutingPipelineCall.application|{}application[0]
        final fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.routing/RoutingPipelineCall.application.<get-application>|<get-application>(){}[0]
    final val attributes // io.ktor.server.routing/RoutingPipelineCall.attributes|{}attributes[0]
        final fun <get-attributes>(): io.ktor.util/Attributes // io.ktor.server.routing/RoutingPipelineCall.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val coroutineContext // io.ktor.server.routing/RoutingPipelineCall.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.ktor.server.routing/RoutingPipelineCall.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val engineCall // io.ktor.server.routing/RoutingPipelineCall.engineCall|{}engineCall[0]
        final fun <get-engineCall>(): io.ktor.server.application/PipelineCall // io.ktor.server.routing/RoutingPipelineCall.engineCall.<get-engineCall>|<get-engineCall>(){}[0]
    final val parameters // io.ktor.server.routing/RoutingPipelineCall.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingPipelineCall.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val pathParameters // io.ktor.server.routing/RoutingPipelineCall.pathParameters|{}pathParameters[0]
        final fun <get-pathParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingPipelineCall.pathParameters.<get-pathParameters>|<get-pathParameters>(){}[0]
    final val request // io.ktor.server.routing/RoutingPipelineCall.request|{}request[0]
        final fun <get-request>(): io.ktor.server.routing/RoutingPipelineRequest // io.ktor.server.routing/RoutingPipelineCall.request.<get-request>|<get-request>(){}[0]
    final val response // io.ktor.server.routing/RoutingPipelineCall.response|{}response[0]
        final fun <get-response>(): io.ktor.server.routing/RoutingPipelineResponse // io.ktor.server.routing/RoutingPipelineCall.response.<get-response>|<get-response>(){}[0]
    final val route // io.ktor.server.routing/RoutingPipelineCall.route|{}route[0]
        final fun <get-route>(): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingPipelineCall.route.<get-route>|<get-route>(){}[0]

    final fun toString(): kotlin/String // io.ktor.server.routing/RoutingPipelineCall.toString|toString(){}[0]
}

final class io.ktor.server.routing/RoutingPipelineRequest : io.ktor.server.request/PipelineRequest { // io.ktor.server.routing/RoutingPipelineRequest|null[0]
    constructor <init>(io.ktor.server.routing/RoutingPipelineCall, io.ktor.server.request/ApplicationReceivePipeline, io.ktor.server.request/PipelineRequest) // io.ktor.server.routing/RoutingPipelineRequest.<init>|<init>(io.ktor.server.routing.RoutingPipelineCall;io.ktor.server.request.ApplicationReceivePipeline;io.ktor.server.request.PipelineRequest){}[0]

    final val call // io.ktor.server.routing/RoutingPipelineRequest.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingPipelineCall // io.ktor.server.routing/RoutingPipelineRequest.call.<get-call>|<get-call>(){}[0]
    final val cookies // io.ktor.server.routing/RoutingPipelineRequest.cookies|{}cookies[0]
        final fun <get-cookies>(): io.ktor.server.request/RequestCookies // io.ktor.server.routing/RoutingPipelineRequest.cookies.<get-cookies>|<get-cookies>(){}[0]
    final val engineRequest // io.ktor.server.routing/RoutingPipelineRequest.engineRequest|{}engineRequest[0]
        final fun <get-engineRequest>(): io.ktor.server.request/PipelineRequest // io.ktor.server.routing/RoutingPipelineRequest.engineRequest.<get-engineRequest>|<get-engineRequest>(){}[0]
    final val headers // io.ktor.server.routing/RoutingPipelineRequest.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.server.routing/RoutingPipelineRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val local // io.ktor.server.routing/RoutingPipelineRequest.local|{}local[0]
        final fun <get-local>(): io.ktor.http/RequestConnectionPoint // io.ktor.server.routing/RoutingPipelineRequest.local.<get-local>|<get-local>(){}[0]
    final val pipeline // io.ktor.server.routing/RoutingPipelineRequest.pipeline|{}pipeline[0]
        final fun <get-pipeline>(): io.ktor.server.request/ApplicationReceivePipeline // io.ktor.server.routing/RoutingPipelineRequest.pipeline.<get-pipeline>|<get-pipeline>(){}[0]
    final val queryParameters // io.ktor.server.routing/RoutingPipelineRequest.queryParameters|{}queryParameters[0]
        final fun <get-queryParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingPipelineRequest.queryParameters.<get-queryParameters>|<get-queryParameters>(){}[0]
    final val rawQueryParameters // io.ktor.server.routing/RoutingPipelineRequest.rawQueryParameters|{}rawQueryParameters[0]
        final fun <get-rawQueryParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingPipelineRequest.rawQueryParameters.<get-rawQueryParameters>|<get-rawQueryParameters>(){}[0]

    final fun receiveChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.routing/RoutingPipelineRequest.receiveChannel|receiveChannel(){}[0]
    final fun setHeader(kotlin/String, kotlin.collections/List<kotlin/String>?) // io.ktor.server.routing/RoutingPipelineRequest.setHeader|setHeader(kotlin.String;kotlin.collections.List<kotlin.String>?){}[0]
    final fun setReceiveChannel(io.ktor.utils.io/ByteReadChannel) // io.ktor.server.routing/RoutingPipelineRequest.setReceiveChannel|setReceiveChannel(io.ktor.utils.io.ByteReadChannel){}[0]
}

final class io.ktor.server.routing/RoutingPipelineResponse : io.ktor.server.response/PipelineResponse { // io.ktor.server.routing/RoutingPipelineResponse|null[0]
    constructor <init>(io.ktor.server.routing/RoutingPipelineCall, io.ktor.server.response/ApplicationSendPipeline, io.ktor.server.response/PipelineResponse) // io.ktor.server.routing/RoutingPipelineResponse.<init>|<init>(io.ktor.server.routing.RoutingPipelineCall;io.ktor.server.response.ApplicationSendPipeline;io.ktor.server.response.PipelineResponse){}[0]

    final val call // io.ktor.server.routing/RoutingPipelineResponse.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingPipelineCall // io.ktor.server.routing/RoutingPipelineResponse.call.<get-call>|<get-call>(){}[0]
    final val cookies // io.ktor.server.routing/RoutingPipelineResponse.cookies|{}cookies[0]
        final fun <get-cookies>(): io.ktor.server.response/ResponseCookies // io.ktor.server.routing/RoutingPipelineResponse.cookies.<get-cookies>|<get-cookies>(){}[0]
    final val engineResponse // io.ktor.server.routing/RoutingPipelineResponse.engineResponse|{}engineResponse[0]
        final fun <get-engineResponse>(): io.ktor.server.response/PipelineResponse // io.ktor.server.routing/RoutingPipelineResponse.engineResponse.<get-engineResponse>|<get-engineResponse>(){}[0]
    final val headers // io.ktor.server.routing/RoutingPipelineResponse.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.server.response/ResponseHeaders // io.ktor.server.routing/RoutingPipelineResponse.headers.<get-headers>|<get-headers>(){}[0]
    final val isCommitted // io.ktor.server.routing/RoutingPipelineResponse.isCommitted|{}isCommitted[0]
        final fun <get-isCommitted>(): kotlin/Boolean // io.ktor.server.routing/RoutingPipelineResponse.isCommitted.<get-isCommitted>|<get-isCommitted>(){}[0]
    final val isSent // io.ktor.server.routing/RoutingPipelineResponse.isSent|{}isSent[0]
        final fun <get-isSent>(): kotlin/Boolean // io.ktor.server.routing/RoutingPipelineResponse.isSent.<get-isSent>|<get-isSent>(){}[0]
    final val pipeline // io.ktor.server.routing/RoutingPipelineResponse.pipeline|{}pipeline[0]
        final fun <get-pipeline>(): io.ktor.server.response/ApplicationSendPipeline // io.ktor.server.routing/RoutingPipelineResponse.pipeline.<get-pipeline>|<get-pipeline>(){}[0]

    final fun push(io.ktor.server.response/ResponsePushBuilder) // io.ktor.server.routing/RoutingPipelineResponse.push|push(io.ktor.server.response.ResponsePushBuilder){}[0]
    final fun status(): io.ktor.http/HttpStatusCode? // io.ktor.server.routing/RoutingPipelineResponse.status|status(){}[0]
    final fun status(io.ktor.http/HttpStatusCode) // io.ktor.server.routing/RoutingPipelineResponse.status|status(io.ktor.http.HttpStatusCode){}[0]
}

final class io.ktor.server.routing/RoutingRequest : io.ktor.server.request/ApplicationRequest { // io.ktor.server.routing/RoutingRequest|null[0]
    final val call // io.ktor.server.routing/RoutingRequest.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // io.ktor.server.routing/RoutingRequest.call.<get-call>|<get-call>(){}[0]
    final val cookies // io.ktor.server.routing/RoutingRequest.cookies|{}cookies[0]
        final fun <get-cookies>(): io.ktor.server.request/RequestCookies // io.ktor.server.routing/RoutingRequest.cookies.<get-cookies>|<get-cookies>(){}[0]
    final val headers // io.ktor.server.routing/RoutingRequest.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.http/Headers // io.ktor.server.routing/RoutingRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val local // io.ktor.server.routing/RoutingRequest.local|{}local[0]
        final fun <get-local>(): io.ktor.http/RequestConnectionPoint // io.ktor.server.routing/RoutingRequest.local.<get-local>|<get-local>(){}[0]
    final val pathVariables // io.ktor.server.routing/RoutingRequest.pathVariables|{}pathVariables[0]
        final fun <get-pathVariables>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingRequest.pathVariables.<get-pathVariables>|<get-pathVariables>(){}[0]
    final val queryParameters // io.ktor.server.routing/RoutingRequest.queryParameters|{}queryParameters[0]
        final fun <get-queryParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingRequest.queryParameters.<get-queryParameters>|<get-queryParameters>(){}[0]
    final val rawQueryParameters // io.ktor.server.routing/RoutingRequest.rawQueryParameters|{}rawQueryParameters[0]
        final fun <get-rawQueryParameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingRequest.rawQueryParameters.<get-rawQueryParameters>|<get-rawQueryParameters>(){}[0]

    final fun receiveChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.routing/RoutingRequest.receiveChannel|receiveChannel(){}[0]
}

final class io.ktor.server.routing/RoutingResolveContext { // io.ktor.server.routing/RoutingResolveContext|null[0]
    constructor <init>(io.ktor.server.routing/RoutingNode, io.ktor.server.application/PipelineCall, kotlin.collections/List<kotlin/Function1<io.ktor.server.routing/RoutingResolveTrace, kotlin/Unit>>) // io.ktor.server.routing/RoutingResolveContext.<init>|<init>(io.ktor.server.routing.RoutingNode;io.ktor.server.application.PipelineCall;kotlin.collections.List<kotlin.Function1<io.ktor.server.routing.RoutingResolveTrace,kotlin.Unit>>){}[0]

    final val call // io.ktor.server.routing/RoutingResolveContext.call|{}call[0]
        final fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.routing/RoutingResolveContext.call.<get-call>|<get-call>(){}[0]
    final val hasTrailingSlash // io.ktor.server.routing/RoutingResolveContext.hasTrailingSlash|{}hasTrailingSlash[0]
        final fun <get-hasTrailingSlash>(): kotlin/Boolean // io.ktor.server.routing/RoutingResolveContext.hasTrailingSlash.<get-hasTrailingSlash>|<get-hasTrailingSlash>(){}[0]
    final val routing // io.ktor.server.routing/RoutingResolveContext.routing|{}routing[0]
        final fun <get-routing>(): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingResolveContext.routing.<get-routing>|<get-routing>(){}[0]
    final val segments // io.ktor.server.routing/RoutingResolveContext.segments|{}segments[0]
        final fun <get-segments>(): kotlin.collections/List<kotlin/String> // io.ktor.server.routing/RoutingResolveContext.segments.<get-segments>|<get-segments>(){}[0]

    final suspend fun resolve(): io.ktor.server.routing/RoutingResolveResult // io.ktor.server.routing/RoutingResolveContext.resolve|resolve(){}[0]
}

final class io.ktor.server.routing/RoutingResolveTrace { // io.ktor.server.routing/RoutingResolveTrace|null[0]
    constructor <init>(io.ktor.server.application/PipelineCall, kotlin.collections/List<kotlin/String>) // io.ktor.server.routing/RoutingResolveTrace.<init>|<init>(io.ktor.server.application.PipelineCall;kotlin.collections.List<kotlin.String>){}[0]

    final val call // io.ktor.server.routing/RoutingResolveTrace.call|{}call[0]
        final fun <get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.routing/RoutingResolveTrace.call.<get-call>|<get-call>(){}[0]
    final val segments // io.ktor.server.routing/RoutingResolveTrace.segments|{}segments[0]
        final fun <get-segments>(): kotlin.collections/List<kotlin/String> // io.ktor.server.routing/RoutingResolveTrace.segments.<get-segments>|<get-segments>(){}[0]

    final fun addCandidate(kotlin.collections/List<io.ktor.server.routing/RoutingResolveResult.Success>) // io.ktor.server.routing/RoutingResolveTrace.addCandidate|addCandidate(kotlin.collections.List<io.ktor.server.routing.RoutingResolveResult.Success>){}[0]
    final fun begin(io.ktor.server.routing/RoutingNode, kotlin/Int) // io.ktor.server.routing/RoutingResolveTrace.begin|begin(io.ktor.server.routing.RoutingNode;kotlin.Int){}[0]
    final fun buildText(): kotlin/String // io.ktor.server.routing/RoutingResolveTrace.buildText|buildText(){}[0]
    final fun finish(io.ktor.server.routing/RoutingNode, kotlin/Int, io.ktor.server.routing/RoutingResolveResult) // io.ktor.server.routing/RoutingResolveTrace.finish|finish(io.ktor.server.routing.RoutingNode;kotlin.Int;io.ktor.server.routing.RoutingResolveResult){}[0]
    final fun registerFinalResult(io.ktor.server.routing/RoutingResolveResult) // io.ktor.server.routing/RoutingResolveTrace.registerFinalResult|registerFinalResult(io.ktor.server.routing.RoutingResolveResult){}[0]
    final fun skip(io.ktor.server.routing/RoutingNode, kotlin/Int, io.ktor.server.routing/RoutingResolveResult) // io.ktor.server.routing/RoutingResolveTrace.skip|skip(io.ktor.server.routing.RoutingNode;kotlin.Int;io.ktor.server.routing.RoutingResolveResult){}[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/RoutingResolveTrace.toString|toString(){}[0]
}

final class io.ktor.server.routing/RoutingResponse : io.ktor.server.response/ApplicationResponse { // io.ktor.server.routing/RoutingResponse|null[0]
    final val call // io.ktor.server.routing/RoutingResponse.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // io.ktor.server.routing/RoutingResponse.call.<get-call>|<get-call>(){}[0]
    final val cookies // io.ktor.server.routing/RoutingResponse.cookies|{}cookies[0]
        final fun <get-cookies>(): io.ktor.server.response/ResponseCookies // io.ktor.server.routing/RoutingResponse.cookies.<get-cookies>|<get-cookies>(){}[0]
    final val headers // io.ktor.server.routing/RoutingResponse.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.server.response/ResponseHeaders // io.ktor.server.routing/RoutingResponse.headers.<get-headers>|<get-headers>(){}[0]
    final val isCommitted // io.ktor.server.routing/RoutingResponse.isCommitted|{}isCommitted[0]
        final fun <get-isCommitted>(): kotlin/Boolean // io.ktor.server.routing/RoutingResponse.isCommitted.<get-isCommitted>|<get-isCommitted>(){}[0]
    final val isSent // io.ktor.server.routing/RoutingResponse.isSent|{}isSent[0]
        final fun <get-isSent>(): kotlin/Boolean // io.ktor.server.routing/RoutingResponse.isSent.<get-isSent>|<get-isSent>(){}[0]

    final fun push(io.ktor.server.response/ResponsePushBuilder) // io.ktor.server.routing/RoutingResponse.push|push(io.ktor.server.response.ResponsePushBuilder){}[0]
    final fun status(): io.ktor.http/HttpStatusCode? // io.ktor.server.routing/RoutingResponse.status|status(){}[0]
    final fun status(io.ktor.http/HttpStatusCode) // io.ktor.server.routing/RoutingResponse.status|status(io.ktor.http.HttpStatusCode){}[0]
}

final class io.ktor.server.routing/RoutingRoot : io.ktor.server.routing/Routing, io.ktor.server.routing/RoutingNode { // io.ktor.server.routing/RoutingRoot|null[0]
    constructor <init>(io.ktor.server.application/Application) // io.ktor.server.routing/RoutingRoot.<init>|<init>(io.ktor.server.application.Application){}[0]

    final val application // io.ktor.server.routing/RoutingRoot.application|{}application[0]
        final fun <get-application>(): io.ktor.server.application/Application // io.ktor.server.routing/RoutingRoot.application.<get-application>|<get-application>(){}[0]

    final fun trace(kotlin/Function1<io.ktor.server.routing/RoutingResolveTrace, kotlin/Unit>) // io.ktor.server.routing/RoutingRoot.trace|trace(kotlin.Function1<io.ktor.server.routing.RoutingResolveTrace,kotlin.Unit>){}[0]
    final suspend fun interceptor(io.ktor.util.pipeline/PipelineContext<kotlin/Unit, io.ktor.server.application/PipelineCall>) // io.ktor.server.routing/RoutingRoot.interceptor|interceptor(io.ktor.util.pipeline.PipelineContext<kotlin.Unit,io.ktor.server.application.PipelineCall>){}[0]

    final object Plugin : io.ktor.server.application/BaseApplicationPlugin<io.ktor.server.application/Application, io.ktor.server.routing/Routing, io.ktor.server.routing/RoutingRoot> { // io.ktor.server.routing/RoutingRoot.Plugin|null[0]
        final val RoutingCallFinished // io.ktor.server.routing/RoutingRoot.Plugin.RoutingCallFinished|{}RoutingCallFinished[0]
            final fun <get-RoutingCallFinished>(): io.ktor.events/EventDefinition<io.ktor.server.routing/RoutingCall> // io.ktor.server.routing/RoutingRoot.Plugin.RoutingCallFinished.<get-RoutingCallFinished>|<get-RoutingCallFinished>(){}[0]
        final val RoutingCallStarted // io.ktor.server.routing/RoutingRoot.Plugin.RoutingCallStarted|{}RoutingCallStarted[0]
            final fun <get-RoutingCallStarted>(): io.ktor.events/EventDefinition<io.ktor.server.routing/RoutingCall> // io.ktor.server.routing/RoutingRoot.Plugin.RoutingCallStarted.<get-RoutingCallStarted>|<get-RoutingCallStarted>(){}[0]
        final val key // io.ktor.server.routing/RoutingRoot.Plugin.key|{}key[0]
            final fun <get-key>(): io.ktor.util/AttributeKey<io.ktor.server.routing/RoutingRoot> // io.ktor.server.routing/RoutingRoot.Plugin.key.<get-key>|<get-key>(){}[0]

        final fun install(io.ktor.server.application/Application, kotlin/Function1<io.ktor.server.routing/Routing, kotlin/Unit>): io.ktor.server.routing/RoutingRoot // io.ktor.server.routing/RoutingRoot.Plugin.install|install(io.ktor.server.application.Application;kotlin.Function1<io.ktor.server.routing.Routing,kotlin.Unit>){}[0]
    }
}

open class <#A: kotlin/Any> io.ktor.server.application/CallContext { // io.ktor.server.application/CallContext|null[0]
    final val pluginConfig // io.ktor.server.application/CallContext.pluginConfig|{}pluginConfig[0]
        final fun <get-pluginConfig>(): #A // io.ktor.server.application/CallContext.pluginConfig.<get-pluginConfig>|<get-pluginConfig>(){}[0]
    open val context // io.ktor.server.application/CallContext.context|{}context[0]
        open fun <get-context>(): io.ktor.util.pipeline/PipelineContext<*, io.ktor.server.application/PipelineCall> // io.ktor.server.application/CallContext.context.<get-context>|<get-context>(){}[0]
}

open class io.ktor.server.application/ApplicationCallPipeline : io.ktor.util.pipeline/Pipeline<kotlin/Unit, io.ktor.server.application/PipelineCall> { // io.ktor.server.application/ApplicationCallPipeline|null[0]
    constructor <init>(kotlin/Boolean = ..., io.ktor.server.application/ApplicationEnvironment) // io.ktor.server.application/ApplicationCallPipeline.<init>|<init>(kotlin.Boolean;io.ktor.server.application.ApplicationEnvironment){}[0]

    final val developmentMode // io.ktor.server.application/ApplicationCallPipeline.developmentMode|{}developmentMode[0]
        final fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.application/ApplicationCallPipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]
    final val environment // io.ktor.server.application/ApplicationCallPipeline.environment|{}environment[0]
        final fun <get-environment>(): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.application/ApplicationCallPipeline.environment.<get-environment>|<get-environment>(){}[0]
    final val receivePipeline // io.ktor.server.application/ApplicationCallPipeline.receivePipeline|{}receivePipeline[0]
        final fun <get-receivePipeline>(): io.ktor.server.request/ApplicationReceivePipeline // io.ktor.server.application/ApplicationCallPipeline.receivePipeline.<get-receivePipeline>|<get-receivePipeline>(){}[0]
    final val sendPipeline // io.ktor.server.application/ApplicationCallPipeline.sendPipeline|{}sendPipeline[0]
        final fun <get-sendPipeline>(): io.ktor.server.response/ApplicationSendPipeline // io.ktor.server.application/ApplicationCallPipeline.sendPipeline.<get-sendPipeline>|<get-sendPipeline>(){}[0]

    final object ApplicationPhase { // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase|null[0]
        final val Call // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Call|{}Call[0]
            final fun <get-Call>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Call.<get-Call>|<get-Call>(){}[0]
        final val Fallback // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Fallback|{}Fallback[0]
            final fun <get-Fallback>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Fallback.<get-Fallback>|<get-Fallback>(){}[0]
        final val Features // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Features|{}Features[0]
            final fun <get-Features>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Features.<get-Features>|<get-Features>(){}[0]
        final val Monitoring // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Monitoring|{}Monitoring[0]
            final fun <get-Monitoring>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Monitoring.<get-Monitoring>|<get-Monitoring>(){}[0]
        final val Plugins // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Plugins|{}Plugins[0]
            final fun <get-Plugins>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Plugins.<get-Plugins>|<get-Plugins>(){}[0]
        final val Setup // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Setup|{}Setup[0]
            final fun <get-Setup>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.application/ApplicationCallPipeline.ApplicationPhase.Setup.<get-Setup>|<get-Setup>(){}[0]
    }
}

open class io.ktor.server.application/DuplicateApplicationPluginException : kotlin/Exception { // io.ktor.server.application/DuplicateApplicationPluginException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.application/DuplicateApplicationPluginException.<init>|<init>(kotlin.String){}[0]
}

open class io.ktor.server.config/MapApplicationConfig : io.ktor.server.config/ApplicationConfig { // io.ktor.server.config/MapApplicationConfig|null[0]
    constructor <init>() // io.ktor.server.config/MapApplicationConfig.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/List<kotlin/Pair<kotlin/String, kotlin/String>>) // io.ktor.server.config/MapApplicationConfig.<init>|<init>(kotlin.collections.List<kotlin.Pair<kotlin.String,kotlin.String>>){}[0]
    constructor <init>(kotlin/Array<out kotlin/Pair<kotlin/String, kotlin/String>>...) // io.ktor.server.config/MapApplicationConfig.<init>|<init>(kotlin.Array<out|kotlin.Pair<kotlin.String,kotlin.String>>...){}[0]

    final val map // io.ktor.server.config/MapApplicationConfig.map|{}map[0]
        final fun <get-map>(): kotlin.collections/MutableMap<kotlin/String, kotlin/String> // io.ktor.server.config/MapApplicationConfig.map.<get-map>|<get-map>(){}[0]
    final val path // io.ktor.server.config/MapApplicationConfig.path|{}path[0]
        final fun <get-path>(): kotlin/String // io.ktor.server.config/MapApplicationConfig.path.<get-path>|<get-path>(){}[0]

    final fun put(kotlin/String, kotlin.collections/Iterable<kotlin/String>) // io.ktor.server.config/MapApplicationConfig.put|put(kotlin.String;kotlin.collections.Iterable<kotlin.String>){}[0]
    final fun put(kotlin/String, kotlin/String) // io.ktor.server.config/MapApplicationConfig.put|put(kotlin.String;kotlin.String){}[0]
    open fun config(kotlin/String): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/MapApplicationConfig.config|config(kotlin.String){}[0]
    open fun configList(kotlin/String): kotlin.collections/List<io.ktor.server.config/ApplicationConfig> // io.ktor.server.config/MapApplicationConfig.configList|configList(kotlin.String){}[0]
    open fun keys(): kotlin.collections/Set<kotlin/String> // io.ktor.server.config/MapApplicationConfig.keys|keys(){}[0]
    open fun property(kotlin/String): io.ktor.server.config/ApplicationConfigValue // io.ktor.server.config/MapApplicationConfig.property|property(kotlin.String){}[0]
    open fun propertyOrNull(kotlin/String): io.ktor.server.config/ApplicationConfigValue? // io.ktor.server.config/MapApplicationConfig.propertyOrNull|propertyOrNull(kotlin.String){}[0]
    open fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // io.ktor.server.config/MapApplicationConfig.toMap|toMap(){}[0]

    final class MapApplicationConfigValue : io.ktor.server.config/ApplicationConfigValue { // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue|null[0]
        constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/String>, kotlin/String) // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.String){}[0]

        final val map // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.map|{}map[0]
            final fun <get-map>(): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.map.<get-map>|<get-map>(){}[0]
        final val path // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.path|{}path[0]
            final fun <get-path>(): kotlin/String // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.path.<get-path>|<get-path>(){}[0]

        final fun getList(): kotlin.collections/List<kotlin/String> // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.getList|getList(){}[0]
        final fun getString(): kotlin/String // io.ktor.server.config/MapApplicationConfig.MapApplicationConfigValue.getString|getString(){}[0]
    }
}

open class io.ktor.server.engine.internal/ClosedChannelException : kotlinx.io/IOException { // io.ktor.server.engine.internal/ClosedChannelException|null[0]
    constructor <init>(kotlin/String) // io.ktor.server.engine.internal/ClosedChannelException.<init>|<init>(kotlin.String){}[0]
}

open class io.ktor.server.engine/EngineConnectorBuilder : io.ktor.server.engine/EngineConnectorConfig { // io.ktor.server.engine/EngineConnectorBuilder|null[0]
    constructor <init>(io.ktor.server.engine/ConnectorType = ...) // io.ktor.server.engine/EngineConnectorBuilder.<init>|<init>(io.ktor.server.engine.ConnectorType){}[0]

    open val type // io.ktor.server.engine/EngineConnectorBuilder.type|{}type[0]
        open fun <get-type>(): io.ktor.server.engine/ConnectorType // io.ktor.server.engine/EngineConnectorBuilder.type.<get-type>|<get-type>(){}[0]

    open var host // io.ktor.server.engine/EngineConnectorBuilder.host|{}host[0]
        open fun <get-host>(): kotlin/String // io.ktor.server.engine/EngineConnectorBuilder.host.<get-host>|<get-host>(){}[0]
        open fun <set-host>(kotlin/String) // io.ktor.server.engine/EngineConnectorBuilder.host.<set-host>|<set-host>(kotlin.String){}[0]
    open var port // io.ktor.server.engine/EngineConnectorBuilder.port|{}port[0]
        open fun <get-port>(): kotlin/Int // io.ktor.server.engine/EngineConnectorBuilder.port.<get-port>|<get-port>(){}[0]
        open fun <set-port>(kotlin/Int) // io.ktor.server.engine/EngineConnectorBuilder.port.<set-port>|<set-port>(kotlin.Int){}[0]

    open fun toString(): kotlin/String // io.ktor.server.engine/EngineConnectorBuilder.toString|toString(){}[0]
}

open class io.ktor.server.plugins/BadRequestException : kotlin/Exception { // io.ktor.server.plugins/BadRequestException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // io.ktor.server.plugins/BadRequestException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

open class io.ktor.server.request/ApplicationReceivePipeline : io.ktor.util.pipeline/Pipeline<kotlin/Any, io.ktor.server.application/PipelineCall> { // io.ktor.server.request/ApplicationReceivePipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.server.request/ApplicationReceivePipeline.<init>|<init>(kotlin.Boolean){}[0]

    open val developmentMode // io.ktor.server.request/ApplicationReceivePipeline.developmentMode|{}developmentMode[0]
        open fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.request/ApplicationReceivePipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.server.request/ApplicationReceivePipeline.Phases|null[0]
        final val After // io.ktor.server.request/ApplicationReceivePipeline.Phases.After|{}After[0]
            final fun <get-After>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.request/ApplicationReceivePipeline.Phases.After.<get-After>|<get-After>(){}[0]
        final val Before // io.ktor.server.request/ApplicationReceivePipeline.Phases.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.request/ApplicationReceivePipeline.Phases.Before.<get-Before>|<get-Before>(){}[0]
        final val Transform // io.ktor.server.request/ApplicationReceivePipeline.Phases.Transform|{}Transform[0]
            final fun <get-Transform>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.request/ApplicationReceivePipeline.Phases.Transform.<get-Transform>|<get-Transform>(){}[0]
    }
}

open class io.ktor.server.request/RequestCookies { // io.ktor.server.request/RequestCookies|null[0]
    constructor <init>(io.ktor.server.request/ApplicationRequest) // io.ktor.server.request/RequestCookies.<init>|<init>(io.ktor.server.request.ApplicationRequest){}[0]

    final val rawCookies // io.ktor.server.request/RequestCookies.rawCookies|{}rawCookies[0]
        final fun <get-rawCookies>(): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.server.request/RequestCookies.rawCookies.<get-rawCookies>|<get-rawCookies>(){}[0]
    final val request // io.ktor.server.request/RequestCookies.request|{}request[0]
        final fun <get-request>(): io.ktor.server.request/ApplicationRequest // io.ktor.server.request/RequestCookies.request.<get-request>|<get-request>(){}[0]

    final fun get(kotlin/String, io.ktor.http/CookieEncoding = ...): kotlin/String? // io.ktor.server.request/RequestCookies.get|get(kotlin.String;io.ktor.http.CookieEncoding){}[0]
    open fun fetchCookies(): kotlin.collections/Map<kotlin/String, kotlin/String> // io.ktor.server.request/RequestCookies.fetchCookies|fetchCookies(){}[0]
}

open class io.ktor.server.response/ApplicationSendPipeline : io.ktor.util.pipeline/Pipeline<kotlin/Any, io.ktor.server.application/PipelineCall> { // io.ktor.server.response/ApplicationSendPipeline|null[0]
    constructor <init>(kotlin/Boolean = ...) // io.ktor.server.response/ApplicationSendPipeline.<init>|<init>(kotlin.Boolean){}[0]

    open val developmentMode // io.ktor.server.response/ApplicationSendPipeline.developmentMode|{}developmentMode[0]
        open fun <get-developmentMode>(): kotlin/Boolean // io.ktor.server.response/ApplicationSendPipeline.developmentMode.<get-developmentMode>|<get-developmentMode>(){}[0]

    final object Phases { // io.ktor.server.response/ApplicationSendPipeline.Phases|null[0]
        final val After // io.ktor.server.response/ApplicationSendPipeline.Phases.After|{}After[0]
            final fun <get-After>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.After.<get-After>|<get-After>(){}[0]
        final val Before // io.ktor.server.response/ApplicationSendPipeline.Phases.Before|{}Before[0]
            final fun <get-Before>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.Before.<get-Before>|<get-Before>(){}[0]
        final val ContentEncoding // io.ktor.server.response/ApplicationSendPipeline.Phases.ContentEncoding|{}ContentEncoding[0]
            final fun <get-ContentEncoding>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.ContentEncoding.<get-ContentEncoding>|<get-ContentEncoding>(){}[0]
        final val Engine // io.ktor.server.response/ApplicationSendPipeline.Phases.Engine|{}Engine[0]
            final fun <get-Engine>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.Engine.<get-Engine>|<get-Engine>(){}[0]
        final val Render // io.ktor.server.response/ApplicationSendPipeline.Phases.Render|{}Render[0]
            final fun <get-Render>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.Render.<get-Render>|<get-Render>(){}[0]
        final val TransferEncoding // io.ktor.server.response/ApplicationSendPipeline.Phases.TransferEncoding|{}TransferEncoding[0]
            final fun <get-TransferEncoding>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.TransferEncoding.<get-TransferEncoding>|<get-TransferEncoding>(){}[0]
        final val Transform // io.ktor.server.response/ApplicationSendPipeline.Phases.Transform|{}Transform[0]
            final fun <get-Transform>(): io.ktor.util.pipeline/PipelinePhase // io.ktor.server.response/ApplicationSendPipeline.Phases.Transform.<get-Transform>|<get-Transform>(){}[0]
    }
}

open class io.ktor.server.routing/RoutingNode : io.ktor.server.application/ApplicationCallPipeline, io.ktor.server.routing/Route { // io.ktor.server.routing/RoutingNode|null[0]
    constructor <init>(io.ktor.server.routing/RoutingNode?, io.ktor.server.routing/RouteSelector, kotlin/Boolean = ..., io.ktor.server.application/ApplicationEnvironment) // io.ktor.server.routing/RoutingNode.<init>|<init>(io.ktor.server.routing.RoutingNode?;io.ktor.server.routing.RouteSelector;kotlin.Boolean;io.ktor.server.application.ApplicationEnvironment){}[0]

    final val children // io.ktor.server.routing/RoutingNode.children|{}children[0]
        final fun <get-children>(): kotlin.collections/List<io.ktor.server.routing/RoutingNode> // io.ktor.server.routing/RoutingNode.children.<get-children>|<get-children>(){}[0]
    final val selector // io.ktor.server.routing/RoutingNode.selector|{}selector[0]
        final fun <get-selector>(): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/RoutingNode.selector.<get-selector>|<get-selector>(){}[0]
    open val parent // io.ktor.server.routing/RoutingNode.parent|{}parent[0]
        open fun <get-parent>(): io.ktor.server.routing/RoutingNode? // io.ktor.server.routing/RoutingNode.parent.<get-parent>|<get-parent>(){}[0]

    final fun invoke(kotlin/Function1<io.ktor.server.routing/RoutingNode, kotlin/Unit>) // io.ktor.server.routing/RoutingNode.invoke|invoke(kotlin.Function1<io.ktor.server.routing.RoutingNode,kotlin.Unit>){}[0]
    open fun <#A1: kotlin/Any, #B1: kotlin/Any> install(io.ktor.server.application/Plugin<io.ktor.server.application/ApplicationCallPipeline, #A1, #B1>, kotlin/Function1<#A1, kotlin/Unit>): #B1 // io.ktor.server.routing/RoutingNode.install|install(io.ktor.server.application.Plugin<io.ktor.server.application.ApplicationCallPipeline,0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    open fun <#A1: kotlin/Any> plugin(io.ktor.server.application/Plugin<*, *, #A1>): #A1 // io.ktor.server.routing/RoutingNode.plugin|plugin(io.ktor.server.application.Plugin<*,*,0:0>){0ยง<kotlin.Any>}[0]
    open fun afterIntercepted() // io.ktor.server.routing/RoutingNode.afterIntercepted|afterIntercepted(){}[0]
    open fun createChild(io.ktor.server.routing/RouteSelector): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingNode.createChild|createChild(io.ktor.server.routing.RouteSelector){}[0]
    open fun handle(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>) // io.ktor.server.routing/RoutingNode.handle|handle(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
    open fun toString(): kotlin/String // io.ktor.server.routing/RoutingNode.toString|toString(){}[0]
}

open class io.ktor.server.routing/RoutingResolveTraceEntry { // io.ktor.server.routing/RoutingResolveTraceEntry|null[0]
    constructor <init>(io.ktor.server.routing/RoutingNode, kotlin/Int, io.ktor.server.routing/RoutingResolveResult? = ...) // io.ktor.server.routing/RoutingResolveTraceEntry.<init>|<init>(io.ktor.server.routing.RoutingNode;kotlin.Int;io.ktor.server.routing.RoutingResolveResult?){}[0]

    final val route // io.ktor.server.routing/RoutingResolveTraceEntry.route|{}route[0]
        final fun <get-route>(): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingResolveTraceEntry.route.<get-route>|<get-route>(){}[0]
    final val segmentIndex // io.ktor.server.routing/RoutingResolveTraceEntry.segmentIndex|{}segmentIndex[0]
        final fun <get-segmentIndex>(): kotlin/Int // io.ktor.server.routing/RoutingResolveTraceEntry.segmentIndex.<get-segmentIndex>|<get-segmentIndex>(){}[0]

    final var result // io.ktor.server.routing/RoutingResolveTraceEntry.result|{}result[0]
        final fun <get-result>(): io.ktor.server.routing/RoutingResolveResult? // io.ktor.server.routing/RoutingResolveTraceEntry.result.<get-result>|<get-result>(){}[0]
        final fun <set-result>(io.ktor.server.routing/RoutingResolveResult?) // io.ktor.server.routing/RoutingResolveTraceEntry.result.<set-result>|<set-result>(io.ktor.server.routing.RoutingResolveResult?){}[0]

    final fun append(io.ktor.server.routing/RoutingResolveTraceEntry) // io.ktor.server.routing/RoutingResolveTraceEntry.append|append(io.ktor.server.routing.RoutingResolveTraceEntry){}[0]
    open fun buildText(kotlin.text/StringBuilder, kotlin/Int) // io.ktor.server.routing/RoutingResolveTraceEntry.buildText|buildText(kotlin.text.StringBuilder;kotlin.Int){}[0]
    open fun toString(): kotlin/String // io.ktor.server.routing/RoutingResolveTraceEntry.toString|toString(){}[0]
}

sealed class io.ktor.server.routing/RouteSelectorEvaluation { // io.ktor.server.routing/RouteSelectorEvaluation|null[0]
    final val succeeded // io.ktor.server.routing/RouteSelectorEvaluation.succeeded|{}succeeded[0]
        final fun <get-succeeded>(): kotlin/Boolean // io.ktor.server.routing/RouteSelectorEvaluation.succeeded.<get-succeeded>|<get-succeeded>(){}[0]

    final class Failure : io.ktor.server.routing/RouteSelectorEvaluation { // io.ktor.server.routing/RouteSelectorEvaluation.Failure|null[0]
        constructor <init>(kotlin/Double, io.ktor.http/HttpStatusCode) // io.ktor.server.routing/RouteSelectorEvaluation.Failure.<init>|<init>(kotlin.Double;io.ktor.http.HttpStatusCode){}[0]

        final val failureStatusCode // io.ktor.server.routing/RouteSelectorEvaluation.Failure.failureStatusCode|{}failureStatusCode[0]
            final fun <get-failureStatusCode>(): io.ktor.http/HttpStatusCode // io.ktor.server.routing/RouteSelectorEvaluation.Failure.failureStatusCode.<get-failureStatusCode>|<get-failureStatusCode>(){}[0]
        final val quality // io.ktor.server.routing/RouteSelectorEvaluation.Failure.quality|{}quality[0]
            final fun <get-quality>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Failure.quality.<get-quality>|<get-quality>(){}[0]

        final fun component1(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Failure.component1|component1(){}[0]
        final fun component2(): io.ktor.http/HttpStatusCode // io.ktor.server.routing/RouteSelectorEvaluation.Failure.component2|component2(){}[0]
        final fun copy(kotlin/Double = ..., io.ktor.http/HttpStatusCode = ...): io.ktor.server.routing/RouteSelectorEvaluation.Failure // io.ktor.server.routing/RouteSelectorEvaluation.Failure.copy|copy(kotlin.Double;io.ktor.http.HttpStatusCode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/RouteSelectorEvaluation.Failure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.server.routing/RouteSelectorEvaluation.Failure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.server.routing/RouteSelectorEvaluation.Failure.toString|toString(){}[0]
    }

    final class Success : io.ktor.server.routing/RouteSelectorEvaluation { // io.ktor.server.routing/RouteSelectorEvaluation.Success|null[0]
        constructor <init>(kotlin/Double, io.ktor.http/Parameters = ..., kotlin/Int = ...) // io.ktor.server.routing/RouteSelectorEvaluation.Success.<init>|<init>(kotlin.Double;io.ktor.http.Parameters;kotlin.Int){}[0]

        final val parameters // io.ktor.server.routing/RouteSelectorEvaluation.Success.parameters|{}parameters[0]
            final fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RouteSelectorEvaluation.Success.parameters.<get-parameters>|<get-parameters>(){}[0]
        final val quality // io.ktor.server.routing/RouteSelectorEvaluation.Success.quality|{}quality[0]
            final fun <get-quality>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Success.quality.<get-quality>|<get-quality>(){}[0]
        final val segmentIncrement // io.ktor.server.routing/RouteSelectorEvaluation.Success.segmentIncrement|{}segmentIncrement[0]
            final fun <get-segmentIncrement>(): kotlin/Int // io.ktor.server.routing/RouteSelectorEvaluation.Success.segmentIncrement.<get-segmentIncrement>|<get-segmentIncrement>(){}[0]

        final fun component1(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Success.component1|component1(){}[0]
        final fun component2(): io.ktor.http/Parameters // io.ktor.server.routing/RouteSelectorEvaluation.Success.component2|component2(){}[0]
        final fun component3(): kotlin/Int // io.ktor.server.routing/RouteSelectorEvaluation.Success.component3|component3(){}[0]
        final fun copy(kotlin/Double = ..., io.ktor.http/Parameters = ..., kotlin/Int = ...): io.ktor.server.routing/RouteSelectorEvaluation.Success // io.ktor.server.routing/RouteSelectorEvaluation.Success.copy|copy(kotlin.Double;io.ktor.http.Parameters;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.ktor.server.routing/RouteSelectorEvaluation.Success.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.ktor.server.routing/RouteSelectorEvaluation.Success.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.ktor.server.routing/RouteSelectorEvaluation.Success.toString|toString(){}[0]
    }

    final object Companion { // io.ktor.server.routing/RouteSelectorEvaluation.Companion|null[0]
        final const val qualityConstant // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityConstant|{}qualityConstant[0]
            final fun <get-qualityConstant>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityConstant.<get-qualityConstant>|<get-qualityConstant>(){}[0]
        final const val qualityFailedMethod // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityFailedMethod|{}qualityFailedMethod[0]
            final fun <get-qualityFailedMethod>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityFailedMethod.<get-qualityFailedMethod>|<get-qualityFailedMethod>(){}[0]
        final const val qualityFailedParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityFailedParameter|{}qualityFailedParameter[0]
            final fun <get-qualityFailedParameter>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityFailedParameter.<get-qualityFailedParameter>|<get-qualityFailedParameter>(){}[0]
        final const val qualityMethodParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityMethodParameter|{}qualityMethodParameter[0]
            final fun <get-qualityMethodParameter>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityMethodParameter.<get-qualityMethodParameter>|<get-qualityMethodParameter>(){}[0]
        final const val qualityMissing // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityMissing|{}qualityMissing[0]
            final fun <get-qualityMissing>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityMissing.<get-qualityMissing>|<get-qualityMissing>(){}[0]
        final const val qualityParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityParameter|{}qualityParameter[0]
            final fun <get-qualityParameter>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityParameter.<get-qualityParameter>|<get-qualityParameter>(){}[0]
        final const val qualityParameterWithPrefixOrSuffix // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityParameterWithPrefixOrSuffix|{}qualityParameterWithPrefixOrSuffix[0]
            final fun <get-qualityParameterWithPrefixOrSuffix>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityParameterWithPrefixOrSuffix.<get-qualityParameterWithPrefixOrSuffix>|<get-qualityParameterWithPrefixOrSuffix>(){}[0]
        final const val qualityPathParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityPathParameter|{}qualityPathParameter[0]
            final fun <get-qualityPathParameter>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityPathParameter.<get-qualityPathParameter>|<get-qualityPathParameter>(){}[0]
        final const val qualityQueryParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityQueryParameter|{}qualityQueryParameter[0]
            final fun <get-qualityQueryParameter>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityQueryParameter.<get-qualityQueryParameter>|<get-qualityQueryParameter>(){}[0]
        final const val qualityTailcard // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityTailcard|{}qualityTailcard[0]
            final fun <get-qualityTailcard>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityTailcard.<get-qualityTailcard>|<get-qualityTailcard>(){}[0]
        final const val qualityTransparent // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityTransparent|{}qualityTransparent[0]
            final fun <get-qualityTransparent>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityTransparent.<get-qualityTransparent>|<get-qualityTransparent>(){}[0]
        final const val qualityWildcard // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityWildcard|{}qualityWildcard[0]
            final fun <get-qualityWildcard>(): kotlin/Double // io.ktor.server.routing/RouteSelectorEvaluation.Companion.qualityWildcard.<get-qualityWildcard>|<get-qualityWildcard>(){}[0]

        final val Constant // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Constant|{}Constant[0]
            final fun <get-Constant>(): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Constant.<get-Constant>|<get-Constant>(){}[0]
        final val ConstantPath // io.ktor.server.routing/RouteSelectorEvaluation.Companion.ConstantPath|{}ConstantPath[0]
            final fun <get-ConstantPath>(): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.ConstantPath.<get-ConstantPath>|<get-ConstantPath>(){}[0]
        final val Failed // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Failed|{}Failed[0]
            final fun <get-Failed>(): io.ktor.server.routing/RouteSelectorEvaluation.Failure // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Failed.<get-Failed>|<get-Failed>(){}[0]
        final val FailedMethod // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedMethod|{}FailedMethod[0]
            final fun <get-FailedMethod>(): io.ktor.server.routing/RouteSelectorEvaluation.Failure // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedMethod.<get-FailedMethod>|<get-FailedMethod>(){}[0]
        final val FailedParameter // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedParameter|{}FailedParameter[0]
            final fun <get-FailedParameter>(): io.ktor.server.routing/RouteSelectorEvaluation.Failure // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedParameter.<get-FailedParameter>|<get-FailedParameter>(){}[0]
        final val FailedPath // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedPath|{}FailedPath[0]
            final fun <get-FailedPath>(): io.ktor.server.routing/RouteSelectorEvaluation.Failure // io.ktor.server.routing/RouteSelectorEvaluation.Companion.FailedPath.<get-FailedPath>|<get-FailedPath>(){}[0]
        final val Missing // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Missing|{}Missing[0]
            final fun <get-Missing>(): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Missing.<get-Missing>|<get-Missing>(){}[0]
        final val Transparent // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Transparent|{}Transparent[0]
            final fun <get-Transparent>(): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.Transparent.<get-Transparent>|<get-Transparent>(){}[0]
        final val WildcardPath // io.ktor.server.routing/RouteSelectorEvaluation.Companion.WildcardPath|{}WildcardPath[0]
            final fun <get-WildcardPath>(): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.WildcardPath.<get-WildcardPath>|<get-WildcardPath>(){}[0]

        final fun invoke(kotlin/Boolean, kotlin/Double, io.ktor.http/Parameters = ..., kotlin/Int = ...): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/RouteSelectorEvaluation.Companion.invoke|invoke(kotlin.Boolean;kotlin.Double;io.ktor.http.Parameters;kotlin.Int){}[0]
    }
}

sealed class io.ktor.server.routing/RoutingResolveResult { // io.ktor.server.routing/RoutingResolveResult|null[0]
    abstract val parameters // io.ktor.server.routing/RoutingResolveResult.parameters|{}parameters[0]
        abstract fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingResolveResult.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val route // io.ktor.server.routing/RoutingResolveResult.route|{}route[0]
        final fun <get-route>(): io.ktor.server.routing/RoutingNode // io.ktor.server.routing/RoutingResolveResult.route.<get-route>|<get-route>(){}[0]

    final class Failure : io.ktor.server.routing/RoutingResolveResult { // io.ktor.server.routing/RoutingResolveResult.Failure|null[0]
        constructor <init>(io.ktor.server.routing/RoutingNode, kotlin/String) // io.ktor.server.routing/RoutingResolveResult.Failure.<init>|<init>(io.ktor.server.routing.RoutingNode;kotlin.String){}[0]

        final val errorStatusCode // io.ktor.server.routing/RoutingResolveResult.Failure.errorStatusCode|{}errorStatusCode[0]
            final fun <get-errorStatusCode>(): io.ktor.http/HttpStatusCode // io.ktor.server.routing/RoutingResolveResult.Failure.errorStatusCode.<get-errorStatusCode>|<get-errorStatusCode>(){}[0]
        final val parameters // io.ktor.server.routing/RoutingResolveResult.Failure.parameters|{}parameters[0]
            final fun <get-parameters>(): kotlin/Nothing // io.ktor.server.routing/RoutingResolveResult.Failure.parameters.<get-parameters>|<get-parameters>(){}[0]
        final val reason // io.ktor.server.routing/RoutingResolveResult.Failure.reason|{}reason[0]
            final fun <get-reason>(): kotlin/String // io.ktor.server.routing/RoutingResolveResult.Failure.reason.<get-reason>|<get-reason>(){}[0]

        final fun toString(): kotlin/String // io.ktor.server.routing/RoutingResolveResult.Failure.toString|toString(){}[0]
    }

    final class Success : io.ktor.server.routing/RoutingResolveResult { // io.ktor.server.routing/RoutingResolveResult.Success|null[0]
        constructor <init>(io.ktor.server.routing/RoutingNode, io.ktor.http/Parameters) // io.ktor.server.routing/RoutingResolveResult.Success.<init>|<init>(io.ktor.server.routing.RoutingNode;io.ktor.http.Parameters){}[0]

        final val parameters // io.ktor.server.routing/RoutingResolveResult.Success.parameters|{}parameters[0]
            final fun <get-parameters>(): io.ktor.http/Parameters // io.ktor.server.routing/RoutingResolveResult.Success.parameters.<get-parameters>|<get-parameters>(){}[0]

        final fun toString(): kotlin/String // io.ktor.server.routing/RoutingResolveResult.Success.toString|toString(){}[0]
    }
}

final object io.ktor.server.application.hooks/CallFailed : io.ktor.server.application/Hook<kotlin.coroutines/SuspendFunction2<io.ktor.server.application/ApplicationCall, kotlin/Throwable, kotlin/Unit>> { // io.ktor.server.application.hooks/CallFailed|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin.coroutines/SuspendFunction2<io.ktor.server.application/ApplicationCall, kotlin/Throwable, kotlin/Unit>) // io.ktor.server.application.hooks/CallFailed.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.coroutines.SuspendFunction2<io.ktor.server.application.ApplicationCall,kotlin.Throwable,kotlin.Unit>){}[0]
}

final object io.ktor.server.application.hooks/CallSetup : io.ktor.server.application/Hook<kotlin.coroutines/SuspendFunction1<io.ktor.server.application/ApplicationCall, kotlin/Unit>> { // io.ktor.server.application.hooks/CallSetup|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin.coroutines/SuspendFunction1<io.ktor.server.application/ApplicationCall, kotlin/Unit>) // io.ktor.server.application.hooks/CallSetup.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.coroutines.SuspendFunction1<io.ktor.server.application.ApplicationCall,kotlin.Unit>){}[0]
}

final object io.ktor.server.application.hooks/Metrics : io.ktor.server.application/Hook<kotlin.coroutines/SuspendFunction1<io.ktor.server.application/ApplicationCall, kotlin/Unit>> { // io.ktor.server.application.hooks/Metrics|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin.coroutines/SuspendFunction1<io.ktor.server.application/ApplicationCall, kotlin/Unit>) // io.ktor.server.application.hooks/Metrics.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.coroutines.SuspendFunction1<io.ktor.server.application.ApplicationCall,kotlin.Unit>){}[0]
}

final object io.ktor.server.application.hooks/ReceiveRequestBytes : io.ktor.server.application/Hook<kotlin/Function2<io.ktor.server.application/ApplicationCall, io.ktor.utils.io/ByteReadChannel, io.ktor.utils.io/ByteReadChannel>> { // io.ktor.server.application.hooks/ReceiveRequestBytes|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin/Function2<io.ktor.server.application/ApplicationCall, io.ktor.utils.io/ByteReadChannel, io.ktor.utils.io/ByteReadChannel>) // io.ktor.server.application.hooks/ReceiveRequestBytes.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.Function2<io.ktor.server.application.ApplicationCall,io.ktor.utils.io.ByteReadChannel,io.ktor.utils.io.ByteReadChannel>){}[0]
}

final object io.ktor.server.application.hooks/ResponseBodyReadyForSend : io.ktor.server.application/Hook<kotlin.coroutines/SuspendFunction3<io.ktor.server.application.hooks/ResponseBodyReadyForSend.Context, io.ktor.server.application/ApplicationCall, io.ktor.http.content/OutgoingContent, kotlin/Unit>> { // io.ktor.server.application.hooks/ResponseBodyReadyForSend|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin.coroutines/SuspendFunction3<io.ktor.server.application.hooks/ResponseBodyReadyForSend.Context, io.ktor.server.application/ApplicationCall, io.ktor.http.content/OutgoingContent, kotlin/Unit>) // io.ktor.server.application.hooks/ResponseBodyReadyForSend.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.coroutines.SuspendFunction3<io.ktor.server.application.hooks.ResponseBodyReadyForSend.Context,io.ktor.server.application.ApplicationCall,io.ktor.http.content.OutgoingContent,kotlin.Unit>){}[0]

    final class Context { // io.ktor.server.application.hooks/ResponseBodyReadyForSend.Context|null[0]
        constructor <init>(io.ktor.util.pipeline/PipelineContext<kotlin/Any, io.ktor.server.application/PipelineCall>) // io.ktor.server.application.hooks/ResponseBodyReadyForSend.Context.<init>|<init>(io.ktor.util.pipeline.PipelineContext<kotlin.Any,io.ktor.server.application.PipelineCall>){}[0]

        final fun transformBodyTo(io.ktor.http.content/OutgoingContent) // io.ktor.server.application.hooks/ResponseBodyReadyForSend.Context.transformBodyTo|transformBodyTo(io.ktor.http.content.OutgoingContent){}[0]
    }
}

final object io.ktor.server.application.hooks/ResponseSent : io.ktor.server.application/Hook<kotlin/Function1<io.ktor.server.application/ApplicationCall, kotlin/Unit>> { // io.ktor.server.application.hooks/ResponseSent|null[0]
    final fun install(io.ktor.server.application/ApplicationCallPipeline, kotlin/Function1<io.ktor.server.application/ApplicationCall, kotlin/Unit>) // io.ktor.server.application.hooks/ResponseSent.install|install(io.ktor.server.application.ApplicationCallPipeline;kotlin.Function1<io.ktor.server.application.ApplicationCall,kotlin.Unit>){}[0]
}

final object io.ktor.server.engine/ConfigKeys { // io.ktor.server.engine/ConfigKeys|null[0]
    final const val applicationIdPath // io.ktor.server.engine/ConfigKeys.applicationIdPath|{}applicationIdPath[0]
        final fun <get-applicationIdPath>(): kotlin/String // io.ktor.server.engine/ConfigKeys.applicationIdPath.<get-applicationIdPath>|<get-applicationIdPath>(){}[0]
    final const val developmentModeKey // io.ktor.server.engine/ConfigKeys.developmentModeKey|{}developmentModeKey[0]
        final fun <get-developmentModeKey>(): kotlin/String // io.ktor.server.engine/ConfigKeys.developmentModeKey.<get-developmentModeKey>|<get-developmentModeKey>(){}[0]
    final const val hostConfigPath // io.ktor.server.engine/ConfigKeys.hostConfigPath|{}hostConfigPath[0]
        final fun <get-hostConfigPath>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostConfigPath.<get-hostConfigPath>|<get-hostConfigPath>(){}[0]
    final const val hostPortPath // io.ktor.server.engine/ConfigKeys.hostPortPath|{}hostPortPath[0]
        final fun <get-hostPortPath>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostPortPath.<get-hostPortPath>|<get-hostPortPath>(){}[0]
    final const val hostSslKeyAlias // io.ktor.server.engine/ConfigKeys.hostSslKeyAlias|{}hostSslKeyAlias[0]
        final fun <get-hostSslKeyAlias>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostSslKeyAlias.<get-hostSslKeyAlias>|<get-hostSslKeyAlias>(){}[0]
    final const val hostSslKeyStore // io.ktor.server.engine/ConfigKeys.hostSslKeyStore|{}hostSslKeyStore[0]
        final fun <get-hostSslKeyStore>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostSslKeyStore.<get-hostSslKeyStore>|<get-hostSslKeyStore>(){}[0]
    final const val hostSslKeyStorePassword // io.ktor.server.engine/ConfigKeys.hostSslKeyStorePassword|{}hostSslKeyStorePassword[0]
        final fun <get-hostSslKeyStorePassword>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostSslKeyStorePassword.<get-hostSslKeyStorePassword>|<get-hostSslKeyStorePassword>(){}[0]
    final const val hostSslPortPath // io.ktor.server.engine/ConfigKeys.hostSslPortPath|{}hostSslPortPath[0]
        final fun <get-hostSslPortPath>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostSslPortPath.<get-hostSslPortPath>|<get-hostSslPortPath>(){}[0]
    final const val hostSslPrivateKeyPassword // io.ktor.server.engine/ConfigKeys.hostSslPrivateKeyPassword|{}hostSslPrivateKeyPassword[0]
        final fun <get-hostSslPrivateKeyPassword>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostSslPrivateKeyPassword.<get-hostSslPrivateKeyPassword>|<get-hostSslPrivateKeyPassword>(){}[0]
    final const val hostWatchPaths // io.ktor.server.engine/ConfigKeys.hostWatchPaths|{}hostWatchPaths[0]
        final fun <get-hostWatchPaths>(): kotlin/String // io.ktor.server.engine/ConfigKeys.hostWatchPaths.<get-hostWatchPaths>|<get-hostWatchPaths>(){}[0]
    final const val rootPathPath // io.ktor.server.engine/ConfigKeys.rootPathPath|{}rootPathPath[0]
        final fun <get-rootPathPath>(): kotlin/String // io.ktor.server.engine/ConfigKeys.rootPathPath.<get-rootPathPath>|<get-rootPathPath>(){}[0]
}

final object io.ktor.server.routing/PathSegmentSelectorBuilder { // io.ktor.server.routing/PathSegmentSelectorBuilder|null[0]
    final fun parseConstant(kotlin/String): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/PathSegmentSelectorBuilder.parseConstant|parseConstant(kotlin.String){}[0]
    final fun parseName(kotlin/String): kotlin/String // io.ktor.server.routing/PathSegmentSelectorBuilder.parseName|parseName(kotlin.String){}[0]
    final fun parseParameter(kotlin/String): io.ktor.server.routing/RouteSelector // io.ktor.server.routing/PathSegmentSelectorBuilder.parseParameter|parseParameter(kotlin.String){}[0]
}

final object io.ktor.server.routing/PathSegmentWildcardRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/PathSegmentWildcardRouteSelector|null[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/PathSegmentWildcardRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/PathSegmentWildcardRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final object io.ktor.server.routing/TrailingSlashRouteSelector : io.ktor.server.routing/RouteSelector { // io.ktor.server.routing/TrailingSlashRouteSelector|null[0]
    final fun toString(): kotlin/String // io.ktor.server.routing/TrailingSlashRouteSelector.toString|toString(){}[0]
    final suspend fun evaluate(io.ktor.server.routing/RoutingResolveContext, kotlin/Int): io.ktor.server.routing/RouteSelectorEvaluation // io.ktor.server.routing/TrailingSlashRouteSelector.evaluate|evaluate(io.ktor.server.routing.RoutingResolveContext;kotlin.Int){}[0]
}

final val io.ktor.server.application/ApplicationStarted // io.ktor.server.application/ApplicationStarted|{}ApplicationStarted[0]
    final fun <get-ApplicationStarted>(): io.ktor.events/EventDefinition<io.ktor.server.application/Application> // io.ktor.server.application/ApplicationStarted.<get-ApplicationStarted>|<get-ApplicationStarted>(){}[0]
final val io.ktor.server.application/ApplicationStarting // io.ktor.server.application/ApplicationStarting|{}ApplicationStarting[0]
    final fun <get-ApplicationStarting>(): io.ktor.events/EventDefinition<io.ktor.server.application/Application> // io.ktor.server.application/ApplicationStarting.<get-ApplicationStarting>|<get-ApplicationStarting>(){}[0]
final val io.ktor.server.application/ApplicationStopPreparing // io.ktor.server.application/ApplicationStopPreparing|{}ApplicationStopPreparing[0]
    final fun <get-ApplicationStopPreparing>(): io.ktor.events/EventDefinition<io.ktor.server.application/ApplicationEnvironment> // io.ktor.server.application/ApplicationStopPreparing.<get-ApplicationStopPreparing>|<get-ApplicationStopPreparing>(){}[0]
final val io.ktor.server.application/ApplicationStopped // io.ktor.server.application/ApplicationStopped|{}ApplicationStopped[0]
    final fun <get-ApplicationStopped>(): io.ktor.events/EventDefinition<io.ktor.server.application/Application> // io.ktor.server.application/ApplicationStopped.<get-ApplicationStopped>|<get-ApplicationStopped>(){}[0]
final val io.ktor.server.application/ApplicationStopping // io.ktor.server.application/ApplicationStopping|{}ApplicationStopping[0]
    final fun <get-ApplicationStopping>(): io.ktor.events/EventDefinition<io.ktor.server.application/Application> // io.ktor.server.application/ApplicationStopping.<get-ApplicationStopping>|<get-ApplicationStopping>(){}[0]
final val io.ktor.server.application/ServerReady // io.ktor.server.application/ServerReady|{}ServerReady[0]
    final fun <get-ServerReady>(): io.ktor.events/EventDefinition<io.ktor.server.application/ApplicationEnvironment> // io.ktor.server.application/ServerReady.<get-ServerReady>|<get-ServerReady>(){}[0]
final val io.ktor.server.application/application // io.ktor.server.application/application|@io.ktor.util.pipeline.PipelineContext<*,io.ktor.server.application.PipelineCall>{}application[0]
    final fun (io.ktor.util.pipeline/PipelineContext<*, io.ktor.server.application/PipelineCall>).<get-application>(): io.ktor.server.application/Application // io.ktor.server.application/application.<get-application>|<get-application>@io.ktor.util.pipeline.PipelineContext<*,io.ktor.server.application.PipelineCall>(){}[0]
final val io.ktor.server.application/call // io.ktor.server.application/call|@io.ktor.util.pipeline.PipelineContext<*,0:0>{0ยง<io.ktor.server.application.ApplicationCall>}call[0]
    final fun <#A1: io.ktor.server.application/ApplicationCall> (io.ktor.util.pipeline/PipelineContext<*, #A1>).<get-call>(): #A1 // io.ktor.server.application/call.<get-call>|<get-call>@io.ktor.util.pipeline.PipelineContext<*,0:0>(){0ยง<io.ktor.server.application.ApplicationCall>}[0]
final val io.ktor.server.application/call // io.ktor.server.application/call|@io.ktor.util.pipeline.PipelineContext<*,io.ktor.server.application.PipelineCall>{}call[0]
    final inline fun (io.ktor.util.pipeline/PipelineContext<*, io.ktor.server.application/PipelineCall>).<get-call>(): io.ktor.server.application/PipelineCall // io.ktor.server.application/call.<get-call>|<get-call>@io.ktor.util.pipeline.PipelineContext<*,io.ktor.server.application.PipelineCall>(){}[0]
final val io.ktor.server.application/host // io.ktor.server.application/host|@io.ktor.server.config.ApplicationConfig{}host[0]
    final fun (io.ktor.server.config/ApplicationConfig).<get-host>(): kotlin/String // io.ktor.server.application/host.<get-host>|<get-host>@io.ktor.server.config.ApplicationConfig(){}[0]
final val io.ktor.server.application/isHandled // io.ktor.server.application/isHandled|@io.ktor.server.application.ApplicationCall{}isHandled[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-isHandled>(): kotlin/Boolean // io.ktor.server.application/isHandled.<get-isHandled>|<get-isHandled>@io.ktor.server.application.ApplicationCall(){}[0]
final val io.ktor.server.application/log // io.ktor.server.application/log|@io.ktor.server.application.Application{}log[0]
    final fun (io.ktor.server.application/Application).<get-log>(): io.ktor.util.logging/Logger // io.ktor.server.application/log.<get-log>|<get-log>@io.ktor.server.application.Application(){}[0]
final val io.ktor.server.application/pluginRegistry // io.ktor.server.application/pluginRegistry|@0:0{0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>}pluginRegistry[0]
    final fun <#A1: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>> (#A1).<get-pluginRegistry>(): io.ktor.util/Attributes // io.ktor.server.application/pluginRegistry.<get-pluginRegistry>|<get-pluginRegistry>@0:0(){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>}[0]
final val io.ktor.server.application/port // io.ktor.server.application/port|@io.ktor.server.config.ApplicationConfig{}port[0]
    final fun (io.ktor.server.config/ApplicationConfig).<get-port>(): kotlin/Int // io.ktor.server.application/port.<get-port>|<get-port>@io.ktor.server.config.ApplicationConfig(){}[0]
final val io.ktor.server.config/configLoaders // io.ktor.server.config/configLoaders|{}configLoaders[0]
    final fun <get-configLoaders>(): kotlin.collections/List<io.ktor.server.config/ConfigLoader> // io.ktor.server.config/configLoaders.<get-configLoaders>|<get-configLoaders>(){}[0]
final val io.ktor.server.http.content/SuppressionAttribute // io.ktor.server.http.content/SuppressionAttribute|{}SuppressionAttribute[0]
    final fun <get-SuppressionAttribute>(): io.ktor.util/AttributeKey<kotlin/Boolean> // io.ktor.server.http.content/SuppressionAttribute.<get-SuppressionAttribute>|<get-SuppressionAttribute>(){}[0]
final val io.ktor.server.http.content/isCompressionSuppressed // io.ktor.server.http.content/isCompressionSuppressed|@io.ktor.server.application.ApplicationCall{}isCompressionSuppressed[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-isCompressionSuppressed>(): kotlin/Boolean // io.ktor.server.http.content/isCompressionSuppressed.<get-isCompressionSuppressed>|<get-isCompressionSuppressed>@io.ktor.server.application.ApplicationCall(){}[0]
final val io.ktor.server.http.content/isDecompressionSuppressed // io.ktor.server.http.content/isDecompressionSuppressed|@io.ktor.server.application.ApplicationCall{}isDecompressionSuppressed[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-isDecompressionSuppressed>(): kotlin/Boolean // io.ktor.server.http.content/isDecompressionSuppressed.<get-isDecompressionSuppressed>|<get-isDecompressionSuppressed>@io.ktor.server.application.ApplicationCall(){}[0]
final val io.ktor.server.logging/mdcProvider // io.ktor.server.logging/mdcProvider|@io.ktor.server.application.Application{}mdcProvider[0]
    final fun (io.ktor.server.application/Application).<get-mdcProvider>(): io.ktor.server.logging/MDCProvider // io.ktor.server.logging/mdcProvider.<get-mdcProvider>|<get-mdcProvider>@io.ktor.server.application.Application(){}[0]
final val io.ktor.server.plugins/MutableOriginConnectionPointKey // io.ktor.server.plugins/MutableOriginConnectionPointKey|{}MutableOriginConnectionPointKey[0]
    final fun <get-MutableOriginConnectionPointKey>(): io.ktor.util/AttributeKey<io.ktor.server.plugins/MutableOriginConnectionPoint> // io.ktor.server.plugins/MutableOriginConnectionPointKey.<get-MutableOriginConnectionPointKey>|<get-MutableOriginConnectionPointKey>(){}[0]
final val io.ktor.server.plugins/mutableOriginConnectionPoint // io.ktor.server.plugins/mutableOriginConnectionPoint|@io.ktor.server.application.ApplicationCall{}mutableOriginConnectionPoint[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-mutableOriginConnectionPoint>(): io.ktor.server.plugins/MutableOriginConnectionPoint // io.ktor.server.plugins/mutableOriginConnectionPoint.<get-mutableOriginConnectionPoint>|<get-mutableOriginConnectionPoint>@io.ktor.server.application.ApplicationCall(){}[0]
final val io.ktor.server.plugins/origin // io.ktor.server.plugins/origin|@io.ktor.server.request.ApplicationRequest{}origin[0]
    final fun (io.ktor.server.request/ApplicationRequest).<get-origin>(): io.ktor.http/RequestConnectionPoint // io.ktor.server.plugins/origin.<get-origin>|<get-origin>@io.ktor.server.request.ApplicationRequest(){}[0]
final val io.ktor.server.request/DEFAULT_FORM_FIELD_LIMIT // io.ktor.server.request/DEFAULT_FORM_FIELD_LIMIT|{}DEFAULT_FORM_FIELD_LIMIT[0]
    final fun <get-DEFAULT_FORM_FIELD_LIMIT>(): kotlin/Long // io.ktor.server.request/DEFAULT_FORM_FIELD_LIMIT.<get-DEFAULT_FORM_FIELD_LIMIT>|<get-DEFAULT_FORM_FIELD_LIMIT>(){}[0]
final val io.ktor.server.request/httpMethod // io.ktor.server.request/httpMethod|@io.ktor.server.request.ApplicationRequest{}httpMethod[0]
    final fun (io.ktor.server.request/ApplicationRequest).<get-httpMethod>(): io.ktor.http/HttpMethod // io.ktor.server.request/httpMethod.<get-httpMethod>|<get-httpMethod>@io.ktor.server.request.ApplicationRequest(){}[0]
final val io.ktor.server.request/httpVersion // io.ktor.server.request/httpVersion|@io.ktor.server.request.ApplicationRequest{}httpVersion[0]
    final fun (io.ktor.server.request/ApplicationRequest).<get-httpVersion>(): kotlin/String // io.ktor.server.request/httpVersion.<get-httpVersion>|<get-httpVersion>@io.ktor.server.request.ApplicationRequest(){}[0]
final val io.ktor.server.request/uri // io.ktor.server.request/uri|@io.ktor.server.request.ApplicationRequest{}uri[0]
    final fun (io.ktor.server.request/ApplicationRequest).<get-uri>(): kotlin/String // io.ktor.server.request/uri.<get-uri>|<get-uri>@io.ktor.server.request.ApplicationRequest(){}[0]
final val io.ktor.server.routing/IgnoreTrailingSlash // io.ktor.server.routing/IgnoreTrailingSlash|{}IgnoreTrailingSlash[0]
    final fun <get-IgnoreTrailingSlash>(): io.ktor.server.application/ApplicationPlugin<kotlin/Unit> // io.ktor.server.routing/IgnoreTrailingSlash.<get-IgnoreTrailingSlash>|<get-IgnoreTrailingSlash>(){}[0]
final val io.ktor.server.routing/RoutingFailureStatusCode // io.ktor.server.routing/RoutingFailureStatusCode|{}RoutingFailureStatusCode[0]
    final fun <get-RoutingFailureStatusCode>(): io.ktor.util/AttributeKey<io.ktor.http/HttpStatusCode> // io.ktor.server.routing/RoutingFailureStatusCode.<get-RoutingFailureStatusCode>|<get-RoutingFailureStatusCode>(){}[0]
final val io.ktor.server.routing/application // io.ktor.server.routing/application|@io.ktor.server.routing.Route{}application[0]
    final fun (io.ktor.server.routing/Route).<get-application>(): io.ktor.server.application/Application // io.ktor.server.routing/application.<get-application>|<get-application>@io.ktor.server.routing.Route(){}[0]

final var io.ktor.server.application/receiveType // io.ktor.server.application/receiveType|@io.ktor.server.application.ApplicationCall{}receiveType[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-receiveType>(): io.ktor.util.reflect/TypeInfo // io.ktor.server.application/receiveType.<get-receiveType>|<get-receiveType>@io.ktor.server.application.ApplicationCall(){}[0]
final var io.ktor.server.request/formFieldLimit // io.ktor.server.request/formFieldLimit|@io.ktor.server.application.ApplicationCall{}formFieldLimit[0]
    final fun (io.ktor.server.application/ApplicationCall).<get-formFieldLimit>(): kotlin/Long // io.ktor.server.request/formFieldLimit.<get-formFieldLimit>|<get-formFieldLimit>@io.ktor.server.application.ApplicationCall(){}[0]
    final fun (io.ktor.server.application/ApplicationCall).<set-formFieldLimit>(kotlin/Long) // io.ktor.server.request/formFieldLimit.<set-formFieldLimit>|<set-formFieldLimit>@io.ktor.server.application.ApplicationCall(kotlin.Long){}[0]
final var io.ktor.server.response/responseType // io.ktor.server.response/responseType|@io.ktor.server.response.ApplicationResponse{}responseType[0]
    final fun (io.ktor.server.response/ApplicationResponse).<get-responseType>(): io.ktor.util.reflect/TypeInfo? // io.ktor.server.response/responseType.<get-responseType>|<get-responseType>@io.ktor.server.response.ApplicationResponse(){}[0]
    final fun (io.ktor.server.response/ApplicationResponse).<set-responseType>(io.ktor.util.reflect/TypeInfo?) // io.ktor.server.response/responseType.<set-responseType>|<set-responseType>@io.ktor.server.response.ApplicationResponse(io.ktor.util.reflect.TypeInfo?){}[0]

final fun (io.ktor.http/HeadersBuilder).io.ktor.server.response/cacheControl(io.ktor.http/CacheControl) // io.ktor.server.response/cacheControl|cacheControl@io.ktor.http.HeadersBuilder(io.ktor.http.CacheControl){}[0]
final fun (io.ktor.http/HeadersBuilder).io.ktor.server.response/contentRange(kotlin.ranges/LongRange?, kotlin/Long? = ..., kotlin/String = ...) // io.ktor.server.response/contentRange|contentRange@io.ktor.http.HeadersBuilder(kotlin.ranges.LongRange?;kotlin.Long?;kotlin.String){}[0]
final fun (io.ktor.http/URLBuilder.Companion).io.ktor.server.util/createFromCall(io.ktor.server.application/ApplicationCall): io.ktor.http/URLBuilder // io.ktor.server.util/createFromCall|createFromCall@io.ktor.http.URLBuilder.Companion(io.ktor.server.application.ApplicationCall){}[0]
final fun (io.ktor.server.application/Application).io.ktor.server.routing/routing(kotlin/Function1<io.ktor.server.routing/Routing, kotlin/Unit>): io.ktor.server.routing/RoutingRoot // io.ktor.server.routing/routing|routing@io.ktor.server.application.Application(kotlin.Function1<io.ktor.server.routing.Routing,kotlin.Unit>){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.http.content/suppressCompression() // io.ktor.server.http.content/suppressCompression|suppressCompression@io.ktor.server.application.ApplicationCall(){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.http.content/suppressDecompression() // io.ktor.server.http.content/suppressDecompression|suppressDecompression@io.ktor.server.application.ApplicationCall(){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.http/push(kotlin/Function1<io.ktor.server.response/ResponsePushBuilder, kotlin/Unit>) // io.ktor.server.http/push|push@io.ktor.server.application.ApplicationCall(kotlin.Function1<io.ktor.server.response.ResponsePushBuilder,kotlin.Unit>){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.http/push(kotlin/String) // io.ktor.server.http/push|push@io.ktor.server.application.ApplicationCall(kotlin.String){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.http/push(kotlin/String, io.ktor.http/Parameters) // io.ktor.server.http/push|push@io.ktor.server.application.ApplicationCall(kotlin.String;io.ktor.http.Parameters){}[0]
final fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/defaultTextContentType(io.ktor.http/ContentType?): io.ktor.http/ContentType // io.ktor.server.response/defaultTextContentType|defaultTextContentType@io.ktor.server.application.ApplicationCall(io.ktor.http.ContentType?){}[0]
final fun (io.ktor.server.config/ApplicationConfig).io.ktor.server.config/mergeWith(io.ktor.server.config/ApplicationConfig): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/mergeWith|mergeWith@io.ktor.server.config.ApplicationConfig(io.ktor.server.config.ApplicationConfig){}[0]
final fun (io.ktor.server.config/ApplicationConfig).io.ktor.server.config/tryGetString(kotlin/String): kotlin/String? // io.ktor.server.config/tryGetString|tryGetString@io.ktor.server.config.ApplicationConfig(kotlin.String){}[0]
final fun (io.ktor.server.config/ApplicationConfig).io.ktor.server.config/tryGetStringList(kotlin/String): kotlin.collections/List<kotlin/String>? // io.ktor.server.config/tryGetStringList|tryGetStringList@io.ktor.server.config.ApplicationConfig(kotlin.String){}[0]
final fun (io.ktor.server.config/ApplicationConfig).io.ktor.server.config/withFallback(io.ktor.server.config/ApplicationConfig): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/withFallback|withFallback@io.ktor.server.config.ApplicationConfig(io.ktor.server.config.ApplicationConfig){}[0]
final fun (io.ktor.server.engine/ApplicationEngine).io.ktor.server.engine/stopServerOnCancellation(io.ktor.server.application/Application, kotlin/Long = ..., kotlin/Long = ...): kotlinx.coroutines/CompletableJob // io.ktor.server.engine/stopServerOnCancellation|stopServerOnCancellation@io.ktor.server.engine.ApplicationEngine(io.ktor.server.application.Application;kotlin.Long;kotlin.Long){}[0]
final fun (io.ktor.server.engine/ApplicationEngine.Configuration).io.ktor.server.engine/loadCommonConfiguration(io.ktor.server.config/ApplicationConfig) // io.ktor.server.engine/loadCommonConfiguration|loadCommonConfiguration@io.ktor.server.engine.ApplicationEngine.Configuration(io.ktor.server.config.ApplicationConfig){}[0]
final fun (io.ktor.server.engine/EmbeddedServer<*, *>).io.ktor.server.engine/addShutdownHook(kotlin/Function0<kotlin/Unit>) // io.ktor.server.engine/addShutdownHook|addShutdownHook@io.ktor.server.engine.EmbeddedServer<*,*>(kotlin.Function0<kotlin.Unit>){}[0]
final fun (io.ktor.server.engine/EngineConnectorConfig).io.ktor.server.engine/withPort(kotlin/Int): io.ktor.server.engine/EngineConnectorConfig // io.ktor.server.engine/withPort|withPort@io.ktor.server.engine.EngineConnectorConfig(kotlin.Int){}[0]
final fun (io.ktor.server.request/ApplicationReceivePipeline).io.ktor.server.engine/installDefaultTransformations() // io.ktor.server.engine/installDefaultTransformations|installDefaultTransformations@io.ktor.server.request.ApplicationReceivePipeline(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.logging/toLogString(): kotlin/String // io.ktor.server.logging/toLogString|toLogString@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/accept(): kotlin/String? // io.ktor.server.request/accept|accept@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptCharset(): kotlin/String? // io.ktor.server.request/acceptCharset|acceptCharset@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptCharsetItems(): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.server.request/acceptCharsetItems|acceptCharsetItems@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptEncoding(): kotlin/String? // io.ktor.server.request/acceptEncoding|acceptEncoding@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptEncodingItems(): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.server.request/acceptEncodingItems|acceptEncodingItems@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptItems(): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.server.request/acceptItems|acceptItems@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptLanguage(): kotlin/String? // io.ktor.server.request/acceptLanguage|acceptLanguage@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/acceptLanguageItems(): kotlin.collections/List<io.ktor.http/HeaderValue> // io.ktor.server.request/acceptLanguageItems|acceptLanguageItems@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/authorization(): kotlin/String? // io.ktor.server.request/authorization|authorization@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/cacheControl(): kotlin/String? // io.ktor.server.request/cacheControl|cacheControl@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/contentCharset(): io.ktor.utils.io.charsets/Charset? // io.ktor.server.request/contentCharset|contentCharset@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/contentLength(): kotlin/Long? // io.ktor.server.request/contentLength|contentLength@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/contentType(): io.ktor.http/ContentType // io.ktor.server.request/contentType|contentType@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/document(): kotlin/String // io.ktor.server.request/document|document@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/encodeParameters(io.ktor.http/Parameters): io.ktor.http/Parameters // io.ktor.server.request/encodeParameters|encodeParameters@io.ktor.server.request.ApplicationRequest(io.ktor.http.Parameters){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/header(kotlin/String): kotlin/String? // io.ktor.server.request/header|header@io.ktor.server.request.ApplicationRequest(kotlin.String){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/host(): kotlin/String // io.ktor.server.request/host|host@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/isChunked(): kotlin/Boolean // io.ktor.server.request/isChunked|isChunked@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/isMultipart(): kotlin/Boolean // io.ktor.server.request/isMultipart|isMultipart@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/location(): kotlin/String? // io.ktor.server.request/location|location@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/path(): kotlin/String // io.ktor.server.request/path|path@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/port(): kotlin/Int // io.ktor.server.request/port|port@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/queryString(): kotlin/String // io.ktor.server.request/queryString|queryString@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/ranges(): io.ktor.http/RangesSpecifier? // io.ktor.server.request/ranges|ranges@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.request/ApplicationRequest).io.ktor.server.request/userAgent(): kotlin/String? // io.ktor.server.request/userAgent|userAgent@io.ktor.server.request.ApplicationRequest(){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.http/link(io.ktor.http/LinkHeader) // io.ktor.server.http/link|link@io.ktor.server.response.ApplicationResponse(io.ktor.http.LinkHeader){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.http/link(kotlin/String, kotlin/Array<out kotlin/String>...) // io.ktor.server.http/link|link@io.ktor.server.response.ApplicationResponse(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/cacheControl(io.ktor.http/CacheControl) // io.ktor.server.response/cacheControl|cacheControl@io.ktor.server.response.ApplicationResponse(io.ktor.http.CacheControl){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/contentRange(kotlin.ranges/LongRange?, kotlin/Long? = ..., io.ktor.http/RangeUnits) // io.ktor.server.response/contentRange|contentRange@io.ktor.server.response.ApplicationResponse(kotlin.ranges.LongRange?;kotlin.Long?;io.ktor.http.RangeUnits){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/contentRange(kotlin.ranges/LongRange?, kotlin/Long? = ..., kotlin/String = ...) // io.ktor.server.response/contentRange|contentRange@io.ktor.server.response.ApplicationResponse(kotlin.ranges.LongRange?;kotlin.Long?;kotlin.String){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/etag(kotlin/String) // io.ktor.server.response/etag|etag@io.ktor.server.response.ApplicationResponse(kotlin.String){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/header(kotlin/String, kotlin/Int) // io.ktor.server.response/header|header@io.ktor.server.response.ApplicationResponse(kotlin.String;kotlin.Int){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/header(kotlin/String, kotlin/Long) // io.ktor.server.response/header|header@io.ktor.server.response.ApplicationResponse(kotlin.String;kotlin.Long){}[0]
final fun (io.ktor.server.response/ApplicationResponse).io.ktor.server.response/header(kotlin/String, kotlin/String) // io.ktor.server.response/header|header@io.ktor.server.response.ApplicationResponse(kotlin.String;kotlin.String){}[0]
final fun (io.ktor.server.response/ApplicationSendPipeline).io.ktor.server.engine/installDefaultTransformations() // io.ktor.server.engine/installDefaultTransformations|installDefaultTransformations@io.ktor.server.response.ApplicationSendPipeline(){}[0]
final fun (io.ktor.server.response/ResponseHeaders).io.ktor.server.response/appendIfAbsent(kotlin/String, kotlin/String, kotlin/Boolean = ...) // io.ktor.server.response/appendIfAbsent|appendIfAbsent@io.ktor.server.response.ResponseHeaders(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/accept(kotlin/Array<out io.ktor.http/ContentType>..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/accept|accept@io.ktor.server.routing.Route(kotlin.Array<out|io.ktor.http.ContentType>...;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/contentType(io.ktor.http/ContentType, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/contentType|contentType@io.ktor.server.routing.Route(io.ktor.http.ContentType;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/createRouteFromPath(kotlin/String): io.ktor.server.routing/Route // io.ktor.server.routing/createRouteFromPath|createRouteFromPath@io.ktor.server.routing.Route(kotlin.String){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/delete(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/delete|delete@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/delete(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/delete|delete@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/delete(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/delete|delete@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/get(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/get|get@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/get(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/get|get@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/get(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/get|get@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/head(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/head|head@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/head(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/head|head@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/head(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/head|head@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/header(kotlin/String, kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/header|header@io.ktor.server.routing.Route(kotlin.String;kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/host(kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin.text/Regex>, kotlin.collections/List<kotlin/Int> = ..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/host|host@io.ktor.server.routing.Route(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.text.Regex>;kotlin.collections.List<kotlin.Int>;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/host(kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/Int> = ..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/host|host@io.ktor.server.routing.Route(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.Int>;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/host(kotlin.text/Regex, kotlin/Int = ..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/host|host@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.Int;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/host(kotlin/String, kotlin/Int = ..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/host|host@io.ktor.server.routing.Route(kotlin.String;kotlin.Int;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/insertPhaseAfter(io.ktor.util.pipeline/PipelinePhase, io.ktor.util.pipeline/PipelinePhase) // io.ktor.server.routing/insertPhaseAfter|insertPhaseAfter@io.ktor.server.routing.Route(io.ktor.util.pipeline.PipelinePhase;io.ktor.util.pipeline.PipelinePhase){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/insertPhaseBefore(io.ktor.util.pipeline/PipelinePhase, io.ktor.util.pipeline/PipelinePhase) // io.ktor.server.routing/insertPhaseBefore|insertPhaseBefore@io.ktor.server.routing.Route(io.ktor.util.pipeline.PipelinePhase;io.ktor.util.pipeline.PipelinePhase){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/intercept(io.ktor.util.pipeline/PipelinePhase, kotlin.coroutines/SuspendFunction2<io.ktor.util.pipeline/PipelineContext<kotlin/Unit, io.ktor.server.application/PipelineCall>, kotlin/Unit, kotlin/Unit>) // io.ktor.server.routing/intercept|intercept@io.ktor.server.routing.Route(io.ktor.util.pipeline.PipelinePhase;kotlin.coroutines.SuspendFunction2<io.ktor.util.pipeline.PipelineContext<kotlin.Unit,io.ktor.server.application.PipelineCall>,kotlin.Unit,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/localPort(kotlin/Int, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/localPort|localPort@io.ktor.server.routing.Route(kotlin.Int;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/method(io.ktor.http/HttpMethod, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/method|method@io.ktor.server.routing.Route(io.ktor.http.HttpMethod;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/optionalParam(kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/optionalParam|optionalParam@io.ktor.server.routing.Route(kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/options(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/options|options@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/options(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/options|options@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/options(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/options|options@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/param(kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/param|param@io.ktor.server.routing.Route(kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/param(kotlin/String, kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/param|param@io.ktor.server.routing.Route(kotlin.String;kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/patch(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/patch(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/patch(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/port(kotlin/IntArray..., kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/port|port@io.ktor.server.routing.Route(kotlin.IntArray...;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/post(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/post(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/post(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/put(kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/put(kotlin.text/Regex, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/put(kotlin/String, kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction1<io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/route(kotlin.text/Regex, io.ktor.http/HttpMethod, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/route|route@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpMethod;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/route(kotlin.text/Regex, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/route|route@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/route(kotlin/String, io.ktor.http/HttpMethod, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/route|route@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpMethod;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Route).io.ktor.server.routing/route(kotlin/String, kotlin/Function1<io.ktor.server.routing/Route, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/route|route@io.ktor.server.routing.Route(kotlin.String;kotlin.Function1<io.ktor.server.routing.Route,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/RoutingNode).io.ktor.server.routing/getAllRoutes(): kotlin.collections/List<io.ktor.server.routing/RoutingNode> // io.ktor.server.routing/getAllRoutes|getAllRoutes@io.ktor.server.routing.RoutingNode(){}[0]
final fun (kotlin.collections/List<io.ktor.server.config/ApplicationConfig>).io.ktor.server.config/merge(): io.ktor.server.config/ApplicationConfig // io.ktor.server.config/merge|merge@kotlin.collections.List<io.ktor.server.config.ApplicationConfig>(){}[0]
final fun (kotlin.collections/List<kotlin/String>).io.ktor.server.util/normalizePathComponents(): kotlin.collections/List<kotlin/String> // io.ktor.server.util/normalizePathComponents|normalizePathComponents@kotlin.collections.List<kotlin.String>(){}[0]
final fun (kotlinx.coroutines/Job).io.ktor.server.engine/launchOnCancellation(kotlin.coroutines/SuspendFunction0<kotlin/Unit>): kotlinx.coroutines/CompletableJob // io.ktor.server.engine/launchOnCancellation|launchOnCancellation@kotlinx.coroutines.Job(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> (kotlinx.coroutines/CoroutineScope).io.ktor.server.engine/embeddedServer(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Array<out io.ktor.server.engine/EngineConnectorConfig>... = ..., kotlin.collections/List<kotlin/String> = ..., kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<io.ktor.server.application/Application, kotlin/Unit>): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/embeddedServer|embeddedServer@kotlinx.coroutines.CoroutineScope(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Array<out|io.ktor.server.engine.EngineConnectorConfig>...;kotlin.collections.List<kotlin.String>;kotlin.coroutines.CoroutineContext;kotlin.Function1<io.ktor.server.application.Application,kotlin.Unit>){0ยง<io.ktor.server.engine.ApplicationEngine>;1ยง<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> (kotlinx.coroutines/CoroutineScope).io.ktor.server.engine/embeddedServer(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Int = ..., kotlin/String = ..., kotlin.collections/List<kotlin/String> = ..., kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<io.ktor.server.application/Application, kotlin/Unit>): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/embeddedServer|embeddedServer@kotlinx.coroutines.CoroutineScope(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Int;kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.coroutines.CoroutineContext;kotlin.Function1<io.ktor.server.application.Application,kotlin.Unit>){0ยง<io.ktor.server.engine.ApplicationEngine>;1ยง<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.ktor.server.engine/embeddedServer(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, io.ktor.server.application/ApplicationEnvironment = ..., kotlin/Function1<#B, kotlin/Unit> = ..., kotlin/Function1<io.ktor.server.application/Application, kotlin/Unit> = ...): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/embeddedServer|embeddedServer(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;io.ktor.server.application.ApplicationEnvironment;kotlin.Function1<0:1,kotlin.Unit>;kotlin.Function1<io.ktor.server.application.Application,kotlin.Unit>){0ยง<io.ktor.server.engine.ApplicationEngine>;1ยง<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.ktor.server.engine/embeddedServer(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, io.ktor.server.application/ServerConfig, kotlin/Function1<#B, kotlin/Unit> = ...): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/embeddedServer|embeddedServer(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;io.ktor.server.application.ServerConfig;kotlin.Function1<0:1,kotlin.Unit>){0ยง<io.ktor.server.engine.ApplicationEngine>;1ยง<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.engine/ApplicationEngine, #B: io.ktor.server.engine/ApplicationEngine.Configuration> io.ktor.server.engine/embeddedServer(io.ktor.server.engine/ApplicationEngineFactory<#A, #B>, kotlin/Int = ..., kotlin/String = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/Function1<io.ktor.server.application/Application, kotlin/Unit>): io.ktor.server.engine/EmbeddedServer<#A, #B> // io.ktor.server.engine/embeddedServer|embeddedServer(io.ktor.server.engine.ApplicationEngineFactory<0:0,0:1>;kotlin.Int;kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.Function1<io.ktor.server.application.Application,kotlin.Unit>){0ยง<io.ktor.server.engine.ApplicationEngine>;1ยง<io.ktor.server.engine.ApplicationEngine.Configuration>}[0]
final fun <#A: io.ktor.server.routing/RoutingNode, #B: kotlin/Any, #C: kotlin/Any> (#A).io.ktor.server.application/install(io.ktor.server.application/BaseApplicationPlugin<#A, #B, #C>, kotlin/Function1<#B, kotlin/Unit> = ...): #C // io.ktor.server.application/install|install@0:0(io.ktor.server.application.BaseApplicationPlugin<0:0,0:1,0:2>;kotlin.Function1<0:1,kotlin.Unit>){0ยง<io.ktor.server.routing.RoutingNode>;1ยง<kotlin.Any>;2ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: kotlin/Any, #C: kotlin/Any> (#A).io.ktor.server.application/install(io.ktor.server.application/Plugin<#A, #B, #C>, kotlin/Function1<#B, kotlin/Unit> = ...): #C // io.ktor.server.application/install|install@0:0(io.ktor.server.application.Plugin<0:0,0:1,0:2>;kotlin.Function1<0:1,kotlin.Unit>){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>;1ยง<kotlin.Any>;2ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: kotlin/Any, #C: kotlin/Any> (#A).io.ktor.server.application/uninstall(io.ktor.server.application/Plugin<#A, #B, #C>) // io.ktor.server.application/uninstall|uninstall@0:0(io.ktor.server.application.Plugin<0:0,0:1,0:2>){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>;1ยง<kotlin.Any>;2ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: kotlin/Any> (#A).io.ktor.server.application/plugin(io.ktor.server.application/Plugin<*, *, #B>): #B // io.ktor.server.application/plugin|plugin@0:0(io.ktor.server.application.Plugin<*,*,0:1>){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>;1ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: kotlin/Any> (#A).io.ktor.server.application/pluginOrNull(io.ktor.server.application/Plugin<*, *, #B>): #B? // io.ktor.server.application/pluginOrNull|pluginOrNull@0:0(io.ktor.server.application.Plugin<*,*,0:1>){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>;1ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>, #B: kotlin/Any> (#A).io.ktor.server.application/uninstallPlugin(io.ktor.util/AttributeKey<#B>) // io.ktor.server.application/uninstallPlugin|uninstallPlugin@0:0(io.ktor.util.AttributeKey<0:1>){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>;1ยง<kotlin.Any>}[0]
final fun <#A: io.ktor.util.pipeline/Pipeline<*, io.ktor.server.application/PipelineCall>> (#A).io.ktor.server.application/uninstallAllPlugins() // io.ktor.server.application/uninstallAllPlugins|uninstallAllPlugins@0:0(){0ยง<io.ktor.util.pipeline.Pipeline<*,io.ktor.server.application.PipelineCall>>}[0]
final fun <#A: kotlin/Any> (io.ktor.http/Parameters).io.ktor.server.util/getOrFailImpl(kotlin/String, io.ktor.util.reflect/TypeInfo): #A // io.ktor.server.util/getOrFailImpl|getOrFailImpl@io.ktor.http.Parameters(kotlin.String;io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (io.ktor.server.routing/RoutingNode).io.ktor.server.application/findPluginInRoute(io.ktor.server.application/Plugin<*, *, #A>): #A? // io.ktor.server.application/findPluginInRoute|findPluginInRoute@io.ktor.server.routing.RoutingNode(io.ktor.server.application.Plugin<*,*,0:0>){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> io.ktor.server.application/createApplicationPlugin(kotlin/String, kotlin/Function0<#A>, kotlin/Function1<io.ktor.server.application/PluginBuilder<#A>, kotlin/Unit>): io.ktor.server.application/ApplicationPlugin<#A> // io.ktor.server.application/createApplicationPlugin|createApplicationPlugin(kotlin.String;kotlin.Function0<0:0>;kotlin.Function1<io.ktor.server.application.PluginBuilder<0:0>,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> io.ktor.server.application/createApplicationPlugin(kotlin/String, kotlin/String, kotlin/Function1<io.ktor.server.config/ApplicationConfig, #A>, kotlin/Function1<io.ktor.server.application/PluginBuilder<#A>, kotlin/Unit>): io.ktor.server.application/ApplicationPlugin<#A> // io.ktor.server.application/createApplicationPlugin|createApplicationPlugin(kotlin.String;kotlin.String;kotlin.Function1<io.ktor.server.config.ApplicationConfig,0:0>;kotlin.Function1<io.ktor.server.application.PluginBuilder<0:0>,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> io.ktor.server.application/createRouteScopedPlugin(kotlin/String, kotlin/Function0<#A>, kotlin/Function1<io.ktor.server.application/RouteScopedPluginBuilder<#A>, kotlin/Unit>): io.ktor.server.application/RouteScopedPlugin<#A> // io.ktor.server.application/createRouteScopedPlugin|createRouteScopedPlugin(kotlin.String;kotlin.Function0<0:0>;kotlin.Function1<io.ktor.server.application.RouteScopedPluginBuilder<0:0>,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> io.ktor.server.application/createRouteScopedPlugin(kotlin/String, kotlin/String, kotlin/Function1<io.ktor.server.config/ApplicationConfig, #A>, kotlin/Function1<io.ktor.server.application/RouteScopedPluginBuilder<#A>, kotlin/Unit>): io.ktor.server.application/RouteScopedPlugin<#A> // io.ktor.server.application/createRouteScopedPlugin|createRouteScopedPlugin(kotlin.String;kotlin.String;kotlin.Function1<io.ktor.server.config.ApplicationConfig,0:0>;kotlin.Function1<io.ktor.server.application.RouteScopedPluginBuilder<0:0>,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final fun io.ktor.server.application/createApplicationPlugin(kotlin/String, kotlin/Function1<io.ktor.server.application/PluginBuilder<kotlin/Unit>, kotlin/Unit>): io.ktor.server.application/ApplicationPlugin<kotlin/Unit> // io.ktor.server.application/createApplicationPlugin|createApplicationPlugin(kotlin.String;kotlin.Function1<io.ktor.server.application.PluginBuilder<kotlin.Unit>,kotlin.Unit>){}[0]
final fun io.ktor.server.application/createRouteScopedPlugin(kotlin/String, kotlin/Function1<io.ktor.server.application/RouteScopedPluginBuilder<kotlin/Unit>, kotlin/Unit>): io.ktor.server.application/RouteScopedPlugin<kotlin/Unit> // io.ktor.server.application/createRouteScopedPlugin|createRouteScopedPlugin(kotlin.String;kotlin.Function1<io.ktor.server.application.RouteScopedPluginBuilder<kotlin.Unit>,kotlin.Unit>){}[0]
final fun io.ktor.server.application/serverConfig(io.ktor.server.application/ApplicationEnvironment = ..., kotlin/Function1<io.ktor.server.application/ServerConfigBuilder, kotlin/Unit> = ...): io.ktor.server.application/ServerConfig // io.ktor.server.application/serverConfig|serverConfig(io.ktor.server.application.ApplicationEnvironment;kotlin.Function1<io.ktor.server.application.ServerConfigBuilder,kotlin.Unit>){}[0]
final fun io.ktor.server.config/addConfigLoader(io.ktor.server.config/ConfigLoader) // io.ktor.server.config/addConfigLoader|addConfigLoader(io.ktor.server.config.ConfigLoader){}[0]
final fun io.ktor.server.engine/CommandLineConfig(kotlin/Array<kotlin/String>): io.ktor.server.engine/CommandLineConfig // io.ktor.server.engine/CommandLineConfig|CommandLineConfig(kotlin.Array<kotlin.String>){}[0]
final fun io.ktor.server.engine/applicationEnvironment(kotlin/Function1<io.ktor.server.engine/ApplicationEnvironmentBuilder, kotlin/Unit> = ...): io.ktor.server.application/ApplicationEnvironment // io.ktor.server.engine/applicationEnvironment|applicationEnvironment(kotlin.Function1<io.ktor.server.engine.ApplicationEnvironmentBuilder,kotlin.Unit>){}[0]
final fun io.ktor.server.engine/defaultEnginePipeline(io.ktor.server.config/ApplicationConfig, kotlin/Boolean): io.ktor.server.engine/EnginePipeline // io.ktor.server.engine/defaultEnginePipeline|defaultEnginePipeline(io.ktor.server.config.ApplicationConfig;kotlin.Boolean){}[0]
final fun io.ktor.server.engine/defaultExceptionStatusCode(kotlin/Throwable): io.ktor.http/HttpStatusCode? // io.ktor.server.engine/defaultExceptionStatusCode|defaultExceptionStatusCode(kotlin.Throwable){}[0]
final fun io.ktor.server.http.content/transformDefaultContent(io.ktor.server.application/ApplicationCall, kotlin/Any): io.ktor.http.content/OutgoingContent? // io.ktor.server.http.content/transformDefaultContent|transformDefaultContent(io.ktor.server.application.ApplicationCall;kotlin.Any){}[0]
final fun io.ktor.server.util/url(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>): kotlin/String // io.ktor.server.util/url|url(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final inline fun (io.ktor.http/Parameters).io.ktor.server.util/getOrFail(kotlin/String): kotlin/String // io.ktor.server.util/getOrFail|getOrFail@io.ktor.http.Parameters(kotlin.String){}[0]
final inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.util/url(kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit> = ...): kotlin/String // io.ktor.server.util/url|url@io.ktor.server.application.ApplicationCall(kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final inline fun (io.ktor.server.engine/ApplicationEngine.Configuration).io.ktor.server.engine/connector(kotlin/Function1<io.ktor.server.engine/EngineConnectorBuilder, kotlin/Unit>) // io.ktor.server.engine/connector|connector@io.ktor.server.engine.ApplicationEngine.Configuration(kotlin.Function1<io.ktor.server.engine.EngineConnectorBuilder,kotlin.Unit>){}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.http/Parameters).io.ktor.server.util/getOrFail(kotlin/String): #A // io.ktor.server.util/getOrFail|getOrFail@io.ktor.http.Parameters(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.http/Parameters).io.ktor.server.util/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // io.ktor.server.util/getValue|getValue@io.ktor.http.Parameters(kotlin.Any?;kotlin.reflect.KProperty<*>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/patch(crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/patch(kotlin.text/Regex, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/patch(kotlin/String, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/patch|patch@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/post(crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/post(kotlin.text/Regex, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/post(kotlin/String, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/post|post@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/put(crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/put(kotlin.text/Regex, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.text.Regex;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (io.ktor.server.routing/Route).io.ktor.server.routing/put(kotlin/String, crossinline kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit>): io.ktor.server.routing/Route // io.ktor.server.routing/put|put@io.ktor.server.routing.Route(kotlin.String;kotlin.coroutines.SuspendFunction2<io.ktor.server.routing.RoutingContext,0:0,kotlin.Unit>){0ยง<kotlin.Any>}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respond(io.ktor.http/HttpStatusCode, kotlin/Any?, io.ktor.util.reflect/TypeInfo) // io.ktor.server.response/respond|respond@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondBytes(io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction0<kotlin/ByteArray>) // io.ktor.server.response/respondBytes|respondBytes@io.ktor.server.application.ApplicationCall(io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction0<kotlin.ByteArray>){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondBytes(kotlin/ByteArray, io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin/Function1<io.ktor.http.content/OutgoingContent, kotlin/Unit> = ...) // io.ktor.server.response/respondBytes|respondBytes@io.ktor.server.application.ApplicationCall(kotlin.ByteArray;io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.Function1<io.ktor.http.content.OutgoingContent,kotlin.Unit>){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondBytesWriter(io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin/Long? = ..., kotlin.coroutines/SuspendFunction1<io.ktor.utils.io/ByteWriteChannel, kotlin/Unit>) // io.ktor.server.response/respondBytesWriter|respondBytesWriter@io.ktor.server.application.ApplicationCall(io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.Long?;kotlin.coroutines.SuspendFunction1<io.ktor.utils.io.ByteWriteChannel,kotlin.Unit>){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondRedirect(io.ktor.http/Url, kotlin/Boolean = ...) // io.ktor.server.response/respondRedirect|respondRedirect@io.ktor.server.application.ApplicationCall(io.ktor.http.Url;kotlin.Boolean){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondRedirect(kotlin/String, kotlin/Boolean = ...) // io.ktor.server.response/respondRedirect|respondRedirect@io.ktor.server.application.ApplicationCall(kotlin.String;kotlin.Boolean){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondSource(kotlinx.io/RawSource, io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin/Long? = ...) // io.ktor.server.response/respondSource|respondSource@io.ktor.server.application.ApplicationCall(kotlinx.io.RawSource;io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.Long?){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondText(io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction0<kotlin/String>) // io.ktor.server.response/respondText|respondText@io.ktor.server.application.ApplicationCall(io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction0<kotlin.String>){}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondText(kotlin/String, io.ktor.http/ContentType? = ..., io.ktor.http/HttpStatusCode? = ..., kotlin/Function1<io.ktor.http.content/OutgoingContent, kotlin/Unit> = ...) // io.ktor.server.response/respondText|respondText@io.ktor.server.application.ApplicationCall(kotlin.String;io.ktor.http.ContentType?;io.ktor.http.HttpStatusCode?;kotlin.Function1<io.ktor.http.content.OutgoingContent,kotlin.Unit>){}[0]
final suspend fun <#A: kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receive(kotlin.reflect/KClass<#A>): #A // io.ktor.server.request/receive|receive@io.ktor.server.application.ApplicationCall(kotlin.reflect.KClass<0:0>){0ยง<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveOrNull(io.ktor.util.reflect/TypeInfo): #A? // io.ktor.server.request/receiveOrNull|receiveOrNull@io.ktor.server.application.ApplicationCall(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveOrNull(kotlin.reflect/KClass<#A>): #A? // io.ktor.server.request/receiveOrNull|receiveOrNull@io.ktor.server.application.ApplicationCall(kotlin.reflect.KClass<0:0>){0ยง<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any?> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receive(io.ktor.util.reflect/TypeInfo): #A // io.ktor.server.request/receive|receive@io.ktor.server.application.ApplicationCall(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any?>}[0]
final suspend fun io.ktor.server.engine/handleFailure(io.ktor.server.application/ApplicationCall, kotlin/Throwable) // io.ktor.server.engine/handleFailure|handleFailure(io.ktor.server.application.ApplicationCall;kotlin.Throwable){}[0]
final suspend fun io.ktor.server.engine/logError(io.ktor.server.application/ApplicationCall, kotlin/Throwable) // io.ktor.server.engine/logError|logError(io.ktor.server.application.ApplicationCall;kotlin.Throwable){}[0]
final suspend inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveChannel(): io.ktor.utils.io/ByteReadChannel // io.ktor.server.request/receiveChannel|receiveChannel@io.ktor.server.application.ApplicationCall(){}[0]
final suspend inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveMultipart(kotlin/Long = ...): io.ktor.http.content/MultiPartData // io.ktor.server.request/receiveMultipart|receiveMultipart@io.ktor.server.application.ApplicationCall(kotlin.Long){}[0]
final suspend inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveParameters(): io.ktor.http/Parameters // io.ktor.server.request/receiveParameters|receiveParameters@io.ktor.server.application.ApplicationCall(){}[0]
final suspend inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveText(): kotlin/String // io.ktor.server.request/receiveText|receiveText@io.ktor.server.application.ApplicationCall(){}[0]
final suspend inline fun (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondRedirect(kotlin/Boolean = ..., kotlin/Function1<io.ktor.http/URLBuilder, kotlin/Unit>) // io.ktor.server.response/respondRedirect|respondRedirect@io.ktor.server.application.ApplicationCall(kotlin.Boolean;kotlin.Function1<io.ktor.http.URLBuilder,kotlin.Unit>){}[0]
final suspend inline fun <#A: reified kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receive(): #A // io.ktor.server.request/receive|receive@io.ktor.server.application.ApplicationCall(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveOrNull(): #A? // io.ktor.server.request/receiveOrNull|receiveOrNull@io.ktor.server.application.ApplicationCall(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respond(#A) // io.ktor.server.response/respond|respond@io.ktor.server.application.ApplicationCall(0:0){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respond(io.ktor.http/HttpStatusCode, #A) // io.ktor.server.response/respond|respond@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode;0:0){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.application/ApplicationCall).io.ktor.server.request/receiveNullable(): #A? // io.ktor.server.request/receiveNullable|receiveNullable@io.ktor.server.application.ApplicationCall(){0ยง<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondNullable(#A) // io.ktor.server.response/respondNullable|respondNullable@io.ktor.server.application.ApplicationCall(0:0){0ยง<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.application/ApplicationCall).io.ktor.server.response/respondNullable(io.ktor.http/HttpStatusCode, #A) // io.ktor.server.response/respondNullable|respondNullable@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode;0:0){0ยง<kotlin.Any?>}[0]
